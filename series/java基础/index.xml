<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java基础 on Hello Friend</title><link>/series/java%E5%9F%BA%E7%A1%80/</link><description>Recent content in Java基础 on Hello Friend</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 10 Apr 2023 08:24:53 +0000</lastBuildDate><atom:link href="/series/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml"/><item><title>Java集合基础之HashMap</title><link>/posts/inbox/javabase_hashmap_230410/</link><pubDate>Mon, 10 Apr 2023 08:24:53 +0000</pubDate><guid>/posts/inbox/javabase_hashmap_230410/</guid><description>Java集合基础之HashMap HashMap在日常中也是使用频繁，了解它的源码很有必要。
构造方法与默认属性 public class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable {} static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // aka 16 默认容量的16， ArrayList是10。
static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; 最大容量是 1&amp;laquo;30
static final float DEFAULT_LOAD_FACTOR = 0.75f; 默认负载因子是 0.75.
static final int TREEIFY_THRESHOLD = 8; 当&amp;gt;=8时候转化为红黑树
static final int UNTREEIFY_THRESHOLD = 6; static final int MIN_TREEIFY_CAPACITY = 64; 核心内部类Node
static class Node&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt; { final int hash; final K key; V value; Node&amp;lt;K,V&amp;gt; next; Node(int hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) { this.</description></item><item><title>Java基础之集合-ArrayList</title><link>/posts/inbox/java_base_230409/</link><pubDate>Sun, 09 Apr 2023 02:51:02 +0000</pubDate><guid>/posts/inbox/java_base_230409/</guid><description>Java基础之集合总览 - ArrayList Java集合是经常使用到的，集合类主要由Collection 和 Map 这两个接口派生。
Collection 派生出 Set，List, Queue。 Map派生HashMap, TreeMap， ConcurrentHashMap
Collection常用方法 // 返回集合中元素个数 int size(); //Returns true if this collection contains no elements. boolean isEmpty(); // 判断集合中是否存在元素o , (o==null ? e==null : o.equals(e)). boolean contains(Object o); // 添加元素 boolean add(E e); // 删除元素 boolean remove(Object o); // 清空元素 void clear(); Map常用方法 // 返回 k-v 数量 int size(); // Returns &amp;lt;tt&amp;gt;true&amp;lt;/tt&amp;gt; if this map contains no key-value mappings.</description></item></channel></rss>