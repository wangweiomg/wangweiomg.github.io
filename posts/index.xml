<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hello Friend</title><link>/posts/</link><description>Recent content in Posts on Hello Friend</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 05 Apr 2023 12:23:15 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Top100_en_sencences_230405</title><link>/posts/lang/top100_en_sencences_230405/</link><pubDate>Wed, 05 Apr 2023 12:23:15 +0800</pubDate><guid>/posts/lang/top100_en_sencences_230405/</guid><description>用chatgpt学英语很方便，让它列出日常100个常用语句如下，可以试着在生活中使用。
Here are 100 commonly used English sentences for daily conversation. Some of these sentences can be adapted to suit various situations:
Good morning. Good afternoon. Good evening. How are you? I&amp;rsquo;m fine, thank you. What&amp;rsquo;s your name? My name is [Your Name]. Nice to meet you. How&amp;rsquo;s the weather today? It&amp;rsquo;s sunny/rainy/cloudy/windy. What time is it? It&amp;rsquo;s [time] o&amp;rsquo;clock. I&amp;rsquo;m sorry, I don&amp;rsquo;t know the time. Can you help me, please?</description><content type="html"><![CDATA[<p>用chatgpt学英语很方便，让它列出日常100个常用语句如下，可以试着在生活中使用。</p>
<p>Here are 100 commonly used English sentences for daily conversation. Some of these sentences can be adapted to suit various situations:</p>
<ol>
<li>Good morning.</li>
<li>Good afternoon.</li>
<li>Good evening.</li>
<li>How are you?</li>
<li>I&rsquo;m fine, thank you.</li>
<li>What&rsquo;s your name?</li>
<li>My name is [Your Name].</li>
<li>Nice to meet you.</li>
<li>How&rsquo;s the weather today?</li>
<li>It&rsquo;s sunny/rainy/cloudy/windy.</li>
<li>What time is it?</li>
<li>It&rsquo;s [time] o&rsquo;clock.</li>
<li>I&rsquo;m sorry, I don&rsquo;t know the time.</li>
<li>Can you help me, please?</li>
<li>Of course, what do you need help with?</li>
<li>Excuse me, where is the restroom?</li>
<li>The restroom is over there.</li>
<li>How much does this cost?</li>
<li>It costs [amount] dollars.</li>
<li>Can I have the bill, please?</li>
<li>Thank you very much.</li>
<li>You&rsquo;re welcome.</li>
<li>Have a nice day!</li>
<li>Goodbye!</li>
<li>See you later.</li>
<li>What do you do for a living?</li>
<li>I work as a [job title].</li>
<li>Where are you from?</li>
<li>I&rsquo;m from [country or city].</li>
<li>What&rsquo;s your favorite food?</li>
<li>My favorite food is [food].</li>
<li>How old are you?</li>
<li>I&rsquo;m [age] years old.</li>
<li>Do you speak any other languages?</li>
<li>Yes, I speak [language].</li>
<li>No, I only speak English.</li>
<li>How do I get to [place]?</li>
<li>Go straight and turn left/right.</li>
<li>It&rsquo;s on your left/right.</li>
<li>Can I borrow your pen?</li>
<li>Sure, here you go.</li>
<li>What are you doing this weekend?</li>
<li>I&rsquo;m going to [activity].</li>
<li>I don&rsquo;t have any plans yet.</li>
<li>What&rsquo;s your phone number?</li>
<li>My phone number is [phone number].</li>
<li>Can I have your email address?</li>
<li>My email address is [email address].</li>
<li>Can you repeat that, please?</li>
<li>I didn&rsquo;t catch that.</li>
<li>Could you speak more slowly, please?</li>
<li>I understand.</li>
<li>I don&rsquo;t understand.</li>
<li>I agree with you.</li>
<li>I disagree.</li>
<li>That&rsquo;s interesting.</li>
<li>That&rsquo;s funny.</li>
<li>That&rsquo;s a great idea.</li>
<li>What do you think about [topic]?</li>
<li>In my opinion, [your thoughts].</li>
<li>I&rsquo;m not sure.</li>
<li>Let me think about it.</li>
<li>Can you recommend a good restaurant?</li>
<li>I&rsquo;d recommend [restaurant name].</li>
<li>What would you like to eat?</li>
<li>I&rsquo;d like to order [dish].</li>
<li>Can I have a coffee, please?</li>
<li>How do you take your coffee?</li>
<li>I take my coffee with milk/sugar/black.</li>
<li>Can I have a glass of water, please?</li>
<li>What are your hobbies?</li>
<li>I enjoy [hobby].</li>
<li>What kind of music do you like?</li>
<li>I like [genre] music.</li>
<li>What&rsquo;s your favorite movie?</li>
<li>My favorite movie is [movie title].</li>
<li>What&rsquo;s your favorite book?</li>
<li>My favorite book is [book title].</li>
<li>I&rsquo;m tired.</li>
<li>I&rsquo;m hungry.</li>
<li>I&rsquo;m thirsty.</li>
<li>I&rsquo;m cold.</li>
<li>I&rsquo;m hot.</li>
<li>I need to go.</li>
<li>Have a safe trip.</li>
<li>I hope you feel better soon.</li>
<li>Happy birthday!</li>
<li>Congratulations!</li>
<li>Good luck!</li>
<li>I&rsquo;m sorry for your loss.</li>
<li>I&rsquo;m so happy for you!</li>
<li>Long time no see!</li>
<li>That sounds fun.</li>
<li>That&rsquo;s very kind of you.</li>
<li>Do you need any assistance?</li>
<li>Can you give me a hand?</li>
<li>I&rsquo;ll be there in a minute.</li>
<li>How long will it take?</li>
<li>Can I make a reservation?</li>
<li>What&rsquo;s the wifi password?</li>
</ol>
<p>These sentences should provide a good foundation for everyday English conversations. Keep practicing, and you&rsquo;ll become more comfortable using them in different situations.</p>
]]></content></item><item><title>Interview_questions_230404</title><link>/posts/inbox/interview_questions_230404/</link><pubDate>Tue, 04 Apr 2023 17:02:47 +0800</pubDate><guid>/posts/inbox/interview_questions_230404/</guid><description>关于面试问题的一篇英文推 最近在推上看到了一名CEO写的关于面试会问的几个问题，觉得有参考意义，所以写下来. 文末附中文。
原推点这里
I’ve interviewed 1000s of people over my career. Most leaders ask the same terrible questions every time. Ask these 13 questions and I guarantee you&amp;rsquo;ll make better hiring decisions:
#1: If you were to tell a friend about our company, how would you describe what we do? Preparedness. How much do they know about your business? Mission. Vision. Values. If they are marketing/sales hires and can’t answer this, the interview is over.</description><content type="html"><![CDATA[<h2 id="关于面试问题的一篇英文推">关于面试问题的一篇英文推</h2>
<p>最近在推上看到了一名CEO写的关于面试会问的几个问题，觉得有参考意义，所以写下来.  文末附中文。</p>
<p><a href="https://twitter.com/mbertulli/status/1638194777891000321">原推点这里</a></p>
<blockquote>
<p>I’ve interviewed 1000s of people over my career. Most leaders ask the same terrible questions every time. Ask these 13 questions and I guarantee you&rsquo;ll make better hiring decisions:</p>
<p>#1: If you were to tell a friend about our company, how would you describe what we do? Preparedness. How much do they know about your business? Mission. Vision. Values. If they are marketing/sales hires and can’t answer this, the interview is over.</p>
<p>#2: What’s the most influential book you’ve ever read? I bias toward perpetual learners. Showing that they are always wanting to improve themselves is an indicator of humility.</p>
<p>#3: Do you have written goals? How often do you revisit these? Driven people tend to have goals. No written goals? Dig deeper into what motivates them.</p>
<p>#4: What is a moment you are not proud of in your career? Humility. You want people who aren’t afraid of their past, especially the things you aren’t proudest of.</p>
<p>#5: How do you handle an apology? As a leader, I want to encourage constructive conflict. But sometimes things get out of hand at work. How people show up in these moments matters.</p>
<p>#7: How did the culture of your last company empower or disempower you? Everyone talks about wanting a great culture. This is a test to see how much they actually think about it.</p>
<p>#8: What was your greatest contribution to your last company? Giving them a chance to show off their work. We want to see if they mention their team. Or is it just a “me” show?</p>
<p>#9: What are the characteristics of the best boss you’ve ever had? This is a nice way to see what kind of leader they respond well to. You should be looking for a fit with whomever they would report to in the organization.</p>
<p>#10: Tell me something you’re proud of that will never make it onto a resume. Resumes are boring, polished turds. They tell us little about the actual person we&rsquo;re talking to. Use this to learn a little about what lights them up beyond pure work.</p>
<p>#11: Tell me something that’s true that almost nobody agrees with you on. Most people stumble on this question. We&rsquo;re looking for those that have really creative answers. Skip the obvious (politics).</p>
<p>#12: If we&rsquo;re sitting here a year from now celebrating the last 12 months, what did we achieve together?</p>
<p>The job description has clear goals in it.</p>
<p>They should respond by having accomplished those.</p>
<p>#13: How much money do you expect to be earning when you start? What about in 3 years? This shows how hungry they really are. We hire for humble, hungry, and smart. This is a strong test of their ambition.</p>
<p>These aren’t conventional interview questions, and that&rsquo;s the point. Everyone is ready to be asked the same questions in every interview, and most of the time, you don&rsquo;t even get what you need to make a good hiring decision. Use these questions instead.</p>
</blockquote>
<p>我职业生涯中面试过一千多个人。</p>
<p>大多数领导每时每刻都在问同样的糟糕问题。</p>
<p>问这13个问题，我保证你会有更好的雇佣决定。</p>
<ol>
<li><strong>如果你要向你的朋友介绍我们公司，你会如何描述我们是做什么的？</strong></li>
</ol>
<p>做好准备。</p>
<p>他们对你的事业了解多少？使命、远景、价值观。</p>
<p>如果他们是应聘市场/销售而不能回答出这个问题，面试就结束了。</p>
<p><strong>2. 你读过的最具影响力的书是什么？</strong></p>
<p>我偏向于欣赏那些不断学习的人。表现出他们总是想要提升自己，这表明他们很谦虚。</p>
<p><strong>3. 你有写下来的目标吗？多久重温一次这些目标？</strong></p>
<p>驱使人们倾向于有目标。</p>
<p>没有写下目标？</p>
<p>深入挖掘他们的动机。</p>
<p>**4. 在你职业生涯中，你不引以为傲的时刻是什么？ **</p>
<p>谦逊。</p>
<p>你想要人们不要害怕他们的过去，尤其是哪些他们不引以为傲的事情。</p>
<p><strong>5. 你如何处理道歉？</strong></p>
<p>作为一个领导，我想要鼓励有建设性的冲突。但是有时在工作中会超出掌控。人们在这些时刻如何表现是很重要的。</p>
<p><strong>6. 告诉我一个比你更适合你所申请的职位的人(不需要名字)。</strong></p>
<p>再次谦逊。</p>
<p>如果他们想不到别的人，这是一个黄色标签。</p>
<p><strong>7. 你的上家公司文化是如何让你充满力量或充满无力的？</strong></p>
<p>每个人都说想要一个很棒的文化。这个一个关于他们真正思考了多少的测验。</p>
<p><strong>8. 你对上家公司最大的贡献是什么?</strong></p>
<p>给他们一个展示他们工作的机会。我们想要看他们是否会提到他们的团队。或者只是展示“我”？</p>
<p><strong>9. 你曾经拥有过的最好的老板特点是什么？</strong></p>
<p>这是一个好的方式来查看他们喜欢什么样的领导。</p>
<p>您应该寻找与他们在组织中报告的人相匹配的人选。</p>
<p><strong>10. 告诉我一些你引以为傲但永远不会写进简历的事情？</strong></p>
<p>简历都是些无聊的垃圾。</p>
<p>他们对我们正在讨论的人提供不了多少信息。</p>
<p>用这个去了解一些工作之外什么令他们感到兴奋。</p>
<p><strong>11. 告诉我一些几乎没人同意你，但是是对的事情</strong></p>
<p>大多数人在这个问题上都会犯错。</p>
<p>我们寻找那些有真正建设性回答的人。</p>
<p>跳过显而易见的(如政治)。</p>
<p><strong>12. 如果一年后我们坐在这里庆祝过去的12个月，那么我们一起取得了什么成就？</strong></p>
<p>工作描述有清晰的目标。</p>
<p>他们应该回应完成了这些。</p>
<p><strong>13. 当你开始时候你想要挣多少钱？3年后呢？</strong></p>
<p>这个展示他们真正有多渴望。</p>
<p>我们雇佣谦逊、渴望、聪明的人。</p>
<p>这个是对他们野心的强烈考验。</p>
<p>这些都不是传统面试问题，这才是重点。</p>
<p>每场面试所有人都会准备好碑文同样的问题，很多时候，你甚至不能你需要什么而做出一个好的雇佣决定。</p>
<p>用这些问题。</p>
]]></content></item><item><title>Week1043_review</title><link>/posts/arts/week1043_review/</link><pubDate>Fri, 31 Mar 2023 15:45:50 +0000</pubDate><guid>/posts/arts/week1043_review/</guid><description>ARTS - Review - How To Be Successful How To Be Successful I’ve observed thousands of founders and thought a lot about what it takes to make a huge amount of money or to create something important. Usually, people start off wanting the former and end up wanting the latter.
Here are 13 thoughts about how to achieve such outlier success. Everything here is easier to do once you’ve already reached a baseline degree of success (through privilege or effort) and want to put in the work to turn that into outlier success.</description><content type="html"><![CDATA[<h2 id="arts---review---how-to-be-successfulhttpsblogsamaltmancomhow-to-be-successful">ARTS - Review - <a href="https://blog.samaltman.com/how-to-be-successful">How To Be Successful</a></h2>
<h2 id="how-to-be-successful">How To Be Successful</h2>
<blockquote>
<p>I’ve observed thousands of founders and thought a lot about what it  takes to make a huge amount of money or to create something important.  Usually, people start off wanting the former and end up wanting the  latter.</p>
<p>Here are 13 thoughts about how to achieve such outlier success. Everything here is easier to do once you’ve already  reached a baseline degree of success (through privilege or effort) and  want to put in the work to turn that into outlier success. [1] But much  of it applies to anyone.</p>
</blockquote>
<p>我观察了上千个创始人，想了很多关于挣大量的钱或者创建重要的事需要什么。通常，人们开始时候想要前者，之后想要后者。</p>
<p>以下是如何实现这样异常成功的13个想法。一旦你达到了成功的基础线(通过特权或努力) ，并且想要把它带进工作转化为异常成功，一切都会变得更容易。 这大部分适合任何人</p>
<blockquote>
<p><strong>1. Compound yourself</strong></p>
<p>Compounding is magic. Look for it everywhere. Exponential curves are the key to wealth generation.</p>
</blockquote>
<p>复利自己</p>
<p>复利是有魔力的。到处都是。指数曲线是创造财富的关键。</p>
<blockquote>
<p>A medium-sized business that grows 50% in value every year becomes huge  in a very short amount of time. Few businesses in the world have true  network effects and extreme scalability. But with technology, more and  more will.  It’s worth a lot of effort to find them and create them.</p>
</blockquote>
<p>一个每年增长50% 的中型企业在很短的时间内变得巨大。世界上很少有企业具有真正的网络效应和极端的可伸缩性。但是和科技一起，越来越多的可能。很值得花费大量努力发现他们并创造他们。</p>
<blockquote>
<p>You also want to be an exponential curve yourself—you should aim for your  life to follow an ever-increasing up-and-to-the-right trajectory. It’s  important to move towards a career that has a compounding effect—most  careers progress fairly linearly.</p>
</blockquote>
<p>你自己也想成为一条指数曲线ーー你的人生目标应该是遵循一条不断向上和向右的轨迹。走向有复利增长的事业是很重要的，大多数事业进程相当线性。</p>
<blockquote>
<p>You don&rsquo;t want to be in a career where people who have been doing it for two years can be as  effective as people who have been doing it for twenty—your rate of  learning should always be high. As your career progresses, each unit of  work you do should generate more and more results. There are many ways  to get this leverage, such as capital, technology, brand, network  effects, and managing people.</p>
</blockquote>
<p>你不会希望自己的职业生涯中，从事这项工作两年的人能够像从事这项工作二十年的人一样有效率 &mdash; 你学习的比率应该一直很高。随着你职业生涯的发展，你所做的每一个工作单元都应该产生越来越多的结果。有很多方式获得这种影响力，如资本，技术，品牌，网络效应，人员管理。</p>
<blockquote>
<p>It’s useful to focus on  adding another zero to whatever you define as your success metric—money, status, impact on the world, or whatever. I am willing to take as much  time as needed between projects to find my next thing. But I always want it to be a project that, if successful, will make the rest of my career look like a footnote.</p>
</blockquote>
<p>专注于为你所定义的成功标准——金钱、地位、对世界的影响等等——再加上一个零是有用的。我愿意花费足够需要的时间在寻找项目与下一件要做的事情之间。但我一直希望这是一个项目，如果成功，将使我的其余职业生涯看起来像一个脚注。</p>
<blockquote>
<p>Most people get bogged down in  linear opportunities. Be willing to let small opportunities go to focus  on potential step changes.</p>
</blockquote>
<p>大多数人在线性机会中陷入困境。要愿意让小机会消失，以专注于潜在的步骤变化。</p>
<blockquote>
<p>I think the biggest  competitive advantage in business—either for a company or for an  individual’s career—is long-term thinking with a broad view of how  different systems in the world are going to come together. One of the  notable aspects of compound growth is that the furthest out years are  the most important. In a world where almost no one takes a truly  long-term view, the market richly rewards those who do.</p>
</blockquote>
<p>我认为企业最大的竞争优势ーー无论是对于公司还是对于个人的职业生涯ーー是对世界上不同系统将如何整合的长期思考。复合增长的一个值得注意的方面是，最遥远的年份是最重要的。在一个几乎没有人真正着眼于长远的世界里，市场会丰厚地奖励那些着眼于长远的人。</p>
<blockquote>
<p>Trust the exponential, be patient, and be pleasantly surprised.</p>
</blockquote>
<p>相信复利，耐心点，并感到惊喜。</p>
<blockquote>
<p><strong>2. Have almost too much self-belief</strong></p>
</blockquote>
<p>拥有大量自信</p>
<blockquote>
<p>Self-belief is immensely powerful. The most successful people I know believe in themselves almost to the point of delusion.</p>
</blockquote>
<p>自信极其有力量。绝大多数我人士的成功人士的自信几乎到了妄想的地步。</p>
<blockquote>
<p>Cultivate this early. As you get more data points that your judgment  is good and you can consistently deliver results, trust yourself more.</p>
</blockquote>
<p>早点培养。当你得到更多的数据点，你的判断是好的，你可以始终如一地交付结果，相信自己更多。</p>
<blockquote>
<p>If you don’t believe in yourself, it’s hard to let yourself have  contrarian ideas about the future. But this is where most value gets  created.</p>
</blockquote>
<p>如果你不相信自己，很难让自己对未来有逆向投资思维。但是这是大多数创造价值的地方。</p>
<blockquote>
<p>I remember when Elon Musk took me on a tour of  the SpaceX factory many years ago. He talked in detail about  manufacturing every part of the rocket, but the thing that sticks in  memory was the look of absolute certainty on his face when he talked  about sending large rockets to Mars. I left thinking “huh, so that’s the benchmark for what conviction looks like.”</p>
</blockquote>
<p>我记得多年前， Elon Musk带我参观SpaceX的工厂。他详细的讲出了火箭每个部件的生产制造， 但令人印象深刻的是他谈到向火星发射大型火箭时脸上那种绝对确定的表情。我离开的时候想“哈，这就是深信的基准”</p>
<blockquote>
<p>Managing your  own morale—and your team’s morale—is one of the greatest challenges of  most endeavors. It’s almost impossible without a lot of self-belief. And unfortunately, the more ambitious you are, the more the world will try  to tear you down.</p>
</blockquote>
<p>管理你的斗志 &mdash; 你团队的斗志&ndash; 是大多数努力中最大的挑战之一。如果没有大量自信几乎不可能做到。不幸的是，你的野心越大，这个世界越想打垮你。</p>
<blockquote>
<p>Most highly successful people have  been really right about the future at least once at a time when people  thought they were wrong. If not, they would have faced much more  competition.</p>
</blockquote>
<p>大多数非常成功的人在人们认为他们错了的时候，至少有一次对未来的看法是正确的。否则，他们将面临更多的竞争。</p>
<blockquote>
<p>Self-belief must be balanced with  self-awareness. I used to hate criticism of any sort and actively  avoided it. Now I try to always listen to it with the assumption that  it’s true, and then decide if I want to act on it or not. Truth-seeking  is hard and often painful, but it is what separates self-belief from  self-delusion.</p>
</blockquote>
<p>自信必须和自我意识相平衡。我曾经痛恨任何形式的批评，并且积极地回避它。现在我总是假设它是真的，然后决定自己是否想去采取行动。寻找真相总是困难充满痛苦，但是它能区分自信和自欺。</p>
<blockquote>
<p>This balance also helps you avoid coming across as entitled and out of touch.</p>
</blockquote>
<p>这种平衡也可以帮助你避免显得自以为是和脱离实际。</p>
<blockquote>
<p><strong>3. Learn to think independently</strong></p>
</blockquote>
<p>学会独立思考。</p>
<blockquote>
<p>Entrepreneurship is very difficult to teach because original thinking is very difficult  to teach. School is not set up to teach this—in fact, it generally  rewards the opposite. So you have to cultivate it on your own.</p>
</blockquote>
<p>企业家精神教起来很困难，因为底层思考非常难教。学校不是用来教这个的&mdash; 实际上，它通常会给予相反的回报。所以你只能自己培养它。</p>
<blockquote>
<p>Thinking from first principles and trying to generate new ideas is fun, and  finding people to exchange them with is a great way to get better at  this. The next step is to find easy, fast ways to test these ideas in  the real world.</p>
</blockquote>
<p>从基本的原则开始思考并尝试产生新的想法是很有趣的，做得更好的方式是找人去交换它。下一步是，发现简单、快速的方式去在真实世界验证这些想法。</p>
<blockquote>
<p>“I will fail many times, and I will be  really right once” is the entrepreneurs’ way. You have to give yourself a lot of chances to get lucky.</p>
</blockquote>
<p>“我会失败很多次，我将会真正正确一次”  是企业家精神的方式。你需要给自己很多机会来获得幸运。</p>
<blockquote>
<p>One of the most powerful  lessons to learn is that you can figure out what to do in situations  that seem to have no solution. The more times you do this, the more you  will believe it. Grit comes from learning you can get back up after you  get knocked down.</p>
</blockquote>
<p>要学习的最有力的经验之一是，你可以弄清楚在似乎没有解决办法的情况下该做什么。越多次这么做，你会越相信它。勇气来自于学会在你被击倒之后还能重新站起来。</p>
<blockquote>
<p><strong>4. Get good at “sales”</strong></p>
<p>善于销售</p>
<p>Self-belief alone is not sufficient—you also have to be able to convince other people of what you believe.</p>
</blockquote>
<p>光有自信是不够的ーー你还必须能够说服别人相信你的信念。</p>
<blockquote>
<p>All great careers, to some degree, become sales jobs. You have to  evangelize your plans to customers, prospective employees, the press,  investors, etc. This requires an inspiring vision, strong communication  skills, some degree of charisma, and evidence of execution ability.</p>
</blockquote>
<p>所有伟大事业，从某种程度上，都是销售工作。你需要传达你的计划给顾客、准雇员、新闻界、投资人等。这需要一种鼓舞的愿景，强大的沟通技巧，一定程度的个人魅力，以及执行力。</p>
<blockquote>
<p>Getting good at communication—particularly written communication—is an  investment worth making. My best advice for communicating clearly is to  first make sure your thinking is clear and then use plain, concise  language.</p>
</blockquote>
<p>善于沟通 &mdash; 尤其书面沟通&ndash; 很值得投资。我对清晰沟通的最佳建议是，首先确保你的思路清晰，然后使用简明扼要的语言。</p>
<blockquote>
<p>The best way to be good at sales is to genuinely believe in what you’re selling. Selling what you truly believe in feels great, and trying to sell snake oil feels awful.</p>
</blockquote>
<p>做好销售最好的方式是由衷相信你卖的东西。销售你真正相信的东西感觉是很棒的，尝试销售蛇油令人厌烦。</p>
<blockquote>
<p>Getting  good at sales is like improving at any other skill—anyone can get better at it with deliberate practice. But for some reason, perhaps because it feels distasteful, many people treat it as something unlearnable.</p>
</blockquote>
<p>做好销售就像提高任何其他技能一样 &mdash; 任何人可以通过反复训练来做好它。但是出于某种原因，也许是因为它让人感到厌恶，许多人认为它是无法学习的东西。</p>
<blockquote>
<p>My other big sales tip is to show up in person whenever it’s important.  When I was first starting out, I was always willing to get on a plane.  It was frequently unnecessary, but three times it led to career-making  turning points for me that otherwise would have gone the other way.</p>
</blockquote>
<p>我的另一个大的销售技巧是，只要是重要的事情，就亲自出面。当我刚开始工作时，我总是愿意坐上飞机。这经常是不必要的，但有三次它导致了我的职业生涯的转折点，否则就会走到另一个方向。</p>
<blockquote>
<p><strong>5. Make it easy to take risks</strong></p>
<p>乐于承担风险</p>
<p>Most people overestimate risk and underestimate reward. Taking risks is  important because it’s impossible to be right all the time—you have to  try many things and adapt quickly as you learn more.</p>
</blockquote>
<p>大多数人高估了风险低估了回报。承担风险是重要的，因为不可能总是正确 &mdash; 你必须尝试许多东西，并在你学到更多东西时迅速适应。</p>
<blockquote>
<p>It’s  often easier to take risks early in your career; you don’t have much to  lose, and you potentially have a lot to gain. Once you’ve gotten  yourself to a point where you have your basic obligations covered you  should try to make it easy to take risks. Look for small bets you can  make where you lose 1x if you’re wrong but make 100x if it works. Then  make a bigger bet in that direction.</p>
</blockquote>
<p>在你事业早期通常承担风险很容易，你没有更多可失去的了，你有很多潜在的可以获得。一旦你让自己的基本义务得到保障，你就应该尝试让自己容易承担风险。寻找小的投注，那些失败失去1 成功就赚100的机会。之后在那个方向加大投注。</p>
<blockquote>
<p>Don’t save up for too long, though. At YC, we’ve often noticed a problem with founders that  have spent a lot of time working at Google or Facebook. When people get  used to a comfortable life, a predictable job, and a reputation of  succeeding at whatever they do, it gets very hard to leave that behind  (and people have an incredible ability to always match their lifestyle  to next year’s salary). Even if they do leave, the temptation to return  is great. It’s easy—and human nature—to prioritize short-term gain and  convenience over long-term fulfillment.</p>
<p>不过，不要积攒太长时间。在 YC，我们经常注意到那些在谷歌或 Facebook 工作了很长时间的创始人存在一个问题。当人们习惯于一个舒适的生活，一个可预测的工作，以及无论做什么都会成功的声誉，那就会很很难抛弃这些。(人们总是有一种不可思议的能力，能够将自己的生活方式匹配明年的薪水)。尽管他们真的离开了，回来的诱惑也是极大的。把短期收益和便利置于长期收益之上是很容易的，这也是人类天性。</p>
<p>But when you  aren’t on the treadmill, you can follow your hunches and spend time on  things that might turn out to be really interesting. Keeping your life  cheap and flexible for as long as you can is a powerful way to do this,  but obviously comes with tradeoffs.</p>
</blockquote>
<p>但是当你不在枯燥的工作，你可以跟随你的第六感，花时间在真正感兴趣的事情上。尽可能长时间地保持你的生活便宜和灵活是一个强有力的方法，但是很明显需要权衡。</p>
<blockquote>
<p><strong>6. Focus</strong></p>
<p>Focus is a force multiplier on work.</p>
</blockquote>
<p>专注是工作的力量倍增器。</p>
<blockquote>
<p>Almost everyone I’ve ever met would be well-served by spending more time  thinking about what to focus on. It is much more important to work on  the right thing than it is to work many hours. Most people waste most of their time on stuff that doesn’t matter.</p>
</blockquote>
<p>我见过的几乎每个人都会花更多的时间来思考应该关注什么，这对他们来说是很有好处的。在正确的事情上工作比在许多时间上工作要重要得多。大多数人把大部分时间浪费在无所谓的事情上</p>
<blockquote>
<p>Once you have  figured out what to do, be unstoppable about getting your small handful  of priorities accomplished quickly. I have yet to meet a slow-moving  person who is very successful.</p>
</blockquote>
<p>一旦你想好了要做什么，就要势不可挡地迅速完成你的一小撮优先事项。我还没有见过一个行动缓慢但非常成功的人。</p>
<blockquote>
<p><strong>7. Work hard</strong></p>
<p>You can  get to about the 90th percentile in your field by working either smart  or hard, which is still a great accomplishment. But getting to the 99th  percentile requires both—you will be competing with other very talented  people who will have great ideas and be willing to work a lot.</p>
</blockquote>
<p>努力工作</p>
<p>你可以通过聪明或者努力工作在你的领域达到90%，这仍然是一个伟大成就。但是达到99%的程度，两者都需要&mdash; 你将会和其他非常有天赋的有伟大想法的并乐意很多工作的人竞争。</p>
<blockquote>
<p>Extreme people get extreme results. Working a lot comes with huge life  trade-offs, and it’s perfectly rational to decide not to do it. But it  has a lot of advantages. As in most cases, momentum compounds, and  success begets success.</p>
</blockquote>
<p>极致的的人获得极致结果。大量工作带来巨大的生活权衡取舍，决定不这么做也是完全理性的。但是它也有很多优势。在大多数情况下，势头是复合的，而成功会带来成功。</p>
<blockquote>
<p>And it’s often really fun. One of  the great joys in life is finding your purpose, excelling at it, and  discovering that your impact matters to something larger than yourself. A YC founder recently expressed great surprise about how much happier and more fulfilled he was after leaving his job at a big company and  working towards his maximum possible impact. Working hard at that should be celebrated.</p>
</blockquote>
<p>它经常真的有趣。生活中最大的乐趣之一就是找到你的目标，在这方面做得很出色，并发现你的影响对比你自己更重要的事情很重要。一位YC的创始人最近表示非常惊讶，他在离开大公司的工作后，为自己的最大可能的影响而努力，这让他更加快乐和充实。在这方面努力工作应该得到庆祝。</p>
<blockquote>
<p>It’s not entirely clear to me why  working hard has become a Bad Thing in certain parts of the US, but this is certainly not the case in other parts of the world—the amount of  energy and drive exhibited by entrepreneurs outside of the US is quickly becoming the new benchmark.</p>
</blockquote>
<p>不完全清楚为何努力工作在美国一些地区变成一个坏的事情，但在世界其他地区肯定不是这样的。美国以外的企业家所表现出的能量和动力正迅速成为新的基准。</p>
<blockquote>
<p>You have to figure out how to work hard without burning out. People find their own strategies for  this, but one that almost always works is to find work you like doing  with people you enjoy spending a lot of time with.</p>
</blockquote>
<p>你必须弄清楚如何努力工作而不至于筋疲力尽。人们会寻找自己的策略来应对，但是有一条总是奏效的方式是，寻找哪些你喜欢做的工作，和你享受花时间在一块的人一起工作。</p>
<blockquote>
<p>I think people who pretend you can be super successful professionally without  working most of the time (for some period of your life) are doing a  disservice. In fact, work stamina seems to be one of the biggest  predictors of long-term success.</p>
</blockquote>
<p>我认为哪些假装你不用大部分时间工作(人生的一阶段)就能超级成功的人是非常有害的。事实上，持久工作是长期成功可一个可预测的事。</p>
<blockquote>
<p>One more thought about  working hard: do it at the beginning of your career. Hard work compounds like interest, and the earlier you do it, the more time you have for  the benefits to pay off. It’s also easier to work hard when you have  fewer other responsibilities, which is frequently but not always the  case when you’re young.</p>
</blockquote>
<p>关于努力工作还有一个想法：在你的职业生涯开始时就努力工作。艰苦的工作就像利息一样复利，你越早做，你就有越多的时间来获得收益回报。当你有较少的其他责任时，也更容易努力工作，这在你年轻的时候经常发生，但并不总是这样。</p>
<blockquote>
<p><strong>8. Be bold</strong></p>
<p>大胆一些</p>
<p>I believe that  it’s easier to do a hard startup than an easy startup. People want to be part of something exciting and feel that their work matters.</p>
</blockquote>
<p>我相信，做一个困难的创业公司比做一个容易的创业公司更容易。人们希望成为令人兴奋的事物的一部分，并感到他们的工作很重要。</p>
<blockquote>
<p>If you are making progress on an important problem, you will have a  constant tailwind of people wanting to help you. Let yourself grow more  ambitious, and don’t be afraid to work on what you really want to work  on.</p>
</blockquote>
<p>如果你在一个重要的问题上取得进展，你将会有一个不断想要帮助你的人带来顺风。让你自己成长得更有雄心，不要怕你真正想做的事情。</p>
<blockquote>
<p>If everyone else is starting meme companies, and you  want to start a gene-editing company, then do that and don’t second  guess it.</p>
</blockquote>
<p>如果其他人都在创办备忘录公司，而你想创办一家基因编辑公司，那就去做，不要犹豫。</p>
<blockquote>
<p>Follow your curiosity. Things that seem exciting to you will often seem exciting to other people too.</p>
</blockquote>
<p>听从你的好奇心。对你来说似乎很兴奋的事情，往往对其他人来说也会很兴奋。</p>
<blockquote>
<p><strong>9. Be willful</strong></p>
<p>要有意志力</p>
<p>A big secret is that you can bend the world to your will a surprising  percentage of the time—most people don’t even try, and just accept that  things are the way that they are.</p>
</blockquote>
<p>一个很大的秘密是，你可以在令人惊讶的百分比上让世界屈服于你的意志，大多数人甚至没有尝试，而只是接受事情本来的样子。</p>
<blockquote>
<p>People have an enormous capacity to make things happen. A combination of self-doubt, giving up too  early, and not pushing hard enough prevents most people from ever  reaching anywhere near their potential.</p>
</blockquote>
<p>人们有巨大的能力使事情发生。自我怀疑、过早放弃和不够努力等因素的结合，使大多数人无法达到接近其潜力的程度。</p>
<blockquote>
<p>Ask for what you  want. You usually won’t get it, and often the rejection will be painful. But when this works, it works surprisingly well.</p>
</blockquote>
<p>追求想要的事情。你经常不会得到它，经常被拒会很痛苦。但当它起效，结果会出奇的好。</p>
<blockquote>
<p>Almost  always, the people who say “I am going to keep going until this works,  and no matter what the challenges are I’m going to figure them out”, and mean it, go on to succeed. They are persistent long enough to give  themselves a chance for luck to go their way.</p>
</blockquote>
<p>大多数总是，当人们说”我将会一直努力到这个事奏效，无论挑战是什么我将会克服“， 意味着，正在成功路上。他们不屈不挠足够长就会给他们带来一个机会，幸运就在路上了。</p>
<blockquote>
<p>Airbnb is my benchmark for this. There are so many stories they tell that I wouldn’t recommend trying to reproduce (keeping maxed-out credit cards in those  nine-slot three-ring binder pages kids use for baseball cards, eating  dollar store cereal for every meal, battle after battle with powerful  entrenched interest, and on and on) but they managed to survive long  enough for luck to go their way.</p>
</blockquote>
<p>Airbnb是我在这方面的标杆。他们讲了很多故事，我不建议尝试复制（把刷爆的信用卡放在孩子们用来装棒球卡的九槽三环夹子里，每顿都吃一元店的麦片，与强大的根深蒂固的利益集团进行一场又一场的斗争，等等），但他们设法生存了足够长的时间，让运气顺着他们。</p>
<blockquote>
<p>To be willful, you have  to be optimistic—hopefully this is a personality trait that can be  improved with practice. I have never met a very successful pessimistic  person.</p>
</blockquote>
<p>要想成为有意志力的人，你必须乐观 &mdash; 希望这是一个可以通过实践来改善的人格特质。我从来没有见过一个非常成功的悲观主义者。</p>
<blockquote>
<p><strong>10. Be hard to compete with</strong></p>
<p>Most people  understand that companies are more valuable if they are difficult to  compete with. This is important, and obviously true.</p>
</blockquote>
<p>做到难与竞争</p>
<p>大多数人都明白，如果公司难以与之竞争，那么它们就更有价值。这很重要，而且显然是真的。</p>
<blockquote>
<p>But  this holds true for you as an individual as well. If what you do can be  done by someone else, it eventually will be, and for less money.</p>
</blockquote>
<p>但是作为个人这个也是真的。如果你做的事其他人也可以做，那么将会，赚更少的钱。</p>
<blockquote>
<p>The best way to become difficult to compete with is to build up leverage.  For example, you can do it with personal relationships, by building a  strong personal brand, or by getting good at the intersection of  multiple different fields. There are many other strategies, but you have to figure out some way to do it.</p>
</blockquote>
<p>变得难以竞争的最好方法是建立杠杆作用。例如，你使用个人关系，通过建立一个强有力的个人品牌，或者在多个不同领域取得优势。还有很多其他的策略，但是你需要找出做到的方法。</p>
<blockquote>
<p>Most people do whatever  most people they hang out with do. This mimetic behavior is usually a  mistake—if you’re doing the same thing everyone else is doing, you will  not be hard to compete with.</p>
</blockquote>
<p>大多数人做他们所交往的大多数人做的事。这种模仿行为通常是一个错误&ndash;如果你做的是别人都在做的事情，你将不难与之竞争。</p>
<blockquote>
<p><strong>11. Build a network</strong></p>
<p>建立人际网</p>
<p>Great work requires teams. Developing a network of talented people to work  with—sometimes closely, sometimes loosely—is an essential part of a  great career. The size of the network of really talented people you know often becomes the limiter for what you can accomplish.</p>
</blockquote>
<p>伟大的工作需要团队。发展一个由有才华的人组成的工作网络&ndash;有时是紧密的，有时是松散的&ndash;是伟大事业的一个重要组成部分。你所认识的真正有才华的人的网络规模往往成为你能取得成就的限制因素。</p>
<blockquote>
<p>An effective way to build a network is to help people as much as you can.  Doing this, over a long period of time, is what lead to most of my best  career opportunities and three of my four best investments. I’m  continually surprised how often something good happens to me because of  something I did to help a founder ten years ago.</p>
</blockquote>
<p>一个有效的方式去构建人际网络是尽可能的去帮助别人。这么做持续长时间，带给我大部分最好的事业机会，我四个最好投资中的三个。我不断地感到惊讶，因为我十年前为帮助一个创始人所做的事情，经常有好事发生在我身上。</p>
<blockquote>
<p>One of  the best ways to build a network is to develop a reputation for really  taking care of the people who work with you. Be overly generous with  sharing the upside; it will come back to you 10x. Also, learn how to  evaluate what people are great at, and put them in those roles. (This is the most important thing I have learned about management, and I haven’t read much about it.) You want to have a reputation for pushing people  hard enough that they accomplish more than they thought they could, but  not so hard they burn out.</p>
</blockquote>
<p>建立网络的最好方法之一是建立一个真正照顾到与你合作的人的声誉。在分享收益方面要过于慷慨；它将以10倍的速度回报给你。另外，要学会评估人们擅长什么，并让他们担任这些角色。(这是我在管理方面学到的最重要的东西，而我并没有读过很多这方面的书）。你要在推动人们努力工作方面享有声誉，使他们的成就超过他们的想象，但又不至于让他们精疲力尽。</p>
<blockquote>
<p>Everyone is better at some  things than others. Define yourself by your strengths, not your  weaknesses. Acknowledge your weaknesses and figure out how to work  around them, but don’t let them stop you from doing what you want to do. “I can’t do X because I’m not good at Y” is something I hear from  entrepreneurs surprisingly often, and almost always reflects a lack of  creativity. The best way to make up for your weaknesses is to hire  complementary team members instead of just hiring people who are good at the same things you are.</p>
</blockquote>
<p>每个人都有某方面强于其他人的地方。定义你自己的是你的强项，不是你的弱点。承认你的弱点找出如何与他们相处工作，但是不要让他们停止你想做的事。“我不能做某事，因为我不擅长做某事”是我经常从企业家那里听到的令人惊讶的话，这几乎总是反映出创造力的缺乏。弥补你的弱点的最好方法是雇佣互补的团队成员，而不是仅仅雇佣那些和你同样擅长的人。</p>
<blockquote>
<p>A particularly valuable part of  building a network is to get good at discovering undiscovered talent.  Quickly spotting intelligence, drive, and creativity gets much easier  with practice. The easiest way to learn is just to meet a lot of people, and keep track of who goes on to impress you and who doesn’t. Remember  that you are mostly looking for rate of improvement, and don’t overvalue experience or current accomplishment.</p>
</blockquote>
<p>一个构建人际网络的尤其有价值的方面是善于发现未被发现的天赋。在实践下，迅速发现智力，驱动力和创造力变得更容易。最简单的方式是建大量的人，保持追踪哪些令人印象深刻的和不深刻的。记住，你主要是在寻找改进的速度，不要高估经验或当前的成就。</p>
<blockquote>
<p>I try to always ask myself when I meet someone new “is this person a force of nature?” It’s a pretty good heuristic for finding people who are likely to accomplish great things.</p>
</blockquote>
<p>当我遇到新的人时，我试着总是问自己 &ldquo;这个人是天生的力量吗？&rdquo; 这是一个相当好的启发式方法，可以找到那些有可能完成伟大事业的人。</p>
<blockquote>
<p>A special case of developing a network is  finding someone eminent to take a bet on you, ideally early in your  career. The best way to do this, no surprise, is to go out of your way  to be helpful. (And remember that you have to pay this forward at some  point later!)</p>
</blockquote>
<p>发展网络的一个特殊情况是找到知名人士为你下注，最好是在你职业生涯的早期。要做到这一点，毫不奇怪，最好的办法是不遗余力地提供帮助。(请记住，你必须在以后的某个时间点上把这些钱交出来！）。</p>
<p>最后，记得把你的时间花在那些支持你的雄心壮志的积极的人身上。</p>
<blockquote>
<p>Finally, remember to spend your time with positive people who support your ambitions.</p>
<p><strong>12. You get rich by owning things</strong></p>
</blockquote>
<p>通过拥有东西变富有</p>
<blockquote>
<p>The biggest economic misunderstanding of my childhood was that people got  rich from high salaries. Though there are some exceptions—entertainers  for example —almost no one in the history of the Forbes list has gotten  there with a salary.</p>
</blockquote>
<p>我小时候对经济最大的误解是人们通过高薪水变富。尽管有一些例外&ndash;例如娱乐界人士&mdash;几乎没有人是通过工资上福布斯榜的。</p>
<blockquote>
<p>You get truly rich by owning things that increase rapidly in value.</p>
</blockquote>
<p>你通过拥有价值快速增长的东西而变得真正富有。</p>
<blockquote>
<p>This can be a piece of a business, real estate, natural resource,  intellectual property, or other similar things. But somehow or other,  you need to own equity in something, instead of just selling your time.  Time only scales linearly.</p>
</blockquote>
<p>这可以是企业的一部分、房地产、自然资源、知识产权或其他类似的东西。但是不管怎样，你需要拥有一些东西的权益，而不是仅仅出售你的时间。时间只是线性规模。</p>
<blockquote>
<p>The best way to make things that increase rapidly in value is by making things people want at scale.</p>
</blockquote>
<p>制造价值迅速增加的东西的最好方法是大规模制造人们想要的东西。</p>
<blockquote>
<p><strong>13. Be internally driven</strong></p>
<p>拥有自驱力</p>
<p>Most people are primarily externally driven; they do what they do because  they want to impress other people. This is bad for many reasons, but  here are two important ones.</p>
</blockquote>
<p>大多数人主要是外部驱动的; 他们做他们所做的是因为他们想给别人留下深刻印象。这种情况有很多原因，但有两个重要的原因。</p>
<blockquote>
<p>First, you will work on  consensus ideas and on consensus career tracks.  You will care a  lot—much more than you realize—if other people think you’re doing the  right thing. This will probably prevent you from doing truly interesting work, and even if you do, someone else would have done it anyway.</p>
<p>Second, you will usually get risk calculations wrong. You’ll be very focused on keeping up with other people and not falling behind in competitive  games, even in the short term.</p>
</blockquote>
<p>首先，你将在协商一致的想法和协商一致的职业轨道上工作。 你会非常关心&ndash;比你意识到的要多得多&ndash;其他人是否认为你在做正确的事情。这可能会妨碍你做真正有趣的工作，即使你做了，别人也会做。</p>
<p>第二，你通常会把风险计算弄错。你会非常专注于跟上别人的步伐，在竞争性游戏中不掉队，即使是在短期内。</p>
<blockquote>
<p>Smart people seem to be  especially at risk of such externally-driven behavior. Being aware of it helps, but only a little—you will likely have to work super-hard to not fall in the mimetic trap.</p>
<p>The most successful people I  know are primarily internally driven; they do what they do to impress  themselves and because they feel compelled to make something happen in  the world. After you’ve made enough money to buy whatever you want and  gotten enough social status that it stops being fun to get more, this is the only force I know of that will continue to drive you to higher  levels of performance.</p>
<p>This is why the question of a  person’s motivation is so important. It’s the first thing I try to  understand about someone. The right motivations are hard to define a set of rules for, but you know it when you see it.</p>
<p>Jessica  Livingston and Paul Graham are my benchmarks for this. YC was widely  mocked for the first few years, and almost no one thought it would be a  big success when they first started. But they thought it would be great  for the world if it worked, and they love helping people, and they were  convinced their new model was better than the existing model.</p>
<p>Eventually, you will define your success by performing excellent work in areas that are important to you. The sooner you can start off in that direction,  the further you will be able to go. It is hard to be wildly successful  at anything you aren’t obsessed with.</p>
</blockquote>
<p>聪明人似乎特别容易出现这种外部驱动的行为。意识到这一点是有帮助的，但只是一点点&ndash;你很可能要付出极大的努力才能不落入模仿的陷阱。</p>
<p>我所知道的最成功的人主要是由内部驱动的；他们所做的事情是为了给自己留下深刻印象，也是因为他们感到必须要在这个世界上有所作为。在你赚够了钱，可以买到你想要的任何东西，得到了足够的社会地位，不再以获得更多的东西为乐趣之后，这是我所知道的唯一的力量，会继续推动你达到更高的表现水平。</p>
<p>这就是为什么一个人的动机问题是如此重要。这是我试图了解一个人的第一件事。正确的动机很难定义一套规则，但当你看到它时，你就会知道它。</p>
<p>杰西卡-利文斯顿和保罗-格雷厄姆是我这方面的标杆。YC在最初几年被广泛嘲笑，在他们刚开始的时候几乎没有人认为它会大获成功。但他们认为，如果它能成功，对世界来说是件好事，而且他们喜欢帮助人，他们坚信他们的新模式比现有模式更好。</p>
<p>最终，你将通过在对你很重要的领域进行出色的工作来定义你的成功。你越早朝这个方向起步，你就能走得越远。你很难在你不痴迷的事情上取得巨大的成功。</p>
<blockquote>
<p>[1] A comment response I wrote on HN:</p>
<p>One of the biggest reasons I&rsquo;m excited about basic income is the amount of  human potential it will unleash by freeing more people to take risks.</p>
<p>Until then, if you aren&rsquo;t born lucky, you have to claw your way up for awhile before you can take big swings. If you are born in extreme poverty,  then this is super difficult :(</p>
<p>It is obviously an incredible shame and waste that opportunity is so  unevenly distributed. But I&rsquo;ve witnessed enough people be born with the  deck stacked badly against them and go on to incredible success to know  it&rsquo;s possible.</p>
<p>I am deeply aware of the fact that I personally would not be where I am if I weren&rsquo;t born incredibly lucky.</p>
</blockquote>
<p>我对基本收入感到兴奋的最大原因之一是，它将释放出大量的人类潜力，让更多的人能够承担风险。
在此之前，如果你不是天生的幸运儿，你必须在大摇大摆之前努力奋斗一阵子。如果你出生在极端贫困的地方，那么这就超级困难了:(</p>
<p>机会分配如此不均，显然是一种难以置信的耻辱和浪费。但是，我已经目睹了足够多的人出生在对他们非常不利的环境中，并取得了令人难以置信的成功，所以我知道这是可能的。</p>
<p>我深深地意识到，如果我不是生来就非常幸运，我个人就不会有现在的成就。</p>
<blockquote>
<p>Thanks to Brian Armstrong, Greg Brockman, Dalton Caldwell,  Diane von Furstenberg, Maddie Hall, Drew Houston, Vinod Khosla, Jessica  Livingston, Jon Levy, Luke Miles (6 drafts!), Michael Moritz, Ali  Rowghani, Michael Seibel, Peter Thiel, Tracy Young and Shivon Zilis for  reviewing drafts of this, and thanks especially to Lachy Groom for help  writing it.</p>
</blockquote>
]]></content></item><item><title>Week1043_share</title><link>/posts/arts/week1043_share/</link><pubDate>Fri, 31 Mar 2023 15:45:50 +0000</pubDate><guid>/posts/arts/week1043_share/</guid><description>ARTS - Share 使用AI绘图 参考的这篇文章: 低成本体验生成 AI 小姐姐照片
stable diffusion
等待安装 但是报错了：
提示 Read timed out . 就是下载pytorch 不成功，只能换个vpn节点再试试了。
这次安装pytorch成功，但是又报错了其他：
在安装gfpgan 时候报错了，又是timed out 只能换换节点再试试.
经过切换好几个节点，终于运行成功：
根据提示，浏览器访问: http://127.0.0.1:7860 ,终于启动：
安装model 根据提示，下载https://civitai.com/models/6424/chilloutmix ， 放到 models/Stable-diffusion/
安装扩展：https://github.com/civitai/sd_civitai_extension
生成美女 参数调优 根据已存在的来复制参数， 比如
我们最终生成的：</description><content type="html"><![CDATA[<h2 id="arts---share-使用ai绘图">ARTS - Share 使用AI绘图</h2>
<p>参考的这篇文章: <a href="https://medium.com/@croath/%E4%BD%8E%E6%88%90%E6%9C%AC%E4%BD%93%E9%AA%8C%E7%94%9F%E6%88%90-ai-%E5%B0%8F%E5%A7%90%E5%A7%90%E7%85%A7%E7%89%87-85ffa7c13cd7"><strong>低成本体验生成 AI 小姐姐照片</strong></a></p>
<p>stable diffusion</p>
<h3 id="等待安装">等待安装</h3>
<p><img src="http://qiniu.honeywen.com/img/20230221102409.png" alt="image-20230221102407629"></p>
<p>但是报错了：</p>
<p><img src="http://qiniu.honeywen.com/img/20230221102806.png" alt="image-20230221102805143"></p>
<p>提示 Read timed out .  就是下载pytorch 不成功，只能换个vpn节点再试试了。</p>
<p>这次安装pytorch成功，但是又报错了其他：</p>
<p><img src="http://qiniu.honeywen.com/img/20230221104631.png" alt="image-20230221104630343"></p>
<p>在安装gfpgan 时候报错了，又是timed out 只能换换节点再试试.</p>
<p>经过切换好几个节点，终于运行成功：</p>
<p><img src="C:%5CUsers%5CWelto%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230221113035921.png" alt="image-20230221113035921"></p>
<p>根据提示，浏览器访问: http://127.0.0.1:7860  ,终于启动：</p>
<p><img src="http://qiniu.honeywen.com/img/20230221113321.png" alt="image-20230221113320496"></p>
<h3 id="安装model">安装model</h3>
<p>根据提示，下载https://civitai.com/models/6424/chilloutmix ， 放到 models/Stable-diffusion/</p>
<p>安装扩展：https://github.com/civitai/sd_civitai_extension</p>
<p><img src="http://qiniu.honeywen.com/img/20230221115926.png" alt="image-20230221115925766"></p>
<h3 id="生成美女">生成美女</h3>
<p><img src="http://qiniu.honeywen.com/img/20230221121037.png" alt="image-20230221121036581"></p>
<h3 id="参数调优">参数调优</h3>
<p>根据已存在的来复制参数， 比如</p>
<p><img src="http://qiniu.honeywen.com/img/20230221200348.png" alt="image-20230221200346386"></p>
<p>我们最终生成的：</p>
<p><img src="http://qiniu.honeywen.com/img/20230221200424.png" alt="image-20230221200422567"></p>
<p><img src="C:%5CUsers%5CWelto%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230221202839423.png" alt="image-20230221202839423"></p>
<p><img src="http://qiniu.honeywen.com/img/20230221205844.png" alt="image-20230221205843479"></p>
]]></content></item><item><title>Week1043_tip</title><link>/posts/arts/week1043_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:50 +0000</pubDate><guid>/posts/arts/week1043_tip/</guid><description>ARTS - Tip - 一次mybatis 与 java8 LocalDateTime的问题 问题描述 之前使用Java model ,mybatis 来操作mysql数据库， 对于mysql datetime类型一直使用的是 java.util.Date ， java8 提供了java.time.LocalDateTime 新的日期解决方案， 所以就引入了项目，然后在批量更新中用到，出现了无法更新的问题。
具体报错: SQL语法错误
环境与版本 mybatis: 3.5.1 mysql: 5.7 mysql driver: 8.0.26 mybatis xml写法是： &amp;lt;update id=&amp;#34;batchUpdate&amp;#34; parameterType=&amp;#34;xxx&amp;#34;&amp;gt; &amp;lt;foreach collection=&amp;#34;list&amp;#34; item=&amp;#34;item&amp;#34; index=&amp;#34;index&amp;#34; separator=&amp;#34;;&amp;#34;&amp;gt; UPDATE t_table SET complete_date = #{item.completeDate} &amp;lt;/set&amp;gt; WHERE id = #{item.id} &amp;lt;/foreach&amp;gt; &amp;lt;/update&amp;gt; 解决过程 首先是自认为 mybatis 解析 LocalDateTime出现了问题，所以搜索关键字是 &amp;quot; mybatis update localdatetime &amp;quot; ， 在 Java 8 LocalDate mapping with mybatis 的回答说是要 增加 mybatis-typehandlers-jsr310 来处理 typeHandler 的问题， 但是在</description><content type="html"><![CDATA[<h2 id="arts---tip----一次mybatis-与-java8-localdatetime的问题">ARTS - Tip -  一次mybatis 与 java8 LocalDateTime的问题</h2>
<h3 id="问题描述">问题描述</h3>
<p>之前使用Java model ,mybatis 来操作mysql数据库， 对于mysql datetime类型一直使用的是 <code>java.util.Date</code> ， java8 提供了java.time.LocalDateTime 新的日期解决方案， 所以就引入了项目，然后在批量更新中用到，出现了无法更新的问题。</p>
<p>具体报错:  SQL语法错误</p>
<h3 id="环境与版本">环境与版本</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>mybatis: 3.5.1
</span></span><span style="display:flex;"><span>mysql: 5.7
</span></span><span style="display:flex;"><span>mysql driver: 8.0.26
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mybatis xml写法是：
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;update</span> <span style="color:#a6e22e">id=</span><span style="color:#e6db74">&#34;batchUpdate&#34;</span> <span style="color:#a6e22e">parameterType=</span><span style="color:#e6db74">&#34;xxx&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;foreach</span> <span style="color:#a6e22e">collection=</span><span style="color:#e6db74">&#34;list&#34;</span> <span style="color:#a6e22e">item=</span><span style="color:#e6db74">&#34;item&#34;</span> <span style="color:#a6e22e">index=</span><span style="color:#e6db74">&#34;index&#34;</span> <span style="color:#a6e22e">separator=</span><span style="color:#e6db74">&#34;;&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>            UPDATE t_table
</span></span><span style="display:flex;"><span>            SET
</span></span><span style="display:flex;"><span>                complete_date = #{item.completeDate}
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;/set&gt;</span>
</span></span><span style="display:flex;"><span>             WHERE id = #{item.id}
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/foreach&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/update&gt;</span>
</span></span></code></pre></div><h3 id="解决过程">解决过程</h3>
<p>首先是自认为 mybatis 解析 LocalDateTime出现了问题，所以搜索关键字是 &quot; mybatis update localdatetime &quot; ， 在 <a href="https://stackoverflow.com/questions/25113579/java-8-localdate-mapping-with-mybatis">Java 8 LocalDate mapping with mybatis</a>  的回答说是要 增加 mybatis-typehandlers-jsr310 来处理 typeHandler 的问题， 但是在</p>
<p><a href="https://github.com/mybatis/mybatis-3/issues/1549">LocalDate Cause TypeException · Issue #1549 · mybatis/mybatis-3 (github.com)</a>  回答中说到，<img src="http://qiniu.honeywen.com/img/20230314095237.png" alt="image-20230314095235220"></p>
<p>mybatis 3.5.1已经解决了这个问题，不需要重新更新 。 所以怀疑是其他问题， 换关键字 搜索   mybatis batch update , 得到</p>
<p>需要修改jdbc连接，增加  allowMultiQueries=true 参数， 然后问题解决</p>
<h3 id="解决方案">解决方案</h3>
<p>正常使用 LocalDateTime , jdbc连接增加 allowMultiQueries=true</p>
]]></content></item><item><title>Week1041_review</title><link>/posts/arts/week1041_review/</link><pubDate>Fri, 31 Mar 2023 15:45:49 +0000</pubDate><guid>/posts/arts/week1041_review/</guid><description>ARTS - Review - Don’t Just Set Goals. Build Systems 不要只设置目标。要建立系统。
The Secret To Happiness And Achieving More 通往幸福和成就更多的秘诀。| 幸福和获得更多的秘密
It’s that time of year again.
The cycle never gets old.
Let me guess… You’re probably reflecting on what a treacherous year it’s been.
The trials and tribulations you’ve had to overcome.
Yet you are highly convinced next year will be different…
It won’t.
又一年来了。
循环永不老。
让我猜猜，你可能在回想今年是多么危险的一年。
你必须克服的困难和磨难。
然而你深信明年会有不同。
他不会&amp;hellip;</description><content type="html"><![CDATA[<h2 id="arts---review---dont-just-set-goals-build-systemshttpsmediumcomswlhdont-just-set-goals-build-systems-8158ac541df">ARTS - Review - <a href="https://medium.com/swlh/dont-just-set-goals-build-systems-8158ac541df">Don’t Just Set Goals. Build Systems</a></h2>
<p>不要只设置目标。要建立系统。</p>
<blockquote>
<h2 id="the-secret-to-happiness-and-achieving-more">The Secret To Happiness And Achieving More</h2>
</blockquote>
<p>通往幸福和成就更多的秘诀。| 幸福和获得更多的秘密</p>
<blockquote>
<p>It’s that time of year again.</p>
<p>The cycle never gets old.</p>
<p>Let me guess… You’re probably reflecting on what a treacherous year it’s been.</p>
<p>The trials and tribulations you’ve had to overcome.</p>
<p>Yet you are highly convinced next year will be different…</p>
<p><strong>It won’t.</strong></p>
</blockquote>
<p>又一年来了。</p>
<p>循环永不老。</p>
<p>让我猜猜，你可能在回想今年是多么危险的一年。</p>
<p>你必须克服的困难和磨难。</p>
<p>然而你深信明年会有不同。</p>
<p>他不会&hellip;</p>
<blockquote>
<p>I hate to be the party pooper, but I genuinely want the best for you, so I will tell you as it is…</p>
<p>At the beginning of 2022, you probably set goals you want to achieve for  the year, right? Lose weight, clear debt, learn a high-ticket skill,  etc.</p>
<p>Did you achieve it?</p>
<p>If you did, I’m not talking to you — click the “X” button in the top right corner of your screen.</p>
<p>But if you didn’t, I want to help you break the habit of setting lofty goals that never get realized.</p>
</blockquote>
<p>我不想扫你的兴，但我真心希望你过得好，所以我实话告诉你吧。</p>
<p>在2022开始的时候， 你可能设置你想要实现的年目标，对吧？减肥、清账、学一个高回报技能等。</p>
<p>你实现了吗？</p>
<p>如果是，我没什么告诉你的。&mdash; 点击屏幕顶部右边角的 X 按钮。</p>
<p>但是如果你没有，我想帮助你改掉设定永远不会实现的崇高目标的习惯。</p>
<blockquote>
<p>I want to share with you the technique I’ve used to transition from:</p>
<ul>
<li>a taekwondo fighter who was once tipped to represent team GB at the 2012 Olympics</li>
<li>to a footballer who walked away from a professional contract</li>
<li>to a preacher leading a congregation of 70+ youths</li>
<li>to a machine learning engineer and writer whose stories have been viewed more than 2.1 million times in the past two years.</li>
</ul>
<p>All in the space of a decade.</p>
</blockquote>
<p>我想要分享给你我用来转变的技巧：</p>
<ul>
<li>一位跆拳道选手，曾经被认为是2012年奥运会英国队的代表</li>
<li>一个足球运动员放弃了职业合同</li>
<li>带领70多名年轻人集会的传教士</li>
<li>一个机器学习工程师，在过去两年写了被超过2百万次浏览的故事</li>
</ul>
<p>一切都发生在十年内。</p>
<blockquote>
<p>As you read the remainder of the story, keep an open mind.</p>
<p>I will leave you with practical steps you can implement from today that  are guaranteed to transform the outcomes you achieve for 2023 and  beyond.</p>
<p>Like the late Albert Einstein used to say, “<em>Insanity is doing the same thing over and over and expecting different results.</em>”</p>
</blockquote>
<p>当你阅读故事的其余部分时，保持开放的心态。</p>
<p>我将留给你们一些切实可行的步骤，你们可以从今天开始实施，这些步骤保证能够改变你们在2023年及以后实现的成果。</p>
<p>像早年爱因斯坦曾说，愚蠢就是一遍又一遍地做同一件事，却期待不同的结果</p>
<blockquote>
<h1 id="the-problem-with-goal-setting">The problem with goal setting</h1>
<p>We’ve all been sold a lie.</p>
<p><strong>Goal setting is not how you achieve the things you want in life.</strong></p>
<p>A goal is required for direction but to think it is how you will achieve what you want is flawed.</p>
<p>Here’s why:</p>
</blockquote>
<p>设置目标的问题</p>
<p>我们都被骗了。</p>
<p>目标设定不是生活中你想要如何实现的东西。</p>
<p>方向需要一个目标，但认为它是你如何实现你想要的是有缺陷的。</p>
<p>这是原因：</p>
<blockquote>
<h2 id="1-the-positive-fantasy-trap">#1 The positive fantasy trap</h2>
<p>It’s easy to become over-invested in achieving your goal.</p>
<p>You know… when the only thing you can think of is achieving the goal.</p>
<p>The excitement. The joy. The relief.</p>
<p>This is called a “[positive fantasy](<a href="https://www.sciencedirect.com/science/article/abs/pii/S002210311100031X#:~:text=Positive">https://www.sciencedirect.com/science/article/abs/pii/S002210311100031X#:~:text=Positive</a> fantasies allow people to,positive fantasies about the future.).”</p>
<p>It’s not healthy.</p>
<p>Psychologists have found <a href="https://psycnet.apa.org/doiLanding?doi=10.1037%2F0022-3514.83.5.1198">the number one way your brain can unintentionally deter you from realizing your goals is by fantasizing</a>.</p>
<p>Positive fantasies allow you to indulge in the desired future mentally…</p>
<p>You can taste the sensations of what it’s like to achieve your goal in the  present — this depletes your energy to pursue your desired future.</p>
<p>You’re also not alert to the obstacles you will inevitably face, which leaves you stagnant upon encounter.</p>
</blockquote>
<p>积极的幻想陷阱</p>
<p>在实现你的目标时，很容易变的过度投资。</p>
<p>你要知道，唯一你可以思考的事情，就是实现目标。</p>
<p>那种兴奋，那种喜悦，那种解脱。</p>
<p>这就是所谓的“积极幻想”</p>
<p>这样不健康。</p>
<p>心理学家发现，大脑无意中阻止你实现目标的第一种方式就是幻想。</p>
<p>积极的幻想可以让你沉溺于理想的未来。</p>
<p>你可以尝到当下实现目标的感觉ーー这会耗尽你追求理想未来的精力。</p>
<p>你也没有意识到你将不可避免地面对的障碍，这使你在遭遇时停滞不前。</p>
<blockquote>
<h2 id="2-the-outcomes-first-trap">#2 The outcomes first trap</h2>
<p>Goals hone in on outcomes…</p>
<p>This doesn’t take into consideration the development required to maintain the outcome.</p>
<p>Why do you think 70% of lottery winners go broke and a third declare bankruptcy within three to five years?</p>
<p>The symptom is treated (being broke), but the cause (lousy spending habits) is untouched.</p>
<p>It’s easy to think the outcomes are the problem when things look gloomy — you’re conscious of them —</p>
<p>When you’re broke, you feel broke.</p>
<p>When you’re overweight, you feel overweight.</p>
<p>But it’s easy to miss the cause for the recurring outcomes because they usually occur at a subconscious level.</p>
<p>Yes, you can win the lottery or get liposuction…</p>
<p>But if you continue to spend recklessly or eat junk food all the time, you’ll be right back to where you started.</p>
<p>Solving problems at the outcome level is temporary.</p>
</blockquote>
<p>2结果第一个陷阱</p>
<p>目标在于结果。</p>
<p>这没有考虑到维护结果所需的开发。</p>
<p>你认为为什么70% 的彩票中奖者在三到五年内破产，三分之一的人宣布破产？</p>
<p>症状得到了治疗(身无分文) ，但病因(糟糕的消费习惯)却未受影响。</p>
<p>人们很容易认为，当事情看上去令人沮丧(你意识到了这一点)时，结果就是问题所在</p>
<p>当你破产的时候，你会感到破产。</p>
<p>当你超重时，你会感到超重。</p>
<p>但是很容易忽略重复出现的结果的原因，因为它们通常发生在潜意识层面。</p>
<p>是的，你可以中彩票或者做抽脂手术。</p>
<p>但是如果你继续不计后果地花钱或者一直吃垃圾食品，你就会回到你开始的地方。</p>
<p>在结果层面上解决问题是暂时的。</p>
<blockquote>
<h2 id="3-the-failure-state-trap">#3 The failure state trap</h2>
<p>Have you ever thought, “<em>when I achieve X, I’ll be happy?</em>”</p>
<p>That is <strong>the failure state</strong>.</p>
<p>It’s a by-product of adopting the goal-first mentality.</p>
<p>Happiness is pushed to some later date in the future while your present self battles with the misery of the current moment.</p>
<p>The reason it occurs is simple: goal orientation creates either-or conflicts —</p>
<p><em>“you are either a failure (you have not achieved what you want), or you are a success (you have achieved what you want).”</em></p>
<p>There’s no middle ground.</p>
<p>I’ve fallen into this trap countless times.</p>
</blockquote>
<p>失败状态陷阱</p>
<p>你有没有想过，“当我达到 X 的时候，我会很快乐?”</p>
<p>这就是失败状态。</p>
<p>这是采取目标第一心态的副产品。</p>
<p>幸福被推迟到未来的某个日期，而你现在的自己正在与当下的痛苦斗争。</p>
<p>发生这种情况的原因很简单: 目的导向会产生非此即彼的冲突ー</p>
<p>“你要么是个失败者(你没有得到你想要的) ，要么是个成功者(你已经得到了你想要的)。”</p>
<p>没有折中的办法。</p>
<p>我已经无数次掉进这个陷阱了。</p>
<blockquote>
<h1 id="what-are-systems">What are systems?</h1>
<p>Systems are the moving force for the goals you set.</p>
<p>They preserve the need for self-control and increase your overall happiness in the long run.</p>
<blockquote>
<p>“Goals are good for setting a direction but systems are best for making progress.”</p>
<p>— James Clear, Atomic Habits</p>
</blockquote>
<p>Here are a few examples of effective systems:</p>
<p>→ <strong>Objective</strong>: Write a book in a year. <strong>System</strong>: Write “[two shitty pages a day](<a href="https://tim.blog/2019/03/19/the-tim-ferriss-show-transcripts-safi-bahcall/#:~:text=two">https://tim.blog/2019/03/19/the-tim-ferriss-show-transcripts-safi-bahcall/#:~:text=two</a> shitty pages a day)” (as <a href="https://en.wikipedia.org/wiki/Tim_Ferriss">Tim Ferris</a> would say).
→ <strong>Objective</strong>: Grow on social media. <strong>System</strong>: Post daily.
→ <strong>Objective</strong>: Master an instrument. <strong>System</strong>: Practice the fundamentals of the instrument daily.</p>
</blockquote>
<p>系统是什么？</p>
<p>系统是你设定目标的推动力。</p>
<p>他们保留了自我控制的需要，从长远来看增加了你的整体幸福感。</p>
<p>“目标有利于设定方向，但制度最有利于取得进展。”</p>
<p>ー詹姆斯 · 克利尔，《原子习惯》</p>
<p>下面是一些有效系统的例子:</p>
<p>目标: 一年内写一本书。系统: “一天写两页屎”(蒂姆 · 费里斯会这么说)。</p>
<p>目标: 在社交媒体上成长。系统: 日报。</p>
<p>目标: 掌握一种乐器。系统: 每天练习乐器的基本原理。</p>
<blockquote>
<h1 id="the-importance-of-systems">The importance of systems</h1>
<p>Systems introduce structure.</p>
<p>For example, the UK uses a credit system to determine your borrowing eligibility.</p>
<p>I’m not saying it’s perfect, but it takes the guesswork out of who the bank thinks will likely pay them back when they borrow money.</p>
<p>The same is true for your life.</p>
<p>Systems eliminate the guesswork about what you must do to achieve what you want.</p>
<p>Goals without systems create chaos in your life.</p>
<p>Here’s why you need them:</p>
</blockquote>
<p>系统重要性</p>
<p>系统引入结构。</p>
<p>例如，英国使用信用系统来确定您的借入资格。</p>
<p>我并不是说这是完美的，但是这需要猜测银行认为当他们借钱时可能还钱的人。</p>
<p>您的生活也是如此。</p>
<p>系统消除了有关实现想要的目标必须做的事情的猜测。</p>
<p>没有系统的目标在您的生活中造成混乱。</p>
<p>这就是为什么您需要它们的原因：</p>
<blockquote>
<h2 id="1-systems-focus-on-the-skill">#1 Systems focus on the skill</h2>
<p>Focusing on the skill embraces process — “<em>I’m not yet where I want to be, but if I do X, I’ll be a step closer.</em>”</p>
<p>Even if you do not achieve your goal, you have developed a skill that will stay with you forever.</p>
<p>All of your efforts are not in vain.</p>
</blockquote>
<p>系统聚焦技能。</p>
<p>专注于技能的过程 &ndash; 我不知道我想去哪，但是我如果做X， 就会迈进一步</p>
<p>尽管没实现目标，你仍然开发了一项永久傍身技能。</p>
<p>你所有努力并非白费。</p>
<blockquote>
<h2 id="2-systems-create-life-long-change">#2 Systems create life-long change</h2>
<p>Unlike goals, systems emphasize process…</p>
<p>Systems <strong>treat the cause</strong> of a problem, and the symptoms (outcomes) change as a by-product.</p>
<blockquote>
<p>“Fix the inputs, and the outputs will fix themselves.”
— James Clear</p>
</blockquote>
<p>For example, treating lousy spending habits may result in you having more disposable income.</p>
</blockquote>
<p>系统创建长生命周期改变</p>
<p>不像目标，系统强调过程。</p>
<p>系统处理问题的原因，症状(结果)作为副产品改变。</p>
<p>修复输入，输出将会修复他们自己</p>
<p>例如，治疗糟糕的消费习惯可能会导致你有更多的可支配收入。</p>
<blockquote>
<h2 id="3-systems-embrace-happiness-in-the-present">#3 Systems embrace happiness in the present</h2>
<p>Systems acknowledge the grey zone between where you want to be and where you want to go.</p>
<p>It’s not just black and white.</p>
<p>You don’t have to wait until you achieve what you want before you can be happy.</p>
<p>You can be happy <strong>now</strong>…</p>
<p>You can be happy now by falling in love with the sensation of moving toward where you want to be.</p>
<p>If you’ve read this far, you’re probably wondering how to create a system.</p>
<p>I’ll show you in five simple steps.</p>
</blockquote>
<p>系统拥抱当下的幸福</p>
<p>系统承认在你想去的地方和你想去的地方之间的灰色地带。</p>
<p>不只是黑白分明。</p>
<p>你不必等到得到你想要的东西才能感到幸福。</p>
<p>你现在可以开心了。</p>
<p>你现在可以通过爱上那种朝着你想要的方向前进的感觉而感到快乐。</p>
<p>如果您已经读到这里，您可能想知道如何创建一个系统。</p>
<p>我将用五个简单的步骤向你展示。</p>
<blockquote>
<h1 id="how-to-create-a-system-in-5-simple-steps">How to create a system in 5 simple steps</h1>
<p>The secret to building an effective system is incorporating small, consistent wins into your life.</p>
<p>You must have something you can celebrate each day.</p>
<p>Brace yourself.</p>
<p>This will be the most practical part of the article; Grab a notepad and pen, and work through these steps with me.</p>
</blockquote>
<p>如何用简单5步骤创建一个系统</p>
<p>建立一个有效系统的秘诀是将小的、持续的胜利融入你的生活。</p>
<p>你肯定每天都有值得庆祝的事。</p>
<p>做好心理准备。</p>
<p>这将是这篇文章中最实际的部分; 拿起笔记本和钢笔，和我一起完成这些步骤。</p>
<blockquote>
<p><strong>Step 1:</strong> <em>What do you want to achieve?</em></p>
<p>Sit down and think about what you want.</p>
<p>Be honest with yourself, and don’t be afraid to go deep.</p>
<p>For instance, saying “<em>I want to be a professional footballer</em>” is not detailed enough if the truth is you want to be one of the best  professional footballers playing in a top-four club that competes for  titles in England and Europe.</p>
<p>The goal of this step is to completely define what is on the other side of the river.</p>
<p>The following steps will show you how to build a bridge and walk across it.</p>
</blockquote>
<p>第一步 你想实现什么</p>
<p>坐下想象你想要的。</p>
<p>对自己诚实，不好害怕深入。</p>
<p>例如，说“我想要成为一个专业足球运动员”是不够详细的，如果你希望成为一个最好的专业最运动员，在英国欧洲4大顶级俱乐部踢球。</p>
<p>这步的目标是完成定义河的另一边。</p>
<p>下一步将会向你展示如何建一个桥走过去。</p>
<blockquote>
<p><strong>Step 2:</strong> <em>The five why’s</em></p>
<p>Everyone has goals they want to achieve — sometimes, people have the same goals as you.</p>
<p>What will set you apart from them is <strong>your why</strong>.</p>
<p>Your “why” is what fills you with a sense of mission.</p>
<p>But it is essential to identify where the <strong>core problem</strong> lies — the thing blocking you from where you want to be (<em><strong>Remember*</strong></em>:* <em><strong>systems treat the cause*</strong></em>, not the symptom).*</p>
<p>The five why’s technique is a great tool to discover exactly that.</p>
<p>It’s pretty simple; ask yourself why you want what you want, answer, and repeat the process four more times.</p>
<p>For instance, take the following scenario:</p>
<blockquote>
<p><strong>Why #1:</strong> Why do you want to be one of the best professional footballers playing  in a top-four club that competes for titles in England and Europe?
<strong>Response #1:</strong> I have a chip on my shoulder. I want to prove people who doubted me wrong.</p>
<p><strong>Why #2:</strong> Why do you want to prove yourself to people who doubted you wrong?<strong>Response #2:</strong> So, in the future, people do not give up on me.</p>
<p><strong>Why #3:</strong> Why don’t you want people to give up on you?
<strong>Response #3:</strong> It kills my confidence</p>
<p><strong>Why #4:</strong> Why does it kill your confidence?
<strong>Response #4:</strong> Because I’m very attuned to what people think of me.</p>
<p><strong>Why #5</strong>: Why are you very attuned to what people think of you?
<strong>Response #5</strong>: I have low-self esteem, and it hurts me when I feel like I’m letting others down.</p>
</blockquote>
<p><strong>Boom!</strong></p>
<p>The root cause of our scenario cases problems is <strong>low-self esteem</strong>. The goal of their mission (to become what they want) is to build their  self-esteem — which is something that can be worked on each day.</p>
</blockquote>
<p>第二步 五个为什么</p>
<p>每个人都有想要实现的目标 &mdash; 有时人们和你有相同的目标。</p>
<p>让你与众不同的，是你的原因。</p>
<p>你的“为什么”让你充满使命感。</p>
<p>但是，确定核心问题在哪里是至关重要的ーー那个阻碍你到达你想去的地方的东西(记住: 系统治疗的是病因，而不是症状)。</p>
<p>五个为什么的技术是一个伟大的工具，发现确切的。</p>
<p>这很简单; 问问你自己为什么你想要你想要的，回答，然后再重复这个过程四次。</p>
<p>例如，以下面的场景为例:</p>
<p>为什么 # 1: 为什么你想成为在英格兰和欧洲争夺冠军的四强俱乐部踢球的最好的职业球员之一？</p>
<p>回应 # 1: 我很生气，我想证明那些怀疑我的人是错的。</p>
<p>为什么2: 为什么你想向那些怀疑你错误的人证明你自己？回应 # 2: 所以，在未来，人们不会放弃我。</p>
<p>为什么3: 你为什么不希望别人放弃你？</p>
<p>回应 # 3: 它扼杀了我的自信</p>
<p>为什么 # 4: 为什么它会扼杀你的自信？</p>
<p>回答 # 4: 因为我非常适应人们对我的看法。</p>
<p>为什么 # 5: 为什么你非常适应别人对你的看法？</p>
<p>回应 # 5: 我有低自尊心，当我觉得我让别人失望的时候，它伤害了我。</p>
<p>砰！</p>
<p>我们情景案例问题的根本原因是缺乏自尊。他们的使命(成为他们想成为的人)的目标是建立他们的自尊ーー这是每天都可以做的事情。</p>
<blockquote>
<p><strong>Step 3:</strong> <em>Learn the core actions required</em></p>
<p>I like to think of this stage as building the bridge from where you are now to where you want to be…</p>
<p>The great thing about learning what you need to do is that you don’t have to come up with it by yourself.</p>
<p>It’s likely others have already achieved what you want.</p>
<p>All you have to do is find them and follow the trail they left behind.</p>
<p>For example, if your goal is to go from $0–7 figures with an online business in 365 days, then you may want to sign up for</p>
<p><a href="https://medium.com/u/b6d641be1066?source=post_page-----8158ac541df--------------------------------">Tim Denning</a></p>
<p>’s <a href="https://sparklp.co/c147c672/">newsletter</a> that teaches you exactly how to do that in 10 steps.</p>
<p>The steps have already been created for you, don’t reinvent the wheel.</p>
</blockquote>
<p>步骤3: 了解所需的核心操作</p>
<p>我喜欢把这个舞台想象成一座桥梁，从你现在所在的地方到你想去的地方。</p>
<p>学习你需要做的事情的好处是你不必自己想出来。</p>
<p>很可能其他人已经得到了你想要的。</p>
<p>你要做的就是找到他们，跟着他们留下的痕迹走。</p>
<p>例如，如果你的目标是在365天内从0-7美元的数字上升到在线业务，那么你可能想要注册</p>
<p>Tim Denning的时事通讯，教你如何确切地做到这一点，在10个步骤。</p>
<p>这些步骤已经为你创造了，不要重新发明轮子。</p>
<blockquote>
<p><strong>Step 4:</strong> <em>Set implementation intentions</em></p>
<p>Now you’ve identified the actions required to get what you want, you must set intentions to implement them.</p>
<p>This is known as <strong>implementation intentions.</strong></p>
<p>They are commitments to perform an action at a specific time and location — you specify <em>what</em> you’re going to do <em>when</em> you’re going to do it, and <em>where.</em></p>
<p>The structure for an implementation intention is as follows:</p>
<blockquote>
<p>“I will [ACTION] at [TIME] in [LOCATION].”</p>
</blockquote>
<p>Let’s see some examples:
→ I will train using calisthenics and weighted exercises for 1 hour every weekday before work, from 7 am to 8 am, at the gym.
→ I will write down what I buy and its price whenever I purchase something with apple pay.
→ I will create content for my Medium blog for 2 hours daily, from 4 pm to 6 pm, in my home office.</p>
<p>Implementation intentions are a safety net for days when your motivation is depleted…</p>
<p>And there will be a few of those days.</p>
</blockquote>
<p>步骤4: 设置实现意图</p>
<p>现在您已经确定了获得您想要的东西所需要的行动，您必须设定实现它们的意图。</p>
<p>这就是所谓的实现意图。</p>
<p>它们是对在特定时间和地点执行某项行动的承诺ーー你要指定在什么时间、在什么地点执行该行动。</p>
<p>执行意向的结构如下:</p>
<p>“我会在[时间][地点][行动]。”</p>
<p>让我们看一些例子:</p>
<p>→每天工作日上班前，从早上7点到早上8点，在健身房进行1小时的健身操和加重练习。</p>
<p>→每当我用苹果支付购买东西时，我会写下我买的东西和它的价格。</p>
<p>→我将为我的媒体博客创建内容，每天2小时，从下午4点到下午6点，在我的家庭办公室。</p>
<p>当你的动力耗尽的时候，执行意图是一个安全网。</p>
<p>这样的日子还会有几天。</p>
<blockquote>
<p><strong>Step 5:</strong> <em>Review</em></p>
<p>The implementation intentions you initially set will build off proven  systems that you have adopted from people who have achieved what you  want.</p>
<p>But they may not necessarily work for you.</p>
<p>It’s vital you understand <a href="https://medium.com/swlh/dont-just-set-goals-build-systems-8158ac541df#6871">why systems are so effective</a> so you can adapt and improve them accordingly.</p>
<p>This involves tracking your progress to measure what is and is not working for you.</p>
<p>For example, I prefer to go to the gym in the mornings — when I feel more energized — but you may prefer to go after work.</p>
<p>In this scenario, I’d recommend you note how you feel after going to the  gym in the morning for a week or two. Then go to the gym after work and  do the same.</p>
<p>If you notice you’re more pumped after work, then update the system.</p>
</blockquote>
<p>第五步: 复习</p>
<p>您最初设置的实现意图将构建您已经从已经实现了您想要的人那里采用的经过验证的系统。</p>
<p>但它们未必对你有用。</p>
<p>了解系统为什么如此有效是至关重要的，这样您就可以相应地调整和改进它们。</p>
<p>这包括跟踪您的进度，以衡量哪些对您有效，哪些对您无效。</p>
<p>例如，我更喜欢在早上去健身房ーー当我感到精力充沛时ーー但你可能更喜欢在下班后去。</p>
<p>在这种情况下，我建议你注意一下早上去健身房锻炼一两周后的感觉。然后下班后去健身房，做同样的事情。</p>
<p>如果你注意到下班后精力更加充沛，那么就更新系统。</p>
<blockquote>
<h1 id="final-thoughts">Final Thoughts</h1>
<p>Goals are great for giving you a sense of direction, but they are not enough to move you forward.</p>
<p>You must build a system that allows you to continuously move towards your goal, even when you are void of motivation.</p>
<p>To create a system, simply:</p>
<ul>
<li>Define what you want</li>
<li>Identify why you want it</li>
<li>Learn the actions you must take</li>
<li>Set implementation intentions</li>
<li>Review the system</li>
</ul>
<p><em>Thanks for reading.</em></p>
</blockquote>
<p>最后的思考</p>
<p>目标对于给你一个方向感是很好的，但是它们不足以推动你前进。</p>
<p>你必须建立一个系统，允许你不断地朝着你的目标前进，即使你缺乏动力。</p>
<p>创建一个系统，简单：</p>
<ul>
<li>定义你想要的</li>
<li>明确你想要的</li>
<li>学习你必须采取的行动</li>
<li>设置实现意图</li>
<li>回顾系统</li>
</ul>
]]></content></item><item><title>Week1041_share</title><link>/posts/arts/week1041_share/</link><pubDate>Fri, 31 Mar 2023 15:45:49 +0000</pubDate><guid>/posts/arts/week1041_share/</guid><description>ARTS - Share 设计模式是什么？ 是软件设计中常见问题的的典型解决方案。他们就像能根据需求进行调整的预制蓝图，可用于解决代码中反复出现的设计问题。
设计模式与方法或库的使用方法不同，模式并不是一段特定的代码， 而是解决特定问题的一般性概念。可以根据模式来实现符合自己程序实际所需的解决方案。
人们常混淆模式和算法，因为两者概念都是已知问题的典型解决方案。但算法总是明确定义达成特定目标所需的一系列步骤，而模式是对解决方案的更高层次描述。同一模式在两个不同程序中的实现代码可能会不一样。
算法更像是菜谱：提供达成目标的明确步骤。而模式更像是蓝图：你可以看到最终的结果和模式的功能，但是需要自己确定实现步骤。
模式包含哪些内容？ 大部分模式都有正规的描述方式，以便在不同情况下使用。模式的描述通常会包括以下部分：
意图部分简单描述问题和解决方案 动机部分进一步解释问题并说明模式会如何提供解决方案。 结构部分展示模式的每个部分和他们之间的关系 在不同语言中的实现提供流行编程语言的代码，让读者更好的理解模式背后的思想。 如何学模式 设计模式是针对软件设计中常见问题的工具箱，工具就是各种经过实践验证的解决方案。模式能指导你如何使用面向对象的设计原则来解决各种问题 设计模式定义了一种让你和团队成员能够更高效沟通的通用语言。 模式的分类 所有模式可以根据其意图或目的来分类：
创建型模式 提供创建对象的机制，增加已有代码的灵活性和可复用性 结构性模式 介绍如何讲对象和类组装成较大的结构，并同事保持结构的灵活和高效 行为模式 负责对象间高效沟通和职责委派 模式目录 创建型模式 工厂方法 Factory Method 抽象工厂 Abstract Factory 生成器 Builder 原型 Prototype 单例 Singleton 结构型模式 Adapter 适配器 Bridge 桥接 组合 Composite Decorator 装饰 Facade 外观 Flyweight 享元模式 Proxy 代理 行为模式 Chain of Responsibility 责任链 Command 命令 Iterator 迭代器 Mediator 中介者 Memento 备忘录 Observer 观察者 State 状态 Strategy 策略 Template Method 模板方法 Visitor 访问者</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h3 id="设计模式是什么">设计模式是什么？</h3>
<p>是软件设计中常见问题的的典型解决方案。他们就像能根据需求进行调整的预制蓝图，可用于解决代码中反复出现的设计问题。</p>
<p>设计模式与方法或库的使用方法不同，模式并不是一段特定的代码， 而是解决特定问题的一般性概念。可以根据模式来实现符合自己程序实际所需的解决方案。</p>
<p>人们常混淆模式和算法，因为两者概念都是已知问题的典型解决方案。但算法总是明确定义达成特定目标所需的一系列步骤，而模式是对解决方案的更高层次描述。同一模式在两个不同程序中的实现代码可能会不一样。</p>
<p>算法更像是菜谱：提供达成目标的明确步骤。而模式更像是蓝图：你可以看到最终的结果和模式的功能，但是需要自己确定实现步骤。</p>
<h3 id="模式包含哪些内容">模式包含哪些内容？</h3>
<p>大部分模式都有正规的描述方式，以便在不同情况下使用。模式的描述通常会包括以下部分：</p>
<ul>
<li>意图部分简单描述问题和解决方案</li>
<li>动机部分进一步解释问题并说明模式会如何提供解决方案。</li>
<li>结构部分展示模式的每个部分和他们之间的关系</li>
<li>在不同语言中的实现提供流行编程语言的代码，让读者更好的理解模式背后的思想。</li>
</ul>
<h3 id="如何学模式">如何学模式</h3>
<ul>
<li>设计模式是针对软件设计中常见问题的工具箱，工具就是各种经过实践验证的解决方案。模式能指导你如何使用面向对象的设计原则来解决各种问题</li>
<li>设计模式定义了一种让你和团队成员能够更高效沟通的通用语言。</li>
</ul>
<h3 id="模式的分类">模式的分类</h3>
<p>所有模式可以根据其意图或目的来分类：</p>
<ul>
<li>创建型模式 提供创建对象的机制，增加已有代码的灵活性和可复用性</li>
<li>结构性模式 介绍如何讲对象和类组装成较大的结构，并同事保持结构的灵活和高效</li>
<li>行为模式 负责对象间高效沟通和职责委派</li>
</ul>
<h3 id="模式目录">模式目录</h3>
<h4 id="创建型模式">创建型模式</h4>
<ul>
<li>工厂方法 Factory Method</li>
<li>抽象工厂 Abstract Factory</li>
<li>生成器  Builder</li>
<li>原型 Prototype</li>
<li>单例 Singleton</li>
</ul>
<h4 id="结构型模式">结构型模式</h4>
<ul>
<li>Adapter 适配器</li>
<li>Bridge 桥接</li>
<li>组合 Composite</li>
<li>Decorator 装饰</li>
<li>Facade 外观</li>
<li>Flyweight 享元模式</li>
<li>Proxy 代理</li>
</ul>
<h4 id="行为模式">行为模式</h4>
<ul>
<li>Chain of Responsibility 责任链</li>
<li>Command 命令</li>
<li>Iterator 迭代器</li>
<li>Mediator 中介者</li>
<li>Memento 备忘录</li>
<li>Observer 观察者</li>
<li>State 状态</li>
<li>Strategy 策略</li>
<li>Template Method 模板方法</li>
<li>Visitor 访问者</li>
</ul>
]]></content></item><item><title>Week1041_snack</title><link>/posts/arts/week1041_snack/</link><pubDate>Fri, 31 Mar 2023 15:45:49 +0000</pubDate><guid>/posts/arts/week1041_snack/</guid><description>流批一体大数据架构 流批一体指的是流处理和批处理。
根据数据产生时间，划分为历史数据和实时数据，
根据数据明细粒度分为流水数据和切片数据；
根据数据处理方式按窗口大小分为流式处理与批式处理；
根据处理时延分为实时处理与离线处理。
流批一体包含两方面：
计算一体：同一套计算逻辑同时应用流处理和批处理，最终结果一致 存储一体：流处理与批处理过程中全程数据存储在同一介质 流批一体数仓 经典Lambda架构 Lambda 架构同时支持流计算与离线批处理，该架构有两条数据通道：
一条是实时的，使用消息系统结合实时流处理系统实现指标的实时计算，如采用Kafka存储 &amp;amp; Flink 计算
另一条非实时的，数据定时同步到仓库，批处理计算数仓分层数据模型。
存在缺点：
同一数据两份存储。一份用于实时流计算，一份用于离线批处理，耗资源、难保一致性 同一计算逻辑两套代码。指标计算，Lambda需要流处理、批处理各实现一次 需要集成多种组件支持不同类型应用。比如集成ES支持即席查询，postgresql支持复杂统计分析，导致架构和技术栈复杂 随着Flink引擎日趋完善，尤其在2020年发布Flink-1.12.0之后，逐渐出现了能切实解决上述问题的流批一体架构（Lambda plus，图1下半部分），采用该架构的数仓可称流批一体式数仓，即把Lambda架构的两条数据通道合并为一条，数据统一存储到一种介质中，且同一数据只需要存储一遍。流批一体式数仓主要体现在两方面：
数据积累（存储与处理）过程是流式的 数据积累后，支持批处理方式即席查询、统计分析等传统数仓支持的OLAP操作 从实现上看，Lambda plus架构利用Flink流表的相互转化实现了同一计算逻辑只需一套代码即可在流处理与批处理两种模式下得到一致结果。通用使用Flink cdc\状态计算等特性实现了历史数据+增量流水的连续处理。比如系统启动时利用Flink CDC 装载历史数据，再通过监听binlog将数据变动流水接入Flink; 或者利用Flink state&amp;amp;checkpoint特性从指定checkpoint恢复，以便在流水上接续计算，这样即可实现基于历史数据增量计算的目的。
总结 目前基于Flink的流批一体架构主要还是体现在计算引擎上的一体化，即流处理与批处理共同一套开发范式，一套代码，而存储的一体化上推出的Table store,虽然已经可以小规模使用，但是功能仍需健全 具有分布式计算、窗口计算、状态计算、流批一体计算等特性的Flink正逐渐成为实时流计算应用的主要引擎 流批一体式数仓是未来大数据架构发展趋势之一</description><content type="html"><![CDATA[<h2 id="流批一体大数据架构">流批一体大数据架构</h2>
<p><strong>流批一体</strong>指的是流处理和批处理。</p>
<p>根据数据产生时间，划分为历史数据和实时数据，</p>
<p>根据数据明细粒度分为流水数据和切片数据；</p>
<p>根据数据处理方式按窗口大小分为流式处理与批式处理；</p>
<p>根据处理时延分为实时处理与离线处理。</p>
<p><strong>流批一体</strong>包含两方面：</p>
<ol>
<li>计算一体：同一套计算逻辑同时应用流处理和批处理，最终结果一致</li>
<li>存储一体：流处理与批处理过程中全程数据存储在同一介质</li>
</ol>
<h3 id="流批一体数仓">流批一体数仓</h3>
<h4 id="经典lambda架构">经典Lambda架构</h4>
<p>Lambda 架构同时支持流计算与离线批处理，该架构有两条数据通道：</p>
<p>一条是实时的，使用消息系统结合实时流处理系统实现指标的实时计算，如采用Kafka存储 &amp; Flink 计算</p>
<p>另一条非实时的，数据定时同步到仓库，批处理计算数仓分层数据模型。</p>
<p>存在缺点：</p>
<ol>
<li>同一数据两份存储。一份用于实时流计算，一份用于离线批处理，耗资源、难保一致性</li>
<li>同一计算逻辑两套代码。指标计算，Lambda需要流处理、批处理各实现一次</li>
<li>需要集成多种组件支持不同类型应用。比如集成ES支持即席查询，postgresql支持复杂统计分析，导致架构和技术栈复杂</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8dpb9q0hjj30fd0fk755.jpg" alt="img"></p>
<p>随着Flink引擎日趋完善，尤其在2020年发布Flink-1.12.0之后，逐渐出现了能切实解决上述问题的流批一体架构（Lambda  plus，图1下半部分），采用该架构的数仓可称流批一体式数仓，即把Lambda架构的两条数据通道合并为一条，数据统一存储到一种介质中，且同一数据只需要存储一遍。流批一体式数仓主要体现在两方面：</p>
<ol>
<li>数据积累（存储与处理）过程是流式的</li>
<li>数据积累后，支持批处理方式即席查询、统计分析等传统数仓支持的OLAP操作</li>
</ol>
<p>从实现上看，Lambda plus架构利用Flink流表的相互转化实现了同一计算逻辑只需一套代码即可在流处理与批处理两种模式下得到一致结果。通用使用Flink cdc\状态计算等特性实现了历史数据+增量流水的连续处理。比如系统启动时利用Flink CDC 装载历史数据，再通过监听binlog将数据变动流水接入Flink; 或者利用Flink state&amp;checkpoint特性从指定checkpoint恢复，以便在流水上接续计算，这样即可实现基于历史数据增量计算的目的。</p>
<h3 id="总结">总结</h3>
<ol>
<li>目前基于Flink的流批一体架构主要还是体现在计算引擎上的一体化，即流处理与批处理共同一套开发范式，一套代码，而存储的一体化上推出的Table store,虽然已经可以小规模使用，但是功能仍需健全</li>
<li>具有分布式计算、窗口计算、状态计算、流批一体计算等特性的Flink正逐渐成为实时流计算应用的主要引擎</li>
<li>流批一体式数仓是未来大数据架构发展趋势之一</li>
</ol>
]]></content></item><item><title>Week1042_algorithm</title><link>/posts/arts/week1042_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:49 +0000</pubDate><guid>/posts/arts/week1042_algorithm/</guid><description>ARTS - Algorithm - 119. 杨辉三角 II 杨辉三角 II 给定一个非负索引 rowIndex，返回「杨辉三角」的第 rowIndex 行。
在「杨辉三角」中，每个数是它左上方和右上方的数的和。
分析 根据上一题，返回前n层的杨辉三角，我们已经有逻辑了，所以直接使用就能用，代码如下：
class Solution { public List&amp;lt;Integer&amp;gt; getRow(int rowIndex) { return getList(rowIndex + 1).get(rowIndex); } /** * 返回前n行杨辉三角 * @param n */ public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; getList(int n) { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; n; i++) { List&amp;lt;Integer&amp;gt; layer = new ArrayList&amp;lt;&amp;gt;(); for (int j = 0; j &amp;lt; i + 1; j++) { if (j == 0 || j == i) { layer.</description><content type="html"><![CDATA[<h2 id="arts---algorithm----119-杨辉三角-iihttpsleetcodecnproblemspascals-triangle-iidescription">ARTS - Algorithm -  <a href="https://leetcode.cn/problems/pascals-triangle-ii/description/">119. 杨辉三角 II</a></h2>
<ol start="119">
<li>杨辉三角 II</li>
</ol>
<p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code> 行。</p>
<p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p>
<h3 id="分析">分析</h3>
<p>根据上一题，返回前n层的杨辉三角，我们已经有逻辑了，所以直接使用就能用，代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getRow</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> rowIndex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> getList<span style="color:#f92672">(</span>rowIndex <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">).</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>rowIndex<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 返回前n行杨辉三角
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param n
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">getList</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> n<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> list <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> n<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> layer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>j <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> j <span style="color:#f92672">==</span> i<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    layer<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span>  <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    layer<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>list<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">).</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>j <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">).</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>j<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>layer<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> list<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>提交通过</p>
<p><img src="http://qiniu.honeywen.com/img/image-20230128152649719.png" alt="image-20230128152649719"></p>
<p><strong>进阶：</strong></p>
<p>你可以优化你的算法到 <code>O(rowIndex)</code> 空间复杂度吗？</p>
<p>我们开始优化代码，我们目前的逻辑是，需要第n层，就把1-n层都生成一遍，然后取出来第n层返回，是否有办法跳过前面的n-1层，直接生成第n层？ 就是转换成一个数学问题，找到层数，与数列的对应关系， 这应该是最终的解决方案，如果暂时想不到，就考虑在目前基础上优化。</p>
<p>首先优化空间，我们只需要上一层的数列就够了，不用把每一组都存下来，于是首先改造成：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getList</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> rowIndex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> prev <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;=</span> rowIndex<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> list <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>j <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span>  j<span style="color:#f92672">==</span> i <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>prev<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>j <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> prev<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>j<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            prev <span style="color:#f92672">=</span> list<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> prev<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1042_learn</title><link>/posts/arts/week1042_learn/</link><pubDate>Fri, 31 Mar 2023 15:45:49 +0000</pubDate><guid>/posts/arts/week1042_learn/</guid><description>AC自动机 AC 就是一种多模式字符串匹配算法。多模式匹配算法就是在一个主串中查找多个模式串。
原理 AC自动机算法是构造一个Trie数，然后再添加额外的失配指针。这些额外的失配指针在查找字符串失败的时候进行回退(例如在Trie树中查找单词bef失败后，但是在Trie树中存在bea这个单词，失配指针会指向前缀be), 转向某些前缀分支，免于重复匹配前缀，提高算法效率.
假设现有模式字符串集合： {abd, abdk, abchijn, chnit, ijabdf, ijaij} 构建AC自动机。</description><content type="html"><![CDATA[<h2 id="ac自动机httpswwwcnblogscomnullzxp7499397html"><a href="https://www.cnblogs.com/nullzx/p/7499397.html">AC自动机</a></h2>
<p>AC 就是一种多模式字符串匹配算法。多模式匹配算法就是在一个主串中查找多个模式串。</p>
<h3 id="原理">原理</h3>
<p>AC自动机算法是构造一个Trie数，然后再添加额外的失配指针。这些额外的失配指针在查找字符串失败的时候进行回退(例如在Trie树中查找单词bef失败后，但是在Trie树中存在bea这个单词，失配指针会指向前缀be), 转向某些前缀分支，免于重复匹配前缀，提高算法效率.</p>
<p>假设现有模式字符串集合： {abd, abdk, abchijn, chnit, ijabdf, ijaij} 构建AC自动机。</p>
]]></content></item><item><title>Week1042_review</title><link>/posts/arts/week1042_review/</link><pubDate>Fri, 31 Mar 2023 15:45:49 +0000</pubDate><guid>/posts/arts/week1042_review/</guid><description>ARTS - Review Python StringIO and BytesIO Compared With Open()
Python使用open方法的字符流和字节流比较
StringIO and BytesIO are methods that manipulate string and bytes data in memory. StringIO is used for string data and BytesIO is used for binary data. This classes create file like object that operate on string data. The StringIO and BytesIO classes are most useful in scenarios where you need to mimic a normal file. 字符IO和字节IO是在内存中操纵字符字节数据的方法 字符IO用在字符数据，字节IO用作二进制数据 此类创建对字符串数据进行操作的类似于文件的对象。 StringIO 和 BytesIO 类在需要模拟普通文件的场景中最为有用。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<p><a href="https://medium.com/swlh/python-stringio-and-bytesio-compared-with-open-c0e99b9def31">Python StringIO and BytesIO Compared With Open()</a></p>
<p>Python使用open方法的字符流和字节流比较</p>
<blockquote>
<ol>
<li>StringIO and BytesIO are methods that manipulate string and bytes data in memory.</li>
<li>StringIO is used for string data and BytesIO is used for binary data.</li>
<li>This classes create file like object that operate on string data.</li>
<li>The StringIO and BytesIO classes are most useful in scenarios where you need to mimic a normal file.</li>
</ol>
</blockquote>
<ol>
<li>字符IO和字节IO是在内存中操纵字符字节数据的方法</li>
<li>字符IO用在字符数据，字节IO用作二进制数据</li>
<li>此类创建对字符串数据进行操作的类似于文件的对象。</li>
<li>StringIO 和 BytesIO 类在需要模拟普通文件的场景中最为有用。</li>
</ol>
]]></content></item><item><title>Week1042_share</title><link>/posts/arts/week1042_share/</link><pubDate>Fri, 31 Mar 2023 15:45:49 +0000</pubDate><guid>/posts/arts/week1042_share/</guid><description>ARTS - Share 使用docker部署python web工程 步骤 创建一个flask app，并运行 编写Dockerfile, 制作 docker image 运行container 创建一个flask app 首先根据官网安装python依赖的Flask。
之后参考官网：Quickstart
新建文件夹 first_py_docker 在文件夹 first_py_docker下新建 src目录 在src目录下新建requirements.txt，并写入 flask==2.2.2 在src目录下新建main.py文件 在 main.py里输入flask官网示例: from flask import Flask app = Flask(__name__) @app.route(&amp;#34;/&amp;#34;) def hello_world(): return &amp;#34;&amp;lt;h1&amp;gt;hello world!&amp;lt;/h1&amp;gt;&amp;#34; 运行flask 浏览器访问：
成功！
编写Dockerfile, 制作 docker image 根据docker官网Dockerfile文档 来制作Dockerfile
在first-py_docker 目录下新建文件 Dockefile , 根据文档编写如下：
FROM python:3.8-slim-buster WORKDIR /src COPY src/requirements.txt requirements.txt RUN pip install --no-cache-dir -r requirements.txt COPY . . CMD [ &amp;#34;python&amp;#34;, &amp;#34;-m&amp;#34;, &amp;#34;flask&amp;#34;, &amp;#34;--app=src/main&amp;#34;, &amp;#34;run&amp;#34;] 接下来根据Dockerfile制作 docker image</description><content type="html"><![CDATA[<h2 id="arts---share--使用docker部署python-web工程">ARTS - Share  使用docker部署python web工程</h2>
<h3 id="步骤">步骤</h3>
<ol>
<li>创建一个flask app，并运行</li>
<li>编写Dockerfile, 制作 docker image</li>
<li>运行container</li>
</ol>
<h4 id="创建一个flask-app">创建一个flask app</h4>
<p>首先根据官网安装python依赖的Flask。</p>
<p>之后参考官网：<a href="https://flask.palletsprojects.com/en/2.2.x/quickstart/">Quickstart</a></p>
<ul>
<li>新建文件夹 <code>first_py_docker</code></li>
<li>在文件夹 first_py_docker下新建 <code>src</code>目录</li>
<li>在src目录下新建<code>requirements.txt</code>，并写入 <code>flask==2.2.2</code></li>
<li>在src目录下新建<code>main.py</code>文件</li>
<li>在 main.py里输入flask官网示例:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> flask <span style="color:#f92672">import</span> Flask
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app <span style="color:#f92672">=</span> Flask(__name__)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#34;/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hello_world</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&lt;h1&gt;hello world!&lt;/h1&gt;&#34;</span>
</span></span></code></pre></div><ul>
<li>运行flask</li>
</ul>
<p><img src="http://qiniu.honeywen.com/img/image-20230129125306316.png" alt="image-20230129125306316"></p>
<p>浏览器访问：</p>
<p><img src="http://qiniu.honeywen.com/img/image-20230129125340482.png" alt="image-20230129125340482"></p>
<p>成功！</p>
<h4 id="编写dockerfile-制作-docker-image">编写Dockerfile, 制作 docker image</h4>
<p>根据<a href="https://docs.docker.com/engine/reference/builder/">docker官网Dockerfile文档</a> 来制作Dockerfile</p>
<p>在first-py_docker 目录下新建文件 Dockefile , 根据文档编写如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:3.8-slim-buster </span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /src</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> src/requirements.txt requirements.txt<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install --no-cache-dir -r requirements.txt <span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [ <span style="color:#e6db74">&#34;python&#34;</span>, <span style="color:#e6db74">&#34;-m&#34;</span>, <span style="color:#e6db74">&#34;flask&#34;</span>, <span style="color:#e6db74">&#34;--app=src/main&#34;</span>, <span style="color:#e6db74">&#34;run&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>接下来根据Dockerfile制作 docker image</p>
<p><code>docker build --tag first-py-docer .</code></p>
<h4 id="运行container">运行container</h4>
<p>根据上一步制作成功的image, 把它运行起来 , 参考 <a href="https://docs.docker.com/engine/reference/run/">docker run</a></p>
<p><code>docker run -p 5000:5000 first-py-docer   </code></p>
<p><img src="http://qiniu.honeywen.com/img/image-20230129130621257.png" alt="image-20230129130621257"></p>
<p>报错，说5000端口已经被使用了， 我们先改变端口为4000，先运行成功再回头看问题。</p>
<p>去flask官网找如何<a href="https://flask.palletsprojects.com/en/2.2.x/cli/#setting-command-options">改变端口的文档 </a>， 知道了使用 &ndash;port 4000 来改端口，我们重新运行 flask app测试成功，此时要修改Dockerfile的命令</p>
<p><code> CMD [ &quot;python&quot;, &quot;-m&quot;, &quot;flask&quot;, &quot;--app=src/main&quot;, &quot;run&quot;, &quot;--port=4000&quot;]</code>，</p>
<p>重新build image (注意先删掉老的image或换个名字)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker run -p 4000:4000 first-py-docker
</span></span></code></pre></div><p>运行成功， 浏览器访问 ，发现无法正常返回。</p>
<p><img src="http://qiniu.honeywen.com/img/image-20230129131732958.png" alt="image-20230129131732958"></p>
<p>去查找问题，找到了这个答案： <a href="https://stackoverflow.com/questions/30323224/deploying-a-minimal-flask-app-in-docker-server-connection-issues">Deploying a minimal flask app in docker - server connection issues</a></p>
<p>回答说是这样：</p>
<p><img src="http://qiniu.honeywen.com/img/image-20230129131952618.png" alt="image-20230129131952618"></p>
<p>问题是绑定了localhost接口，你如果想要docker外部访问容器，需要绑定到0.0.0.0, 改变方法是 flask 指定host ， 我们可以在启动flask时候指定，修改Dockerfile的CMD 命令如下：</p>
<p><code>CMD [ &quot;python&quot;, &quot;-m&quot;, &quot;flask&quot;, &quot;--app=src/main&quot;, &quot;run&quot;, &quot;--port=4000&quot;, &quot;--host=0.0.0.0&quot;]</code></p>
<p>重新build ,run ，启动成功，浏览器访问成功！。</p>
<p>源码地址github : <a href="https://github.com/wangweiomg/first-py-docker">https://github.com/wangweiomg/first-py-docker</a></p>
<h3 id="错误分析">错误分析</h3>
<ul>
<li>报错本地 5000端口占用，但是为何flask 本地起来能访问？</li>
<li>为什么需要改变flask host才能在外访问docker?</li>
</ul>
]]></content></item><item><title>Week1042_tip</title><link>/posts/arts/week1042_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:49 +0000</pubDate><guid>/posts/arts/week1042_tip/</guid><description>ARTS - Tip - LLM 大型语言模型 (LLM) ChatGPT 是否带来了NLP乃至AI领域的研究范式转换？如果是，那会带来怎样的影响？ LLM从海量数据中学到了什么知识？LLM又是如何存取这些知识的？ 随着LLM规模逐步增大，会带来什么影响？ 什么是In Context Learning? 为什么它是一项很神秘的技术？它和Instruct 又是什么关系？ LLM具备推理能力吗？思维CoT 又是怎么做的？ NLP研究范式的转换 范式转换1.0：从深度学习到两阶段预训练模型 时间范围，大致在深度学习引入NLP领域(2013年左右)， 到GPT 3.0 出现之前(2020年5月左右)。
在Bert 和 GPT模型出现之前，NLP领域流行的技术是深度学习模型，而NLP领域的深度学习，主要依托一下几项关键技术：
以大量的改进LSTM模型及少量的改进CNN模型作为典型的特征抽取器 以Sequence to Sequence (或叫 encoder-decoder亦可) + Attention 作为各种具体任务典型的总体技术框架 在这些核心技术加持下，NLP领域深度学习的主要研究目标，如果归纳一下，是如何有效增加模型层深或模型参数容量。就是说，怎么才能王encoder和decoder里不断叠加更深的LSTM或CNN层，来达成增加层深和模型容量的目标。 这种努力，尽管确实不断增加了模型层深，但是从解决具体任务的效果角度看，总体而言不算很成功，或者说和非深度学习方法相比，带来的优势不算大。
深度学习之所以不够成功，我认为主要原因来自于两个方面：
一方面是某个具体任务有限的训练数据总量。
​ 随着模型容量的增加，需要靠更大量的训练数据来支撑，否则及时你把深度做起来，任务效果也做不上去。而在预训练模型出现之前，很明显这是NLP研究领域一个严重问题；
另一个方面是LSTM/CNN特征抽取器，表达能力不够强。
​ 计算给你再多的数据也没用，因为你不能有效的吸收数据里蕴含的知识。
主要应该是这两个原因，阻碍了深度学习在NLP领域的成功突围。
Bert/GPT 这两个预训练模型的出现，无论在学术研究角度看，还是工业应用角度看，都代表了NLP领域的一个技术飞跃，并带来了两个领域研究范式的转换。这种范式转换带来的影响，体现在两个方面：
首先，是部分NLP研究子领域的衰退乃至逐步消亡；
其次，NLP不同子领域的技术方法和技术框架日趋统一，在Bert出现后一年左右，技术栈基本收敛到两种技术模式中。
影响一：中间任务的消亡
NLP 是一个宏观研究领域的统称，有各种子领域与子方向，如果从任务的性质角度，可以把任务分成两大类，一类叫中间任务，依赖叫最终任务。
典型中间任务包括：中文分词、词性标注、NER、句法分析、指代消解、语义Parser等，这类任务一般不解决应用中的实际需求，大多数是作为哪些解决实际需求任务的中间阶段或者辅助阶段存在的。最终任务包括文本分类、文本相似性计算、机器翻译、文本摘要等。这类任务特点是每个子领域都解决某个实际需求，任务结果基本能直接呈现用户。
按理说，中间任务不该出现，这是NLP技术发展水平不够高的一种体现。从Bert/GPT出现后，其实就没必要做中间任务了，因为通过大量的预训练，Bert/GPT 已经把这些中间任务作为语言学特征，吸收到了Transformer的参数里，此时我们完全可以端到端直接解决那些最终任务，而无需对这种中间过程专门建模。
影响二：不同研究方向技术路线的统一
如果对最终任务进一步分类，大致分为两大不同类型的任务：自然语言理解类任务和自然语言生成类任务。如果排除掉中间任务的话，典型的自然语言理解类任务包括文本分类、句子关系判断、情感倾向判断等，这种任务本质上都是分类任务，就是说输入一个句子，或者两个句子，模型参考所有输入内容，最后给出属于哪个类别的判断。生成类也包含很多NLP研究子方向，如聊天机器人、机器翻译、问答系统等。生成类任务的特点是给定输入文本，对应的模型要生成一串输出文本。
自从Bert/GPT模型诞生后，出现了明显的技术统一趋向。首先NLP不同子领域，特征抽取器都逐渐从LSTM/CNN统一到Transformer上。Transfomer不仅同意了NLP诸多领域，也逐渐替换图像处理各种任务中被广泛使用的CNN等其他模型的进程之中，类似的，多模态模型目前也基本采用了Transformer模型。
其次，大多数NLP子领域的研发模式切换到了两阶段模式：模型预训练阶段+应用微调(Fine-tuning)或者应用Zero/Few Shot Prompt模式。更准确说，NLP各种任务其实收敛到了两个而不同的预训练模型框架里：对于自然语言理解类任务，其技术体系统一到了以GPT2.0为代表的自回归语言模型+Zero/Few Shot Prompt模式。
范式转换2.0：从预训练模型走向通用人工智能（AGI，Artificial General Intelligence） 这个范式转换所涵盖的时间范围，大致在GPT3.0出现之后(2020年6月左右)，知道目前为止，我们应该处于这个范式转换过程中。
ChatGPT 是出发这次范型转换的关键节点，但是在InstructGPT出现之前，其实LLM处于这次范式转换前的一个过渡期。</description><content type="html"><![CDATA[<h2 id="arts---tip----llm">ARTS - Tip  - LLM</h2>
<h2 id="大型语言模型-llmhttpszhuanlanzhihucomp597586623"><a href="https://zhuanlan.zhihu.com/p/597586623">大型语言模型 (LLM)</a></h2>
<ul>
<li>ChatGPT 是否带来了NLP乃至AI领域的研究范式转换？如果是，那会带来怎样的影响？</li>
<li>LLM从海量数据中学到了什么知识？LLM又是如何存取这些知识的？</li>
<li>随着LLM规模逐步增大，会带来什么影响？</li>
<li>什么是In Context Learning? 为什么它是一项很神秘的技术？它和Instruct 又是什么关系？</li>
<li>LLM具备推理能力吗？思维CoT 又是怎么做的？</li>
</ul>
<h3 id="nlp研究范式的转换">NLP研究范式的转换</h3>
<h4 id="范式转换10从深度学习到两阶段预训练模型">范式转换1.0：从深度学习到两阶段预训练模型</h4>
<p>时间范围，大致在深度学习引入NLP领域(2013年左右)， 到GPT 3.0 出现之前(2020年5月左右)。</p>
<p>在Bert 和 GPT模型出现之前，NLP领域流行的技术是深度学习模型，而NLP领域的深度学习，主要依托一下几项关键技术：</p>
<ul>
<li>以大量的改进LSTM模型及少量的改进CNN模型作为典型的特征抽取器</li>
<li>以Sequence to Sequence (或叫 encoder-decoder亦可) + Attention 作为各种具体任务典型的总体技术框架</li>
</ul>
<p>在这些核心技术加持下，NLP领域深度学习的主要研究目标，如果归纳一下，是如何有效增加模型层深或模型参数容量。就是说，怎么才能王encoder和decoder里不断叠加更深的LSTM或CNN层，来达成增加层深和模型容量的目标。 这种努力，尽管确实不断增加了模型层深，但是从解决具体任务的效果角度看，总体而言不算很成功，或者说和非深度学习方法相比，带来的优势不算大。</p>
<p>深度学习之所以不够成功，我认为主要原因来自于两个方面：</p>
<p>一方面是某个具体任务有限的训练数据总量。</p>
<p>​	随着模型容量的增加，需要靠更大量的训练数据来支撑，否则及时你把深度做起来，任务效果也做不上去。而在预训练模型出现之前，很明显这是NLP研究领域一个严重问题；</p>
<p>另一个方面是LSTM/CNN特征抽取器，表达能力不够强。</p>
<p>​	计算给你再多的数据也没用，因为你不能有效的吸收数据里蕴含的知识。</p>
<p>主要应该是这两个原因，阻碍了深度学习在NLP领域的成功突围。</p>
<p>Bert/GPT 这两个预训练模型的出现，无论在学术研究角度看，还是工业应用角度看，都代表了NLP领域的一个技术飞跃，并带来了两个领域研究范式的转换。这种范式转换带来的影响，体现在两个方面：</p>
<p>首先，是部分NLP研究子领域的衰退乃至逐步消亡；</p>
<p>其次，NLP不同子领域的技术方法和技术框架日趋统一，在Bert出现后一年左右，技术栈基本收敛到两种技术模式中。</p>
<p><strong>影响一：中间任务的消亡</strong></p>
<p>NLP 是一个宏观研究领域的统称，有各种子领域与子方向，如果从任务的性质角度，可以把任务分成两大类，一类叫中间任务，依赖叫最终任务。</p>
<p>典型中间任务包括：中文分词、词性标注、NER、句法分析、指代消解、语义Parser等，这类任务一般不解决应用中的实际需求，大多数是作为哪些解决实际需求任务的中间阶段或者辅助阶段存在的。最终任务包括文本分类、文本相似性计算、机器翻译、文本摘要等。这类任务特点是每个子领域都解决某个实际需求，任务结果基本能直接呈现用户。</p>
<p>按理说，中间任务不该出现，这是NLP技术发展水平不够高的一种体现。从Bert/GPT出现后，其实就没必要做中间任务了，因为通过大量的预训练，Bert/GPT 已经把这些中间任务作为语言学特征，吸收到了Transformer的参数里，此时我们完全可以端到端直接解决那些最终任务，而无需对这种中间过程专门建模。</p>
<p><strong>影响二：不同研究方向技术路线的统一</strong></p>
<p>如果对最终任务进一步分类，大致分为两大不同类型的任务：自然语言理解类任务和自然语言生成类任务。如果排除掉中间任务的话，典型的自然语言理解类任务包括文本分类、句子关系判断、情感倾向判断等，这种任务本质上都是分类任务，就是说输入一个句子，或者两个句子，模型参考所有输入内容，最后给出属于哪个类别的判断。生成类也包含很多NLP研究子方向，如聊天机器人、机器翻译、问答系统等。生成类任务的特点是给定输入文本，对应的模型要生成一串输出文本。</p>
<p>自从Bert/GPT模型诞生后，出现了明显的技术统一趋向。首先NLP不同子领域，特征抽取器都逐渐从LSTM/CNN统一到Transformer上。Transfomer不仅同意了NLP诸多领域，也逐渐替换图像处理各种任务中被广泛使用的CNN等其他模型的进程之中，类似的，多模态模型目前也基本采用了Transformer模型。</p>
<p>其次，大多数NLP子领域的研发模式切换到了两阶段模式：模型预训练阶段+应用微调(Fine-tuning)或者应用Zero/Few Shot Prompt模式。更准确说，NLP各种任务其实收敛到了两个而不同的预训练模型框架里：对于自然语言理解类任务，其技术体系统一到了以GPT2.0为代表的自回归语言模型+Zero/Few Shot Prompt模式。</p>
<h4 id="范式转换20从预训练模型走向通用人工智能agiartificial-general-intelligence">范式转换2.0：从预训练模型走向通用人工智能（AGI，Artificial General Intelligence）</h4>
<p>这个范式转换所涵盖的时间范围，大致在GPT3.0出现之后(2020年6月左右)，知道目前为止，我们应该处于这个范式转换过程中。</p>
<p>ChatGPT 是出发这次范型转换的关键节点，但是在InstructGPT出现之前，其实LLM处于这次范式转换前的一个过渡期。</p>
<p><strong>过渡期：以GPT3.0为代表的 自回归语言模型+Prompting模式占据统治地位</strong></p>
<p>两个原因：</p>
<p>首先Google T5模型，在形式上统一了自然语言理解和自然语言生成任务的外在表现形式。</p>
<p>第二个原因，想要0示例提示或少数示例提示语的方式做好任务，必须采取GPT模式。</p>
<p>为什么要追求Zero shot(0示例提示语)/few shot prompting(少数示例提示语)的方式来做任务呢？</p>
<p>首先要搞清楚，什么样的LLM模型，对我们是最理想的？</p>
<ul>
<li>首先LLM要有强大的自主学习能力</li>
<li>其次LLM应该能解决NLP任何子领域的问题，最好是任意领域的问题都能得到很好的回答</li>
<li>再者，我们使用LLM解决某个领域问题时候，应该用人类习惯的表达方式，就是说LLM应该理解人类命令</li>
</ul>
<p>所以，为什么要追求Zero shot / few shot prompting 来做任务?</p>
<p>第一，这个LLM模型规模必然非常巨大，有能力做出这个模型或改动这个模型参数的机构必然少。而任务需求方是千万中小机构或个人，就算把模型开源，他们也无力部署这个模型，更不用说用Fine-tuning模式来修改模型参数了。所以我们应该追求不修正模型参数，就能让任务需求完成任务的方式。这也是为何超大模型一定会追求走向AGI的现实因素。</p>
<p>第二，zero shot  prompting ,few shot prompting ，甚至促进LLM推理能力的思维链(CoT , Chain of Thought) Prompting 。zero shot prompting的初衷，其实就是人类和LLM的理想接口，直接用人类习惯的任务表述方式让LLM做事情，但是发现LLM并不能很好的理解，效果也不好。继续研究发现，对于某项任务，如果给LLM 几个示例，用这些示例来代表任务描述，效果比zero shot prompting好，于是大家都去研究更好的few shot prompting技术。所以，few shot prompting 或者In Context Learning是一种过渡时期的技术。</p>
<p>ChatGPT 的出现，改变了这个现状，用Instruct 取代了Prompting， 由此带来新的技术范式转换，并产生若干后续影响。</p>
<p><strong>影响一：让LLM适配人的新型交互接口</strong></p>
<p>ChatGPT应该是目前所有的现有技术里，最接近理想LLM的技术方法。如果归纳下ChatGPT最突出特点的话，我会用下面八个字：“能力强大，善解人意”。</p>
<p>可以看出，ChatGPT的最大贡献在于：基本实现了理想LLM的接口层，让LLM适配人的习惯命令表达方式，而不是反过来让人去适配LLM，绞尽脑汁地想出一个能Work的命令（这就是instruct技术出来之前，prompt技术在做的事情），而这增加了LLM的易用性和用户体验。是InstructGPT/ChatGPT首先意识到这个问题，并给出了很好的解决方案，这也是它最大的技术贡献。相对之前的few shot prompting，它是一种更符合人类表达习惯的人和LLM进行交互的人机接口技术。</p>
<p>而这必将启发后续的LLM模型，继续在易用人机接口方面做进一步的工作，让LLM更听话。</p>
<p><strong>影响二：很多NLP子领域不再具备独立研究价值</strong></p>
<p>ChatGPT证明了我们现在是可以直接去追求理想LLM模型的，那么，未来的技术发展趋势应该是：追求规模越来越大的LLM模型，通过增加预训练数据的多样性，来涵盖越来越多的领域，LLM自主从领域数据中通过预训练过程学习领域知识，随着模型规模不断增大，很多问题随之得到解决。研究重心会投入到如何构建这个理想LLM模型，而非去解决某个领域的具体问题。这样，越来越多NLP的子领域会被纳入LLM的技术体系，进而逐步消失。</p>
<p><strong>影响三：更多NLP之外的研究领域将被纳入LLM技术体系</strong></p>
<p>接下来，我们来梳理下GPT 3.0之后LLM模型的主流技术进展。如理想LLM模型所示，相关的技术其实可以分为两大类；一类是关于LLM模型如何从数据中吸收知识，也包括模型规模增长对LLM吸收知识能力带来的影响；第二类是关于人如何使用LLM内在能力来解决任务的人机接口，包括In Context Learning和Instruct两种模式。思维链（CoT）prompting这种LLM推理技术，本质上也属于In Context Learning，因为比较重要，我就把它们单独拎出来讲一下。</p>
<h4 id="学习者从无尽数据到海量知识">学习者：从无尽数据到海量知识</h4>
<p>从目前研究结果看，Transformer是足够强大的特征抽取器，尚不需要做特别的改进。那么通过预训练过程，Transformer学到了什么？知识是如何存取的？我们又如何修正错误知识？本节讲述这方面的研究进展。</p>
<p><strong>求知之路：LLM学到了什么知识</strong></p>
<p>LLM从海量自由文本中学习了大量知识，如果把这些知识做粗略分类的话，可以分为语言类知识和世界知识两大类。</p>
<p><strong>记忆之地：LLM如何存取知识</strong></p>
<p>显然，知识一定存储在Transformer的模型参数里。从Transformer的结构看，模型参数由两部分构成：多头注意力（MHA）部分占了大约参数总体的三分之一，三分之二的参数集中在FFN结构中。MHA主要用于计算单词或知识间的相关强度，并对全局信息进行集成，更可能是在建立知识之间的联系，大概率不会存储具体知识点，那么很容易推论出LLM模型的知识主体是存储在Transformer的FFN结构里。</p>
<p><strong>知识涂改液：如何修正LLM里存储的知识</strong></p>
<p>第一类方法从训练数据的源头来修正知识</p>
<p>第二类方法是对LLM模型做一次fine-tuning来修正知识</p>
<p>另外一类方法直接修改LLM里某些知识对应的模型参数来修正知识</p>
<h3 id="规模效应当llm越来越大时会发生什么">规模效应：当LLM越来越大时会发生什么</h3>
<p>我们可以选择放大训练数据，并同比例地减少LLM模型参数，以达到在不降低模型效果的前提下，极大缩小模型规模的目的。缩小模型规模有很多好处，比如在应用的时候，推理速度会快很多等，无疑这是一个很有前途的LLM发展路线。</p>
<p><strong>人机接口:从In Context Learning到Instruct理解</strong></p>
<p><strong>智慧之光：如何增强LLM的推理能力</strong></p>
<p>目前很多研究已证明LLM对于知识具有强大的记忆能力，但是，一般我们不会因为一个人记忆能力强，就说这人很聪明，是否具有强大的推理能力，往往是我们判断一个人是否聪明的重要标准。类似的，如果LLM的效果想让人觉得很惊艳，强大的推理能力是必备的。推理能力本质上是综合运用很多相关知识点，去推导出新知识或新结论。关于LLM的推理能力，是最近一年来LLM里最重要和热门的研究领域之一。于是，我们关心的问题就是：LLM具备推理能力吗？如果具备，那么它的推理能力够强吗？</p>
<p>这两个问题目前的答案似乎应该是：当模型规模足够大的时候，LLM本身是具备推理能力的，在简单推理问题上，LLM已经达到了很好的能力，但是复杂推理问题上，还需要更多深入的研究。</p>
<p><strong>未来之路：LLM研究趋势及值得研究的重点方向</strong></p>
]]></content></item><item><title>Week1043_Algorithm</title><link>/posts/arts/week1043_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:49 +0000</pubDate><guid>/posts/arts/week1043_algorithm/</guid><description>ARTS - Algorithm - 191. 位1的个数 - 力扣（Leetcode） 题目 位1的个数 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 &amp;lsquo;1&amp;rsquo; 的个数（也被称为汉明重量）。
提示：
请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。 分析 按位与， 每一位与1进行按位与， 是1就计数器加一，由于int 是32位整数， 就直接迭代32次。
代码：
public class Solution { // you need to treat n as an unsigned value public int hammingWeight(int n) { int count = 0; for (int i = 0; i &amp;lt; 32; i++) { if ((n &amp;amp; 1) == 1) { count++; } n = n &amp;gt;&amp;gt; 1; } return count; } } 看官方题解后， 发现其实可以不用修改输入 n 的值，改造我们的代码，其实引入 1 来做位移就够了</description><content type="html"><![CDATA[<h2 id="arts---algorithm---191-位1的个数---力扣leetcodehttpsleetcodecnproblemsnumber-of-1-bitsdescription">ARTS - Algorithm - <a href="https://leetcode.cn/problems/number-of-1-bits/description/">191. 位1的个数 - 力扣（Leetcode）</a></h2>
<h3 id="题目">题目</h3>
<ol start="191">
<li>位1的个数</li>
</ol>
<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 &lsquo;1&rsquo; 的个数（也被称为<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F">汉明重量</a>）。</p>
<p><strong>提示：</strong></p>
<ul>
<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>
<li>在 Java 中，编译器使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284">二进制补码</a>记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数 <code>-3</code>。</li>
</ul>
<h3 id="分析">分析</h3>
<p>按位与， 每一位与1进行按位与， 是1就计数器加一，由于int 是32位整数， 就直接迭代32次。</p>
<p>代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// you need to treat n as an unsigned value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">hammingWeight</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> n<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">32</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>n <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                count<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            n <span style="color:#f92672">=</span> n <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> count<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><img src="http://qiniu.honeywen.com/img/20230207124933.png" alt="image-20230207124932784"></p>
<p>看官方题解后， 发现其实可以不用修改输入 n 的值，改造我们的代码，其实引入 1 来做位移就够了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">hammingWeight</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> n<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">32</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>n <span style="color:#f92672">&amp;</span> <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> i<span style="color:#f92672">))</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                count<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> count<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>但是在过用例时候错了：</p>
<p><img src="http://qiniu.honeywen.com/img/20230208215112.png" alt="image-20230208215110526"></p>
<p>为什么会有这个错误？我们分析代码单步执行，</p>
<p>i = 0,   1 &laquo; 0   是  1</p>
<p>i = 1, 1 &laquo; 1 是 2 ， 这里  2 是不等于 1 的，所以没记上数，但是应该记数</p>
<p>i = 2 1&laquo; 2 是  4， 这时候和 1011 按位与， 是0 ，所以不计数，</p>
<p>所以根据以上， 逻辑应该是 按位与后是0， 就不该记数，不是0 才该记数，修改逻辑为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">hammingWeight</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> n<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">32</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>n <span style="color:#f92672">&amp;</span> <span style="color:#f92672">(</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> i<span style="color:#f92672">))</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>                count<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> count<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>这样就可以了。</p>
<p><img src="C:%5CUsers%5CWelto%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230208220607765.png" alt="image-20230208220607765"></p>
<p>但是，这里使用内存却上升了， 想想确实是引入中间变量导致的， 所以最优解还是第一个。</p>
]]></content></item><item><title>Week1039_review</title><link>/posts/arts/week1039_review/</link><pubDate>Fri, 31 Mar 2023 15:45:48 +0000</pubDate><guid>/posts/arts/week1039_review/</guid><description>Review 理解JVM架构 Understanding JVM architecture and how Java really works under the hood is an important learning for every Java developer in order to effectively make use of the Java ecosystem. This blog post series will provide you with a solid foundation on JVM internals and technologies around the Java ecosystem.
理解JVM架构和Java在覆盖下如何真正工作，对每个想要高效使用Java生态的Java开发者，是一件很重要的学习。本篇博客系列将会为你在JVM内部和围绕Java生态技术，提供一个坚实的基础。
背景 Designed in 1995 by James Gosling for Sun Microsystems, Java is a multi-paradigm (i.e. object-oriented class-based, structural, imperative, generic, reflective, concurrent) programming language which is loved by millions of developers.</description><content type="html"><![CDATA[<h2 id="review">Review</h2>
<h2 id="理解jvm架构httpsmediumcomplatform-engineerunderstanding-jvm-architecture-22c0ddf09722"><a href="https://medium.com/platform-engineer/understanding-jvm-architecture-22c0ddf09722">理解JVM架构</a></h2>
<blockquote>
<p>Understanding JVM architecture and how Java really works under the hood is an important learning for every Java developer in order to effectively make use of the Java ecosystem. This blog post series will provide you with a solid foundation on JVM internals and technologies around the Java ecosystem.</p>
</blockquote>
<p>理解JVM架构和Java在覆盖下如何真正工作，对每个想要高效使用Java生态的Java开发者，是一件很重要的学习。本篇博客系列将会为你在JVM内部和围绕Java生态技术，提供一个坚实的基础。</p>
<h3 id="背景">背景</h3>
<blockquote>
<p>Designed in 1995 by James Gosling for Sun Microsystems, Java is a multi-paradigm (i.e. object-oriented class-based, structural, imperative, generic, reflective, concurrent) programming language which is loved by millions of developers. On any given ranking index, Java becomes the most popular language for the past 15 years. Tens of thousands of enterprise applications developed in the last 15 years have been mostly written in Java, making it the language of choice for building enterprise-grade production software systems.</p>
</blockquote>
<p>James Gosling在1995年为 Sun Microsystem设计的 Java, 是一个多范式(面向对象，基于类，结构化，重要的，通用的，可反射的，并发)编程语言 ，被百万开发者热爱。在任何排名列表，Java 过去15年成为最流行的语言。万计企业应用在过去15年大部分使用Java开发应用，让它作为构建企业级生产软件系统的语言选择。</p>
<blockquote>
<p>Even though I have been using Java since 2015, I recently realized the power of Java ecosystem while doing my final year undergraduate research on Java performance aspects and it motivated to dig deeper into the world of Java. I am planning to write a series of blog posts related to Java internals, performance profiling, server tuning, and many more interesting topics and kindly invite you to stay in touch with this blog. And that’s it for now. Let’s start from primers on Java fundamentals!</p>
</blockquote>
<p>尽管我从2015开始使用Java，我最近在做我的本科毕业研究关于Java性能和深入挖掘Java世界时，意识到Java生态的力量。我正在计划写一个系列博客关于Java内部的，性能相关，服务调整，很多有趣的主题，邀请你长期关注博客。现在，开始Java基础。</p>
<h3 id="java环境">Java环境</h3>
<blockquote>
<p>For almost any programming language, you need a specific environment which comprises of all the necessary components, application programming interfaces, and libraries in order to develop, compile, debug and execute its programs. Java has 2 such environments and everyone working with Java has to start their work after setting up one of these environments on their local development or production environment platforms.</p>
<ul>
<li><strong>JRE (Java Runtime Environment)</strong>: the minimum environment needed for running a Java application (no support for developing). It includes JVM (Java Virtual Machine) and deployment tools.</li>
<li><strong>JDK (Java Development Kit)</strong>: the complete development environment used for developing and executing Java applications. It includes both JRE and development tools.</li>
</ul>
<p>JRE is meant for users, while JDK is meant for programmers.</p>
</blockquote>
<p>对于几乎任意编程语言，你需要一个特定的环境，由所有必须的组件、应用程序接口和开发、编译、调试、执行库组成。Java有2个这样的环境，每个用Java工作的的人必须在他们本地开发或生产环境平台建立其中一个环境。</p>
<ul>
<li>JRE 运行Java应用必要的最小的环境(不支持开发)。包括JVM 和部署工具。</li>
<li>JDK 完整的开发环境用来开发执行Java应用。包括JRE和开发工具。</li>
</ul>
<p>JRE面对用户， JDK面向开发者。</p>
<h3 id="java如何工作">Java如何工作</h3>
<blockquote>
<p>You can start writing a simple Java program with any terminal editor (vim, nano) or GUI editor (gedit, sublime). For a complex Java application, you may need an IDE (Integrated Development Environment) like IntelliJ IDEA, Eclipse, or Netbeans. A typical Java program should contain correct <strong>language syntax</strong> and <strong>.java</strong> format. It is recommended to use programming concepts like OOP (Object Oriented Programming) and appropriate architectural patterns for the convenience of structuring and maintaining your Java programs.</p>
</blockquote>
<p>你编写一个简单的Java程序可以使用任何终端编辑器，如vim,nano或者GUI编辑器(gedit,sublime)。 对于一个复杂的JAVA应用，你可能需要一个IDE（集成开发环境）像IntelliJ IDEA , Eclipse,或者Netbeans.一个专业的Java程序应该包含正确的语法和.java格式。推荐使用编程概念像OOP(面向对象编程)和恰当的架构模式方便的结构，来维护你的Java程序。</p>
<blockquote>
<p>The major strength of Java is, it has been designed to run on variety of platforms with the concept <strong>WORA</strong> — “<strong>write once, run anywhere</strong>”. Although languages like C++ compile its source code to match only a specific platform and run natively on its OS and hardware, Java source codes are compiled into an intermediate state called <strong>bytecode</strong> (i.e. a <strong>.class</strong> file) using the Java Compiler (<strong>javac</strong>) which comes inbuilt with <strong>JDK</strong>. This bytecode is in <strong>hexadecimal</strong> format with <strong>opcode-operand</strong> lines and <strong>JVM</strong> can interpret these instructions (without further recompilations) into native machine language which can be understood by the OS and underlying hardware platform. Therefore, bytecode acts as a <strong>platform-independent</strong> intermediary state which is <strong>portable</strong> among any JVM regardless of underlying OS and hardware architecture. However, since JVMs are developed to run and communicate with the underlying hardware &amp; OS structure, we need to select the appropriate JVM version for our <strong>OS version</strong> (Windows, Linux, Mac) and <strong>processor architecture</strong> (x86, x64).</p>
</blockquote>
<p>Java的主要力量是，被设计为跨平台运行，概念WORA-“一次编写到处运行”。尽管C++语言编译它的源码来匹配一个特定的平台，在它的系统和硬件上本地运行，Java源码被编译成一个中间状态叫字节码(一个.class文件)使用java JDK自建编译器(javac)。字节码16进制格式，包含操作码-操作对象，然后JVM可以理解这些命令(还没有更甚重编译)当做本地机器的硬件平台的OS理解的语言。所以，字节码扮演一个平台依赖居间方，可以轻便穿梭JVM无关底层系统和硬件架构。然而， 自从JVM发展为运行和沟通底层硬件和系统架构，我们需要为我们系统（Windows,Linux,Mac）和进程架构(x86,x64)选择恰当的JVM版本.</p>
<blockquote>
<p>Most of us know the above story of Java and the problem here is that the most important component of this process — the JVM is taught to us as a black box which can magically interpret bytecode and perform many run-time activities like <strong>JIT</strong> (Just-in-time) compilation &amp; <strong>GC</strong> (Garbage Collection) during the program execution. In the next sections, let’s reveal how JVM works.</p>
</blockquote>
<p>我们很多人知道上面Java的故事，这里最重要的组件处理是-JVM教会我们作为一个黑盒来处理它，他可以很魔幻的翻译字节码执行很多运行时活动，像程序执行期间的JIT(Just-in-Time) 编译器 和 GC(垃圾收集)。下一章节，我们展示JVM如何工作。</p>
<h3 id="jvm架构">JVM架构</h3>
<blockquote>
<p>JVM is only a specification, and its implementation is different from vendor to vendor. For now, let’s understand the commonly-accepted architecture of JVM as defined in the specification.</p>
</blockquote>
<p>JVM仅仅是一个规范，被不同的供应商来实现。让我们来理解规范中广泛接受的JVM架构。</p>
<p><img src="http://rkv59lj1r.hb-bkt.clouddn.com/img/20221106142909.png" alt="image-20221106142908072"></p>
<h4 id="1-class-loader-subsystem">1. Class Loader Subsystem</h4>
<blockquote>
<p>The <strong>JVM resides on the RAM</strong>. During execution, using the Class Loader subsystem, the class files are brought on to the RAM. This is called Java’s <strong>dynamic class loading</strong> functionality. It loads, links, and initializes the class file (.class) when it refers to a class for the first time at runtime (not compile time).</p>
</blockquote>
<p>JVM存在于RAM。 执行期间，使用类加载子系统， 把class文件放进内存。这叫做Java动态类加载功能。它在运行时第一次引用类时候(而不是编译时)加载，连接初始化类文件(.class) 。</p>
<blockquote>
<h2 id="11-loading">1.1) Loading</h2>
<p>Loading compiled classes (.class files) into memory is the major task of Class Loader. Usually, the class loading process starts from loading the main class (i.e. class with <code>static main()</code> method declaration). All the subsequent class loading attempts are done according to the class references in the already-running classes as mentioned in the following cases:</p>
<ul>
<li>When bytecode make a static reference to a class (e.g. <code>System.out</code>)</li>
<li>When bytecode create a class object (e.g. <code>Person person = new Person(&quot;John&quot;)</code>)</li>
</ul>
<p>There are 3 types of class loaders (connected with inheritance property) and they follow 4 major principles.</p>
</blockquote>
<p>加载编译过的类(.class文件)进内存是类加载器的主要任务。通常，类加载程序从加载main 类开始(如 class 有 static main() 方法声明)。 所有后续的类加载尝试都是根据以下情况所述已运行类中的引用进行的：</p>
<ul>
<li>当字节码静态引用一个 class (如system.out)</li>
<li>当字节码创建一个类对象( Person person = new Person(&ldquo;John&rdquo;))</li>
</ul>
<p>3中类型的类加载器(通过继承来连接)，他们遵从4个主要原则：</p>
<blockquote>
<p>*<strong>1.1.1) Visibility Principle*</strong></p>
<p>This principle states that Child Class Loader can see the class loaded by Parent Class Loader, but a Parent Class Loader cannot find the class loaded by Child Class Loader.</p>
</blockquote>
<ol>
<li>
<p>可见性原则</p>
<p>这个原则声明子类加载器可以看到父类加载器加载的类，但是一个父类加载器不能看到子类加载器加载的类</p>
</li>
</ol>
<blockquote>
<p>*<strong>1.1.2) Uniqueness Principle*</strong></p>
<p>This principle states that a class loaded by parent should not be loaded by Child Class Loader again and ensure that duplicate class loading does not occur.</p>
</blockquote>
<ol start="2">
<li>
<p>唯一性原则</p>
<p>这个原则表明一个类被父类加载器加载后，不应该再被子类加载器加载一遍，确保不会重复加载类的事情发生。</p>
</li>
</ol>
<blockquote>
<p>*<strong>1.1.3) Delegation Hierarchy Principle*</strong></p>
<p>In order to satisfy above 2 principles, JVM follows a hierarchy of delegation to choose the class loader for each class loading request. Here, starting from the lowest child level, Application Class Loader delegates the received class loading request to Extension Class Loader and then Extension Class Loader delegates the request to Bootstrap Class Loader. If the requested class found in Bootstrap path, the class is loaded. Otherwise the request again transfers back to Extension Class Loader level to find the class from Extension path or custom-specified path. If it also fails, the request comes back to Application Class Loader to find the class from System class path and if Application Class Loader also fails to load the requested class, then we get the run time exception — <code>java.lang.ClassNotFoundException</code> .</p>
</blockquote>
<ol start="3">
<li>
<p>委托等级原则</p>
<p>为了适应以上两个原则， JVM当每个类加载请求时候，遵从一个等级委派来选择类加载器。这里，从最低层子级别开始，Application 类加载器委派收到的类加载请求给 Extension 类加载器， 然后Extension类加载器委派请求给Bootstrap类加载器。如果请求的类在Bootstrap路径中发现，类就被加载。要不然请求会被再次转移回Extension类加载器级别，去从Extension 路径或者自定义路径找需要的类。如果也失败了，请求会回到Application 类加载器，去从系统路径找需要的类，如果Application类加载器也请求失败，我们就获得了运行时异常 &mdash; java.lang.ClassNotFoundException.</p>
</li>
</ol>
<blockquote>
<p>*<strong>1.1.4) No Unloading Principle*</strong></p>
<p>Even though a Class Loader can load a class, it cannot unload a loaded class. Instead of unloading, the current class loader can be deleted, and a new class loader can be created.</p>
</blockquote>
<ol start="4">
<li>
<p>不卸载原则</p>
<p>尽管一个类加载器可以加载一个类， 但是它不会卸载一个加载过的类。不是卸载，当前类加载器可以被删除，一个新的类加载器可以被创建。</p>
<p><img src="http://rkv59lj1r.hb-bkt.clouddn.com/img/20221106195901.png" alt="image-20221106195900722"></p>
</li>
</ol>
<blockquote>
<ul>
<li><strong>Bootstrap Class Loader</strong> loads standard JDK classes from rt.jar such as core Java API classes present in the bootstrap path — $JAVA_HOME/jre/lib directory (e.g. java.lang.* package classes). It is implemented in native languages like C/C++ and acts as parent of all class loaders in Java.</li>
<li><strong>Extension Class Loader</strong> delegates class loading request to its parent, Bootstrap and if unsuccessful, loads classes from the extensions directories (e.g. security extension functions) in extension path — $JAVA_HOME/jre/lib/ext or any other directory specified by the java.ext.dirs system property. This Class Loader is implemented in Java by the sun.misc.Launcher$ExtClassLoader class.</li>
<li><strong>System/Application Class Loader</strong> loads application specific classes from system class path, that can be set while invoking a program using -cp or -classpath command line options. It internally uses Environment Variable which mapped to java.class.path. This Class Loader is implemented in Java by the sun.misc.Launcher$AppClassLoader class.</li>
</ul>
</blockquote>
<ul>
<li>Bootstrap Class Loader 从 rt.jar 加载JDK的类 , 例如核心Java API 类呈现在bootstrap路径 &mdash; $JAVA_HOME/jre/lib 目录 (也就是java.lang.* 包的类) 。由本地语言如 C/C++ 实现，在Java中作为所有类加载器的父类。</li>
<li>Extension Class Loader 委派类加载请求给它的父亲， Boostrap , 如果没有成功，加载类从 extensions 目录 (例如安全扩展方法) 路径是 &ndash; $JAVA_HOME/lib/ext 或者任何一个java.ext.dirs 系统属性明确的目录。这个类加载器用Java实现。 通过 sun.misc.Lanucher$ExClassLoader Class</li>
<li>System/Application Class Loader  从系统类路径加载应用程序特定的类，可以在使用-CP或-ClassPath命令行选项调用程序时设置这些类。它内部使用映射到java.class.path的环境变量。这个类加载器用Java实现，sun.misc.Launcher$AppClassLoader 类。</li>
</ul>
<blockquote>
<p><em>NOTE: Apart from the 3 major Class Loaders discussed above, a programmer can directly create a</em> *<strong>User-defined Class Loader*</strong> <em>on the code itself. This guarantees the independence of applications through class loader delegation model. This approach is used in web application servers like Tomcat to make web apps and enterprise solutions run independently.</em></p>
</blockquote>
<p>注意，上面讨论的3个主要的类加载器，，一个程序员可以直接用代码自己创建一个用户定义的类加载器。这个保证了应用从类加载器委派模型的独立性。这个方法用来再累Tomcat应用服务器来使 web应用和企业解决方案独立运行。</p>
<blockquote>
<p>Each Class Loader has its <strong>namespace</strong> that stores the loaded classes. When a Class Loader loads a class, it searches the class based on <strong>FQCN</strong> (<strong>Fully Qualified Class Name 完整类名</strong>) stored in the namespace to check whether or not the class has been already loaded. Even if the class has an identical FQCN but a different namespace, it is regarded as a different class. A different namespace means that the class has been loaded by another Class Loader.</p>
</blockquote>
<p>每个类加载器有自己的命名空间， 储存已加载的类。当一个类加载器加载一个类，他基于FQCN(Fully Qualified Class Name)来查找储存在命名空间的类，检查是否被加载过。尽管类有一个完整类名标志，但是不同命名空间，它被当作一个不同的类。一个不同的命名空间意味着类类被其他加载器加载了。</p>
]]></content></item><item><title>Week1039_share</title><link>/posts/arts/week1039_share/</link><pubDate>Fri, 31 Mar 2023 15:45:48 +0000</pubDate><guid>/posts/arts/week1039_share/</guid><description>Share - 年终非正式总结 又是一年年终，年年做总结做规划，发现最大的结论是，规划目标总是完不成&amp;hellip;， 那就不看目标了，只去记录一下今年觉得还行的事。
工作 年初谈去年绩效 自学并应用了Spark, Hive, Airflow 学了React ，尝试了Nest.js, Next.js, Express.js 生活 想明白了一些事 先说工作绩效。
当我得知我的绩效并不好时候， 虽然我知道并非完全不合理，但是我还是觉得要为自己据理力争一回，于是约了领导谈话。主要表达就是相比去年承担了更多的工作与责任，付出了更多的精力，可是绩效却比去年差。领导的回答虽然实在，但是令人失望。他主要意思是人多不可能精确评估每个人的绩效，只能根据开会出勤面熟度来确定，所以不公平是在所难免。 对这个回答，我感谢他的诚实回答，但是对他对此事无丝毫作为感到失望。 最后只能告诫自己，职场这类事多了去，还是自己好好努力，争取跳出这个圈。
然后是几个月后，领导在老板支持下，带出一部分业务独立创业，也邀请我过去。当时我虽然心里仍有芥蒂，但是想到能相对更自由做自己的工作，也是比较倾向去的，他看到我犹豫，开始说去了后年终奖肯定比现在多， 我瞬间觉得不那么想去了， 我是喜欢钱，但我更喜欢能自由开心的做事，不唯金钱论。最后拒绝了他。
自学了Spark,Airflow
主要工作内容是数据开发，数据仓库层维度建模，学习了Kimball 的维度建模理论，开始有意识的对已存在的业务数据做数据分层开发，之后发现，使用的Airflow调度非常好，因为它可以支持代码开发，这可以有更大灵活性组织任务依赖于调度。
最开始使用Hive SQL来操作hadoop, 其实就是写sql 对ods数据进行DW建设，最后生成集市层数据，供BI、财务等使用，期间虽然任务多时间少，但是有机会就会去实现这一过程。之后做离线任务，总是绕不过去Spark, 学习了使用Spark, 并把之前的Hive SQL 任务全换成了Spark SQL ，显著提高了速度。 最开始使用的Scala 来调度Spark, 后来发现结合Airflow更合适的是用pySpark, 因为相比scala打jar包执行，pySpark源代码可见，也更简便。
学了React, 尝试了Nest.js ,Next.js
这里的时间重点是学了React. 为啥会考虑学前端， 因为作为后端程序员，独立开发产品的话，前端是避免不了的。 之前学过一段Vue，这次就尝试了React， 根据视频、文档学到了最新的Hook特性。 之后衍生的Next.js ， 和后端的Nest.js ，很像Springmvc 的框架。最终的结果是，还没学的足够好，还无法独立做前端项目。并且Typescript 还没有学。
生活的琐事
其实并没有想明白啥，不确定以后想法是否还会变。
最主要的想法是，想要做事的方向比以前清晰了。即在有选择的前提下，选择自认为对社会更有意义的事，能带来福祉的事。比如，有医学计算机研究岗和现金贷岗，金额差距不大，优先选医学岗。并不是说挣钱不重要，而是当前的现实情况下，挣大钱的机会不存在于目前的按部就班上班的工作中，这样的话就去选择能带给人们更多福祉的工作。
其实个人能力、眼界、辨识度有限，无法分辨出哪些工作更能带来社会福祉，而且个人谈这件事还有些大和空， 但是抱着尽一份力的想法去做事， 比如高息贷款，真的没有积极作用吗？ 给那些需要这钱周转的人一个选择，也是好的一件事。 判断标准一般认为，能否带来效率的提升降低生活成本，能否带来更多公平，能否带来更好的体验等等。
承认自己的优秀和不优秀。
曾一度自责委屈自己不是一流人才，包括现在是，觉得个人智力、情商、工作能力和见识，都是挺普通的，甚至有些还在平均线以下，一度自卑恐惧，要学会接纳自己的缺陷，不必自苛成为什么样的人，当下的生活更重要，找到想要的方向，静下心做下去就行。承认自己的各项是参差不齐的，尽管长板不够长， 短板够短，和自己和解。
努力发挥个人价值。
不断提高个人能力和见识，发挥个人价值。</description><content type="html"><![CDATA[<h2 id="share---年终非正式总结">Share - 年终非正式总结</h2>
<p>又是一年年终，年年做总结做规划，发现最大的结论是，规划目标总是完不成&hellip;， 那就不看目标了，只去记录一下今年觉得还行的事。</p>
<h3 id="工作">工作</h3>
<ul>
<li>年初谈去年绩效</li>
<li>自学并应用了Spark, Hive, Airflow</li>
<li>学了React ，尝试了Nest.js, Next.js, Express.js</li>
</ul>
<h3 id="生活">生活</h3>
<ul>
<li>想明白了一些事</li>
</ul>
<p><strong>先说工作绩效</strong>。</p>
<p>当我得知我的绩效并不好时候， 虽然我知道并非完全不合理，但是我还是觉得要为自己据理力争一回，于是约了领导谈话。主要表达就是相比去年承担了更多的工作与责任，付出了更多的精力，可是绩效却比去年差。领导的回答虽然实在，但是令人失望。他主要意思是人多不可能精确评估每个人的绩效，只能根据开会出勤面熟度来确定，所以不公平是在所难免。 对这个回答，我感谢他的诚实回答，但是对他对此事无丝毫作为感到失望。 最后只能告诫自己，职场这类事多了去，还是自己好好努力，争取跳出这个圈。</p>
<p>然后是几个月后，领导在老板支持下，带出一部分业务独立创业，也邀请我过去。当时我虽然心里仍有芥蒂，但是想到能相对更自由做自己的工作，也是比较倾向去的，他看到我犹豫，开始说去了后年终奖肯定比现在多， 我瞬间觉得不那么想去了， 我是喜欢钱，但我更喜欢能自由开心的做事，不唯金钱论。最后拒绝了他。</p>
<p><strong>自学了Spark,Airflow</strong></p>
<p>主要工作内容是数据开发，数据仓库层维度建模，学习了Kimball 的维度建模理论，开始有意识的对已存在的业务数据做数据分层开发，之后发现，使用的Airflow调度非常好，因为它可以支持代码开发，这可以有更大灵活性组织任务依赖于调度。</p>
<p>最开始使用Hive SQL来操作hadoop,  其实就是写sql 对ods数据进行DW建设，最后生成集市层数据，供BI、财务等使用，期间虽然任务多时间少，但是有机会就会去实现这一过程。之后做离线任务，总是绕不过去Spark, 学习了使用Spark, 并把之前的Hive SQL 任务全换成了Spark SQL ，显著提高了速度。 最开始使用的Scala 来调度Spark, 后来发现结合Airflow更合适的是用pySpark, 因为相比scala打jar包执行，pySpark源代码可见，也更简便。</p>
<p><strong>学了React, 尝试了Nest.js ,Next.js</strong></p>
<p>这里的时间重点是学了React.  为啥会考虑学前端， 因为作为后端程序员，独立开发产品的话，前端是避免不了的。  之前学过一段Vue，这次就尝试了React， 根据视频、文档学到了最新的Hook特性。 之后衍生的Next.js ， 和后端的Nest.js ，很像Springmvc 的框架。最终的结果是，还没学的足够好，还无法独立做前端项目。并且Typescript 还没有学。</p>
<p><strong>生活的琐事</strong></p>
<p>其实并没有想明白啥，不确定以后想法是否还会变。</p>
<p>最主要的想法是，想要做事的方向比以前清晰了。即在有选择的前提下，选择自认为对社会更有意义的事，能带来福祉的事。比如，有医学计算机研究岗和现金贷岗，金额差距不大，优先选医学岗。并不是说挣钱不重要，而是当前的现实情况下，挣大钱的机会不存在于目前的按部就班上班的工作中，这样的话就去选择能带给人们更多福祉的工作。</p>
<p>其实个人能力、眼界、辨识度有限，无法分辨出哪些工作更能带来社会福祉，而且个人谈这件事还有些大和空， 但是抱着尽一份力的想法去做事， 比如高息贷款，真的没有积极作用吗？ 给那些需要这钱周转的人一个选择，也是好的一件事。 判断标准一般认为，能否带来效率的提升降低生活成本，能否带来更多公平，能否带来更好的体验等等。</p>
<p>承认自己的优秀和不优秀。</p>
<p>曾一度自责委屈自己不是一流人才，包括现在是，觉得个人智力、情商、工作能力和见识，都是挺普通的，甚至有些还在平均线以下，一度自卑恐惧，要学会接纳自己的缺陷，不必自苛成为什么样的人，当下的生活更重要，找到想要的方向，静下心做下去就行。承认自己的各项是参差不齐的，尽管长板不够长， 短板够短，和自己和解。</p>
<p>努力发挥个人价值。</p>
<p>不断提高个人能力和见识，发挥个人价值。</p>
]]></content></item><item><title>Week1039_tip</title><link>/posts/arts/week1039_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:48 +0000</pubDate><guid>/posts/arts/week1039_tip/</guid><description>Tip - Airflow DAG多少的思考 在做ETL任务时候，使用Airflow作为数据任务调度框架，就遇到了很多任务下，如何组织DAG的问题。
一个任务一个DAG 最开始做的方式就是一个任务一个DAG。比如要制作一个每日数量类统计，编写逻辑就是从ods取数，生成一个新表，存进去数据。那么一个DAG组织起来实现逻辑的SQL就够了，这时候就是一个任务一个DAG。
但是这样做的问题还是有的，比如我要做DW层，要对ods进行汇总得到多个DW层数据，然后我要制作报表，用到了 dw1,dw2.. ， 由于需要明确的先后顺序，其他人做法依然是多个DAG，设置不同的调用时间来实现。这显然不够精确。
多个任务集成进一个DAG 于是要充分发挥DAG的功能，DAG的设计就是任务可以有依赖关系，那么ETL过程就是很适合的场景。于是我就把多个DAG改造成一个DAG，因为他们有关联关系。后来我发现，其实只用一个DAG就够了，一个DAG启动，首先面对多个ods表的检查， 分裂成多组不同业务方向的操作，每组各自执行内部逻辑，无需存在多个DAG，任务之间的关系也清晰明了，所以我就把我的任务改造成了一个。但是这样也有弊端。
弊端就是，当新增采集表或者新增任务，历史回溯比较困难，因为会因此使得已经跑过的其他任务也跟着重跑。这并不是很大的事，但是当任务很多时候，原本只是为了新增的任务重跑，造成所有任务跟着重跑，性能急剧下降，耗时越来越多，而且，不同的业务类型都在一个DAG，只会越来越臃肿不利于模块化维护，所以要继续改造。
分类DAG 进行到分类DAG阶段。分类DAG是这样的一个想法， 对于一个业务类型的任务，放在一个DAG里，因为他们关联性最大。其他关联小的业务类型任务，新开DAG，这样他们之间互不影响，发挥足够的性能，也能使得任务关系清晰明了。
然后DAG内部，进行分组管理。一组只做一类事情，这样设计的DAG，不会像第一种一个任务一个DAG造成的那么多重复代码， 也不会像只一个DAG的结构复杂，相当于代码模块化， 一个模块一个DAG，这样管理起来就舒服多了。而且内部也是根据功能划分不同的组，更是结构清晰。
如下：</description><content type="html"><![CDATA[<h2 id="tip---airflow-dag多少的思考">Tip - Airflow DAG多少的思考</h2>
<p>在做ETL任务时候，使用Airflow作为数据任务调度框架，就遇到了很多任务下，如何组织DAG的问题。</p>
<h2 id="一个任务一个dag">一个任务一个DAG</h2>
<p>最开始做的方式就是一个任务一个DAG。比如要制作一个每日数量类统计，编写逻辑就是从ods取数，生成一个新表，存进去数据。那么一个DAG组织起来实现逻辑的SQL就够了，这时候就是一个任务一个DAG。</p>
<p>但是这样做的问题还是有的，比如我要做DW层，要对ods进行汇总得到多个DW层数据，然后我要制作报表，用到了 dw1,dw2.. ， 由于需要明确的先后顺序，其他人做法依然是多个DAG，设置不同的调用时间来实现。这显然不够精确。</p>
<h2 id="多个任务集成进一个dag">多个任务集成进一个DAG</h2>
<p>于是要充分发挥DAG的功能，DAG的设计就是任务可以有依赖关系，那么ETL过程就是很适合的场景。于是我就把多个DAG改造成一个DAG，因为他们有关联关系。后来我发现，其实只用一个DAG就够了，一个DAG启动，首先面对多个ods表的检查， 分裂成多组不同业务方向的操作，每组各自执行内部逻辑，无需存在多个DAG，任务之间的关系也清晰明了，所以我就把我的任务改造成了一个。但是这样也有弊端。</p>
<p>弊端就是，当新增采集表或者新增任务，历史回溯比较困难，因为会因此使得已经跑过的其他任务也跟着重跑。这并不是很大的事，但是当任务很多时候，原本只是为了新增的任务重跑，造成所有任务跟着重跑，性能急剧下降，耗时越来越多，而且，不同的业务类型都在一个DAG，只会越来越臃肿不利于模块化维护，所以要继续改造。</p>
<h2 id="分类dag">分类DAG</h2>
<p>进行到分类DAG阶段。分类DAG是这样的一个想法， 对于一个业务类型的任务，放在一个DAG里，因为他们关联性最大。其他关联小的业务类型任务，新开DAG，这样他们之间互不影响，发挥足够的性能，也能使得任务关系清晰明了。</p>
<p>然后DAG内部，进行分组管理。一组只做一类事情，这样设计的DAG，不会像第一种一个任务一个DAG造成的那么多重复代码， 也不会像只一个DAG的结构复杂，相当于代码模块化， 一个模块一个DAG，这样管理起来就舒服多了。而且内部也是根据功能划分不同的组，更是结构清晰。</p>
<p>如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h94btbpzekj31tk0u0tgf.jpg" alt="image-20221215111827110"></p>
]]></content></item><item><title>Week1040_Algorithm</title><link>/posts/arts/week1040_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:48 +0000</pubDate><guid>/posts/arts/week1040_algorithm/</guid><description>Algorithm - 169. 多数元素 多数元素 给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。
你可以假设数组是非空的，并且给定的数组总是存在多数元素。
示例 1：
输入：nums = [3,2,3] 输出：3 示例 2：
输入：nums = [2,2,1,1,1,2,2] 输出：2 分析 老规矩，先从想到的最笨的的方法解决。 只要把数组中每个元素放入map里， value作为次数，就能找出多数元素。
代码如下：
class Solution { public int majorityElement(int[] nums) { if (nums.length == 1) { return nums[0]; } Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(nums.length/2+1); for (int num : nums) { if (map.get(num) == null) { map.put(num, 1); } else { int cnt = map.</description><content type="html"><![CDATA[<h2 id="algorithm---169-多数元素httpsleetcodecnproblemsmajority-element">Algorithm - <a href="https://leetcode.cn/problems/majority-element/">169. 多数元素</a></h2>
<ol start="169">
<li>多数元素</li>
</ol>
<p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p><strong>示例 1：</strong></p>
<pre tabindex="0"><code>输入：nums = [3,2,3]
输出：3
</code></pre><p><strong>示例 2：</strong></p>
<pre tabindex="0"><code>输入：nums = [2,2,1,1,1,2,2]
输出：2
</code></pre><h3 id="分析">分析</h3>
<p>老规矩，先从想到的最笨的的方法解决。 只要把数组中每个元素放入map里， value作为次数，就能找出多数元素。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">majorityElement</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> nums<span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Map<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">,</span> Integer<span style="color:#f92672">&gt;</span> map <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;(</span>nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> num <span style="color:#f92672">:</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>num<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                map<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>num<span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">int</span> cnt <span style="color:#f92672">=</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>num<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                map<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>num<span style="color:#f92672">,</span> cnt <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>cnt <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&gt;</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> num<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>结果是通过的, 但是用时和空间都耗费多，**进阶：**尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</p>
<p>进阶要求， 设计时间复杂度O(n)、空间复杂度O(1) 的算法。也就是说一次遍历，不引入容器或容器大小固定来解决问题。</p>
<p>加入元素有序，那么只用取n/2 +1位置的元素，就是对的值。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">majorityElement</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> nums<span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">sort</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> nums<span style="color:#f92672">[</span>nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2</span><span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>看题解，一个比较巧妙的解决方式是，选举法。</p>
<p>我们假设这样的场景，每个元素都认为自己能竞选成功，被推上台时，支持的票(相同元素)加1， 反对的票(不同的元素)减一 ， 当票数为0，重新选举。我们知道，众数最后一定能成功。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">majorityElement</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 候选人得票数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 候选人
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> candidate <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> num <span style="color:#f92672">:</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          	<span style="color:#75715e">// 当票数为0， 选出一个候选人
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>count <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                candidate <span style="color:#f92672">=</span> num<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>						<span style="color:#75715e">// 是候选人的话，票数+1，否则-1		
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 	     	    count <span style="color:#f92672">+=</span> <span style="color:#f92672">(</span>candidate <span style="color:#f92672">==</span> num<span style="color:#f92672">)</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> candidate<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>这种构思真是巧妙。</p>
]]></content></item><item><title>Week1040_Review</title><link>/posts/arts/week1040_review/</link><pubDate>Fri, 31 Mar 2023 15:45:48 +0000</pubDate><guid>/posts/arts/week1040_review/</guid><description>Review - Java类加载机制 1. Introduction to Class Loaders Class loaders are responsible for loading Java classes dynamically to the JVM (Java Virtual Machine) during runtime. They&amp;rsquo;re also part of the JRE (Java Runtime Environment). Therefore, the JVM doesn&amp;rsquo;t need to know about the underlying files or file systems in order to run Java programs thanks to class loaders.
Furthermore, these Java classes aren&amp;rsquo;t loaded into memory all at once, but rather when they&amp;rsquo;re required by an application.</description><content type="html"><![CDATA[<h2 id="review---java类加载机制httpswwwbaeldungcomjava-classloaders">Review - <a href="https://www.baeldung.com/java-classloaders">Java类加载机制</a></h2>
<blockquote>
<h2 id="1-introduction-to-class-loaders"><strong>1. Introduction to Class Loaders</strong></h2>
<p>Class loaders are responsible for <strong>loading Java classes dynamically to the JVM</strong> <strong>(Java Virtual Machine) during runtime.</strong> They&rsquo;re also part of the JRE (Java Runtime Environment). Therefore, the JVM doesn&rsquo;t need to know about the underlying files or file systems in order to run Java programs thanks to class loaders.</p>
<p>Furthermore, these Java classes aren&rsquo;t loaded into memory all at once, but rather when they&rsquo;re required by an application. This is where class loaders come into the picture. They&rsquo;re responsible for loading classes into memory.</p>
<p>In this tutorial, we&rsquo;ll talk about different types of built-in class loaders and how they work. Then we&rsquo;ll introduce our own custom implementation.</p>
</blockquote>
<ol>
<li>
<p>介绍类加载器</p>
<p>类加载器是运行时用来动态加载Java类到JVM（Java虚拟机）。他们也是JRE（Java 运行时环境）的一部分。所以，由于有了类加载器，JVM为了运行Java程序就不需要知道底层的文件或者文件系统。</p>
<p>更深的是，这些Java类并不是一次全部加载到内存，而是当应用请求时候才加载。这是类加载器发挥作用的地方。他们职责是加载类到内存。</p>
<p>这个章节，我们讨论集中不同的内建类加载器是如何工作的。之后我们会介绍我们自定义实现。</p>
<h2 id="2-types-of-built-in-class-loaders"><strong>2. Types of Built-in Class Loaders</strong></h2>
<p>Let&rsquo;s start by learning how we can load different classes using various class loaders:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> com.sun.javafx.util.Logging<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.ArrayList<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ClassLoaderTest</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printClassLoaders</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> ClassNotFoundException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Classloader of this class:&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">+</span> ClassLoaderTest<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getClassLoader</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Classloader of Logging:&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">+</span> Logging<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getClassLoader</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Classloader of ArrayList:&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">+</span> ArrayList<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getClassLoader</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> ClassNotFoundException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        ClassLoaderTest loader <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ClassLoaderTest<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        loader<span style="color:#f92672">.</span><span style="color:#a6e22e">printClassLoaders</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><blockquote>
<p>As we can see, there are three different class loaders here: application, extension, and bootstrap (displayed as <em>null</em>).</p>
<p>The application class loader loads the class where the example method is contained. <strong>An application or system class loader loads our own files in the classpath.</strong></p>
<p>Next, the extension class loader loads the <em>Logging</em> class. <strong>Extension class loaders load classes that are an extension of the standard core Java classes.</strong></p>
<p>Finally, the bootstrap class loader loads the <em>ArrayList</em> class. <strong>A bootstrap or primordial class loader is the parent of all the others.</strong></p>
<p>However, we can see that for the <em>ArrayList,</em> it displays <em>null</em> in the output. <strong>This is because the bootstrap class loader is written in native code, not Java, so it doesn&rsquo;t show up as a Java class.</strong> As a result, the behavior of the bootstrap class loader will differ across JVMs.</p>
</blockquote>
<p>我们看到，有三种不同的类加载器： application, extension, 和bootstrap(这里显示null).</p>
<p>application 类加载器加载包含示例方法的类。一个application 或者system 类加载器加载我们自己的在classpath的文件。</p>
<p>Extensioni 类加载器加载 Logging 类。Extension类加载器加载标准Java库的类之外的那些扩展类。</p>
<p>Bootstrap类加再起加载ArrayList 类。一个bootstrap或者primordial类加载器是所有其他加载器的父亲。</p>
<p>然而，我们看到ArrayList ， 显示null. 这是应为bootstrap 类加载器使用本地代码写的，不是Java，所以不显示Java class. 因此，bootstrap 类加载器在不同JVM中表现是不同的。</p>
<blockquote>
<p>Now let&rsquo;s discuss each of these class loaders in more detail.</p>
<h3 id="21-bootstrap-class-loader"><strong>2.1. Bootstrap Class Loader</strong></h3>
<p>Java classes are loaded by an instance of <em>java.lang.ClassLoader</em>. However, class loaders are classes themselves. So the question is, who loads the <em>java.lang.ClassLoader</em> itself*?*</p>
<p>This is where the bootstrap or primordial class loader comes into play.</p>
<p>It&rsquo;s mainly responsible for loading JDK internal classes, typically <em>rt.jar</em> and other core libraries located in the <em>$JAVA_HOME/jre/lib</em> directory. Additionally, the <strong>Bootstrap class loader serves as the parent of all the other *ClassLoader* instances</strong>.</p>
<p><strong>This bootstrap class loader is part of the core JVM and is written in native code,</strong> as pointed out in the above example. Different platforms might have different implementations of this particular class loader.</p>
</blockquote>
<p>Java类被一个java.lang.ClassLoader的实例加载。然而，类加载器是类自己，所以问题是，谁来加载 java.lang.ClassLoader 自身？</p>
<p>这就是bootstrap ，primoridial 类加载器发挥作用的地方。</p>
<p>主要职责是加载JDK内部的类，专门的 rt.jar 和其他核心库，在路径 $JAVA_HOME/jre/lib 目录</p>
<p>另外，bootstrap 类加载器服务作为所有其他 类加载器实例的父类.</p>
<p>这个bootstrap 类加载器是本地代码写的核心JVM的一部分， 如上个例子所述。不同平台可能对这个类加载器有不同的实现。</p>
<p>我的lib:</p>
<p>![image-20221108185208143](/Users/weiwang/Library/Application Support/typora-user-images/image-20221108185208143.png)</p>
<blockquote>
<h3 id="22-extension-class-loader"><strong>2.2. Extension Class Loader</strong></h3>
<p>The <strong>extension class loader is a child of the bootstrap class loader, and takes care of loading the extensions of the standard core Java classes</strong> so that they&rsquo;re available to all applications running on the platform.</p>
<p>The extension class loader loads from the JDK extensions directory, usually the <em>$JAVA_HOME/lib/ext</em> directory, or any other directory mentioned in the <em>java.ext.dirs</em> system property.</p>
</blockquote>
<p>Extension 类加载器是bootstrap的孩子，关注加载Java标准核心类的扩展，所以就对按所有运行在平台上的 应用可用。</p>
<p>Extension 类加载器从 JDK 扩展目录加载， 通常是 $JAVA_HOME/lib/ext 目录 ， 或者其他java.ext.dirs系统属性提及到的其他目录</p>
<p>我的ext:</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7xx0nsdqij32ge04sjsa.jpg" alt="image-20221108185258499"></p>
<blockquote>
<h3 id="23-system-class-loader"><strong>2.3. System Class Loader</strong></h3>
<p>The system or application class loader, on the other hand, takes care of loading all the application level classes into the JVM. <strong>It loads files found in the classpath environment variable, *-classpath,* or *-cp* command line option</strong>. It&rsquo;s also a child of the extensions class loader.</p>
</blockquote>
<p>system或application类加载器，换句话说，关心加载所有的应用级别类到JVM。 加载在classpath 环境变量 <em>-classpath,</em> 或者 *-cp* 命令行指定的路径。也是extension 类加载器的孩子。</p>
<blockquote>
<h2 id="3-how-do-class-loaders-work"><strong>3. How Do Class Loaders Work?</strong></h2>
<p>Class loaders are part of the Java Runtime Environment. When the JVM requests a class, the class loader tries to locate the class and load the class definition into the runtime using the fully qualified class name.</p>
<p>The *<strong>java.lang.ClassLoader.loadClass()* method is responsible for loading the class definition into runtime</strong>. It tries to load the class based on a fully qualified name.</p>
<p>If the class isn&rsquo;t already loaded, it delegates the request to the parent class loader. This process happens recursively.</p>
<p>Eventually, if the parent class loader doesn’t find the class, then the child class will call the <em>java.net.URLClassLoader.findClass()</em> method to look for classes in the file system itself.</p>
<p>If the last child class loader isn&rsquo;t able to load the class either, it throws <a href="https://www.baeldung.com/java-classnotfoundexception-and-noclassdeffounderror"><em>java.lang.NoClassDefFoundError</em> or <em>java.lang.ClassNotFoundException.</em></a></p>
</blockquote>
<p>类加载器是Java运行时环境的 一部分。当JVM请求一个类， 类加载器尝试定位类，使用全类名加载类定义到运行时。</p>
<p>Java.lang.ClassLoader.loadClass() 方法职责是加载类定义到运行时。它基于一个全路径名加载类。</p>
<p>如果类没有加载，就委派请求给父亲加载器。这个过程是递归的。</p>
<p>如果父亲加载器也没有发现类，然后子类将会调用java.net.URLClassLoader.findClass() 方法寻找类。</p>
<p>如果最后子类加载器也没有加载到类，就会抛出java.lang.NoClassDefFoundError 或者java.lang.ClassNotFoundException.</p>
<blockquote>
<p>Let&rsquo;s look at an example of the output when <em>ClassNotFoundException</em> is thrown:</p>
</blockquote>
<blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>java<span style="color:#f92672">.</span><span style="color:#a6e22e">lang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ClassNotFoundException</span><span style="color:#f92672">:</span> com<span style="color:#f92672">.</span><span style="color:#a6e22e">baeldung</span><span style="color:#f92672">.</span><span style="color:#a6e22e">classloader</span><span style="color:#f92672">.</span><span style="color:#a6e22e">SampleClassLoader</span>    
</span></span><span style="display:flex;"><span>   at java<span style="color:#f92672">.</span><span style="color:#a6e22e">net</span><span style="color:#f92672">.</span><span style="color:#a6e22e">URLClassLoader</span><span style="color:#f92672">.</span><span style="color:#a6e22e">findClass</span><span style="color:#f92672">(</span>URLClassLoader<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span><span style="color:#ae81ff">381</span><span style="color:#f92672">)</span>    
</span></span><span style="display:flex;"><span>   at java<span style="color:#f92672">.</span><span style="color:#a6e22e">lang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ClassLoader</span><span style="color:#f92672">.</span><span style="color:#a6e22e">loadClass</span><span style="color:#f92672">(</span>ClassLoader<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span><span style="color:#ae81ff">424</span><span style="color:#f92672">)</span>    
</span></span><span style="display:flex;"><span>   at java<span style="color:#f92672">.</span><span style="color:#a6e22e">lang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ClassLoader</span><span style="color:#f92672">.</span><span style="color:#a6e22e">loadClass</span><span style="color:#f92672">(</span>ClassLoader<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span><span style="color:#ae81ff">357</span><span style="color:#f92672">)</span>    
</span></span><span style="display:flex;"><span>   at java<span style="color:#f92672">.</span><span style="color:#a6e22e">lang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">forName0</span><span style="color:#f92672">(</span>Native Method<span style="color:#f92672">)</span>    
</span></span><span style="display:flex;"><span>   at java<span style="color:#f92672">.</span><span style="color:#a6e22e">lang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">forName</span><span style="color:#f92672">(</span>Class<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span><span style="color:#ae81ff">348</span><span style="color:#f92672">)</span>
</span></span></code></pre></div></blockquote>
</li>
</ol>
<p>看一个例子。</p>
<blockquote>
<p>If we go through the sequence of events right from calling <em>java.lang.Class.forName()</em>, we can see that it first tries to load the class through the parent class loader, and then <em>java.net.URLClassLoader.findClass()</em> to look for the class itself.</p>
<p>When it still doesn&rsquo;t find the class, it throws a <em>ClassNotFoundException.</em></p>
<p>Now let&rsquo;s examine three important features of class loaders.</p>
</blockquote>
<p>如果我们通过序列事件调用java.lang.Class.forName()， 我们可以看到首先尝试加载class 通过父亲类加载器，之后它自己尝试java.net.URLClassLoader.findClass() 来找类。</p>
<p>当也找不到Class，就会抛出ClassNotFoundExceptioni.</p>
<p>现在来考察类加载器的三个重要特性</p>
<blockquote>
<h3 id="31-delegation-model"><strong>3.1. Delegation Model</strong></h3>
<p>Class loaders follow the delegation model, where <strong>on request to find a class or resource, a *ClassLoader* instance will delegate the search of the class or resource to the parent class loader</strong>.</p>
<p>Let&rsquo;s say we have a request to load an application class into the JVM. The system class loader first delegates the loading of that class to its parent extension class loader, which in turn delegates it to the bootstrap class loader.</p>
<p>Only if the bootstrap and then the extension class loader are unsuccessful in loading the class, the system class loader tries to load the class itself.</p>
</blockquote>
<p>委派模型</p>
<p>类加载器遵从的模型，当请求找一个类或者资源， 一个 类加载器实例将会委派给父加载器来找类或资源。</p>
<p>我们有一个请求需要加载应用class到JVM。system类加载器委派它的父亲 extension 加载器来加载类，然后它委托给bootstrap加载器。</p>
<p>当仅当bootstrap 和之后的 extension类加载没有加载到类，sysytem类加载器才会自己尝试加载类。</p>
<blockquote>
<h3 id="32-unique-classes"><strong>3.2. Unique Classes</strong></h3>
<p>As a consequence of the delegation model, it&rsquo;s easy to ensure <strong>unique classes, as we always try to delegate upwards</strong>.</p>
<p>If the parent class loader isn&rsquo;t able to find the class, only then will the current instance attempt to do so itself.</p>
</blockquote>
<p>唯一类。</p>
<p>作为一个委派模型结果，很容易确保唯一类，因为总是尝试向上委派。</p>
<p>如果父加载器没找到类，当前实例才会自己去加载。</p>
<blockquote>
<h3 id="33-visibility"><strong>3.3. Visibility</strong></h3>
<p>In addition, <strong>children class loaders are visible to classes loaded by their parent class loaders</strong>.</p>
<p>For instance, classes loaded by the system class loader have visibility into classes loaded by the extension and bootstrap class loaders, but not vice-versa.</p>
<p>To illustrate this, if Class A is loaded by the application class loader, and class B is loaded by the extensions class loader, then both A and B classes are visible as far as other classes loaded by the application class loader are concerned.</p>
<p>Class B, however, is the only class visible to other classes loaded by the extension class loader.</p>
</blockquote>
<p>可见性。</p>
<p>更多的是，子加载器对父加载器加载的类是可见的。</p>
<p>例如，被system加载器加载的类对 extension和bootstrap加载器加载的类具有可见性，反之不然。</p>
<p>为了解释这一点，如果 Class A 被 application 加载器加载，class B 被extensions 加载，那么 A和B类都对 application 加载器加载的类可见。</p>
<p>Class B, 却只能被extension 加载的类可见。</p>
<blockquote>
<h2 id="4-custom-classloader"><strong>4. Custom ClassLoader</strong></h2>
<p>The built-in class loader is sufficient for most cases where the files are already in the file system.</p>
<p>However, in scenarios where we need to load classes out of the local hard drive or a network, we may need to make use of custom class loaders.</p>
<p>In this section, we&rsquo;ll cover some other use cases for custom class loaders and demonstrate how to create one.</p>
</blockquote>
<p>自定义加载器</p>
<p>内建加载器对大多数已经在文件系统中的文件是足够了。</p>
<p>然而，我们还需要加载本地硬件或者网络之外的的类，我们可能需要使用自定义加载器。</p>
<blockquote>
<h3 id="41-custom-class-loaders-use-cases">4.1. Custom Class Loaders Use-Cases</h3>
<p>Custom class loaders are helpful for more than just loading the class during runtime. A few use cases might include:</p>
<ol>
<li>Helping to modify the existing bytecode, e.g. weaving agents</li>
<li>Creating classes dynamically suited to the user&rsquo;s needs, e.g. in JDBC, switching between different driver implementations is done through dynamic class loading.</li>
<li>Implementing a class versioning mechanism while loading different bytecodes for classes with the same names and packages. This can be done either through a URL class loader (load jars via URLs) or custom class loaders.</li>
</ol>
<p>Below are more concrete examples where custom class loaders might come in handy.</p>
<p><strong>Browsers, for instance, use a custom class loader to load executable content from a website.</strong> A browser can load applets from different web pages using separate class loaders. The applet viewer, which is used to run applets, contains a <em>ClassLoader</em> that accesses a website on a remote server instead of looking in the local file system.</p>
<p>It then loads the raw bytecode files via HTTP, and turns them into classes inside the JVM. Even if these <strong>applets have the same name, they&rsquo;re considered different components if loaded by different class loaders</strong>.</p>
<p>Now that we understand why custom class loaders are relevant, let&rsquo;s implement a subclass of <em>ClassLoader</em> to extend and summarise the functionality of how the JVM loads classes.</p>
</blockquote>
<p>自定义类加载器用例</p>
<p>自定义类加载器对于不仅在运行时加载类是很有帮助的。一些用例可能包括：</p>
<ol>
<li>帮助改已经存在的字节码，例如编织代理</li>
<li>动态创建类来适应用户所需，例如在JDBC，切换不同的驱动就是通过动态加载类来实现的。</li>
<li>在为具有相同名称和软件包的类加载不同的字节码时，实现类版本控制机制。这可以通过URL 类加载器(通过URL来加载jar) 或者自定义类加载器。</li>
</ol>
<p>底下是更确切的例子，自定义类加载器场景，</p>
<p>浏览器，实际上，使用一个定义加载器从网站上加载可执行内容。一个浏览器可以加载 applets 从不同的网页通过使用不同的类加载器。applet viewer, 用来跑applets, 包括一个类加载器操作远端服务器，而不是找本地文件系统。</p>
<p>之后通过HTTP加载未加工的字节码文件，在JVM内部转化成class. 尽管这些applets 有相同的名字，但是如果通过不同的类加载器加载，就被认为是不同组件。</p>
<p>现在我们理解了为什么自定义加载器是有意义的，我们实现一个ClassLoader的子类来扩展总结JVM是如何加载class的。</p>
<blockquote>
<h3 id="42-creating-our-custom-class-loader">4.2. Creating Our Custom Class Loader</h3>
<p>For illustration purposes, let&rsquo;s say we need to load classes from a file using a custom class loader.</p>
<p><strong>We need to extend the *ClassLoader* class and override the *findClass()* method:</strong></p>
</blockquote>
<p>需要继承ClassLoader 类，重写findClass方法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.io.*<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CustomClassLoader</span> <span style="color:#66d9ef">extends</span> ClassLoader<span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Class<span style="color:#f92672">&lt;?&gt;</span> findClass<span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> ClassNotFoundException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//        return super.findClass(name);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> b <span style="color:#f92672">=</span> loadClassFromFile<span style="color:#f92672">(</span>name<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> defineClass<span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> b<span style="color:#f92672">,</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">,</span> b<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#a6e22e">loadClassFromFile</span><span style="color:#f92672">(</span>String fileName<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        InputStream inputStream <span style="color:#f92672">=</span> getClass<span style="color:#f92672">().</span><span style="color:#a6e22e">getClassLoader</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getResourceAsStream</span><span style="color:#f92672">(</span>fileName<span style="color:#f92672">.</span><span style="color:#a6e22e">replace</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#39;.&#39;</span><span style="color:#f92672">,</span> File<span style="color:#f92672">.</span><span style="color:#a6e22e">separatorChar</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;.class&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> buffer<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        ByteArrayOutputStream byteStream <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ByteArrayOutputStream<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> nextValue <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> <span style="color:#f92672">((</span>nextValue <span style="color:#f92672">=</span> inputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">read</span><span style="color:#f92672">())</span> <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                byteStream<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>nextValue<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>IOException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            e<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        buffer <span style="color:#f92672">=</span> byteStream<span style="color:#f92672">.</span><span style="color:#a6e22e">toByteArray</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> buffer<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><blockquote>
<p>In the above example, we defined a custom class loader that extends the default class loader, and loads a byte array from the specified file.</p>
</blockquote>
<p>上面例子，我们定义了一个自定义类加载器继承默认类加载器，加载字节数组从特定的文件。</p>
<blockquote>
<h3 id="5-understanding-javalangclassloader">5. Understanding <em>java.lang.ClassLoader</em></h3>
<p>Let&rsquo;s discuss a few essential methods from the <em>java.lang.ClassLoader</em> class to get a clearer picture of how it works.</p>
<h3 id="51-the-loadclass-method">5.1. The <em>loadClass()</em> Method</h3>
</blockquote>
<p>理解java.lang.ClassLoader</p>
<p>我们讨论一些java.lang.ClassLoader的必要方法来更清楚它是如何工作的。</p>
<p><code>public Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException {</code></p>
<blockquote>
<p>This method is responsible for loading the class given a name parameter. The name parameter refers to the fully qualified class name.</p>
<p>The Java Virtual Machine invokes the <em>loadClass()</em> method to resolve class references, setting resolve to <em>true</em>. However, it isn&rsquo;t always necessary to resolve a class. <strong>If we only need to determine if the class exists or not, then the resolve parameter is set to *false*.</strong></p>
<p>This method serves as an entry point for the class loader.</p>
<p>We can try to understand the internal working of the <em>loadClass()</em> method from the source code of <em>java.lang.ClassLoader:</em></p>
</blockquote>
<p>这个方法职责是根据name 参数来加载类。 name参数代表符合条件的类名字。</p>
<p>Java虚拟机调用 loadClass() 方法来解析类引用，设置resolve为true。  然而，它并非每次都需要解析一个类。如果我们仅仅需要确定类是否存在，resolve参数设置为 false.</p>
<p>这个方法充当类加载器的入口点。</p>
<p>我们可以从 java.lang.ClassLoader的源码来理解内部工作：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> Class<span style="color:#f92672">&lt;?&gt;</span> loadClass<span style="color:#f92672">(</span>String name<span style="color:#f92672">,</span> <span style="color:#66d9ef">boolean</span> resolve<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">throws</span> ClassNotFoundException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">synchronized</span> <span style="color:#f92672">(</span>getClassLoadingLock<span style="color:#f92672">(</span>name<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// First, check if the class has already been loaded
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        Class<span style="color:#f92672">&lt;?&gt;</span> c <span style="color:#f92672">=</span> findLoadedClass<span style="color:#f92672">(</span>name<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>c <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">long</span> t0 <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">nanoTime</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>parent <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        c <span style="color:#f92672">=</span> parent<span style="color:#f92672">.</span><span style="color:#a6e22e">loadClass</span><span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        c <span style="color:#f92672">=</span> findBootstrapClassOrNull<span style="color:#f92672">(</span>name<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>ClassNotFoundException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e">// ClassNotFoundException thrown if class not found
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    <span style="color:#75715e">// from the non-null parent class loader
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>c <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e">// If still not found, then invoke findClass in order
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    <span style="color:#75715e">// to find the class.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    c <span style="color:#f92672">=</span> findClass<span style="color:#f92672">(</span>name<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>resolve<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                resolveClass<span style="color:#f92672">(</span>c<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> c<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><blockquote>
<p>The default implementation of the method searches for classes in the following order:</p>
<ol>
<li>Invokes the <em>findLoadedClass(String)</em> method to see if the class is already loaded.</li>
<li>Invokes the <em>loadClass(String)</em> method on the parent class loader.</li>
<li>Invoke the <em>findClass(String)</em> method to find the class.</li>
</ol>
</blockquote>
<p>搜索类方法的默认实现是如下顺序：</p>
<ol>
<li>调用 findLoaderClass(String) 方法可按是否已经加载</li>
<li>调用 父加载器的 loadClass(String) 方法</li>
<li>调用 findClass(String)来查找</li>
</ol>
<blockquote>
<h3 id="52-the-defineclass-method">5.2. The <em>defineClass()</em> Method</h3>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">final</span> Class<span style="color:#f92672">&lt;?&gt;</span> defineClass<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>  String name<span style="color:#f92672">,</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> b<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> off<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> len<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> ClassFormatError
</span></span></code></pre></div><blockquote>
<p>This method is responsible for the conversion of an array of bytes into an instance of a class. Before we use the class, we need to resolve it.</p>
<p>If the data doesn&rsquo;t contain a valid class, it throws a <em>ClassFormatError.</em></p>
<p>Also, we can&rsquo;t override this method, since it&rsquo;s marked as final.</p>
</blockquote>
<p>这方法只是是转换一个字节数组为一个类实例。我们用类之前，我们需要调用它。</p>
<p>如果数据不包括一个合法的类，就会抛出 ClassFormatError</p>
<p>我们不能覆盖这个方法，因为它被标记为 final.</p>
<blockquote>
<h3 id="53-the-findclass-method">5.3. The <em>findClass()</em> Method</h3>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> Class<span style="color:#f92672">&lt;?&gt;</span> findClass<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>  String name<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> ClassNotFoundException
</span></span></code></pre></div><blockquote>
<p>This method finds the class with the fully qualified name as a parameter. We need to override this method in custom class loader implementations that follow the delegation model for loading classes.</p>
<p>In addition, <em>loadClass()</em> invokes this method if the parent class loader can&rsquo;t find the requested class.</p>
<p>The default implementation throws a <em>ClassNotFoundException</em> if no parent of the class loader finds the class.</p>
</blockquote>
<p>这个方法根据全路径名称来找类。我们需要覆盖它在自定义类加载器实现里，遵从加载类的委派模型。</p>
<p>另外，loadClass 调用这方法当父类加载器没有找到请求的类时候。</p>
<p>默认实现抛出一个 ClassNotFoundException 如果父亲加载器没有找到类。</p>
<blockquote>
<h3 id="54-the-getparent-method">5.4. The <em>getParent()</em> Method</h3>
</blockquote>
<p><code>public final ClassLoader getParent()</code></p>
<blockquote>
<p>This method returns the parent class loader for delegation.</p>
<p>Some implementations, like the one seen before in Section 2, use <em>null</em> to represent the bootstrap class loader.</p>
</blockquote>
<p>这个方法返回委派的父加载器。</p>
<p>有些实现，使用null来代表bootstrap类加载器。</p>
<blockquote>
<h3 id="55-the-getresource-method">5.5. The <em>getResource()</em> Method</h3>
</blockquote>
<p><code> public URL getResource(String name)</code></p>
<blockquote>
<p>This method tries to find a resource with the given name.</p>
<p>It will first delegate to the parent class loader for the resource. <strong>If the parent is *null*, the path of the class loader built into the virtual machine is searched.</strong></p>
<p>If that fails, then the method will invoke <em>findResource(String)</em> to find the resource. The resource name specified as an input can be relative or absolute to the classpath.</p>
<p>It returns an URL object for reading the resource, or null if the resource can&rsquo;t be found or the invoker doesn&rsquo;t have adequate privileges to return the resource.</p>
<p>It&rsquo;s important to note that Java loads resources from the classpath.</p>
<p>Finally, <strong>resource loading in Java is considered location-independent,</strong> as it doesn&rsquo;t matter where the code is running as long as the environment is set to find the resources.</p>
</blockquote>
<p>这个方法尝试根据给定名字来找资源。</p>
<p>首先会委派父加载器去找资源。如果 父亲是 null, 虚拟机内建的类加载器路径就找到了。</p>
<p>如果失败，方法会调用 findResource(String)来找资源。资源名字明确作为一个输入，可以是相对或绝对路径。</p>
<p>返回一个URL对象来读资源，或者资源找不到或调用者没有权限，就返回null。</p>
<p>留意到Java加载资源从classpath 是很重要的。</p>
<p>最后，Java中的资源加载被认为是位置无关的，因为只要将环境设置为查找资源，代码在哪里运行并不重要。</p>
<blockquote>
<h2 id="6-context-classloaders">6. Context Classloaders</h2>
<p>In general, context class loaders provide an alternative method to the class-loading delegation scheme introduced in J2SE.</p>
<p>Like we learned before, <strong>classloaders in a JVM follow a hierarchical model, such that every class loader has a single parent with the exception of the bootstrap class loader.</strong></p>
<p>However, sometimes when JVM core classes need to dynamically load classes or resources provided by application developers, we might encounter a problem.</p>
<p>For example, in JNDI, the core functionality is implemented by the bootstrap classes in <em>rt.jar.</em> But these JNDI classes may load JNDI providers implemented by independent vendors (deployed in the application classpath). This scenario calls for the bootstrap class loader (parent class loader) to load a class visible to the application loader (child class loader).</p>
<p><strong>J2SE delegation doesn&rsquo;t work here, and to get around this problem, we need to find alternative ways of class loading. This can be achieved using thread context loaders.</strong></p>
<p>The <em>java.lang.Thread</em> class has a method, *<strong>getContextClassLoader(),* that returns the *ContextClassLoader* for the particular thread</strong>. The <em>ContextClassLoader</em> is provided by the creator of the thread when loading resources and classes.</p>
<p>If the value isn&rsquo;t set, then it defaults to the class loader context of the parent thread.</p>
</blockquote>
<p>上下文类加载器</p>
<p>通常，context 类加载器提供一个可供选择的方法给 类加载委派语法 使用J2SE.</p>
<p>就像我们之前了解的， 类加载器器在JVM中遵从一个竖向的模型，每个类加载器有一个单独的父亲除了 bootstrap 类加载器。</p>
<p>然而，有时应用开发者需要JVM核心类动态加载类或者资源，我们可能会遇到问题。</p>
<p>例如， 在JNDI， 核心方法是在rt.jar 的bootstrap 类实现的 。但是这些JDNI 类可能加载 JDNI提供者实现通过独立的 vendors(部署在应用 类路径)。此场景调用bootstrap类加载器(父类加载器)加载 application加载器(子加载器)可见的类。</p>
<p>J2SE委派在这里不工作，围绕这个问题，我们需要寻找类加载的替代方法。这可以使用线程context加载器来实现。</p>
<p>java.lang.Thread 类有一个方法， getContextClassLoader() ， 返回 ContextClassLoader 为特定线程。 ContextClassLoader 是线程创建者提供的当加载资源和类时候。</p>
<p>如果值没有设置，默认使用付线程的类加载器上下文。</p>
<blockquote>
<h2 id="7-conclusion"><strong>7. Conclusion</strong></h2>
<p>Class loaders are essential to execute a Java program. In this article, we provided a good introduction to them.</p>
<p>We discussed the different types of class loaders, namely Bootstrap, Extensions, and System class loaders. Bootstrap serves as a parent for all of them, and is responsible for loading the JDK internal classes. Extensions and system, on the other hand, load classes from the Java extensions directory and classpath, respectively.</p>
<p>We also learned how class loaders work and examined some features, such as delegation, visibility, and uniqueness. Then we briefly explained how to create a custom class loader. Finally, we provided an introduction to Context class loaders.</p>
<p>As always, the source code for these examples can be found <a href="https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-jvm">over on GitHub</a>.</p>
</blockquote>
<p>总结</p>
<p>类加载器是执行Java程序的要点。这篇文章，我们提供了好的介绍。</p>
<p>我们讨论了不同类型的类加载器，叫 Bootstrap, Extension,和system 类加载器。 Bootstrap服务为所有的父类加载器，职责是加载JDK内部类。另一方面，扩展和系统分别从Java扩展目录和类路径加载类。</p>
<p>我们也学到了类加载器如何工作，检查了一些特性，例如委派，可见性和不重复行。之后解释了创建一个自定义加载器。最后，我们提供了介绍Context 类加载器。</p>
]]></content></item><item><title>Week1040_Share</title><link>/posts/arts/week1040_share/</link><pubDate>Fri, 31 Mar 2023 15:45:48 +0000</pubDate><guid>/posts/arts/week1040_share/</guid><description>Share - 数据结构和算法开篇 主要重点 常用的数据结构和算法各有10个，只要逐一攻克，就掌握大部分情况了。
10个数据结构：
数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie数
10个算法：
递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法
以上是基础，掌握后再解其他复杂的就会很快。
学习时候注重思考四点：
来历 自身特点 适合解决的问题 实际应用场景 注意分析算法好坏的指标：
空间复杂度 （用内存多寡） 时间复杂度 （计算步骤和数据量的关系(线性、指数、对数、常量&amp;hellip;)） 参考 数据结构与算法之美-极客时间-王争</description><content type="html"><![CDATA[<h2 id="share---数据结构和算法开篇">Share - 数据结构和算法开篇</h2>
<h2 id="主要重点">主要重点</h2>
<p>常用的数据结构和算法各有10个，只要逐一攻克，就掌握大部分情况了。</p>
<p>10个数据结构：</p>
<blockquote>
<p>数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie数</p>
</blockquote>
<p>10个算法：</p>
<blockquote>
<p>递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法</p>
</blockquote>
<p>以上是基础，掌握后再解其他复杂的就会很快。</p>
<p>学习时候注重思考四点：</p>
<ul>
<li>来历</li>
<li>自身特点</li>
<li>适合解决的问题</li>
<li>实际应用场景</li>
</ul>
<p>注意分析算法好坏的指标：</p>
<ul>
<li>空间复杂度 （用内存多寡）</li>
<li>时间复杂度  （计算步骤和数据量的关系(线性、指数、对数、常量&hellip;)）</li>
</ul>
<hr>
<p>参考 <a href="https://time.geekbang.org/column/intro/100017301?tab=catalog">数据结构与算法之美-极客时间-王争</a></p>
]]></content></item><item><title>Week1040_Tip</title><link>/posts/arts/week1040_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:48 +0000</pubDate><guid>/posts/arts/week1040_tip/</guid><description>Tip - 窗口函数 Lead， Lag 近来接触了SQL中的 window function . 窗口函数主要作用在对结果集 跨越操作， 如上一条记录、行号、排序等。
平时使用最多的是 row_numer, 作为行号来处理，
随之的是 rank, dense_rank， 近来有一个需求是比较今天、昨天的差额，就用到了适合临近行的 Lead 和 Lag
window function的结构：
window_function ( expr ) OVER ( PARTITION BY ... ORDER BY ... frame_clause ) LEAD, LAG 首先字面意思理解， Lead代表领先的， LAG慢的，落后的， 都是一个相对概念， 相对的就是 current row.
在使用时候，比较模糊的是 Lead领先 current row, 是向上领先还是向下领先？
jack 23 rose 24 bob 34 jim 14 比如 current row 是 3 bob, 那么 lead（bob）， 是2 rose 还是 jim?</description><content type="html"><![CDATA[<h2 id="tip---窗口函数-lead-lag">Tip - 窗口函数 Lead， Lag</h2>
<p>近来接触了SQL中的  window function .  窗口函数主要作用在对结果集 跨越操作， 如上一条记录、行号、排序等。</p>
<p>平时使用最多的是 row_numer, 作为行号来处理，</p>
<p>随之的是  rank, dense_rank， 近来有一个需求是比较今天、昨天的差额，就用到了适合临近行的 Lead 和 Lag</p>
<p>window function的结构：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>window_function ( expr ) OVER ( 
</span></span><span style="display:flex;"><span>  PARTITION <span style="color:#66d9ef">BY</span> ... 
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span> ... 
</span></span><span style="display:flex;"><span>  frame_clause 
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h3 id="lead-lag">LEAD, LAG</h3>
<p>首先字面意思理解， Lead代表领先的，  LAG慢的，落后的， 都是一个相对概念， 相对的就是 current row.</p>
<p>在使用时候，比较模糊的是 Lead领先 current row, 是向上领先还是向下领先？</p>
<ol>
<li>jack 23</li>
<li>rose 24</li>
<li>bob 34</li>
<li>jim 14</li>
</ol>
<p>比如 current row 是 3  bob, 那么 lead（bob）， 是2 rose 还是 jim?  其实和 over函数的排序有关</p>
<p>lead(name) over(order by id asc)   ，那么就是jim.</p>
<p>LAG正好是相反的。</p>
]]></content></item><item><title>Week1041_algorithm</title><link>/posts/arts/week1041_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:48 +0000</pubDate><guid>/posts/arts/week1041_algorithm/</guid><description>ARTS - Algorithm - 杨辉三角 给定一个非负整数 *numRows，*生成「杨辉三角」的前 numRows 行。
在「杨辉三角」中，每个数是它左上方和右上方的数的和。
分析 杨辉三角属于简单类型的题。根据题目分析，我们总结几个杨辉三角的特点：
每一层数据依赖相邻他的上一层数据， 第n层有n个数据 每一层两边外侧是1， 也就是说，每一层的起点和终点元素是1\ 根据以上特点推断代码的核心逻辑，进行第n层数据确定时候，需要知道n-1层的数据， 第n层第 i 个元素 是n-1层 第 i-1元素 和 第 i 个元素的和。
代码 class Solution { public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generate(int numRows) { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(numRows); List&amp;lt;Integer&amp;gt; one = new ArrayList&amp;lt;&amp;gt;(1); one.add(1); list.add(one); for (int i = 2; i &amp;lt;= numRows; i++) { // 上一层数据 List&amp;lt;Integer&amp;gt; lastLayer = list.get(i - 1 - 1); // 第n层有n个数 List&amp;lt;Integer&amp;gt; layer = new ArrayList&amp;lt;&amp;gt;(i); // 第1个是1， layer.</description><content type="html"><![CDATA[<h2 id="arts---algorithm---杨辉三角httpsleetcodecnproblemspascals-triangle">ARTS - Algorithm - <a href="https://leetcode.cn/problems/pascals-triangle/">杨辉三角</a></h2>
<p>给定一个非负整数 *<code>numRows</code>，*生成「杨辉三角」的前 <em><code>numRows</code></em> 行。</p>
<p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p>
<p><img src="http://qiniu.honeywen.com/img/20230104230929.png" alt="image-20230104230928121"></p>
<h3 id="分析">分析</h3>
<p>杨辉三角属于简单类型的题。根据题目分析，我们总结几个杨辉三角的特点：</p>
<ol>
<li>每一层数据依赖相邻他的上一层数据，</li>
<li>第n层有n个数据</li>
<li>每一层两边外侧是1， 也就是说，每一层的起点和终点元素是1\</li>
</ol>
<p>根据以上特点推断代码的核心逻辑，进行第n层数据确定时候，需要知道n-1层的数据， 第n层第 i 个元素 是n-1层 第 i-1元素 和 第 i 个元素的和。</p>
<h3 id="代码">代码</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">generate</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> numRows<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> list <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(</span>numRows<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> one <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        one<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>one<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;=</span> numRows<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 上一层数据
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> lastLayer <span style="color:#f92672">=</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 第n层有n个数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> layer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 第1个是1， 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            layer<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> i<span style="color:#f92672">;</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 本层第 j 个数，是上一层第 j-1 , j 的和
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// 如果是最后一个，直接赋值1，跳出本次循环
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>j <span style="color:#f92672">==</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    layer<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">int</span> rs <span style="color:#f92672">=</span> lastLayer<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>j<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> lastLayer<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>j<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                layer<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>rs<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>layer<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> list<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="优化">优化</h3>
<p>先解决，再优化。 我们来看如何优化上面代码。</p>
<p>从我们得出的结论下手：</p>
<p><strong>第n层有n个数据</strong>。  <strong>每一层的起点和终点元素是1</strong></p>
<p>我们上面的代码，首先第一层特殊处理了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> one <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>one<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>one<span style="color:#f92672">);</span>
</span></span></code></pre></div><p>这一层能否放进循环里？ 我们的i表示什么？ 内循环里 j表示什么？</p>
<h4 id="i-表示什么">i 表示什么</h4>
<p>i表示的第几层，  如果i 从0开始， 那么第  i+1 层就有  i+1个数据。</p>
<h4 id="j-表示什么">j 表示什么</h4>
<p>j 表示当前行第 j 个数据。j 和 i 的关系呢?  j 只能 &lt; i +1。</p>
<p>所以，核心逻辑修改为:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">generate</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> numRows<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> list <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> numRows<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> row <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>j <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> j <span style="color:#f92672">==</span> i<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    row<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    row<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>list<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">).</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>j <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">).</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>j<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>row<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> list<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1041_tip</title><link>/posts/arts/week1041_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:48 +0000</pubDate><guid>/posts/arts/week1041_tip/</guid><description>ARTS - Tip spark建hive表insert 时候的一些问题
使用pyspark 来创建hive表并insert时候，一直没遇到啥问题。最近在增加了几个字段，然后跑任务后，发现使用hive查数据dt过滤，新增的字段是NULL， 但是用sparksql查出来确实有值的。开发的回复是，都用hive sql来建表，sparksql建表有问题。至于是什么问题，暂时还不清楚，需要细查一下。</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<p>spark建hive表insert 时候的一些问题</p>
<p>使用pyspark 来创建hive表并insert时候，一直没遇到啥问题。最近在增加了几个字段，然后跑任务后，发现使用hive查数据dt过滤，新增的字段是NULL， 但是用sparksql查出来确实有值的。开发的回复是，都用hive sql来建表，sparksql建表有问题。至于是什么问题，暂时还不清楚，需要细查一下。</p>
]]></content></item><item><title>Week1037_review</title><link>/posts/arts/week1037_review/</link><pubDate>Fri, 31 Mar 2023 15:45:47 +0000</pubDate><guid>/posts/arts/week1037_review/</guid><description>Apache Kafka in Depth In the era of Big Data, lots and lots of data(volume) are being produced every second(velocity) from various sources like social media, blogs that I am writing currently, e-commerce, etc., which gets stored across different platforms in different schemas(varieties). In order to perform any ETL (Extract, Transform, Load) operation, a messaging/streaming system is needed which should be asynchronous and loosely coupled i.e. data from various sources/clients like hdfs, Cassandra, RDBMS, application log file, etc.</description><content type="html"><![CDATA[<h2 id="apache-kafka-in-depthhttpsmediumcomsonusharmamnnitapache-kafka-in-depth-49aae1e844be"><a href="https://medium.com/@sonusharma.mnnit/apache-kafka-in-depth-49aae1e844be">Apache Kafka in Depth</a></h2>
<blockquote>
<p>In the era of Big Data, lots and lots of data(volume) are being produced every second(velocity) from various sources like social media, blogs that I am writing currently, e-commerce, etc., which gets stored across different platforms in different schemas(varieties). In order to perform any ETL (Extract, Transform, Load) operation, a messaging/streaming system is needed which should be asynchronous and loosely coupled i.e. data from various sources/clients like hdfs, Cassandra, RDBMS, application log file, etc. could be dumped at a single place at the same time without all the clients depending on each other. One of the solutions to the problem is <a href="http://kafka.apache.org/">Kafka</a> — An open-source distributed streaming platform created by LinkedIn and later donated to Apache. It is written in Scala.</p>
</blockquote>
<p>大数据时代，大量的数据在每秒钟从各种渠道像社交媒体，我在写的博客，电子商务等生产出来，被不同平台不同类别的存储起来。为了执行任意ETL（Extract 提取,   Transform转换, Load装载）操作，就需要一个消息流系统，可以异步把松散耦合数据从多个数据源像HDFS（分布式文件系统），Cassandra（分布式NoSQL数据库）， RDBMS（关系型数据库系统），应用日志等 同时存到一个地方，不用依赖任何客户端。一个解决方案是 Kafka, Linkedin开源捐赠给Apache的一个分布式流平台。它是用Scala写的。</p>
<h3 id="terminology-术语">Terminology 术语</h3>
<blockquote>
<p>Messages: It is basically a key-value pair contains useful data/record in the value section.</p>
</blockquote>
<blockquote>
<p>Topic: For multi-tenancy, multiple topics can be created which is just a feed name to which messages are published and &gt; subscribed.</p>
</blockquote>
<blockquote>
<p>Offset: Messages are stored in a sequential form similar to commit log and a sequential id is provided to each message starting from 0.</p>
<p>Broker: Kafka cluster consists of brokers which are just nodes in the cluster hosting stateless server maintained by a zookeeper. Since there is no master-slave concept here, all brokers are peers. Let&rsquo;s understand zookeeper first before proceeding further.</p>
</blockquote>
<p>Messages: 它基本上是一个 键值对，值上包含有用的数据/记录。</p>
<p>Topic: 对于多租户，多个创建多个主题，这只是将消息发布和订阅的源名称。</p>
<p>Offset: 偏移量。消息存储在一个有序列的表中，类似于提交日志和一个有序ID给每个消息，从0开始。</p>
<p>Broker: 代理。kafka 集群由代理组成，代理只是集群中的节点，托管在zookeeper维护的无状态服务器。这里没有主从概念，所有的代理都是同级。更深入前我们先了解zookeeper.</p>
<h3 id="what-is-zookeeper-and-why-is-it-needed-in-kafka-cluster">What is Zookeeper and Why is it needed in Kafka Cluster?</h3>
<blockquote>
<p>Zookeeper is a system for distributed cluster management. It is a distributed key-value store. It is highly-optimized for reads but writes are slower. It consists of an odd number of znodes known as an ensemble. In Kafka, it is needed for:</p>
</blockquote>
<ol>
<li>Controller Election: All the read and writes from a partition for particular topics happen through the leader of the replica. Whenever the leader goes down, a new leader is elected by the zookeeper.</li>
<li>Configuration of Topics: Metadata related to a topic that whether a particular topic is sitting in the broker, how many partitions are there, etc. are stored at the zookeeper end and are continuously in-sync whenever a message is produced.</li>
<li>Access Control List(ACL) of a topic is maintained at a zookeeper.</li>
</ol>
<p>什么是zookeeper ,为什么kafka集群中需要它？</p>
<p>zookeeper是一个分布式集群管理系统。它是分布式键值对存储。对读操作是高度优化的，但是写就慢些。它由奇数个znodes组成，被称为簇。在kafka，它被用来：</p>
<ol>
<li>控制选举：分区中所有特定主体的读写都是由通过副本的leader进行的。一旦leader停止，一个新leader被zookeeper选举。</li>
<li>主题配置：与某个主题相关的元数据，该主题是否位于代理中，有多少分区，等等，存储在zookeeper端，并在消息产生时持续同步。</li>
<li>一个主题的操作控制列表维护在zookeeper</li>
</ol>
<h3 id="why-kafka">Why Kafka?</h3>
<blockquote>
<p>Some of the key features of Kafka, which is a challenge for conventional messaging system makes it more popular:</p>
<ol>
<li>High Throughput: Throughput stands for the number of messages in a second (rate of messages) that can be processed. As we can partition the topic which can spread across different brokers, we can achieve thousands of reads and writes per second.</li>
<li>Distributed: A distributed system is one which is split into multiple running machines, all of which work together in a cluster to appear as one single node to the end-user. Kafka is distributed as it stores, read and write the data on several nodes called a broker which along with Zookeeper collectively creates an ecosystem known as <em>Kafka Cluster</em>**.**</li>
<li>Persistence: The message queue is maintained completely on a disk rather than keeping it in memory and several copies/replica called as ISR (in-sync replica)of the same data can be stored across different nodes. Hence, there is no chance of data loss due to failover scenarios and makes it durable.</li>
<li>Scalability: Any system can be scaled horizontally or vertically. Vertical scalability means adding more resources like CPU, Memory to the same nodes and incurs a high operational cost. Horizontal scalability can be achieved by simply adding a few more nodes in the cluster which increases the capacity demands. Kafka scales horizontally means we can add a new nodes/broker in the cluster whenever we run out of capacity/space.</li>
<li>Fault-Tolerant: If we have n topics each having m partitions then all n*m partitions will be replicated on q brokers if we set the replication factor to q. Hence, making it tolerant as a factor of q-1 i.e. we can afford the failure of q-1 broker nodes. <em>Replication factor should always be less than or equal to the number of brokers as violating this condition will end up having two copies of the same replica on a single broker which doesn’t make sense.</em></li>
</ol>
</blockquote>
<h3 id="为啥是kafaka">为啥是kafaka?</h3>
<p>kafka的一些关键特性，对传统消息系统是个挑战，这使得它更流行。</p>
<ol>
<li>高吞吐量。吞吐量代表一秒内处理消息的数量(消息效率)。我们可以对分布在不同代理上的主题进行分区，实现每秒千次读写。</li>
<li>分布式的：一个分布式系统就是分割成多台机器运行的系统，在一个集群里一起工作对终端用户来说是一个节点展示。kafka的分布式是它的读写数据发生在几个被zookeeper管理的叫做代理的节点上，它与zookeeper一起创建了一个称为kafka集群的生态系统。</li>
<li>持久化：消息队列完全维护在一个硬盘而不是保持在内存中，几个副本叫做ISR(in-sync副本)被不同节点存储相同数据。因此，不存在因灾备切换导致的数据丢失的可能，使它更持久。</li>
<li>可扩展性：任何系统都可以水平、垂直伸缩。垂直伸缩意味着给相同节点增加更多资源，像CPU，内存，导致业务成本很高。水平扩展可以通过简单的增加一些集群节点来实现，提高容量。Kafka水平扩展意味我们可以在超过容量空间时在集群中增加一个新的 节点/代理 。</li>
<li>容错性：如果我们有n个主题，每个有m个分片，所有的n*m个分片 将会复制在q个代理上，如果我们设置代理书是q个。因此我们能承受q-1个代理节点出错。复制因子应该始终小于或等于代理的数量，因为违反这个条件将导致同一个副本在一个代理上有两个副本，这是没有意义的。</li>
</ol>
<blockquote>
<p><em>Note: Kafka guarantees at-least-once delivery by default and allows the user to implement at most once delivery by disabling retries on the producer and committing its offset prior to processing a batch of messages.</em></p>
</blockquote>
<p>注意:Kafka默认情况下保证最少一次传递，并允许用户通过在处理一批消息之前禁用生成器上的重试和提交其偏移量来实现最多一次传递</p>
<blockquote>
<h2 id="hands-on">Hands-on:</h2>
<p>Kafka scala library can be downloaded from here: <a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a> which contains the zookeeper as well.</p>
<p>动手做,先下载。</p>
</blockquote>
<p>After extraction of zip, let’s say HOME_DIR = kafka_2.12–2.3.0/</p>
<p>解压后设置 HOME_DIR = kafka_2.12-2.3.0/</p>
<p>First of all, we need to turn the zookeeper up by providing the dataDir name and port in HOME_DIR/config/zookeeper.properties.</p>
<p>首先，打开zookeeper</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>./bin/zookeeper-server-start.sh ../config/zookeeper.properties
</span></span></code></pre></div><p>Zookeeper will be up and running on 2181 port by default. Now, we need to start Kafka server. the script is located in the bin folder. Server related config can be made in HOME_DIR/config/server.properties. Let’s make</p>
<p>zk默认使用2181端口运行，然后我们需要启动kafka服务。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#a6e22e">broker.id</span><span style="color:#f92672">=</span><span style="color:#e6db74">101</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">listeners</span><span style="color:#f92672">=</span><span style="color:#e6db74">PLAINTEXT:localhost:9091</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">logldirs</span><span style="color:#f92672">=</span><span style="color:#e6db74">some_log_dir/kafka-logs-1</span>
</span></span></code></pre></div><p><code>./bin/kafka-servert-start.sh ../config/server.properties</code></p>
<p>This will start a Kafka server at port 9091. Cheatsheets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>Creating a topic:
</span></span><span style="display:flex;"><span>bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor <span style="color:#ae81ff">3</span> partitions <span style="color:#ae81ff">1</span> --topic topic1
</span></span><span style="display:flex;"><span>Describing a particular topic:
</span></span><span style="display:flex;"><span>bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic topic1
</span></span><span style="display:flex;"><span>Deleting a topic:
</span></span><span style="display:flex;"><span>bin/kafka-topics.sh --delete --zookeeper localhost:2181 --topic topic1
</span></span></code></pre></div><p>Note: Partition once set to a particular value cannot be decreased, it can only be increased.</p>
<p>注意分片一旦设置为特定值就不能减少，只能增加。</p>
<h3 id="how-producer-writes-a-message">How Producer writes a message?</h3>
<p>生产者怎么写信息的？</p>
<blockquote>
<p>The Producer first fetches the Metadata of the topic in order to know which broker needs to be updated with the message. Metadata is also stored at the brokers and is in continuous sync with the zookeeper because the zookeeper nodes are generally very less as compared to the no. of brokers. So, many producers would like to connect to the zookeeper to access the metadata and the performance degrades. Now, once the producer gets the metadata about the topic and partition, it writes the message in logs of the leader broker node and followers (ISR) copy it.</p>
</blockquote>
<p>生产者首先拉取主题的元数据以便于知道那个代理需要更新消息。元数据也被存在代理上并与zookeeper保持同步，因为zookeeper节点通常非常少，比代理节点数目少得多。所以很多生产者乐意去连接zookeeper操作元数据，这样会导致性能降低。现在一旦生产者获得主题和分片元数据，它就写消息进leader代理的日志，跟随者会复制。</p>
<p><img src="https://miro.medium.com/max/1400/0*TtVpBYmH-uuZsqSG.png" alt=""></p>
<blockquote>
<p>This writes operation can be either <strong>synchronous</strong> [i.e. the status about the message acknowledgment is returned to the producer only when the followers also copy that message in their log] or <strong>asynchronous</strong> [i.e. only the leader is updated with the new message, status is sent to the producer]. <strong>Retention Period:</strong> Messages on a disk can be persisted for a particular duration of time known as retention period, after that period automatic purging of the old messages will happen and will no longer be available for consumption. By default, it’s set to 7 days.</p>
<p>这种写操作可以既不同步[消息状态承认返回生产者仅当follower也复制信息到他日志]也不异步[learder用新消息更新，状态发给生产者]。保留周期:磁盘上的消息可以持续一段特定的时间，这段时间称为保留期，在此之后，将自动清除旧消息，不再可供使用。默认情况下，设置为7天</p>
</blockquote>
<p>The message can be written to a topic in three Strategies:</p>
<p>a. send(key, value, topic, partition): specifically providing the partition in which writes needs to happen. This is not encouraged to use as it may create an imbalance in partition size.</p>
<p>b. send(key, value, topic): Here, default HashPartitioner is used to determine the partition in which the message will be written by finding the hash of key and taking mod with no. of partition for that topic. Our own custom Partitioner can also be written.</p>
<p>c. send(key=null, value, topic): In this case, the message is stored in all the partition in a round-robin fashion.</p>
<p>消息可以用三种策略写到主题：</p>
<p>a. send(key, value, topic, partition): 明确提供要写入的分区。不推荐使用，可能造成分区大小不平衡</p>
<p>b.send(key, value, topic) : 默认哈希分区被用来确定消息写入那个分区，使用key 哈希mod主题分区编号.我们自有自定义分区也能写入。</p>
<p>c. send(key=null, value, topic): : 这种情况，消息循环方式存储在所有分区</p>
<blockquote>
<p>A producer can send the messages in the form of a batch to improve efficiency. Once a batch reaches a particular size limit, it is dumped to the queue once. However, the offset will be sequential only for all the individual message and are deflated at the consumer end before passing it to the consumer API.</p>
<p>一个生产者可以通过批量发送消息提高效率。一旦一个批任务到达分区上限，会备份到队列一次。但是，偏移量仅对所有单独的消息是连续的，并且在将其传递给消费者API之前在消费者端减少。</p>
</blockquote>
<blockquote>
<h2 id="producer-api-">Producer API :</h2>
<p>A Kafka producer is an application that can act as a source of data in a Kafka cluster. A producer can publish messages to one or more Kafka topics using the API provided by the Kafka jar files/dependencies. A properties object containing the configuration on storing the message needs to set before sending the message. Main classes ProducerRecord, KafkaProducer, Callback.</p>
</blockquote>
<p>生产者API</p>
<p>一个kafka生产者是一个作为集群数据源的应用。一个生产者可以发布消息到一个多个kafka主题通过 kafka jar文件提供的API。一个属性对象包括储存信息的配置，需要被发送消息前设置。主类 ProducerRecord， KafkaProducer, Callback.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String TOPIC_NAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;topic1&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> Properties <span style="color:#a6e22e">createProperties</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Properties properties <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Properties<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        properties<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;bootstrap.servers&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;localhost:9091,localhost:9092&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        properties<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;key.serializer&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;org.apache.kafka.common.serialization.StringSerializer&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        properties<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;value.serializer&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;org.apache.kafka.common.serialization.StringSerializer&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> properties<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">produce</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Producer<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> String<span style="color:#f92672">&gt;</span> producer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> KafkaProducer<span style="color:#f92672">&lt;&gt;(</span>createProperties<span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>        ProducerRecord<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> String<span style="color:#f92672">&gt;</span> record <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ProducerRecord<span style="color:#f92672">&lt;&gt;(</span>TOPIC_NAME<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;SyncKey&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;SyncMessage&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            RecordMetadata recordMetadata <span style="color:#f92672">=</span> producer<span style="color:#f92672">.</span><span style="color:#a6e22e">send</span><span style="color:#f92672">(</span>record<span style="color:#f92672">).</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Message is sent to Partition no &#34;</span> <span style="color:#f92672">+</span> recordMetadata<span style="color:#f92672">.</span><span style="color:#a6e22e">partition</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; and offset &#34;</span> <span style="color:#f92672">+</span> recordMetadata<span style="color:#f92672">.</span><span style="color:#a6e22e">offset</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>InterruptedException <span style="color:#f92672">|</span> ExecutionException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            e<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            producer<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><blockquote>
<p>How consumer retrieves a message?</p>
</blockquote>
<blockquote>
<p>The consumer also retrieves the messages in the same way producer writes it by looking up into the metadata and reads the message from the leader partition. As Kafka is very fast and can get real-time messages, a single consumer will certainly have latency in reading a big chunk of a message from a topic known as consumer lag.</p>
</blockquote>
<p>消费者如何取数据？</p>
<p>消费者使用生产者写入数据同样的方式，浏览元数据读leader分区来获取数据。kafka很快，可以获得实时消息，单个消费者在从某个主题读取大量消息时肯定会有延迟，即所谓的消费者延迟。</p>
<blockquote>
<p>To overcome this problem, A <strong>Consumer group</strong> can be created which consists of several consumers having the same group id. Each consumer connects with a unique partition divided equally among all the consumers. The assignment of the partition to a particular consumer is the responsibility of <strong>Group Coordinator — One of the brokers in the cluster is nominated for this role</strong>. In order to manage the list of active consumers, all the consumer of a group sends their heartbeat to the group coordinator. <em>The number of consumers in a group should be less than or equal to the number of partitions in that particular topic, violating the condition will end up in a situation where a consumer sits idle.</em></p>
<p>为了克服此问题，可以创建一个“消费方”组，该“消费方”组由多个具有相同组标识的消费者组成。 每个使用者都连接有一个唯一的分区，该分区在所有使用者之间平均分配。 将分区分配给特定的使用者是组协调员的责任-群集中的一个经纪人被提名担任此角色。 为了管理活动使用者的列表，组中的所有使用者将他们的心跳发送到组协调器。 组中使用方的数量应小于或等于该特定主题中的分区的数量，违反条件将最终导致某个用户闲置的情况。</p>
</blockquote>
<blockquote>
<p>More than one consumer can read a single topic at the same time. Now, in order to remember till which offset the particular read, storage known as <strong>consumer offset</strong> as a hidden topic - __consumer_offsets is provided to store the last offset of a partition read by the consumer of a particular group.</p>
<p>The Consumer offset has the key as — &gt; [Group Id, Topic, Partition] and value — &gt; [Offset, …]</p>
<p>多个消费者可以同时读取单个主题。现在为了记住那个分区读的，存储为消费者偏移量 作为隐藏主题 topic-_consumer_offsets 用来存储一个分区组的消费者分区读取的最后偏移量。</p>
</blockquote>
<blockquote>
<h2 id="consumer-api">Consumer API:</h2>
<p>Similar to producer API, Kafka provides classes to connect to the bootstrap servers and get the messages. Deserializer needs to be written when passing a message of other than standard data types.</p>
<p>Java API of Kafka for Producer and Consumer can be found here: <a href="https://github.com/ercsonusharma/learnkafka">https://github.com/ercsonusharma/learnkafka</a></p>
</blockquote>
<p>和生产者API一样，Kafka 提供类来连接服务获得消息。</p>
<blockquote>
<h1 id="how-kafka-is-fast">How Kafka is Fast?</h1>
<p>Kafka follows a certain strategy which is part of its design to make it perform better and faster.</p>
<ol>
<li>No Random Disk Access: It uses a sequential data structure known as an immutable queue where read and write operation is always constant time O(1). It appends the message at the end and read from the beginning or from a particular offset.</li>
<li>Sequential I/O: Modern operating systems allocate most of their free memory to disk-caching and are faster for storing and retrieving sequential data.</li>
<li>Zero Copy: The data from disk is unnecessarily loaded into the application memory as it is not being modified at all. So, instead of loading it to the application, it sends the same data from the kernel context buffer over the socket, NIC buffer and to the network.</li>
<li>Batching of messages: Several messages are grouped together in order to avoid the multiple network call.</li>
<li>Message Compression: Before transferring the message over the wire, it is compressed using compression algorithm like gzip, snappy, etc. and decompressed at the consumer API layer.</li>
</ol>
</blockquote>
<p>kafka这么做得到快的？</p>
<p>kafka遵循的一个确切策略使它设计的表现更好更快。</p>
<ol>
<li>没有磁盘随机访问：它使用一个序列的数据结构被称为不变队列，读写操作总是O(1).它从最后拼接消息，从开始读取，或者从一个确定位置</li>
<li>有序IO：现代操作系统分配把绝大部分空闲内存分配给磁盘缓存，更快存储检索有序数据。</li>
<li>0复制：来自于磁盘的数据无序加载进应用缓存，因为它从未被修改。所以不用加载进应用，通过socket，NIC 缓冲发送相同数据从内核缓冲到网络。</li>
<li>批信息：几个信息组合一起避免多次网络调用</li>
<li>消息压缩：网络传输消息之前，先用压缩算法像gzip,snappy等压缩， 消费者api调用再解压缩</li>
</ol>
<blockquote>
<h1 id="how-the-data-reside-on-the-broker-instance--physical-disk">How the data reside on the Broker instance / physical disk?</h1>
<p>All the messages in a broker are stored in the log directory (log-dir-1) configured in the config file before turning the Kafka server up. Inside that directory, a folder containing a partition of a particular topic can be found in the format as topic_name-partition_number e.g. topic1–0. The __consumer_offsets topic is also stored in the same log directory.</p>
<p>数据如何保存在代理实例/物理磁盘上？</p>
<p>所有的代理消息存存储在启动kafka之前配置文件里配置的日志目录(log-dir-1)。该目录下，一个文件包括一个分区确定的主题，可以被发现通过 topic_name-partition_number 如 topic1-0.  _consumer_offsets 主题也存储在相同日志目录。</p>
</blockquote>
<blockquote>
<p>Inside the partition directory of a particular topic, Kafka segment file 0000–00.log, index file 0000–00.index and time index 0000–00.timeindex can be found. All the data belonging to that partition are written in an active segment as a new segment file is created when the old segment size or time limit is reached. Indexes map each offset to their message’s position in the log. Since offset is sequential binary search is applied to find a data index in log file at a particular offset.</p>
<h1 id="log-compacted-topics">Log Compacted Topics</h1>
<p>Duplicate Keys are marked for deletion from segment file. The value here can be updated and deleted by passing a null value to a particular key.</p>
<p>Thanks for reading! Watch this space for advanced Kafka story. Please do read my other stories as well.</p>
</blockquote>
]]></content></item><item><title>Week1037_share</title><link>/posts/arts/week1037_share/</link><pubDate>Fri, 31 Mar 2023 15:45:47 +0000</pubDate><guid>/posts/arts/week1037_share/</guid><description>ARTS - Share 养成写开发文档习惯 一个优秀程序员应该把80%时间用来写文档，20%的时间用于编码。
为什么写文档？ 文档，就像盖楼房的设计图，没有图纸，你是不能开始搬砖的。
写什么文档？ 要干什么？要干成什么样？ 领导有没有给你看需求分析文档？有没有拿着需求分析文档给你宣讲你要做什么？没有？不干活；
测试的同事有没有给你看测试用例文档？有没有给你宣讲？没有？不干活；
你自己明白领导的意图了吗？明白测试同事的意图了吗？
大处着眼小处着手 想明白后，开始想自己要开发的模块里的各个功能模块之间的关系，可以画时序图；
时序图画完了，看看是否有（可能）频繁变化的模块/需求，如果有，请务必使用一些设计模式，
如果要用设计模式，请务必画UML类图，如果没有频繁变化的模块/需求，请一定不要用设计模式；
最后，看看在一个功能模块中，有没有逻辑比较复杂的地方，如果有，请画流程图；
模块和模块之间有没有需要明确的协议？如果有，请把协议写出来。
主要是自己读 上面这一段话，就是你要写的文档，这个文档的读者主要是你，在你的模块出问题之前，别人通常不会读这个文档（不排除你的领导会要求看你这个文档）。
如果你既不需要时序图又不需要类图又没什么协议需要明确，那么，你就可以不写这个文档。另外，如果这个文档写得好，你的代码是不需要任何注释的。</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="养成写开发文档习惯">养成写开发文档习惯</h2>
<p>一个优秀程序员应该把80%时间用来写文档，20%的时间用于编码。</p>
<h3 id="为什么写文档">为什么写文档？</h3>
<p>文档，就像盖楼房的设计图，没有图纸，你是不能开始搬砖的。</p>
<h3 id="写什么文档">写什么文档？</h3>
<h4 id="要干什么要干成什么样">要干什么？要干成什么样？</h4>
<p>领导有没有给你看需求分析文档？有没有拿着需求分析文档给你宣讲你要做什么？没有？不干活；</p>
<p>测试的同事有没有给你看测试用例文档？有没有给你宣讲？没有？不干活；</p>
<p>你自己明白领导的意图了吗？明白测试同事的意图了吗？</p>
<h4 id="大处着眼小处着手">大处着眼小处着手</h4>
<p>想明白后，开始想自己要开发的模块里的各个功能模块之间的关系，可以画时序图；</p>
<p>时序图画完了，看看是否有（可能）频繁变化的模块/需求，如果有，请务必使用一些设计模式，</p>
<p>如果要用设计模式，请务必画UML类图，如果没有频繁变化的模块/需求，请一定不要用设计模式；</p>
<p>最后，看看在一个功能模块中，有没有逻辑比较复杂的地方，如果有，请画流程图；</p>
<p>模块和模块之间有没有需要明确的协议？如果有，请把协议写出来。</p>
<h3 id="主要是自己读">主要是自己读</h3>
<p>上面这一段话，就是你要写的文档，这个文档的读者主要是你，在你的模块出问题之前，别人通常不会读这个文档（不排除你的领导会要求看你这个文档）。</p>
<p>如果你既不需要时序图又不需要类图又没什么协议需要明确，那么，你就可以不写这个文档。另外，如果这个文档写得好，你的代码是不需要任何注释的。</p>
]]></content></item><item><title>Week1038_algorithm</title><link>/posts/arts/week1038_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:47 +0000</pubDate><guid>/posts/arts/week1038_algorithm/</guid><description>Algorithm - 3. 无重复字符的最长子串 给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。
示例 1:
输入: s = &amp;#34;abcabcbb&amp;#34; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;#34;abc&amp;#34;，所以其长度为 3。 分析 一开始毫无头绪，就从能想到的最简单的方法来实现，不考虑空间、时间，只考虑能够解决问题。
方法，穷举 最直接的思路，既然要找出无重复字符最长子串，那么就把所有子串找出来，排除重复的，就能找到无重复的最长子串。
**如何获得子串？**String自带的substr(beginIndex, endIndex)方法。
**如何查找所有子串？**从第一个字符开始，往后取1个、2个、3个&amp;hellip;.组成子串， 然后再第二个字符&amp;hellip;
具体代码：
public int lengthOfLongestSubstring(String s) { if (s == null || s.length() == 0) { return 0; } // 包含所有子串的容器 List&amp;lt;char[]&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); // 遍历所有字符 for (int i = 0; i &amp;lt; s.length(); i++) { char head = s.charAt(i); list.</description><content type="html"><![CDATA[<h2 id="algorithm---3-无重复字符的最长子串httpsleetcodecnproblemslongest-substring-without-repeating-charactersdescription">Algorithm - <a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/">3. 无重复字符的最长子串</a></h2>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>输入: s = &#34;abcabcbb&#34;
</span></span><span style="display:flex;"><span>输出: 3 
</span></span><span style="display:flex;"><span>解释: 因为无重复字符的最长子串是 &#34;abc&#34;，所以其长度为 3。
</span></span></code></pre></div><h3 id="分析">分析</h3>
<p>一开始毫无头绪，就从能想到的最简单的方法来实现，不考虑空间、时间，只考虑能够解决问题。</p>
<h4 id="方法穷举">方法，穷举</h4>
<p><strong>最直接的思路</strong>，既然要找出无重复字符最长子串，那么就把所有子串找出来，排除重复的，就能找到无重复的最长子串。</p>
<p>**如何获得子串？**String自带的<code>substr(beginIndex, endIndex)</code>方法。</p>
<p>**如何查找所有子串？**从第一个字符开始，往后取1个、2个、3个&hellip;.组成子串， 然后再第二个字符&hellip;</p>
<p>具体代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">lengthOfLongestSubstring</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  			<span style="color:#75715e">// 包含所有子串的容器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        List<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">[]&gt;</span> list <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 遍历所有字符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> head <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[]{</span>head<span style="color:#f92672">});</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 找出所有子串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">substring</span><span style="color:#f92672">(</span>i<span style="color:#f92672">,</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">).</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 遍历所有子串，找出无重复的长度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> max <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> array <span style="color:#f92672">=</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 如何检查重复， 类似取所有子串，这次是取所有字符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">boolean</span> duplicate <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            label<span style="color:#f92672">:</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> array<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">char</span> head <span style="color:#f92672">=</span> array<span style="color:#f92672">[</span>j<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> k <span style="color:#f92672">=</span> j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> k <span style="color:#f92672">&lt;</span> array<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> k<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>head <span style="color:#f92672">==</span> array<span style="color:#f92672">[</span>k<span style="color:#f92672">])</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#75715e">// 重复，跳出检查
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                        duplicate <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">break</span> label<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>duplicate<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 存在重复，就不管max
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// 不存在重复，就重置max
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                max <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>max<span style="color:#f92672">,</span> array<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> max<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>自测没问题，提交leetcode，发现报错，超出内存限制，测试用例基本过了，说明功能基本没问题，下面解决好不好的问题。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7svzkxzg7j31km0mmqb7.jpg" alt="image-20221104102929529"></p>
<h4 id="优化代码">优化代码</h4>
<p>我们分析代码，找出优化空间。从最简单的地方入手，最容易改的地方修改。</p>
<p>考虑代码结构：  <strong>遍历出</strong>所有子串 -&gt; <strong>存起来</strong> -&gt; <strong>遍历取出来</strong>一个个判断 。  从这个角度看，判断重复的逻辑可以在第一次遍历所有子串的时候完成， 这样就不需要一个容易来存起来，我们改代码， 去掉中间容器list。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">lengthOfLongestSubstring</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// max 初始化为1，因为为空已经判断过了
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> max <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 找出所有子串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> head <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 找出所有子串,并直接判断重复
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> array <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">substring</span><span style="color:#f92672">(</span>i<span style="color:#f92672">,</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">).</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 判断该array是否存在重复字符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">boolean</span> duplicate <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                label<span style="color:#f92672">:</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> k <span style="color:#f92672">&lt;</span> array<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> k<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> array<span style="color:#f92672">[</span>k<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> l <span style="color:#f92672">=</span> k<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> l <span style="color:#f92672">&lt;</span> array<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> l<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ch <span style="color:#f92672">==</span> array<span style="color:#f92672">[</span>l<span style="color:#f92672">])</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                            <span style="color:#75715e">// 重复， 跳出比较
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                            duplicate <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">break</span> label<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>duplicate<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e">// 不重复就更新max
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    max <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>max<span style="color:#f92672">,</span> array<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> max<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>自测通过，提交leetcode,发现还有问题。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7sx7vffxyj31hc09mmyu.jpg" alt="image-20221104111203836"></p>
<p>我们继续优化，这次重点是算法的改进。首先在判断里面有多重循环， 这个是耗时的重点，</p>
<p>关键逻辑步骤是，<strong>取一个字符</strong> -&gt; 找出该字符的后续所有子串 转为数组 -&gt; 判断数组是否重复 -&gt; 更新max &hellip;, 判断数组是否重复这里循环套循环，首先优化这一点。我们知道Java Set结构是不重复的，可以利用这一点来代替我们的是否重复判断，逻辑就是加入Set，有重复就是 set.size &lt; array.length ， 改写代码如下：</p>
<h4 id="引入set代替重复判断">引入Set代替重复判断</h4>
<p>注意点是，第二层循环里， 有多少个元素 = (j - i + 1)</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">lengthOfLongestSubstring1</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// max 初始化为1，因为为空已经判断过了
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> max <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Set<span style="color:#f92672">&lt;</span>Character<span style="color:#f92672">&gt;</span> set <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashSet<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 找出所有子串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 找出所有子串,并直接判断重复
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            set<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                set<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>j<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 判断是否重复
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// 如果不重复，那么应该有 (j-i+1) 个元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">int</span> num <span style="color:#f92672">=</span> j <span style="color:#f92672">-</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>set<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">&lt;</span> num<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e">// 重复，清空set, 跳出循环
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    set<span style="color:#f92672">.</span><span style="color:#a6e22e">clear</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                  	<span style="color:#75715e">// 重置max
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    max <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>max<span style="color:#f92672">,</span> num<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> max<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>再次提交试试，通过，但是还是不够好, 有很大优化空间。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7tdb7t05tj31jc0bamy6.jpg" alt="image-20221104202851953"></p>
<h4 id="去掉双重循环">去掉双重循环</h4>
<p>继续优化代码。重新思考这个问题， 题目要求：</p>
<blockquote>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
</blockquote>
<p>假设是如图所示的字符串，要找到无重复最长子串。我们很容易看出来，最长子串是 <code>abc</code> ,  长度是3。在脑海中过一下执行过程：</p>
<ol>
<li>拿出a ，结果<code>a</code> ， 无重复</li>
<li>拿出b ,   结果<code>ab</code> ，无重复</li>
<li>拿出c, 结果 <code>abc</code> ，无重复</li>
<li>拿出a, 结果 <code>abca</code>， 重复，去掉最后的<code>a</code>,  当前最长是 <code>abc</code>，</li>
<li><strong>(关键步骤)</strong>  这时候，我们是返回去，从 下标为1的<code>b</code> 开始下一轮判断，还是往后从下标为3的a开始判断？很明显是后者。</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7tduc7ghkj318m0k4q3u.jpg" alt="image-20221104204715144"></p>
<p>想清楚了以上步骤， 回顾我们的代码： 很明显， 我们在第5步骤，应该从下标为3 的a开始，但是却从了 下标为1开始判断，这块是重复无用的，所以需要改造这一块。思路就是， 当右边发现有重复时候， 把左边的指针指向右边重复位置。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 找出所有子串,并直接判断重复
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            set<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                set<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>j<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 判断是否重复
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// 如果不重复，那么应该有 (j-i+1) 个元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">int</span> num <span style="color:#f92672">=</span> j <span style="color:#f92672">-</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>set<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">&lt;</span> num<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e">// 重复，清空set, 跳出循环
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    set<span style="color:#f92672">.</span><span style="color:#a6e22e">clear</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    max <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>max<span style="color:#f92672">,</span> num<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>根据以上思路，改造后的代码主要逻辑为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>				<span style="color:#66d9ef">int</span> left <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 找出所有子串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            set<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>ch<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 无重复的话，长度为 i - left + 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> num <span style="color:#f92672">=</span> i <span style="color:#f92672">-</span> left <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>set<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">&lt;</span> num<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 有重复的, 记录当前位置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                left <span style="color:#f92672">=</span> i<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                set<span style="color:#f92672">.</span><span style="color:#a6e22e">clear</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                set<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>ch<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 无重复，更新max
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                max <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>max<span style="color:#f92672">,</span> num<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> max<span style="color:#f92672">;</span>
</span></span></code></pre></div><p>自测通过，提交测试， 发现用例没有通过：</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7ter8dyujj30ku0iy0t7.jpg" alt="image-20221104211850962"></p>
<p>是的，在该案例中， <code>dvdf</code>， 我们看出最长子串是<code>vdf</code>， 根据上面代码， 执行的结果是<code>df</code>， 也就是说，遇到重复后，并不能直接从重复除开始往后找，重复前面的字符开头也可能存在最长子串。回到刚才改造之前的思路，看看问题出在哪？</p>
<blockquote>
<p>想清楚了以上步骤， 回顾我们的代码： 很明显， 我们在第5步骤，应该从下标为3 的a开始，但是却从了 下标为1开始判断，这块是重复无用的，所以需要改造这一块。思路就是， 当右边发现有重复时候， 把左边的指针指向右边重复位置。</p>
</blockquote>
<p>只在上面那个例子<code>abcabcbb</code>中， 这么想确实没问题，但是并没有兼容 <code>dvdf</code>这样的情况， 重复字符前面开头的子串还可能存在最长的，再结合我们第一版的暴力算法&mdash; 找到所有子串，  发现，<strong>其实这问题的解题关键，就是要找到每一个字符领头下的，无重复最长子串！</strong></p>
<p>也就是说，要实现的是这样的过程：</p>
<p><strong>对于abcabcbb</strong></p>
<ol>
<li>a领头： 最长是 abc</li>
<li>b领头：最长是bca</li>
<li>c领头：最长是cab</li>
<li>a领头:  最长是 abc</li>
<li>b领头：最长是bc</li>
<li>c领头: 最长是cb</li>
<li>b领头: 最长是b</li>
<li>b领头: 最长是b</li>
</ol>
<p><strong>对于 dvdf</strong></p>
<ol>
<li>d领头：最长是dv</li>
<li>v领头：最长是vdf</li>
<li>d领头：最长是df</li>
<li>f领头：最长是f</li>
</ol>
<p>这时候就引入了一个计算机概念，叫<strong>滑动窗口算法(Sliding Window Algorithm)</strong>， 主要用于数组和字符串处理，逻辑如图所示：</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7tfj6b64zj31lc0t4gqc.jpg" alt="image-20221104214542954"></p>
<p>相当于创建一个滑动的窗口，或者队列管道， 碰到重复的，就把前面重复的去掉。 注意上图第 step4 ,碰到 b重复，并不是只去一个， 而是直接去掉了ab, 因此这里我们要知道重复字符所在的位置，方便窗口的左边界指针移动过来，指向之前重复的后一位。既要记录位置，也要判断重复，Java里的合适的数据结构，就是map了，用map的key的无重复特性处理重复， value保存字符的位置，挺合适。</p>
<p>这时候的主要逻辑，就是移动左指针了。如果右边指针(for 循环的 i) 碰到了重复的，就把左边指针往右挪一位，左边指针的位置在map中有保存，取出即可。 <strong>注意，由于碰到所有的重复字符都会操作左指针的位置， 防止出现左指针往左偏移，每次就要取最大位置的左指针</strong>。</p>
<h4 id="最终代码">最终代码</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">lengthOfLongestSubstring</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Map<span style="color:#f92672">&lt;</span>Character<span style="color:#f92672">,</span> Integer<span style="color:#f92672">&gt;</span> map <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> max <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 左边界指针
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> left <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>map<span style="color:#f92672">.</span><span style="color:#a6e22e">containsKey</span><span style="color:#f92672">(</span>ch<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 如果重复，就移动左指针
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                left <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>left<span style="color:#f92672">,</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>ch<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            max <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>max<span style="color:#f92672">,</span> i <span style="color:#f92672">-</span> left <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 保存字符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            map<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>ch<span style="color:#f92672">,</span> i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> max<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>看执行性能和内存占用：</p>
<p><img src="http://rkv59lj1r.hb-bkt.clouddn.com/img/20221105154346.png" alt="image-20221105154345557"></p>
<p>还算可以。</p>
]]></content></item><item><title>Week1038_review</title><link>/posts/arts/week1038_review/</link><pubDate>Fri, 31 Mar 2023 15:45:47 +0000</pubDate><guid>/posts/arts/week1038_review/</guid><description>Review Stop the World Event All the Garbage Collections are “Stop the World” events because all application threads are stopped until the operation completes. Since Young generation keeps short-lived objects, Minor GC is very fast and the application doesn’t get affected by this. However, Major GC takes a long time because it checks all the live objects. Major GC should be minimized because it will make your application unresponsive for the garbage collection duration.</description><content type="html"><![CDATA[<h2 id="review">Review</h2>
<h3 id="stop-the-world-event">Stop the World Event</h3>
<blockquote>
<p>All the Garbage Collections are “Stop the World” events because all application threads are stopped until the operation completes. Since Young generation keeps short-lived objects, Minor GC is very fast and the application doesn’t get affected by this. However, Major GC takes a long time because it checks all the live objects. Major GC should be minimized because it will make your application unresponsive for the garbage collection duration. So if you have a responsive application and there are a lot of Major Garbage Collection happening, you will notice timeout errors. The duration taken by garbage collector depends on the strategy used for garbage collection. That’s why it’s necessary to monitor and tune the garbage collector to avoid timeouts in the highly responsive applications.</p>
</blockquote>
<p>所有的垃圾回收会停止世界事件，因为所有的应用线程在操作完成前都会停止。&hellip;</p>
<p>垃圾回收器消耗时长取决于垃圾回收策略。这就是有必要监控垃圾回收的原因，避免在高响应应用超时。</p>
<h2 id="java-内存模型---永久代">Java 内存模型 - 永久代</h2>
<h3 id="java-memory-model---permanent-generation">Java Memory Model - Permanent Generation</h3>
<blockquote>
<p>Permanent Generation or “Perm Gen” contains the application metadata required by the JVM to describe the classes and methods used in the application. Note that Perm Gen is not part of Java Heap memory. Perm Gen is populated by JVM at runtime based on the classes used by the application. Perm Gen also contains Java SE library classes and methods. Perm Gen objects are garbage collected in a full garbage collection.</p>
</blockquote>
<p>永久代 后者“Perm Gen” 包括应用元数据 metadata 被JVM要求用来描述应用中类和方法使用情况。注意perm Gen 不是Java对内存的一部分。Perm Gen 在JVM运行期基于被 应用使用的类频繁使用到。Perm Gen也包括Java SE包的类和方法。Perm Gen 对象在full gc时候被回收。</p>
<h3 id="java-内存模型----方法区">Java 内存模型  - 方法区</h3>
<blockquote>
<p>Method Area is part of space in the Perm Gen and used to store class structure (runtime constants and static variables) and code for methods and constructors.</p>
</blockquote>
<p>方法区是Perm Gen一部分用来存储类结构(运行时常量，静态变量) 和方法构造器代码。</p>
<h3 id="java-内存模型---内存池">Java 内存模型 - 内存池</h3>
<blockquote>
<p>Memory Pools are created by JVM memory managers to create a pool of immutable objects if the implementation supports it. String Pool is a good example of this kind of memory pool. Memory Pool can belong to Heap or Perm Gen, depending on the JVM memory manager implementation.</p>
</blockquote>
<p>内存池被JVM内存管理创建来 创建一个不可变对象的池子，如果实现支持的话。String 池是这类内存池的好的例子。内存池可以属于堆，也可以属于Perm Gen. 取决于JVM 内存管理实现。</p>
<h3 id="java内存模型---运行时常量池">Java内存模型 - 运行时常量池</h3>
<blockquote>
<p>Runtime constant pool is per-class runtime representation of constant pool in a class. It contains class runtime constants and static methods. Runtime constant pool is part of the method area.</p>
</blockquote>
<p>运行时常量池是一个类中常量池的运行时表示。包括类运行时常量 和静态方法。运行时常量池是方法区的一部分。</p>
<h3 id="java内存模型---java-栈内存">Java内存模型 - Java 栈内存</h3>
<blockquote>
<p>Java Stack memory is used for execution of a thread. They contain method specific values that are short-lived and references to other objects in the heap that is getting referred from the method. You should read <a href="https://www.digitalocean.com/community/tutorials/java-heap-space-vs-stack-memory">Difference between Stack and Heap Memory</a>.</p>
</blockquote>
<p>Java栈内存用来执行线程。包括方法明确值，短暂生存和引用给其他堆中对象的，方法的引用。</p>
<h3 id="java内存管理---java堆内存设置">Java内存管理 - Java堆内存设置</h3>
<blockquote>
<p>Java provides a lot of memory switches that we can use to set the memory sizes and their ratios. Some of the commonly used memory switches are:</p>
</blockquote>
<p>Java踢动很多内存设置，我们可以使用设置内存大小和比例。</p>
<table>
<thead>
<tr>
<th style="text-align:left">VM Switch</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-Xms</td>
<td>设置JVM 启动时候初始化对内存大小</td>
</tr>
<tr>
<td style="text-align:left">-Xmx</td>
<td>设置JVM最大堆内存大小</td>
</tr>
<tr>
<td style="text-align:left">-Xmn</td>
<td>设置年轻代大小，剩下的区域就是老年代</td>
</tr>
<tr>
<td style="text-align:left">-XX:PermGen</td>
<td>设置永久代初始化大小</td>
</tr>
<tr>
<td style="text-align:left">-XX:MaxPermGen</td>
<td>设置永久代最大尺寸</td>
</tr>
<tr>
<td style="text-align:left">-XX:SurvivorRatio</td>
<td>设置Eden:Survivor比例，例如年轻代是10m, 这里设置-XX:SurviorRatio=2 ， 那么5m分配给Eden, 2.5m给两个Survivor. 默认值是8 。 就是 Eden 8   s0:1 s1: 1</td>
</tr>
<tr>
<td style="text-align:left">&ndash;XX:NewRatio</td>
<td>设置 old/new 比例。默认是2</td>
</tr>
</tbody>
</table>
<p>大多数时候，上面选项就够了，如果你需要其他选项就看<a href="https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html">官方</a>吧</p>
<h3 id="java内存管理---java垃圾回收">Java内存管理 - Java垃圾回收</h3>
<blockquote>
<p>Java Garbage Collection is the process to identify and remove the unused objects from the memory and free space to be allocated to objects created in future processing. One of the best features of Java programming language is the <strong>automatic garbage collection</strong>, unlike other programming languages such as C where memory allocation and deallocation is a manual process. <strong>Garbage Collector</strong> is the program running in the background that looks into all the objects in the memory and find out objects that are not referenced by any part of the program. All these unreferenced objects are deleted and space is reclaimed for allocation to other objects. One of the basic ways of garbage collection involves three steps:</p>
</blockquote>
<p>Java垃圾回收是一个过程，用来定位删除内存的无用对象， 和给未来分配给对象内存空间的进程腾出空间。Java编程语言的一个最好的特点是自动垃圾回收，不像C等其他需要手动分配回收内存的语言。垃圾收集器是后台运行的程序，检查内存所有对象找出没有被程序引用的对象。所有这些未被引用的对象会被删除，空间重新分配给其他对象。垃圾回收基本方式有三步：</p>
<blockquote>
<ol>
<li>
<p><strong>Marking</strong>: This is the first step where garbage collector identifies which objects are in use and which ones are not in use.</p>
</li>
<li>
<p><strong>Normal Deletion</strong>: Garbage Collector removes the unused objects and reclaim the free space to be allocated to other objects.</p>
</li>
<li>
<p><strong>Deletion with Compacting</strong>: For better performance, after deleting unused objects, all the survived objects can be moved to be together. This will increase the performance of allocation of memory to newer objects.</p>
</li>
<li>
<p>标记。 这是垃圾护回收第一步，确定对象哪些在使用，哪些不在使用</p>
</li>
<li>
<p>正常删除：垃圾回收期删除无用对象，回收内存空间准备分配给其他对象。</p>
</li>
<li>
<p>压缩删除：为了更好的性能， 删除无用对象后，所有的存活对象移动到一起。这家宁辉提高分配新对象的性能。</p>
</li>
</ol>
</blockquote>
<blockquote>
<p>There are two problems with a simple mark and delete approach.</p>
<ol>
<li>First one is that it’s not efficient because most of the newly created objects will become unused</li>
<li>Secondly objects that are in-use for multiple garbage collection cycle are most likely to be in-use for future cycles too.</li>
</ol>
</blockquote>
<p>这里的简单标记删除方法有两个问题：</p>
<ol>
<li>第一个是不够高效，以为大量的新创建对象很快变无用</li>
<li>第二，那些多次垃圾回收还在用的对象，很大可能在未来垃圾回收时还在使用。</li>
</ol>
<blockquote>
<p>The above shortcomings with the simple approach is the reason that <strong>Java Garbage Collection is Generational</strong> and we have <strong>Young Generation</strong> and <strong>Old Generation</strong> spaces in the heap memory. I have already explained above how objects are scanned and moved from one generational space to another based on the Minor GC and Major GC.</p>
</blockquote>
<p>以上简单清理的缺点就是Java垃圾回收分代的原因，就是堆内存中有年轻代和老年代。我已经解释过对象如何扫描和移动从一个区域空间到另一个区域基于minor GC 和 Major GC</p>
<h3 id="java内存管理---java垃圾回收类型">Java内存管理 - Java垃圾回收类型</h3>
<blockquote>
<p>There are five types of garbage collection types that we can use in our applications. We just need to use the JVM switch to enable the garbage collection strategy for the application. Let’s look at each of them one by one.</p>
</blockquote>
<p>这有五种我们可以在应用中使用的垃圾回收类型。我们只需要使用JVM switch 来为应用启用垃圾回收策略。来一个个看</p>
<blockquote>
<ol>
<li><strong>Serial GC (-XX:+UseSerialGC)</strong>: Serial GC uses the simple <strong>mark-sweep-compact</strong> approach for young and old generations garbage collection i.e Minor and Major GC.Serial GC is useful in client machines such as our simple stand-alone applications and machines with smaller CPU. It is good for small applications with low memory footprint.</li>
<li><strong>Parallel GC (-XX:+UseParallelGC)</strong>: Parallel GC is same as Serial GC except that is spawns N threads for young generation garbage collection where N is the number of CPU cores in the system. We can control the number of threads using <code>-XX:ParallelGCThreads=n</code> JVM option.Parallel Garbage Collector is also called throughput collector because it uses multiple CPUs to speed up the GC performance. Parallel GC uses a single thread for Old Generation garbage collection.</li>
<li><strong>Parallel Old GC (-XX:+UseParallelOldGC)</strong>: This is same as Parallel GC except that it uses multiple threads for both Young Generation and Old Generation garbage collection.</li>
<li><strong>Concurrent Mark Sweep (CMS) Collector (-XX:+UseConcMarkSweepGC)</strong>: CMS Collector is also referred as concurrent low pause collector. It does the garbage collection for the Old generation. CMS collector tries to minimize the pauses due to garbage collection by doing most of the garbage collection work concurrently with the application threads.CMS collector on the young generation uses the same algorithm as that of the parallel collector. This garbage collector is suitable for responsive applications where we can’t afford longer pause times. We can limit the number of threads in CMS collector using <code>-XX:ParallelCMSThreads=n</code> JVM option.</li>
<li><strong>G1 Garbage Collector (-XX:+UseG1GC)</strong>: The Garbage First or G1 garbage collector is available from Java 7 and its long term goal is to replace the CMS collector. The G1 collector is a parallel, concurrent, and incrementally compacting low-pause garbage collector.Garbage First Collector doesn’t work like other collectors and there is no concept of Young and Old generation space. It divides the heap space into multiple equal-sized heap regions. When a garbage collection is invoked, it first collects the region with lesser live data, hence “Garbage First”. You can find more details about it at <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/G1.html">Garbage-First Collector Oracle Documentation</a>.</li>
</ol>
</blockquote>
<ol>
<li>Serial GC (-XX:+UseSerialGC): Serial GC 使用简单的标记清除方式来为新生代和老年代来及回收。Minor 和Major GC Serial GC 在客户端单机应用和小CPU的情况很有用。对低内存占用的小应用很友好</li>
<li>Parallel GC (-XX:+UseParallelGC): Parallel GC 和 SerialGC相同， 除了它会裂变N个线程来为年轻代垃圾回收，N是系统CPU核心数。我们可以控制线程数通过 <code>-XX:ParallelGCThreads=n</code> 。Parrallel Garbage 收集器也被叫做吞吐量收集器因为它使用多个CPU来加速GC性能。Parallel GC 使用一个单线程做老年代垃圾回收。</li>
<li>Parrallel Old GC(-XX:+UseParallelOldGC): 和Parallel GC 相同，除了它会都是用多线程来处理新生代和老年代</li>
<li>Concurrent Mark Sweep(CMS) Collector (-XX:+UseConcMarkSweepGC): CMS 收集器也被作为并发低延迟收集器。它处理老年代垃圾。CMS收集器尝试垃圾回收时最小的延迟通过和应用线程并发工作来处理大部分的垃圾回收。CMS收集器在新生代使用和parallel 收集器相同的算法(标记清除).这种垃圾收集器适合响应式应用，不能承受长时间延迟。我们可以限制CMS的线程数通过<code>-XX:ParallelCMSThreads=n</code></li>
<li>G1 Garbage Collector(-XX:UseG1GC): 垃圾优先或G1 垃圾收集器从java7开始可用，长期目标是替换CMS收集器。G1收集器是一个并行的并发的增量压缩的地延迟垃圾收集器。G1收集器不像其他垃圾收集器，没有年轻代老年代的概念。分配堆空间为多个相同大小的区域。当垃圾回收工作，首先收集低存活区域数据，因此叫“垃圾优先”。更多细节<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/G1.html">官方文档</a></li>
</ol>
<h3 id="java内存管理---java垃圾回收监控">Java内存管理 - Java垃圾回收监控</h3>
<blockquote>
<p>We can use the Java command line as well as UI tools for monitoring garbage collection activities of an application. For my example, I am using one of the demo application provided by Java SE downloads. If you want to use the same application, go to <a href="https://www.oracle.com/java/technologies/javase-downloads.html">Java SE Downloads</a> page and download <strong>JDK 7 and JavaFX Demos and Samples</strong>. The sample application I am using is <strong>Java2Demo.jar</strong> and it’s present in <code>jdk1.7.0_55/demo/jfc/Java2D</code> directory. However this is an optional step and you can run the GC monitoring commands for any java application. Command used by me to start the demo application is:</p>
</blockquote>
<p>我们使用Java命令行和UI工具来监控一个应用的垃圾回收活动。例如我的例子，我使用一个Java SE 下载的demo应用。如果你想用相同的应用，去 <a href="https://www.oracle.com/java/technologies/downloads/">Java SE</a>下载 JDK7 和 JavaFX例子。</p>
]]></content></item><item><title>Week1038_share</title><link>/posts/arts/week1038_share/</link><pubDate>Fri, 31 Mar 2023 15:45:47 +0000</pubDate><guid>/posts/arts/week1038_share/</guid><description>关于项目计划与复盘的几个原则 做计划的SMART原则，复盘描述的STAR原则
复盘、描述事情 STAR Situation 事情的背景是什么 Task 如何明确你的任务 Action 这种情况分析，采用了什么行动方式 Result 结果如何 简单理解：
案例是在什么情况下发生的，发生后如何明确自己的任务，采取了哪些行动，结果是什么。
更简化：背景、目标、行动、结果
做计划SMART Specific 目标必须是具体的 Measurable 目标必须是可以衡量的 Attainable 目标必须是可以达到的 Relevant 目标之间具有相关性 Time-based 必须有明确截止期限 实际使用 面试提问 STAR原则： Q: 请讲一下你最近做的项目。
A: 好的，我这个项目是做xxx的，主要是xx用户在进行xx的时候，解决他们xx的问题。我们项目组有n个人，m个开发&amp;hellip; ，工作方式是&amp;hellip;. (Situation 背景介绍)
我们主要的目标是，提供xx的功能服务， 维护系统稳定性，解决用户快速增长带来的体验问题&amp;hellip; ， 我主要负责xxx (Task 目标任务)
我们使用 xxx 开发语言来实现xxx功能， 引入xxx等工具xxx等部署方式来解决稳定性，使用 xxx来解决体验问题&amp;hellip; (Action 具体的行动)
最终是我们用户日活xxx, 稳定性达 99.99% &amp;hellip; ， (Result 结果如何)
Q: 请讲一下在XX开发中做过最有成就感的事是什么？
A: 好的。
我在开发xx功能中经常遇到的一个问题是xxx, 当时我们的用户增长很快，原来的实现方式比较低效、麻烦、易错， 常常 &amp;hellip; (Situation)
因此我要解决 低效，易错的事 （Task), 为此， 我使用XXX来解决XX的问题， 改进了XX的设计，简化了流程， 开发了XX平台来代替xx.</description><content type="html"><![CDATA[<h2 id="关于项目计划与复盘的几个原则">关于项目计划与复盘的几个原则</h2>
<p>做计划的SMART原则，复盘描述的STAR原则</p>
<h3 id="复盘描述事情-star">复盘、描述事情 STAR</h3>
<ul>
<li>Situation 事情的背景是什么</li>
<li>Task 如何明确你的任务</li>
<li>Action 这种情况分析，采用了什么行动方式</li>
<li>Result 结果如何</li>
</ul>
<p>简单理解：</p>
<p>案例是在什么情况下发生的，发生后如何明确自己的任务，采取了哪些行动，结果是什么。</p>
<p>更简化：背景、目标、行动、结果</p>
<h2 id="做计划smart">做计划SMART</h2>
<ul>
<li>Specific 目标必须是具体的</li>
<li>Measurable 目标必须是可以衡量的</li>
<li>Attainable 目标必须是可以达到的</li>
<li>Relevant 目标之间具有相关性</li>
<li>Time-based 必须有明确截止期限</li>
</ul>
<h2 id="实际使用">实际使用</h2>
<h3 id="面试提问-star原则">面试提问 STAR原则：</h3>
<p><strong>Q: 请讲一下你最近做的项目。</strong></p>
<p>A: 好的，我这个项目是做xxx的，主要是xx用户在进行xx的时候，解决他们xx的问题。我们项目组有n个人，m个开发&hellip; ，工作方式是&hellip;.      (<strong>Situation</strong> 背景介绍)</p>
<p>我们主要的目标是，提供xx的功能服务， 维护系统稳定性，解决用户快速增长带来的体验问题&hellip; ， 我主要负责xxx  (<strong>Task 目标任务</strong>)</p>
<p>我们使用 xxx 开发语言来实现xxx功能， 引入xxx等工具xxx等部署方式来解决稳定性，使用 xxx来解决体验问题&hellip;    (<strong>Action 具体的行动</strong>)</p>
<p>最终是我们用户日活xxx, 稳定性达 99.99% &hellip; ， (<strong>Result 结果如何</strong>)</p>
<p>Q: <strong>请讲一下在XX开发中做过最有成就感的事是什么？</strong></p>
<p>A: 好的。</p>
<p>我在开发xx功能中经常遇到的一个问题是xxx,  当时我们的用户增长很快，原来的实现方式比较低效、麻烦、易错， 常常 &hellip;  (<strong>Situation</strong>)</p>
<p>因此我要解决 低效，易错的事 （<strong>Task</strong>), 为此， 我使用XXX来解决XX的问题， 改进了XX的设计，简化了流程， 开发了XX平台来代替xx.. (<strong>Action</strong>)，</p>
<p>最终变成， 高效、好用、稳定的xxx, 我也因此得到xxx的嘉奖xx (<strong>Result</strong>)</p>
<h3 id="做计划-smart原则">做计划 SMART原则</h3>
<p>比如经常使用的OKR工作法，就要求目标符合SMART原则。</p>
<p>比如， 目标是</p>
<blockquote>
<p>下个月降低系统出错频率，改善业务报警功能。</p>
</blockquote>
<p>目标不够Specific， 又不可 Measurable ,   要改成如下更好：</p>
<blockquote>
<p>xx月要实现出错频率降到3个以下，业务报警功能实现xx渠道的自动通知</p>
</blockquote>
]]></content></item><item><title>Week1038_tip</title><link>/posts/arts/week1038_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:47 +0000</pubDate><guid>/posts/arts/week1038_tip/</guid><description>Tip - Aiflow注解生成Task的易错点 Situation 在使用Airflow配置任务时候，使用了Task group 和 task注解来实现任务配置，使用一组注解task用来检测数据是否完整，完整的话就继续走以后逻辑。
Task 在这样的情况下，本应该检查完数据才进行下一步，结果没有实际检查，因此要查具体原因。
Action 查看日志，实际执行检查会打出相应日志Success criteria met. Exiting.， 但我的任务日志并没有检查，
任务代码架构如下:
with DAG () as dag: with TaskGroup(...) as group: @task def check_xxx(): S3KeySensor(...) ... start &amp;gt;&amp;gt; group &amp;gt;&amp;gt; logical_task &amp;gt;&amp;gt; end 找更有经验的同事询问。 为何这样会导致S3Keysor没有执行？告知，可能是bug吧，没遇见过。
找实现过类似功能的代码。 找了别人写的非注解方式实现的代码， 改造此功能后如下:
with DAG () as dag: check_a = PythonOperator(...) check_b = PythonOperator(...) ... start &amp;gt;&amp;gt; [check_a, check_b] &amp;gt;&amp;gt; logical_task &amp;gt;&amp;gt; end 发现是可以正常执行的，能打出相应日志。
对比实现。 对比两个实现版本， 我写的不同点是引入TaskGroup, 和注解 @task， TaskGroup不太可能出问题，因为我有其他这样写的任务没有报错，问题大概率出现在@task上。</description><content type="html"><![CDATA[<h2 id="tip---aiflow注解生成task的易错点">Tip - Aiflow注解生成Task的易错点</h2>
<h3 id="situation">Situation</h3>
<p>在使用Airflow配置任务时候，使用了Task group 和 task注解来实现任务配置，使用一组注解task用来检测数据是否完整，完整的话就继续走以后逻辑。</p>
<h3 id="task">Task</h3>
<p>在这样的情况下，本应该检查完数据才进行下一步，结果没有实际检查，因此要查具体原因。</p>
<h3 id="action">Action</h3>
<p><strong>查看日志</strong>，实际执行检查会打出相应日志<code>Success criteria met. Exiting.</code>， 但我的任务日志并没有检查，</p>
<p>任务代码架构如下:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> DAG () <span style="color:#66d9ef">as</span> dag:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">with</span> TaskGroup(<span style="color:#f92672">...</span>) <span style="color:#66d9ef">as</span> group:
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">@task</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_xxx</span>():
</span></span><span style="display:flex;"><span>				S3KeySensor(<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    start <span style="color:#f92672">&gt;&gt;</span> group <span style="color:#f92672">&gt;&gt;</span> logical_task <span style="color:#f92672">&gt;&gt;</span> end
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>		
</span></span></code></pre></div><p><strong>找更有经验的同事询问</strong>。  为何这样会导致S3Keysor没有执行？告知，可能是bug吧，没遇见过。</p>
<p><strong>找实现过类似功能的代码</strong>。 找了别人写的非注解方式实现的代码， 改造此功能后如下:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> DAG () <span style="color:#66d9ef">as</span> dag:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			check_a <span style="color:#f92672">=</span> PythonOperator(<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>    	check_b <span style="color:#f92672">=</span> PythonOperator(<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    start <span style="color:#f92672">&gt;&gt;</span> [check_a, check_b] <span style="color:#f92672">&gt;&gt;</span> logical_task <span style="color:#f92672">&gt;&gt;</span> end
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>		
</span></span></code></pre></div><p>发现是可以正常执行的，能打出相应日志。</p>
<p><strong>对比实现</strong>。 对比两个实现版本， 我写的不同点是引入TaskGroup, 和注解 @task， TaskGroup不太可能出问题，因为我有其他这样写的任务没有报错，问题大概率出现在@task上。</p>
<p><strong>验证问题</strong> @task 其实是对PythonOperator简化写法， 去掉@task改成原生模式:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_a_callable</span>():
</span></span><span style="display:flex;"><span>		S3KeySensor(<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_b_callable</span>():
</span></span><span style="display:flex;"><span>		S3KeySensor(<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> DAG () <span style="color:#66d9ef">as</span> dag:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">def</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">with</span> TaskGroup(<span style="color:#f92672">...</span>) <span style="color:#66d9ef">as</span> group:
</span></span><span style="display:flex;"><span>			 p1 <span style="color:#f92672">=</span> PythonOperator(<span style="color:#f92672">...</span> callable<span style="color:#f92672">=</span>check_axxx)
</span></span><span style="display:flex;"><span>			 p2 <span style="color:#f92672">=</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    start <span style="color:#f92672">&gt;&gt;</span> group <span style="color:#f92672">&gt;&gt;</span> logical_task <span style="color:#f92672">&gt;&gt;</span> end
</span></span></code></pre></div><p>这里其实已经能看出问题了， check_a_callable()中，实际执行的是方法体的 S3KeySenor构造方法，并没有执行S3KeySensor内部的方法。</p>
<h3 id="result-结果">Result 结果</h3>
<p>去官网找S3KeySensor的文档和用法， 发现官网写的很明白， S3KeySensor就是一种Operator, 并不需要对外层再包一个Operator！</p>
<p>所以，最后的写法就是去掉@task ：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> DAG () <span style="color:#66d9ef">as</span> dag:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">with</span> TaskGroup(<span style="color:#f92672">...</span>) <span style="color:#66d9ef">as</span> group:
</span></span><span style="display:flex;"><span>				p1 <span style="color:#f92672">=</span> S3KeySensor(<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>        p2 <span style="color:#f92672">=</span> S3KeySensor(<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    start <span style="color:#f92672">&gt;&gt;</span> group <span style="color:#f92672">&gt;&gt;</span> logical_task <span style="color:#f92672">&gt;&gt;</span> end
</span></span><span style="display:flex;"><span>    
</span></span></code></pre></div>]]></content></item><item><title>Week1039_algorithm</title><link>/posts/arts/week1039_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:47 +0000</pubDate><guid>/posts/arts/week1039_algorithm/</guid><description>Algorithm - 217. 存在重复元素 给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。
分析 这个是简单类别的题目。要判断某个值在数组中至少出现两次，也就是只要判断数组中有重复的元素就行。还是老样子，从你想到最能解决问题的方案入手，不用考虑性能空间， 首先能想到，利用Map的key不重复特性来处理， 遍历数组，从Map中取数，取到就说明有重复的，没有的话就继续。
代码如下：
class Solution { public boolean containsDuplicate(int[] nums) { Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(nums.length); for (int num : nums) { Integer a = map.get(num); if (a == null) { map.put(num, 1); } else { return true; } } return false; } } 测试提交后，能通过：
优化 然后第二步考虑优化的事， 我们是否能让代码执行更快，使用更少的空间？看题目， 是一堆int数， 并且只判断是否重复就行了， 我想到了位操作中的异或操作： 相同为0，不同为1的特点。那么异或操作能否在这里使用呢？再想了想，还是没法用的，因为异或适合找存在不重复的数字，这样所有元素异或下来会大于0.翻看题解，发现也没有用位操作的，所以这种题就用一般解法吧。
看了HashMap ，其实我们不需要后边的Value, 只需要前面的Key 就够了，所以使用Set就行了：</description><content type="html"><![CDATA[<h2 id="algorithm---217-存在重复元素httpsleetcodecnproblemscontains-duplicatedescription">Algorithm - <a href="https://leetcode.cn/problems/contains-duplicate/description/">217. 存在重复元素</a></h2>
<p>给你一个整数数组 <code>nums</code> 。如果任一值在数组中出现 <strong>至少两次</strong> ，返回 <code>true</code> ；如果数组中每个元素互不相同，返回 <code>false</code> 。</p>
<h3 id="分析">分析</h3>
<p>这个是简单类别的题目。要判断某个值在数组中至少出现两次，也就是只要判断数组中有重复的元素就行。还是老样子，从你想到最能解决问题的方案入手，不用考虑性能空间， 首先能想到，利用Map的key不重复特性来处理， 遍历数组，从Map中取数，取到就说明有重复的，没有的话就继续。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">containsDuplicate</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Map<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">,</span> Integer<span style="color:#f92672">&gt;</span> map <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;(</span>nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> num <span style="color:#f92672">:</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            Integer a <span style="color:#f92672">=</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>num<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>a <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                map<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>num<span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>测试提交后，能通过：</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h9i5xy2jhfj31g20b8gmd.jpg" alt="image-20221227103319069"></p>
<h3 id="优化">优化</h3>
<p>然后第二步考虑优化的事， 我们是否能让代码执行更快，使用更少的空间？看题目， 是一堆int数， 并且只判断是否重复就行了， 我想到了位操作中的异或操作： 相同为0，不同为1的特点。那么异或操作能否在这里使用呢？再想了想，还是没法用的，因为异或适合找存在不重复的数字，这样所有元素异或下来会大于0.翻看题解，发现也没有用位操作的，所以这种题就用一般解法吧。</p>
<p>看了HashMap ，其实我们不需要后边的Value, 只需要前面的Key 就够了，所以使用Set就行了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">containsDuplicate</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Set<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> set <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashSet<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> num <span style="color:#f92672">:</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>set<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>num<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>提交后结果也是可以的：</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h9i6whgchzj31hc0ci3zi.jpg" alt="image-20221227110635798"></p>
<p>然后看了其他题解， 发现通过Arrays.stream 的distinct方法，可以一行写出来：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">containsDuplicate</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">).</span><span style="color:#a6e22e">distinct</span><span style="color:#f92672">().</span><span style="color:#a6e22e">count</span><span style="color:#f92672">()</span> <span style="color:#f92672">&lt;</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>只是时间较长</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h9i6zy7fopj31iq0b6gml.jpg" alt="image-20221227110955230"></p>
]]></content></item><item><title>Week1039_learn</title><link>/posts/arts/week1039_learn/</link><pubDate>Fri, 31 Mar 2023 15:45:47 +0000</pubDate><guid>/posts/arts/week1039_learn/</guid><description>Learn - React-Hook useState class写法 import React, { Component } from &amp;#39;react&amp;#39; export default class App extends Component { state = { count: 0 } setCount = ()=&amp;gt;{ this.setState(state=&amp;gt;({ count: ++state.count })) } render() { return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;you click {this.state.count} times&amp;lt;/p&amp;gt; &amp;lt;button onClick={this.setCount}&amp;gt; Click me! &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ) } } hook写法 import React, { useState } from &amp;#39;react&amp;#39; export default function App() { const [count, setCount] = useState(0) return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;you click {count} times&amp;lt;/p&amp;gt; &amp;lt;button onClick={()=&amp;gt; setCount(count+1)}&amp;gt; Click me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ) }</description><content type="html"><![CDATA[<h2 id="learn---react-hook-usestate">Learn - React-Hook useState</h2>
<h3 id="class写法">class写法</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">React</span>, { <span style="color:#a6e22e">Component</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;react&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">App</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Component</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">count</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setCount</span> <span style="color:#f92672">=</span> ()=&gt;{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">setState</span>(<span style="color:#a6e22e">state</span>=&gt;({
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">count</span><span style="color:#f92672">:</span> <span style="color:#f92672">++</span><span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">count</span>
</span></span><span style="display:flex;"><span>        }))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">render</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">p</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">you</span> <span style="color:#a6e22e">click</span> {<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">count</span>} <span style="color:#a6e22e">times</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/p&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">button</span> <span style="color:#a6e22e">onClick</span><span style="color:#f92672">=</span>{<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">setCount</span>}<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">Click</span> <span style="color:#a6e22e">me</span><span style="color:#f92672">!</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/button&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/div&gt;</span>
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="hook写法">hook写法</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">React</span>, { <span style="color:#a6e22e">useState</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;react&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">App</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">count</span>, <span style="color:#a6e22e">setCount</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">useState</span>(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">p</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">you</span> <span style="color:#a6e22e">click</span> {<span style="color:#a6e22e">count</span>} <span style="color:#a6e22e">times</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/p&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">button</span> <span style="color:#a6e22e">onClick</span><span style="color:#f92672">=</span>{()=&gt; <span style="color:#a6e22e">setCount</span>(<span style="color:#a6e22e">count</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)}<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Click</span> <span style="color:#a6e22e">me</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/button&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/div&gt;</span>
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content></item><item><title>Week1035_review</title><link>/posts/arts/week1035_review/</link><pubDate>Fri, 31 Mar 2023 15:45:46 +0000</pubDate><guid>/posts/arts/week1035_review/</guid><description>ARTS - Review 补2019.3.6 How To Learn Any New Programming Language Quickly 如何快速学习一门新的编程语言？
essential adj. 必要，必不可少 fundamentals n. 基调， 基本原理 assumes 假设 concepts 概念 disheartening adj. 令人犯愁的 preconceived adj. 先入为主的 Anatomy n 剖析 strip out 剔除 aspect n. 方面，侧面，局面 equivalent An essential checklist of fundamentals 一个必不可少的原理清单
This article assumes you already know at least one programming language; however, the concepts here will help you get started with programming.
本篇文章假设你已经至少懂得一门编程语言；这些概念将帮你开始编程。
When I was in school, a teacher told me something I share with new developers: The hardest programming language you’ll ever learn will be your second.</description><content type="html"><![CDATA[<h1 id="arts---review-补201936">ARTS - Review 补2019.3.6</h1>
<h2 id="how-to-learn-any-new-programming-language-quicklyhttpsmediumcombetter-programminghow-to-learn-any-new-programming-language-quickly-94996895669b"><a href="https://medium.com/better-programming/how-to-learn-any-new-programming-language-quickly-94996895669b">How To Learn Any New Programming Language Quickly</a></h2>
<p>如何快速学习一门新的编程语言？</p>
<ul>
<li>essential adj. 必要，必不可少</li>
<li>fundamentals  n. 基调， 基本原理</li>
<li>assumes 假设</li>
<li>concepts 概念</li>
<li>disheartening  adj. 令人犯愁的</li>
<li>preconceived adj. 先入为主的</li>
<li>Anatomy n 剖析</li>
<li>strip out 剔除</li>
<li>aspect n. 方面，侧面，局面</li>
<li>equivalent</li>
</ul>
<blockquote>
<h2 id="an-essential-checklist-of-fundamentals">An essential checklist of fundamentals</h2>
<p>一个必不可少的原理清单</p>
</blockquote>
<blockquote>
<p>This article assumes you already know at least one programming language; however, the concepts here will help you get started with programming.</p>
<p>本篇文章假设你已经至少懂得一门编程语言；这些概念将帮你开始编程。</p>
<p>When I was in school, a teacher told me something I share with new developers: <strong>The hardest programming language you’ll ever learn will be your second.</strong></p>
<p>当我还在学校时候，一个老师对我分享一个新手的开发者，最困难的编程语言是你将学的第二门语言。</p>
<p>Don’t let this be disheartening — it means that when you first learn how to program, you have all of these preconceived ideas about programming. You end up making more syntax connections and assumptions than you should. Because of this, you have to “unlearn” these assumptions when you learn your second language. Try to keep this in mind if you’re attempting to learn your second language or even your third.</p>
<p>不要因此心烦 &mdash; 它的意思是当你第一次学怎么编程，你将会对编程产生先入为主的观念。你最终会造成更多的假设和关联，而不是应该是什么样的。因此，你需要在开始学第二门语言前，忘记这些臆测。保持这种意识去学你的第二门语言甚至第三门。</p>
</blockquote>
<h4 id="anatomy-of-programming">Anatomy of Programming</h4>
<p>编程剖析</p>
<blockquote>
<p>There are a lot of programming languages, <a href="https://codelani.com/posts/how-many-programming-languages-are-there-in-the-world.html">easily over 5,000</a>, but the <a href="https://www.tiobe.com/tiobe-index/">TIOBE index</a> lists the top 250. All of the top 20 languages that aren’t unique cases will have similar standard libraries.</p>
<p>有很多编程语言，轻易超过5000， 但是TIOBE 单子收录前250.排名前20的语言除了独特部分都有类似的公共库。</p>
<p>I think the best way to think about programming is to strip out all of the extra “stuff” so you’re left with only the necessities.</p>
<p>我认为对编程最重要的是去掉废话，留下必要的。</p>
</blockquote>
<h4 id="the-atoms">The Atoms</h4>
<p>原子性</p>
<blockquote>
<p>Every aspect of every language can be reduced down to <strong>true</strong> and <strong>false</strong>. Why? Because electricity works this way — you either have a charge, or you don’t. Memory stores values in the form of <strong>0</strong>s and <strong>1</strong>s, and either this <em>bit</em> is charged, or it’s not.</p>
<p>每个编程语言局部都可以看做是 true 和 false.为什么呢？因为电就是这么工作的 &ndash; 要么在通电， 要么不。内存存储的是由0或1组成的表，这些位要么通电，要么不是。</p>
<p>Eight bits is equivalent to one <em>byte</em>, which is enough to list any character on the <a href="http://www.asciitable.com/">ASCII table</a>. The bits are flipped in such an order that it provides the <strong>DEC</strong>imal representation of the character. The computer understands how to translate this representation into a letter.</p>
<p>8位等于一字节，足够在ASCII表上表示所有字符。比特翻转就能得到这样顺序的10进制代表的字符。计算机知道如何把这种表示转为字母。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Position</th>
<th style="text-align:center">8</th>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td style="text-align:center">128</td>
<td>64</td>
<td>32</td>
<td>16</td>
<td>8</td>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>Bit</td>
<td style="text-align:center">0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>表示</p>
<table>
<thead>
<tr>
<th>H</th>
<th>e</th>
<th>l</th>
<th>l</th>
<th>0</th>
<th>\0</th>
</tr>
</thead>
</table>
<blockquote>
<p>64+8 = 72, ASCII 第72个就是 H</p>
</blockquote>
<blockquote>
<p>​	Having an understanding of this one concept, “the why,” will make the rest of this a lot easier on you.</p>
<p>理解了这个”为什么“的概念，将会让你更容易理解以下的内容。</p>
</blockquote>
<h3 id="the-tools">The Tools</h3>
<p>工具</p>
<blockquote>
<p>The tools are all the same, and while they can be learned in any order, this is the order I usually take.</p>
<p>工具都一样，按任意顺序学习，以下是我常用的顺序。</p>
</blockquote>
<h4 id="variables">Variables</h4>
<blockquote>
<p>This seems simple enough, but seriously, how do you create a variable?</p>
<p>变量</p>
<p>这似乎很简单了，但是严肃说，你怎么创建一个变量？</p>
</blockquote>
<h4 id="operator">Operator</h4>
<blockquote>
<p>What are the operators, and how are they used? You can assume you have basic math operators, but what about logical operators? Is an “AND” operator spelled out as “and” or “AND,” or does it use symbols such as “&amp;&amp;?”</p>
<p>什么是操作符，他们如何用？你可以假定你有基本的数学操作符，但是关于逻辑操作呢？一个 AND操作符拼写为’and‘ 还是 ’AND‘ , 或者用 &amp;&amp; ?</p>
</blockquote>
<h4 id="conditionals"><strong>Conditionals</strong></h4>
<blockquote>
<p>Surprisingly, my most read articles for both Swift and Python have to do with decision making. The next thing you need to know is how you can make decisions in your program. Does the language you are trying to learn use the traditional “if/else if/else” or something more Pythonic such as “if/elif/else?” Does your language have a “switch” or “guard” statement?</p>
<p>条件</p>
<p>令人惊奇的是，我阅读的大多数Swift和Python文章都需要判断。你需要知道的另一个事就是在你程序中做决定。语言需要尝试用 if/else if/else 或更多的Python式的 if/elif/else 这样的形式吗？语言有switch 或guard 语句吗。</p>
</blockquote>
<blockquote>
<h2 id="loops"><strong>Loops</strong></h2>
<p>How can you loop through repetitive tasks? Does the language contain for-loops, while loops, do-while loops, or for-each statements?</p>
<p>循环</p>
<p>如何用重复工作循环？语言包含 for循环，while循环 do-while 循环或 for-each循环吗？</p>
<h2 id="functions"><strong>Functions</strong></h2>
<p>Is it possible to create functions? If so, how do you do it? How do you include parameters in these functions? Knowing how to properly use functions will save you time and make your life so much easier.</p>
<p>方法</p>
<p>是否可以创建方法？如果是，如果做？方法中如何包含参数？知道如何使用方法将会节约时间使你的生活更便利。</p>
<h2 id="classes-and-structs"><strong>Classes and structs</strong></h2>
<p>Does this language understand the concept of classes or structs? It sounds like a dumb question, but some languages don’t have either, or they have only one. If it does, how do you create a class or struct? Does the class require a constructor or init method?</p>
<p>类和结构</p>
<p>编程语言理解类和结构的概念吗？看似一个糊涂的问题，但是有点语言都没有，或者只有一个。如果是，如果创建class 或者struct? class 是否需要构造器或者初始化方法？</p>
<h2 id="error-handling"><strong>Error handling</strong></h2>
<p>Errors are inevitable. When they occur, does this language have a robust error handling solution and how do you use it? Is it “try/catch,” “try/except,” or something else? Are there other clauses such as “else” or “finally” that allow other options for errors?</p>
<p>错误处理</p>
<p>错误是必然的。当他们发生，语言是否有一种简装的解决方法，怎么使用？是 try/catch , try/except 或者其他？是否有其他的语句 如 else /finally 允许其他条件的错误？</p>
<h2 id="testing"><strong>Testing</strong></h2>
<p>How do you test your code? Is there a built-in library for testing or do you have to download a separate tool?</p>
<p>All of these tools should be in most modern programming languages. Even the older languages such as COBOL have most of these, but they may be called something different, like paragraphs or copybooks.</p>
<p>测试</p>
<p>如何测试你的代码？这些在库里就建立了还是需要下载一个独立的工具？</p>
<p>所有的这些工具都应该包含在最流行的编程语言里。尽管老羽凡如COBOL 也有大多数，但是他们可能叫的不一样，想段落或复写簿。</p>
</blockquote>
<blockquote>
<h1 id="getting-good">Getting Good</h1>
<p>Once you understand these tools, the next thing you need to do is use them and write an application. You can know of a language by reading the docs, but you don’t know the language until you’ve written a few applications with it.</p>
<p>当你一旦理解了这些工具，下一步就是使用他们写一个应用。你可以通过阅读文档知道一门语言，但是当你使用它写很多应用后才会了解它。</p>
<p>By writing an application, you’re forced to think like an <em>X</em> programmer. I can say that I know C++ because I took a class in C and read the docs on C++, but I really don’t know it until I’ve written an application in C++ using features specific to the language.</p>
<p>通过写一个应用，你必须强制像一个 X语言一样思考。我可以说我知道C++， 因为我上过C语言课读过C++文档，但是当我使用C++特性写过一个应用后才了解它。</p>
<p>A good starter project is Blackjack. Blackjack requires variables, operators, conditionals, loops (based on the number of players), functions, classes/structs, and error handling. You can include test cases for potential failures, such as running out of cards.</p>
<p>一个好的启动项目就是扑克牌。扑克牌需要变量，操作，条件，循环(基于玩家数目)，方法，类/结构，和错误处理。你可以加入测试用例为可能的错误，例如超过牌数量。</p>
<p>Other good starter projects might include Chutes and Ladders, Yahtzee, or a Slot Machine.</p>
<p>其他好的项目可能是 Chutes and Ladders, Yahtzee, or a Slot Machine.</p>
<p>For something more advanced, try to recreate a game like Monopoly. Worry more about the mechanics and keep it text-based.</p>
<p>更先进的 ，尝试重新创造一个像Monopoly的游戏。多考虑机械，基于文本。</p>
<p>It’s key to remember that if you short yourself on the difficulty of the task (such as skipping the double down or split features of blackjack), you’re only limiting your comprehension of the language.</p>
<p>记住，关键点是如果你降低任务难度（如跳过双击或分割扑克的特性）， 只会限制你对语言的理解。</p>
</blockquote>
<blockquote>
<h1 id="what-else">What Else?</h1>
<p>I know that the list of things above isn’t everything that a language has to offer. The truth is you can write just about anything with the tools listed above, but the additional functionality included in standard libraries just make it easier. Most standard libraries include the same functions, and so you can rely on similar names between languages.</p>
<p>我知道以上列出来的并不是语言提供的所有东西。真实的是你可以上面提供的工具来写任何东西，但是标准库的附加功能只会让你更方便。很多标准库包含相同方法，所以你可以在多个语言中使用相似的名字。</p>
<p>The more you work with a language, the more you can discover about the standard library, but be sure to learn the tools beforehand.</p>
<p>你和一个语言工作越多，越多会发现标准库，但是要先学工具。</p>
<p>As you work with a language, try to figure out what its strengths and weaknesses are. These will help you understand which language to use for a particular problem.</p>
<p>学一门语言，要去找出哪里是优势，哪里是弱势。这将会帮你理解哪门语言适合解决哪类问题。</p>
<p>Need to do some data science quickly? Look at a few Python packages or R. Need to write a fast service? Look at C or Go. How about a web server? Look at Java or Python.</p>
<p>需要快速做一些数据科学的事？看看一些Python包或者R. 需要些一个快速的服务？看看C或者Go.关于web服务器？看看Java或Python.</p>
<p>I didn’t just know this by looking at the languages. I learned this by <em>using</em> these languages.</p>
<p>我看这些语言并不了解，我用这些语言之后才了解的。</p>
<p>Since this is possibly my shortest article to date, I’m going to leave you with a challenge to yourself to learn a new language. Good luck!</p>
<p>当我这门短文结束时候，我将会给你留一个有挑战的任务，去学一门新语言，好运！</p>
</blockquote>
]]></content></item><item><title>Week1035_share</title><link>/posts/arts/week1035_share/</link><pubDate>Fri, 31 Mar 2023 15:45:46 +0000</pubDate><guid>/posts/arts/week1035_share/</guid><description>ARTS - Share 补2019.3.6 本章的主题是创建和销毁对象：什么时候、如何创建对象；什么时候、如何避免创建对象；如何保证对象能够适时的销毁；对象被销毁之前如何管理各种清理工作。
第1条：考虑用静态工厂方法代替构造函数 一个类，为了让客户获得它的一个实例，最通常的做法是提供一个公有构造函数。或者提供一个公有的 静态工厂方法（static factory method），就是一个简单的静态方法，返回类的一个实例。如boolan的 包装类 Boolean, valueOf方法：
public static Boolean valueOf(boolean b) { return (b ? TRUE : FALSE); } 类可以为它的客户提供一些静态工厂方法，来代替构造函数，或者同时提供一些构造函数。一个好处是静态工厂方法具有名字，使得类更易用，客户代码更易读。静态工厂方法有自己的名字，没有构造函数只能有一个原型相同的构造函数，可以有不止一个静态工厂方法。如果一个类看起来需要多个构造函数，并且原型特征相同，那么应该考虑用静态工厂方法来代替其中一个或多个构造函数，并且慎重选择他们的名字以便明显表示它们的不同。
静态工厂方法第二个好处是，与构造函数不同，每次调用时候不要求非得创建一个新对象。是的一些非可变类可以使用一个预先构造好的实例，或者把已经构造好的实例缓存起来，在把实例分发给客户，避免创建不必要的重复对象。
静态工厂方法可以重复调用返回同一个对象，1. 使得一个类可以保证是一个singleton, 2、使非可变类可以保证不会有两个相等的实例存在，即当且仅当 a == b 时才有 a.equals(b) 为true. 如果一个类保证了这一点，客户可以用== 来代替 equals ，性能提升。String.intern 是一种有限的方式实现了这种优化。
静态工厂方法第三个好处是，与构造函数不同，可以返回一个原返回类型的子类型的对象，这样我们选择返回对象类型时候就有了更大的灵活性。
应用就是一个API可以返回一个对象，同时又不使改对象的类成为公有的。以这种方式把具体的实现类隐藏起来，可以得到一个非常简洁的API。
静态工厂方法的主要缺点是，类如果不含公有的或者受保护的构造函数，就不能被子类化。
第二个缺点是，它们与其他的静态方法没有任何区别。
总的来说，静态工厂方法和公有的构造函数都有他们各自的用途，我们需要理解它们各自的长处。</description><content type="html"><![CDATA[<h2 id="arts---share--补201936">ARTS - Share  补2019.3.6</h2>
<p>本章的主题是创建和销毁对象：什么时候、如何创建对象；什么时候、如何避免创建对象；如何保证对象能够适时的销毁；对象被销毁之前如何管理各种清理工作。</p>
<h3 id="第1条考虑用静态工厂方法代替构造函数">第1条：考虑用静态工厂方法代替构造函数</h3>
<p>一个类，为了让客户获得它的一个实例，最通常的做法是提供一个公有构造函数。或者提供一个公有的 静态工厂方法（static factory method），就是一个简单的静态方法，返回类的一个实例。如boolan的 包装类 Boolean,  valueOf方法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Boolean <span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span><span style="color:#66d9ef">boolean</span> b<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>b <span style="color:#f92672">?</span> TRUE <span style="color:#f92672">:</span> FALSE<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>类可以为它的客户提供一些静态工厂方法，来代替构造函数，或者同时提供一些构造函数。一个好处是静态工厂方法具有名字，使得类更易用，客户代码更易读。静态工厂方法有自己的名字，没有构造函数只能有一个原型相同的构造函数，可以有不止一个静态工厂方法。如果一个类看起来需要多个构造函数，并且原型特征相同，那么应该考虑用静态工厂方法来代替其中一个或多个构造函数，并且慎重选择他们的名字以便明显表示它们的不同。</p>
<p>静态工厂方法第二个好处是，与构造函数不同，每次调用时候不要求非得创建一个新对象。是的一些非可变类可以使用一个预先构造好的实例，或者把已经构造好的实例缓存起来，在把实例分发给客户，避免创建不必要的重复对象。</p>
<p>静态工厂方法可以重复调用返回同一个对象，1. 使得一个类可以保证是一个singleton, 2、使非可变类可以保证不会有两个相等的实例存在，即当且仅当 a == b 时才有  a.equals(b) 为true. 如果一个类保证了这一点，客户可以用== 来代替 equals ，性能提升。String.intern 是一种有限的方式实现了这种优化。</p>
<p>静态工厂方法第三个好处是，与构造函数不同，可以返回一个原返回类型的子类型的对象，这样我们选择返回对象类型时候就有了更大的灵活性。</p>
<p>应用就是一个API可以返回一个对象，同时又不使改对象的类成为公有的。以这种方式把具体的实现类隐藏起来，可以得到一个非常简洁的API。</p>
<p>静态工厂方法的主要缺点是，类如果不含公有的或者受保护的构造函数，就不能被子类化。</p>
<p>第二个缺点是，它们与其他的静态方法没有任何区别。</p>
<p>总的来说，静态工厂方法和公有的构造函数都有他们各自的用途，我们需要理解它们各自的长处。</p>
]]></content></item><item><title>Week1035_tip</title><link>/posts/arts/week1035_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:46 +0000</pubDate><guid>/posts/arts/week1035_tip/</guid><description>ARTS - Tip 补2019.3.6 MySQL的 ON DUPLICATE KEY UPDATE 背景 项目中经常使用到saveOrUpdate方式更新，即没有就插入，有就更新。发现MySQL支持这样的语法，13.2.6.2 INSERT &amp;hellip; ON DUPLICATE KEY UPDATE Syntax
官方文档 If you specify an ON DUPLICATE KEY UPDATE clause and a row to be inserted would cause a duplicate value in a UNIQUE index or PRIMARY KEY, an UPDATE of the old row occurs. For example, if column a is declared as UNIQUE and contains the value 1, the following two statements have similar effect:</description><content type="html"><![CDATA[<h2 id="arts---tip--补201936">ARTS - Tip  补2019.3.6</h2>
<h2 id="mysql的-on-duplicate-key-update">MySQL的 ON DUPLICATE KEY UPDATE</h2>
<h3 id="背景">背景</h3>
<p>项目中经常使用到saveOrUpdate方式更新，即没有就插入，有就更新。发现MySQL支持这样的语法，<a href="https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html">13.2.6.2 INSERT &hellip; ON DUPLICATE KEY UPDATE Syntax</a></p>
<h3 id="官方文档">官方文档</h3>
<blockquote>
<p>If you specify an <code>ON DUPLICATE KEY UPDATE</code> clause and a row to be inserted would cause a duplicate value in a <code>UNIQUE</code> index or <code>PRIMARY KEY</code>, an <a href="https://dev.mysql.com/doc/refman/8.0/en/update.html"><code>UPDATE</code></a> of the old row occurs. For example, if column <code>a</code> is declared as <code>UNIQUE</code> and contains the value <code>1</code>, the following two statements have similar effect:</p>
</blockquote>
<p>如果你指定了 ON DUPLICATE KEY  UPDATE  语句，插入的行将会造成一个 UNIQUE 索引或PRIMARY KEY 的列的值重复，将会UPDATE 旧的值。例如，如果列  a  声明为unique并且包含值为 1， 一下两个语句有同样的效果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1(a, b, <span style="color:#66d9ef">c</span>) <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>) <span style="color:#66d9ef">ON</span> DUPLICATE <span style="color:#66d9ef">KEY</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">C</span><span style="color:#f92672">=</span><span style="color:#66d9ef">C</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">update</span> t1 <span style="color:#66d9ef">set</span> <span style="color:#66d9ef">c</span><span style="color:#f92672">=</span><span style="color:#66d9ef">c</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">where</span> a<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span></code></pre></div><p>(如果一个 InnoDB 表的 a 列指定为自增，表现会不同， INSERT语句会增加自增值，但update不会)</p>
<p>如果一个列 b  也是 unique, 该insert 和如下UPDATE语句相同：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">UPDATE</span> t1 <span style="color:#66d9ef">SET</span> <span style="color:#66d9ef">c</span><span style="color:#f92672">=</span><span style="color:#66d9ef">c</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">WHERE</span> a<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">OR</span> b<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">LIMIT</span> <span style="color:#ae81ff">1</span>;
</span></span></code></pre></div><p>If a=1 或 b=2 匹配多行，仅仅一行被更新。通常，你应该在该表有多个 unique 索引时避免使用 ON DUPLICATE KEY UPDATE 语句。</p>
<p>使用 ON DUPLICATE KEY UPDATE 时，受影响的行数， 如果是新插入一行，就是1；如果存在就更新，就是2，如果存在行被设置为本来的值，就是0.</p>
<p>如果一个表包含一个 AUTO_INCREMENT 列， INSERT&hellip; ON DUPLICATE KEY UPDATE  插入或更新一行，LAST_INSERT_ID() 返回的是AUTO_INCREMENT的值。</p>
<p>ON DUPLICATE KEY UPDATE 语句可以包含多个列，逗号分隔。</p>
<p>你可以使用VALUES(col_name) 函数，指的是将会被插入的 col_name 列。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 (a,b,<span style="color:#66d9ef">c</span>) <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>),(<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">ON</span> DUPLICATE <span style="color:#66d9ef">KEY</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">c</span><span style="color:#f92672">=</span><span style="color:#66d9ef">VALUES</span>(a)<span style="color:#f92672">+</span><span style="color:#66d9ef">VALUES</span>(b);
</span></span></code></pre></div><p>和以下相同：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 (a,b,<span style="color:#66d9ef">c</span>) <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">ON</span> DUPLICATE <span style="color:#66d9ef">KEY</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">c</span><span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 (a,b,<span style="color:#66d9ef">c</span>) <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">ON</span> DUPLICATE <span style="color:#66d9ef">KEY</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">c</span><span style="color:#f92672">=</span><span style="color:#ae81ff">9</span>;
</span></span></code></pre></div><p>对于 INSERT &hellip; SELECT 语句，这些规则适用于正常的SELECT语句，可以参考ON DUPLICATE KEY UPDATE :</p>
<ul>
<li>从一个可能是派生的单表查的列</li>
<li>多表连接查询的列</li>
<li>DISTINCT查的列</li>
<li>不用GROUP BY 查询的列，一个副作用是你必须给非唯一列名一个别名</li>
</ul>
<p>对于UNION的列不支持，但是可以作为一个派生表，然后被当做单表结果，如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 (a, b)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">c</span>, d <span style="color:#66d9ef">FROM</span> t2
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">UNION</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">SELECT</span> e, f <span style="color:#66d9ef">FROM</span> t3
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ON</span> DUPLICATE <span style="color:#66d9ef">KEY</span> <span style="color:#66d9ef">UPDATE</span> b <span style="color:#f92672">=</span> b <span style="color:#f92672">+</span> <span style="color:#66d9ef">c</span>;
</span></span></code></pre></div><p>修改为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1 (a, b)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">c</span>, d <span style="color:#66d9ef">FROM</span> t2
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">UNION</span>
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">SELECT</span> e, f <span style="color:#66d9ef">FROM</span> t3) <span style="color:#66d9ef">AS</span> dt
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ON</span> DUPLICATE <span style="color:#66d9ef">KEY</span> <span style="color:#66d9ef">UPDATE</span> b <span style="color:#f92672">=</span> b <span style="color:#f92672">+</span> <span style="color:#66d9ef">c</span>;
</span></span></code></pre></div><h3 id="实际使用">实际使用</h3>
<p>我们在往表里查数据时候，使用到了如下结构</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> t1(a, b, <span style="color:#66d9ef">c</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">SELECT</span> d,e,f <span style="color:#66d9ef">FROM</span> t2
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ON</span> DUPLICATE <span style="color:#66d9ef">KEY</span> <span style="color:#66d9ef">UPDATE</span> a<span style="color:#f92672">=</span><span style="color:#66d9ef">values</span>(a), b<span style="color:#f92672">=</span><span style="color:#66d9ef">VALUES</span>(b), <span style="color:#66d9ef">c</span><span style="color:#f92672">=</span><span style="color:#66d9ef">VALUES</span>(<span style="color:#66d9ef">c</span>)
</span></span></code></pre></div><p>这里特别说下 VALUES 函数， t1表中存在数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>a <span style="color:#f92672">|</span> b <span style="color:#f92672">|</span>  c  
</span></span><span style="display:flex;"><span><span style="color:#f92672">-|</span>c<span style="color:#f92672">|-</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> <span style="color:#f92672">|</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">|</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span> <span style="color:#f92672">|</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">|</span> <span style="color:#ae81ff">6</span> <span style="color:#f92672">|</span>
</span></span></code></pre></div><p>其中 b 是unique 约束,我们想要更新多个值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 (b, <span style="color:#66d9ef">c</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">333</span>),(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">666</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">on</span> duplicate <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">update</span>
</span></span><span style="display:flex;"><span>  b<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>,<span style="color:#66d9ef">c</span><span style="color:#f92672">=</span><span style="color:#ae81ff">44</span>;
</span></span></code></pre></div><p>这么插入会报错 <code>[23000][1062] Duplicate entry '22' for key 'b'</code>，因为插入多行，会默认插入多行重复的22, 这种情况要用values,改写为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 (b, <span style="color:#66d9ef">c</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">333</span>),(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">666</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">on</span> duplicate <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">update</span>
</span></span><span style="display:flex;"><span>  b<span style="color:#f92672">=</span><span style="color:#66d9ef">values</span>(b),<span style="color:#66d9ef">c</span><span style="color:#f92672">=</span><span style="color:#66d9ef">values</span>(<span style="color:#66d9ef">c</span>);
</span></span></code></pre></div><p>这样会正常插入，但是我们如果不用vaues, 写成如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">insert</span> <span style="color:#66d9ef">into</span> t1 (b, <span style="color:#66d9ef">c</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">values</span>(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">333</span>),(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">666</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">on</span> duplicate <span style="color:#66d9ef">key</span> <span style="color:#66d9ef">update</span>
</span></span><span style="display:flex;"><span>  b<span style="color:#f92672">=</span>b,<span style="color:#66d9ef">c</span><span style="color:#f92672">=</span><span style="color:#66d9ef">c</span>;
</span></span></code></pre></div><p>不会报错，但是值却没有改变，不是想要的更新。</p>
]]></content></item><item><title>Week1036_algorithm</title><link>/posts/arts/week1036_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:46 +0000</pubDate><guid>/posts/arts/week1036_algorithm/</guid><description>ARTS - Algorithm 补2019.3.13 5. 最长回文子串 题目 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。
示例 1：
输入: &amp;ldquo;babad&amp;rdquo; 输出: &amp;ldquo;bab&amp;rdquo; 注意: &amp;ldquo;aba&amp;rdquo; 也是一个有效答案。 示例 2：
输入: &amp;ldquo;cbbd&amp;rdquo; 输出: &amp;ldquo;bb&amp;rdquo;
分析 这个回文子串，要分两步，1.分割，2.判断。判断的逻辑可以是，从两边往中间挤压，只要不相等，就不是，判断代码如下：
private static boolean isPalindrome(String subString) { boolean isPalindrom = true; int length = subString.length(); for (int i = 0; i &amp;lt; length; i++) { char si = subString.charAt(i); char sj = subString.charAt(length - i - 1); if (si != sj) { return false; } } return isPalindrom; } 那么，分割可以是迭代从第1位开始，每次都比较到最后一位子串：</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补2019313">ARTS - Algorithm 补2019.3.13</h2>
<h2 id="5-最长回文子串httpsleetcode-cncomproblemslongest-palindromic-substring"><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">5. 最长回文子串</a></h2>
<h3 id="题目">题目</h3>
<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>
<p>示例 1：</p>
<p>输入: &ldquo;babad&rdquo;
输出: &ldquo;bab&rdquo;
注意: &ldquo;aba&rdquo; 也是一个有效答案。
示例 2：</p>
<p>输入: &ldquo;cbbd&rdquo;
输出: &ldquo;bb&rdquo;</p>
<h3 id="分析">分析</h3>
<p>这个回文子串，要分两步，1.分割，2.判断。判断的逻辑可以是，从两边往中间挤压，只要不相等，就不是，判断代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isPalindrome</span><span style="color:#f92672">(</span>String subString<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">boolean</span> isPalindrom <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> length <span style="color:#f92672">=</span> subString<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> length<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> si <span style="color:#f92672">=</span> subString<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> sj <span style="color:#f92672">=</span> subString<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>length <span style="color:#f92672">-</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>si <span style="color:#f92672">!=</span> sj<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> isPalindrom<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>那么，分割可以是迭代从第1位开始，每次都比较到最后一位子串：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">longestPalindrome</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> lenth <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> max <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        String result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> lenth<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> i<span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> lenth<span style="color:#f92672">;</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                String subString <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">substring</span><span style="color:#f92672">(</span>i<span style="color:#f92672">,</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">boolean</span> is_palindrom <span style="color:#f92672">=</span> isPalindrome<span style="color:#f92672">(</span>subString<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>is_palindrom<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>subString<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">&gt;=</span> max<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        result <span style="color:#f92672">=</span> subString<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                    max <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>max<span style="color:#f92672">,</span> subString<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>这个确实可以求到结果，但是提交leetcode超时，仔细分析这个过程，发现时间复杂度是大于O(n2)的。那么有没有一个更好的方法？ 当然有，对于每一位，可以向两边扩散，代码如下：</p>
<h3 id="代码">代码</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span> <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">longestPalindrome5</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> s<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 对称，和顶点
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> max <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> left <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> right <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 顶点
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> m <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>a <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> b <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">&amp;&amp;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                m <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                a<span style="color:#f92672">--;</span>
</span></span><span style="display:flex;"><span>                b<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>m <span style="color:#f92672">&gt;</span> max<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                max <span style="color:#f92672">=</span> m<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                left <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                right <span style="color:#f92672">=</span> b <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 对称
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            a <span style="color:#f92672">=</span> i<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            b <span style="color:#f92672">=</span> i <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            m <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>a <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> b <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">&amp;&amp;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>a<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>b<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                m <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                a<span style="color:#f92672">--;</span>
</span></span><span style="display:flex;"><span>                b<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>m <span style="color:#f92672">&gt;</span> max<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                max <span style="color:#f92672">=</span> m<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                left <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                right <span style="color:#f92672">=</span> b <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">substring</span><span style="color:#f92672">(</span>left<span style="color:#f92672">,</span> right <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1036_review</title><link>/posts/arts/week1036_review/</link><pubDate>Fri, 31 Mar 2023 15:45:46 +0000</pubDate><guid>/posts/arts/week1036_review/</guid><description>ARTS - Review 补2019.3.13 Generating Unique Id in Distributed Environment in high Scale:
大规模生成分布式系统的唯一ID
Recently I was working on a project which requires unique id in a distributed environment which we used as a primary key to store in databases. In a single server, it is easy to generate unique id like *** Oracle *** uses *sequence(increment counter for next id )* in SQL auto increment primary key column in tables.</description><content type="html"><![CDATA[<h2 id="arts---review-补2019313">ARTS - Review 补2019.3.13</h2>
<p><a href="https://medium.com/@sauravomar01/generating-unique-id-in-distributed-environment-in-high-scale-88f83240db57">Generating Unique Id in Distributed Environment in high Scale:</a></p>
<p>大规模生成分布式系统的唯一ID</p>
<blockquote>
<p>Recently I was working on a project which requires unique id in a distributed environment which we used as a <strong>primary</strong> key to store in databases. In a single server, it is easy to generate unique id like *** Oracle *** uses *<strong>sequence(increment counter for next id )*</strong> <em>in SQL auto increment primary key column in tables.</em></p>
</blockquote>
<p>最近我工作在一个需要生成唯一ID作为主键存在数据库的分布式环境。在一个单机环境，很容易生成唯一ID，像 ORACLE 使用 sequence(增长生成下一个ID) 在SQL表中自增主键列。</p>
<blockquote>
<p>In <em>SQL</em> we can do it while creation of the table.</p>
</blockquote>
<p>在SQL中，我们创建表时候这样做：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> example (
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">primary</span> <span style="color:#66d9ef">key</span> AUTOINCREMENT <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span>,
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><blockquote>
<p>In <em>Oracle,</em> we use sequence while inserting in table.</p>
</blockquote>
<p>在Oracle ， 我们使用序列来插入表。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> SEQUENCE seq_example
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">MINVALUE</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">START</span> <span style="color:#66d9ef">WITH</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">INCREMENT</span> <span style="color:#66d9ef">BY</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">CACHE</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> example(primary_key) <span style="color:#66d9ef">VALUES</span>(seq_example.NEXTVAL);
</span></span></code></pre></div><blockquote>
<p>In a single server, it&rsquo;s pretty easy to generate a primary key, <em>In a distributed environment, it becomes a problem because key should be unique in all the nodes</em>. Let’s see how can we do it in a distributed environment.</p>
<p>There are a couple of approaches which has pros and cons both so let’s go through one by one.</p>
</blockquote>
<p>在单服务器上，很容易就生成一个主键，在一个分布式环境，因为要保证键在所有节点唯一，就成了问题。在分布式环境该如何做呢？</p>
<p>这有两种方法各有利弊，我们一个个看。</p>
<h3 id="database-ticket-servers">Database Ticket Servers:</h3>
<blockquote>
<p>These are the Centralized Auto increment servers which response with unique ids when requested from the nodes. The problem with these kinds of nodes is a single point of failure because all the nodes are dependent on this server if it fails then all nodes will not able to process further.</p>
</blockquote>
<p>这些是集中式自动增量服务器，当节点请求时会返回唯一ID作响应。问题是当多个这种节点都依赖这台服务器，如果它出现故障，所有的节点都将出现问题。</p>
<p><img src="https://miro.medium.com/max/1290/1*mu6PaFArn_O2Gl4thJa7bQ.png" alt=""></p>
<h3 id="uuid">UUID</h3>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUIDs</a> are 128-bit hexadecimal numbers that are globally unique. The chances of the same UUID getting generated twice is a negligible or very very less probability for collisions <em>UUID contains a reference to the network address of the host that generated the UUID, a timestamp (a record of the precise time of a transaction), and some randomly generated component.</em></p>
</blockquote>
<p>UUID 是128位全局唯一散列数字。两次生成同样的UUID机会是非常低的或者非常小的通途概率，UUID包含生成UUID的主机网络地址引用，一个时间戳(一次事务的时间片)，和一些随机组件。</p>
<p>According to <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier#Random_UUID_probability_of_duplicates">Wikipedia</a>, regarding the probability of duplicates in random UUIDs:</p>
<blockquote>
<p>Only after generating 1 billion UUIDs every second for the next 100 years, the probability of creating just one duplicate would be about 50%. Or, to put it another way, the probability of one duplicate would be about 50% if every person on earth owned 600 million UUIDs.</p>
</blockquote>
<p>根据 Wikipedia ， 解释随机UUID可能重复的情况：</p>
<p>接下来100年每秒生成10亿UUID，生成一个重复UUID的概率约50%.或者，换句话说，地球上每人都拥有600百万UUIDS， 才有50% 几率出现一次重复。</p>
<ul>
<li>UUID’ s does not require coordination between different nodes and can be generated independently.</li>
</ul>
<p>UUID不要求不同节点的条件，可以独立生成。</p>
<blockquote>
<p>But the problem with UUID is very big in size and does not index well so while indexing it will take more size which effects query performance.</p>
</blockquote>
<p>但是UUID的问题也很大，就是尺寸很大，不能友好索引，以便提高查询性能。</p>
<h3 id="twitter-snowflake">Twitter Snowflake</h3>
<blockquote>
<p><a href="https://github.com/twitter/snowflake/tree/snowflake-2010">Twitter snowflake</a> is a dedicated network service for generating 64-bit unique IDs at high scale with some simple guarantees.</p>
</blockquote>
<p>Twitter Snowflake 是一个利用几个简单保证依赖网络服务来生成64位唯一ID的高性能方法。</p>
<blockquote>
<p>The IDs are made up of the following components:</p>
</blockquote>
<ul>
<li><em>Epoch timestamp in millisecond precision</em> — 41 bits (gives us 69 years with a custom epoch)</li>
<li><em>Machine id</em> — 10 bits (gives us up to 1024 machines)</li>
<li><em>Sequence number</em> — 12 bits (A local counter per machine that rolls over every 4096)</li>
<li>The extra 1 bit is reserved for future purposes.</li>
</ul>
<p>ID由以下组件组成：</p>
<ul>
<li>精确到毫秒的时间戳 &mdash; 41 位(可以使用69年）</li>
<li>机器ID  &mdash; 10位(可以使用1024个机器)</li>
<li>序列号 &mdash; 12位(每台机器本地序列号，每个都到4096)</li>
<li>额外1位为未来保留</li>
</ul>
<blockquote>
<p><em>So the id which is generated by this is 64bit which solves the problems of size and latency issues but also introduces one problem for maintaining extra servers.</em></p>
<p>That’s it</p>
<p>Happy Learning.</p>
</blockquote>
<p>所以64位生成的ID解决了大小和延时问题，但是也引入了额外机器的问题。</p>
<p>以上。</p>
<p>学习快乐。</p>
]]></content></item><item><title>Week1036_share</title><link>/posts/arts/week1036_share/</link><pubDate>Fri, 31 Mar 2023 15:45:46 +0000</pubDate><guid>/posts/arts/week1036_share/</guid><description>ARTS - Share 补2019.3.13 第2条：使用私有构造函数强化singleton属性
singleton是指这样的类，它只能实例化一次，singleton通常被用来代表那些本质上具有唯一性的系统组件。
public class Elvis { public static final Elvis INSTANCE = new Elvis(); private Elvis() {} } 私有构造函数仅被调用一次，用来实例化公有的平台final 域Elvis.INSTANCE.
第二种方法是提供了一个公有的静态工厂方法，而不是公有的静态final 域
public class Elvis { private static final Elvis INSTANCE = new Elvis(); private Elvis() {} public static Elvis getInstance() { return INSTANCE; } } 所有对于静态方法 Elvis.getInstance() 的调用，都会返回同一个对象引用，所以不会有别的Elvis实例被创建。
第一种方法的主要好处在于组内类的成员声明很清楚的表名了这个类是一个singleton,公有的静态域是final的，所以该域将总是包含相同的对象引用，第一中方法可能在性能上稍微领先，但是第二种方法中，一个优秀的JVM实现应该能够通过将静态工厂方法的调用内联化（inlining）， 来消除这种差别。
第二种方法的主要好处在于，它提供了灵活性：在不改变API的前提下，允许我们改变想法，把该类做成singleton，或者不做成singleton, singleton静态工厂方法返回该类的唯一实例，但是，它也很容易被修改，比如说为每一个调用该方法的线程返回一个唯一的实例。
为了使一个singleton类编程可序列话的，仅仅声明 implements Serializable 是不够的，为了维护singleton性，必须也要提供一个 readResolve 方法，否则的话，一个序列话的实例在每次反序列化时候，都会导致创建一个新的实例。
private Object readResolve() throws ObjectsStreamException { return INSTANCE; }</description><content type="html"><![CDATA[<h2 id="arts---share-补2019313">ARTS - Share 补2019.3.13</h2>
<p>第2条：使用私有构造函数强化singleton属性</p>
<p>singleton是指这样的类，它只能实例化一次，singleton通常被用来代表那些本质上具有唯一性的系统组件。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Elvis</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> Elvis INSTANCE <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Elvis<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#a6e22e">Elvis</span><span style="color:#f92672">()</span> <span style="color:#f92672">{}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>私有构造函数仅被调用一次，用来实例化公有的平台final 域Elvis.INSTANCE.</p>
<p>第二种方法是提供了一个公有的静态工厂方法，而不是公有的静态final 域</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Elvis</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> Elvis INSTANCE <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Elvis<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#a6e22e">Elvis</span><span style="color:#f92672">()</span> <span style="color:#f92672">{}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Elvis <span style="color:#a6e22e">getInstance</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> INSTANCE<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>所有对于静态方法 Elvis.getInstance() 的调用，都会返回同一个对象引用，所以不会有别的Elvis实例被创建。</p>
<p>第一种方法的主要好处在于组内类的成员声明很清楚的表名了这个类是一个singleton,公有的静态域是final的，所以该域将总是包含相同的对象引用，第一中方法可能在性能上稍微领先，但是第二种方法中，一个优秀的JVM实现应该能够通过将静态工厂方法的调用内联化（inlining）， 来消除这种差别。</p>
<p>第二种方法的主要好处在于，它提供了灵活性：在不改变API的前提下，允许我们改变想法，把该类做成singleton，或者不做成singleton, singleton静态工厂方法返回该类的唯一实例，但是，它也很容易被修改，比如说为每一个调用该方法的线程返回一个唯一的实例。</p>
<p>为了使一个singleton类编程可序列话的，仅仅声明 implements Serializable 是不够的，为了维护singleton性，必须也要提供一个 readResolve 方法，否则的话，一个序列话的实例在每次反序列化时候，都会导致创建一个新的实例。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> Object <span style="color:#a6e22e">readResolve</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> ObjectsStreamException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> INSTANCE<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1036_tip</title><link>/posts/arts/week1036_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:46 +0000</pubDate><guid>/posts/arts/week1036_tip/</guid><description>ARTS - Tip 补2019.3.13 MySQL 的CAST转换函数 最近在做一个需求需要连接查询， 如下
SELECT a.column1, a.column2, b.column1 FROM table1 a LEFT JOIN table b on a.id = b.id WHERE ... 由于 a.id 和 b.id 类型不一致，所以需要转换下,那么，比如
a.id = CAST(b.id AS CHAR(20)) 如果要走索引比较条件左边是不能带函数的
-- 反例 SELECT * FROM table1 WHERE DATE_FORMAT(a.create_time, &amp;#39;%Y-%m-%d&amp;#39;) = &amp;#39;2020-10-21&amp;#39;; -- 正例 SELECT * FROM table1 WHERE a.create_time = STR_TO_DATE(&amp;#39;2020-10-21&amp;#39;, &amp;#39;%Y-%m-%d&amp;#39;); 如果要左边写函数，那么就要加函数索引。
Name Desciption BINARY string转为二进制string CAST() Cast a value as a certain type CONVERT() Cast a value as a certain type CAST 函数可以改变数据类型</description><content type="html"><![CDATA[<h2 id="arts---tip-补2019313">ARTS - Tip 补2019.3.13</h2>
<h3 id="mysql-的cast转换函数">MySQL 的CAST转换函数</h3>
<p>最近在做一个需求需要连接查询， 如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> a.column1, a.column2, b.column1
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span> table1 a 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">LEFT</span> <span style="color:#66d9ef">JOIN</span> <span style="color:#66d9ef">table</span> b <span style="color:#66d9ef">on</span> a.id <span style="color:#f92672">=</span> b.id
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">WHERE</span> 
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>由于 a.id 和 b.id 类型不一致，所以需要转换下,那么，比如</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>a.id <span style="color:#f92672">=</span> <span style="color:#66d9ef">CAST</span>(b.id <span style="color:#66d9ef">AS</span> CHAR(<span style="color:#ae81ff">20</span>))
</span></span></code></pre></div><p>如果要走索引比较条件左边是不能带函数的</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#75715e">-- 反例
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">SELECT</span> 
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span> table1
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">WHERE</span>
</span></span><span style="display:flex;"><span>DATE_FORMAT(a.create_time, <span style="color:#e6db74">&#39;%Y-%m-%d&#39;</span>) <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;2020-10-21&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- 正例
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">SELECT</span> 
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span> table1
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">WHERE</span>
</span></span><span style="display:flex;"><span>a.create_time <span style="color:#f92672">=</span> STR_TO_DATE(<span style="color:#e6db74">&#39;2020-10-21&#39;</span>, <span style="color:#e6db74">&#39;%Y-%m-%d&#39;</span>);
</span></span></code></pre></div><p>如果要左边写函数，那么就要加<strong>函数索引</strong>。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Desciption</th>
</tr>
</thead>
<tbody>
<tr>
<td>BINARY</td>
<td>string转为二进制string</td>
</tr>
<tr>
<td>CAST()</td>
<td>Cast a value as a certain type</td>
</tr>
<tr>
<td>CONVERT()</td>
<td>Cast a value as a certain type</td>
</tr>
</tbody>
</table>
<p>CAST 函数可以改变数据类型</p>
<p>CONVERT()使用USING语句来改变字符集</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CONVERT</span>(expr <span style="color:#66d9ef">USING</span> transcoding_name)
</span></span></code></pre></div>]]></content></item><item><title>Week1037_algorithm</title><link>/posts/arts/week1037_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:46 +0000</pubDate><guid>/posts/arts/week1037_algorithm/</guid><description>ARTS - Algorithm 6. Z 字形变换 题目 将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。
比如输入字符串为 &amp;ldquo;LEETCODEISHIRING&amp;rdquo; 行数为 3 时，排列如下：
L C I R E T O E S I I G E D H N 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&amp;ldquo;LCIRETOESIIGEDHN&amp;rdquo;。
请你实现这个将字符串进行指定行数变换的函数：
string convert(string s, int numRows); 示例 1:
输入: s = &amp;ldquo;LEETCODEISHIRING&amp;rdquo;, numRows = 3 输出: &amp;ldquo;LCIRETOESIIGEDHN&amp;quot;s 示例 2:
输入: s = &amp;ldquo;LEETCODEISHIRING&amp;rdquo;, numRows = 4 输出: &amp;ldquo;LDREOEIIECIHNTSG&amp;rdquo; 解释:
L D R E O E I I E C I H N T S G</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h3 id="6-z-字形变换httpsleetcode-cncomproblemszigzag-conversion"><a href="https://leetcode-cn.com/problems/zigzag-conversion/">6. Z 字形变换</a></h3>
<h3 id="题目">题目</h3>
<p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>
<p>比如输入字符串为 &ldquo;LEETCODEISHIRING&rdquo; 行数为 3 时，排列如下：</p>
<p>L   C   I   R
E T O E S I I G
E   D   H   N
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&ldquo;LCIRETOESIIGEDHN&rdquo;。</p>
<p>请你实现这个将字符串进行指定行数变换的函数：</p>
<p>string convert(string s, int numRows);
示例 1:</p>
<p>输入: s = &ldquo;LEETCODEISHIRING&rdquo;, numRows = 3
输出: &ldquo;LCIRETOESIIGEDHN&quot;s
示例 2:</p>
<p>输入: s = &ldquo;LEETCODEISHIRING&rdquo;, numRows = 4
输出: &ldquo;LDREOEIIECIHNTSG&rdquo;
解释:</p>
<p>L     D     R
E   O E   I I
E C   I H   N
T     S     G</p>
<h3 id="分析">分析</h3>
<p>字符串字符从上到下从左到右之字型排列，其实就是类似回文数作为行数顺序  0 1 2 3 2 1 0 12 3 2 1 0 &hellip; ，</p>
<p>然后存下每一行的数据，最后按行拼接字符串。</p>
<p>如何生成回文数？类似如下算法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 生成zigzag 数字，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param max 最大值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">generateZigzag</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> max<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// flag == true ++,  flag == false --
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 标记， 如果到大边界就开始反转，到小边界也要反转
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">boolean</span> flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 最小边界记号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> low <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 最大边界记号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>max<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>index <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>index <span style="color:#f92672">==</span> max<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>index <span style="color:#f92672">==</span> low<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>          	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>low <span style="color:#f92672">==</span> max<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">// 如果最大最小边界相等，就是只有一行
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              <span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>flag<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                index <span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                index <span style="color:#f92672">--;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>有了这个算法，然后把每一行当做一个List，来存取数据就可以了，整体代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> numRows<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;&gt;</span> result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 每一行都加一个list
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> numRows<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            result<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;());</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 然后拆分字符串，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> min <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> max <span style="color:#f92672">=</span> numRows <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">boolean</span> flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            result<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>index<span style="color:#f92672">).</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>ch<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>index <span style="color:#f92672">==</span> max<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>index <span style="color:#f92672">==</span> min<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>min <span style="color:#f92672">==</span> max<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>flag<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                index<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                index<span style="color:#f92672">--;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        StringBuilder sb <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        result<span style="color:#f92672">.</span><span style="color:#a6e22e">forEach</span><span style="color:#f92672">(</span>i <span style="color:#f92672">-&gt;</span> i<span style="color:#f92672">.</span><span style="color:#a6e22e">forEach</span><span style="color:#f92672">(</span>j <span style="color:#f92672">-&gt;</span> sb<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>j<span style="color:#f92672">)));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> sb<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>虽然以上算法解决了这个问题，但是还是有优化空间的，比如，我们其实实际只需要找出各个字母的行数就行，然后根据行数取字符，无需增加中间容器来保存。所以，问题就变成了，位置和行数的关系。</p>
<p>【代码未实现】</p>
]]></content></item><item><title>Week1037_tip</title><link>/posts/arts/week1037_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:46 +0000</pubDate><guid>/posts/arts/week1037_tip/</guid><description>ARTS - Tip 补2019.3.20 一个关于MongoDB连接的问题 最近有一个需求，要连接mongo集群，但是总是报错，以下是问题及解决过程。
项目背景 springboot项目，连接阿里云MongoDB数据库。
问题描述 在启动项目时候报错如下：
No server chosen by ReadPreferenceServerSelector{readPreference=primary} from cluster description ClusterDescription{type=UNKNOWN, connectionMode=MULTIPLE, serverDescriptions=[ServerDescription{address=xxx:3717, type=UNKNOWN, state=CONNECTING, excepti on={com.mongodb.MongoSocketReadException: Prematurely reached end of stream}}, ServerDescription{address=xxx:3717, type=UNKNOWN, state=CONNECTING, excep tion={com.mongodb.MongoSocketReadException: Prematurely reached end of stream}}]}. Waiting for 30000 ms before timing out [2020-10-22 09:09:01.844][ERROR][unknown_8ea74c3c095b4c689a1b989f25fc6d9f][c.o.o.c.c.CRBDataQueryController]- userMobileList error 2348162338435 null 499611240792850432 org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting for a server that matches ReadPreferenceServerSelector{readPreference=primary}. Client view of cluster state is {type=UNKNOWN, servers=[{address=xxx:3717, type=UNKNOWN, state=CONNECTING, exception={com.</description><content type="html"><![CDATA[<h2 id="arts---tip-补2019320">ARTS - Tip 补2019.3.20</h2>
<h2 id="一个关于mongodb连接的问题">一个关于MongoDB连接的问题</h2>
<p>最近有一个需求，要连接mongo集群，但是总是报错，以下是问题及解决过程。</p>
<h3 id="项目背景">项目背景</h3>
<p>springboot项目，连接阿里云MongoDB数据库。</p>
<h3 id="问题描述">问题描述</h3>
<p>在启动项目时候报错如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>No server chosen by ReadPreferenceServerSelector<span style="color:#f92672">{</span>readPreference<span style="color:#f92672">=</span>primary<span style="color:#f92672">}</span> from cluster description ClusterDescription<span style="color:#f92672">{</span>type<span style="color:#f92672">=</span>UNKNOWN<span style="color:#f92672">,</span> connectionMode<span style="color:#f92672">=</span>MULTIPLE<span style="color:#f92672">,</span> serverDescriptions<span style="color:#f92672">=[</span>ServerDescription<span style="color:#f92672">{</span>address<span style="color:#f92672">=</span>xxx<span style="color:#f92672">:</span><span style="color:#ae81ff">3717</span><span style="color:#f92672">,</span> type<span style="color:#f92672">=</span>UNKNOWN<span style="color:#f92672">,</span> state<span style="color:#f92672">=</span>CONNECTING<span style="color:#f92672">,</span> excepti
</span></span><span style="display:flex;"><span>on<span style="color:#f92672">={</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">mongodb</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MongoSocketReadException</span><span style="color:#f92672">:</span> Prematurely reached end of stream<span style="color:#f92672">}},</span> ServerDescription<span style="color:#f92672">{</span>address<span style="color:#f92672">=</span>xxx<span style="color:#f92672">:</span><span style="color:#ae81ff">3717</span><span style="color:#f92672">,</span> type<span style="color:#f92672">=</span>UNKNOWN<span style="color:#f92672">,</span> state<span style="color:#f92672">=</span>CONNECTING<span style="color:#f92672">,</span> excep
</span></span><span style="display:flex;"><span>tion<span style="color:#f92672">={</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">mongodb</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MongoSocketReadException</span><span style="color:#f92672">:</span> Prematurely reached end of stream<span style="color:#f92672">}}]}.</span> Waiting <span style="color:#66d9ef">for</span> <span style="color:#ae81ff">30000</span> ms before timing out
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#ae81ff">2020</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span><span style="color:#f92672">-</span><span style="color:#ae81ff">22</span> <span style="color:#ae81ff">09</span><span style="color:#f92672">:</span><span style="color:#ae81ff">09</span><span style="color:#f92672">:</span><span style="color:#ae81ff">01.844</span><span style="color:#f92672">][</span>ERROR<span style="color:#f92672">][</span>unknown_8ea74c3c095b4c689a1b989f25fc6d9f<span style="color:#f92672">][</span>c<span style="color:#f92672">.</span><span style="color:#a6e22e">o</span><span style="color:#f92672">.</span><span style="color:#a6e22e">o</span><span style="color:#f92672">.</span><span style="color:#a6e22e">c</span><span style="color:#f92672">.</span><span style="color:#a6e22e">c</span><span style="color:#f92672">.</span><span style="color:#a6e22e">CRBDataQueryController</span><span style="color:#f92672">]-</span> userMobileList error <span style="color:#ae81ff">2348162338435</span> <span style="color:#66d9ef">null</span> <span style="color:#ae81ff">499611240792850432</span>
</span></span><span style="display:flex;"><span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">dao</span><span style="color:#f92672">.</span><span style="color:#a6e22e">DataAccessResourceFailureException</span><span style="color:#f92672">:</span> Timed out after <span style="color:#ae81ff">30000</span> ms <span style="color:#66d9ef">while</span> waiting <span style="color:#66d9ef">for</span> a server that matches ReadPreferenceServerSelector<span style="color:#f92672">{</span>readPreference<span style="color:#f92672">=</span>primary<span style="color:#f92672">}.</span> Client view of cluster state is <span style="color:#f92672">{</span>type<span style="color:#f92672">=</span>UNKNOWN<span style="color:#f92672">,</span> servers<span style="color:#f92672">=[{</span>address<span style="color:#f92672">=</span>xxx<span style="color:#f92672">:</span><span style="color:#ae81ff">3717</span><span style="color:#f92672">,</span> type<span style="color:#f92672">=</span>UNKNOWN<span style="color:#f92672">,</span> state<span style="color:#f92672">=</span>CONNECTING<span style="color:#f92672">,</span> exception<span style="color:#f92672">={</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">mongodb</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MongoSocketReadException</span><span style="color:#f92672">:</span> Prematurely reached end of stream<span style="color:#f92672">}},</span> <span style="color:#f92672">{</span>address<span style="color:#f92672">=</span>xxx<span style="color:#f92672">:</span><span style="color:#ae81ff">3717</span><span style="color:#f92672">,</span> type<span style="color:#f92672">=</span>UNKNOWN<span style="color:#f92672">,</span> state<span style="color:#f92672">=</span>CONNECTING<span style="color:#f92672">,</span> exception<span style="color:#f92672">={</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">mongodb</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MongoSocketReadException</span><span style="color:#f92672">:</span> Prematurely reached end of stream<span style="color:#f92672">}}];</span> nested exception is com<span style="color:#f92672">.</span><span style="color:#a6e22e">mongodb</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MongoTimeoutException</span><span style="color:#f92672">:</span> Timed out after <span style="color:#ae81ff">30000</span> ms <span style="color:#66d9ef">while</span> waiting <span style="color:#66d9ef">for</span> a server that matches ReadPreferenceServerSelector<span style="color:#f92672">{</span>readPreference<span style="color:#f92672">=</span>primary<span style="color:#f92672">}.</span> Client view of cluster state is <span style="color:#f92672">{</span>type<span style="color:#f92672">=</span>UNKNOWN<span style="color:#f92672">,</span> servers<span style="color:#f92672">=[{</span>address<span style="color:#f92672">=</span>xxx<span style="color:#f92672">:</span><span style="color:#ae81ff">3717</span><span style="color:#f92672">,</span> type<span style="color:#f92672">=</span>UNKNOWN<span style="color:#f92672">,</span> state<span style="color:#f92672">=</span>CONNECTING<span style="color:#f92672">,</span> exception<span style="color:#f92672">={</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">mongodb</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MongoSocketReadException</span><span style="color:#f92672">:</span> Prematurely reached end of stream<span style="color:#f92672">}},</span> <span style="color:#f92672">{</span>address<span style="color:#f92672">=</span>xxx<span style="color:#f92672">:</span><span style="color:#ae81ff">3717</span><span style="color:#f92672">,</span> type<span style="color:#f92672">=</span>UNKNOWN<span style="color:#f92672">,</span> state<span style="color:#f92672">=</span>CONNECTING<span style="color:#f92672">,</span> exception<span style="color:#f92672">={</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">mongodb</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MongoSocketReadException</span><span style="color:#f92672">:</span> Prematurely reached end of stream<span style="color:#f92672">}}]</span>
</span></span></code></pre></div><h3 id="原因分析">原因分析</h3>
<p>具体报错是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>Caused by<span style="color:#f92672">:</span> com<span style="color:#f92672">.</span><span style="color:#a6e22e">mongodb</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MongoTimeoutException</span><span style="color:#f92672">:</span> Timed out after <span style="color:#ae81ff">30000</span> ms <span style="color:#66d9ef">while</span> waiting <span style="color:#66d9ef">for</span> a server that matches ReadPreferenceServerSelector<span style="color:#f92672">{</span>readPreference<span style="color:#f92672">=</span>primary<span style="color:#f92672">}.</span>
</span></span></code></pre></div><p>看到MongoTimeoutException， 就是MongoDB连接不上，因为以前也碰到过MongoDB报错问题，大部分情况是driver版本问题，就以为也是版本问题。但是这次有具体的报错信息， <strong>Prematurely reached end of stream</strong>  就拿着这个去搜索，发现各种回答主要有一下四种：</p>
<ol>
<li>timeout问题。MongoDB默认空闲时间是0，需要设置 timeout maxIdleTimeMS=3000， 来避免客户端不知服务端已关闭连接</li>
<li>Mongo java驱动版本问题。如果版本不匹配，很容易造成连接失败</li>
<li>用户名、密码、地址端口问题</li>
<li>防火墙问题</li>
</ol>
<h3 id="验证过程">验证过程</h3>
<p>由于最初怀疑MongoDB 驱动版本问题，就去MongoDB官网查找驱动对照表，发现版本正常。排除2.</p>
<p>然后最不能就是用户名、密码问题，因为都是照着发布信息复制的，不会填错，不过也确实再次比对，发现不是，排除3.</p>
<p>然后是1， 由于要改代码配置，就最后来试，改完发布后发现问题依然没解决，这时候怀疑是不是整体配置问题？还是改的配置没生效。然后继续查官方文档，找对应的配置方法，检查代码整体配置，发现没有问题。不太情愿排除1.</p>
<p>最后查防火墙。一般来说，系统服务器资源被开出来，就已经代表运维同学完成了各项基本配合、连接问题，之前几次项目都是这样。不过这次就要再检查下，使用netstat 尝试IP和端口， <strong>发现是不通的!</strong> 于是找来运维同学确认问题，发现确实没有加白名单，之后问题就顺利解决了。</p>
<h3 id="结论">结论</h3>
<p>对于问题分析，经验主义确实重要，让你更快确定问题范围，但不要只信经验主义，被先入为主的观念束缚，就很容忽略显而易见的事实。没有不会出错的经验，可以依赖的只有事实和逻辑。</p>
]]></content></item><item><title>Week1033_review</title><link>/posts/arts/week1033_review/</link><pubDate>Fri, 31 Mar 2023 15:45:45 +0000</pubDate><guid>/posts/arts/week1033_review/</guid><description>ARTS - Review 补2019.2.20 MySQL数据类型(2) temporal adj. 时间的 guarantee n. 保证 fractional adj. 很小的 ，分数的 omit v. 删除，省略 assignment n. 分配 equivalent adj. 相等的 explicitly adv. 明确地 11.1.2 Date and Time Type Overview 日期时间类型概览
A summary of the temporal data types follows. For additional information about properties and storage requirements of the temporal types, see Section 11.3, “Date and Time Types”, and Section 11.8, “Data Type Storage Requirements”. For descriptions of functions that operate on temporal values, see Section 12.</description><content type="html"><![CDATA[<h2 id="arts---review-补2019220">ARTS - Review 补2019.2.20</h2>
<h2 id="mysql数据类型2">MySQL数据类型(2)</h2>
<ul>
<li>temporal adj. 时间的</li>
<li>guarantee n. 保证</li>
<li>fractional adj. 很小的 ，分数的</li>
<li>omit  v. 删除，省略</li>
<li>assignment n. 分配</li>
<li>equivalent adj. 相等的</li>
<li>explicitly adv. 明确地</li>
</ul>
<h3 id="1112-date-and-time-type-overview">11.1.2 Date and Time Type Overview</h3>
<p>日期时间类型概览</p>
<p>A summary of the temporal data types follows. For additional information about properties and storage requirements of the temporal types, see <a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-types.html">Section 11.3, “Date and Time Types”</a>, and <a href="https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html">Section 11.8, “Data Type Storage Requirements”</a>. For descriptions of functions that operate on temporal values, see <a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html">Section 12.7, “Date and Time Functions”</a>.</p>
<p>For the <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATE</code></a> and <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATETIME</code></a> range descriptions, “supported” means that although earlier values might work, there is no guarantee.</p>
<p>对于 DATE 和 DATETIME  范围描述 ， &ldquo;支持&quot;意思是尽管值更早可能工作，但是不保证。</p>
<p>MySQL permits fractional seconds for <a href="https://dev.mysql.com/doc/refman/8.0/en/time.html"><code>TIME</code></a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATETIME</code></a>, and <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> values, with up to microseconds (6 digits) precision. To define a column that includes a fractional seconds part, use the syntax <code>*type_name*(*fsp*)</code>, where <em>type_name</em> is <a href="https://dev.mysql.com/doc/refman/8.0/en/time.html"><code>TIME</code></a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATETIME</code></a>, or <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a>, and <em>fsp</em> is the fractional seconds precision. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> t1 (t TIME(<span style="color:#ae81ff">3</span>), dt DATETIME(<span style="color:#ae81ff">6</span>));
</span></span></code></pre></div><p>MySQL允许很小的秒数如 TIME， DATETIME 和TIMESTAMP 值，精确到微秒(6位小数)。 定义一个包含很小秒数的列，使用 type_name  fsp 标志  , type_name 是 TIME 、DATETIME 或 TIMESTAMP， fsp 是精确数。例如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> t1 (t TIME(<span style="color:#ae81ff">3</span>), dt DATETIME(<span style="color:#ae81ff">6</span>));
</span></span></code></pre></div><p>The <em>fsp</em> value, if given, must be in the range 0 to 6. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. (This differs from the standard SQL default of 6, for compatibility with previous MySQL versions.)</p>
<p>fsp值如果定义的话，必须是0-6.一个0值表示没有小数位。任何TIMESTAMP 或DATETIME类型在表中的列可以自动初始化和更新属性。</p>
<p>Any <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> or <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATETIME</code></a> column in a table can have automatic initialization and updating properties.</p>
<ul>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATE</code></a></p>
<p>A date. The supported range is <code>'1000-01-01'</code> to <code>'9999-12-31'</code>. MySQL displays <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATE</code></a> values in <code>'YYYY-MM-DD'</code> format, but permits assignment of values to <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATE</code></a> columns using either strings or numbers.</p>
<p>DATE 。 一个日期。支持范围是 1000-01-01 到9999-12-31. mysql显示 DATE 值是yyyy-MM-dd格式，但是允许使用字符或数字分配DATE列值。</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATETIME[(*fsp*)\]</code></a></p>
<p>A date and time combination. The supported range is <code>'1000-01-01 00:00:00.000000'</code> to <code>'9999-12-31 23:59:59.999999'</code>. MySQL displays <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATETIME</code></a> values in <code>'*YYYY-MM-DD hh:mm:ss*[.*fraction*]'</code> format, but permits assignment of values to <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATETIME</code></a> columns using either strings or numbers.</p>
<p>An optional <em>fsp</em> value in the range from 0 to 6 may be given to specify fractional seconds precision. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0.</p>
<p>Automatic initialization and updating to the current date and time for <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>DATETIME</code></a> columns can be specified using <code>DEFAULT</code> and <code>ON UPDATE</code>column definition clauses, as described in <a href="https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html">Section 11.3.4, “Automatic Initialization and Updating for TIMESTAMP and DATETIME”</a>.</p>
<p>DATETIME 是DATE 和TIME 合并的。支持范围是1000-01-01 00:00:00.000000 到  9999-12-31 23:59:59.999999。MySQL显示DATETIME 值使用  YYYY-MM-DD  hh:mm:ss*[.fraction*] 格式 ，但是允许传入字符和数字。</p>
<p>一个可选的 fsp 值范围是0-6可以精确到小秒数。0值表示灭有小数位。如果缺省，默认是0.</p>
<p>自动初始化和更新当前日期和时间当前列可以使用DEFAULT 和ON UPDATE 列定义语句。</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP[(*fsp*)\]</code></a></p>
<p>A timestamp. The range is <code>'1970-01-01 00:00:01.000000'</code> UTC to <code>'2038-01-19 03:14:07.999999'</code> UTC. <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> values are stored as the number of seconds since the epoch (<code>'1970-01-01 00:00:00'</code> UTC). A <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> cannot represent the value <code>'1970-01-01 00:00:00'</code>because that is equivalent to 0 seconds from the epoch and the value 0 is reserved for representing <code>'0000-00-00 00:00:00'</code>, the “zero”<a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> value.</p>
<p>An optional <em>fsp</em> value in the range from 0 to 6 may be given to specify fractional seconds precision. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0.</p>
<p>The way the server handles <code>TIMESTAMP</code> definitions depends on the value of the <a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp"><code>explicit_defaults_for_timestamp</code></a> system variable (see<a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html">Section 5.1.8, “Server System Variables”</a>).</p>
<p>If <a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp"><code>explicit_defaults_for_timestamp</code></a> is enabled, there is no automatic assignment of the <code>DEFAULT CURRENT_TIMESTAMP</code> or <code>ON UPDATE CURRENT_TIMESTAMP</code> attributes to any <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> column. They must be included explicitly in the column definition. Also, any <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> not explicitly declared as <code>NOT NULL</code> permits <code>NULL</code> values.</p>
<p>If <a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp"><code>explicit_defaults_for_timestamp</code></a> is disabled, the server handles <code>TIMESTAMP</code> as follows:</p>
<p>Unless specified otherwise, the first <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> column in a table is defined to be automatically set to the date and time of the most recent modification if not explicitly assigned a value. This makes <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> useful for recording the timestamp of an <a href="https://dev.mysql.com/doc/refman/8.0/en/insert.html"><code>INSERT</code></a> or <a href="https://dev.mysql.com/doc/refman/8.0/en/update.html"><code>UPDATE</code></a> operation. You can also set any <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> column to the current date and time by assigning it a <code>NULL</code> value, unless it has been defined with the <code>NULL</code>attribute to permit <code>NULL</code> values.</p>
<p>Automatic initialization and updating to the current date and time can be specified using <code>DEFAULT CURRENT_TIMESTAMP</code> and <code>ON UPDATE CURRENT_TIMESTAMP</code> column definition clauses. By default, the first <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> column has these properties, as previously noted. However, any <a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html"><code>TIMESTAMP</code></a> column in a table can be defined to have these properties.</p>
<p>时间戳。 时间戳范围是1970-01-01 00:00:01.000000 UTC  到2038-01-19 03:14:07.99999 UTC. TIMESTAMP的值存储为从1970-01-01 00:00:00 至今的毫秒数。TIMESTAMP不能代表1970-01-01 因为那个0指的是0时代， 值0指的是0000-00-00 00:00:00</p>
<p>可选的fsp值从0-6提供小数位数。0代表无小数位，默认0.</p>
<p>服务器处理TIMESTAMP的方式是通过定义  explicit_defaults_for_timestamp 系统变量来设置的。如果该变量可用，不会自动处理 DEFAULT CURRENT_TIMESTAMP 和 UPDATE CRUUENT_TIMESTAMP.他们必须明确包含在定义语句里。所以任何没有明确定义NOT NULL 的列可以允许NULL 值。</p>
<p>如果该属性禁用，服务器处理时间戳如下：</p>
<p>除非明确定义，第一个 TIMESTAMP列定义为自动设置为最近的日期时间值 如果不精确要求一个值的话。这使得在INSERT 和 UPDATE 很有用。你也可以设置任意列为TIMESTAMP 通过分配他NULL来记录当前时间和日期，除非已经定义为NULL否则不会允许NULL值。</p>
<p>自动初始化和更新为当前时间可以使用  DEFAULT CURRENT_TIMESTAMP 和 ON UPDATE CURRENT_TIMESTAMP  定义语句。默认第一个时间戳列有这些属性。然而，任何表中的TIMESTAMP列都可以定义这俩属性。</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/time.html"><code>TIME[(*fsp*)\]</code></a></p>
<p>A time. The range is <code>'-838:59:59.000000'</code> to <code>'838:59:59.000000'</code>. MySQL displays <a href="https://dev.mysql.com/doc/refman/8.0/en/time.html"><code>TIME</code></a> values in <code>'*hh:mm:ss*[.*fraction*]'</code> format, but permits assignment of values to <a href="https://dev.mysql.com/doc/refman/8.0/en/time.html"><code>TIME</code></a> columns using either strings or numbers.</p>
<p>An optional <em>fsp</em> value in the range from 0 to 6 may be given to specify fractional seconds precision. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0.</p>
<p>一个时间类型。MySQL显示TIME值是  hh:mm:ss 格式，但是允许使用数字和字符传入。</p>
<p>一个可选的fsp值代表精确位数，默认0.</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/year.html"><code>YEAR[(4)\]</code></a></p>
<p>A year in four-digit format. MySQL displays <a href="https://dev.mysql.com/doc/refman/8.0/en/year.html"><code>YEAR</code></a> values in <code>YYYY</code> format, but permits assignment of values to <a href="https://dev.mysql.com/doc/refman/8.0/en/year.html"><code>YEAR</code></a> columns using either strings or numbers. Values display as <code>1901</code> to <code>2155</code>, and <code>0000</code>.</p>
<p>For additional information about <a href="https://dev.mysql.com/doc/refman/8.0/en/year.html"><code>YEAR</code></a> display format and interpretation of input values, see <a href="https://dev.mysql.com/doc/refman/8.0/en/year.html">Section 11.3.3, “The YEAR Type”</a>.</p>
<p>年是4位格式。MySQL显示YEAR 是 YYYY格式，但是允许字符和数字。</p>
<p>Note</p>
<p>MySQL 8.0 does not support the <a href="https://dev.mysql.com/doc/refman/8.0/en/year.html"><code>YEAR(2)</code></a> data type permitted in older versions of MySQL. For instructions on converting to <a href="https://dev.mysql.com/doc/refman/8.0/en/year.html"><code>YEAR(4)</code></a>, see <a href="https://dev.mysql.com/doc/refman/5.7/en/migrating-to-year4.html">YEAR(2) Limitations and Migrating to YEAR(4)</a> in <a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL 5.7 Reference Manual</a>.</p>
</li>
</ul>
<p>The <a href="https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_sum"><code>SUM()</code></a> and <a href="https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_avg"><code>AVG()</code></a> aggregate functions do not work with temporal values. (They convert the values to numbers, losing everything after the first nonnumeric character.) To work around this problem, convert to numeric units, perform the aggregate operation, and convert back to a temporal value. Examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> SEC_TO_TIME(<span style="color:#66d9ef">SUM</span>(TIME_TO_SEC(time_col))) <span style="color:#66d9ef">FROM</span> tbl_name;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> FROM_DAYS(<span style="color:#66d9ef">SUM</span>(TO_DAYS(date_col))) <span style="color:#66d9ef">FROM</span> tbl_name;
</span></span></code></pre></div><p>注意</p>
<p>MySQL8.0 不支持YEAR(2) 数据类型。</p>
<p>SUM() 和 AVG() 聚合函数对时间类型不起作用。(他们把值转换为受罪，失去了第一恶非数值字符的一切)。 为了解决这个，可以转为数字单位，进行聚合操作，再转回时间类型。例如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> SEC_TO_TIME(<span style="color:#66d9ef">SUM</span>(TIME_TO_SEC(time_col))) <span style="color:#66d9ef">FROM</span> tbl_name;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> FORM_DAYS(<span style="color:#66d9ef">SUM</span>(TO_DAYS(date_col)) <span style="color:#66d9ef">FROM</span> tbl_name;
</span></span></code></pre></div>]]></content></item><item><title>Week1033_share</title><link>/posts/arts/week1033_share/</link><pubDate>Fri, 31 Mar 2023 15:45:45 +0000</pubDate><guid>/posts/arts/week1033_share/</guid><description>ARTS - Share 补2019.2.20 关于APP后端的登陆状态 问题 最近做APP的后端，考虑如何做登陆的状态，要实现的目标是区分用户，并且不用频繁重新登登录，不暴露系统用户的实际ID。
思路 有这样一个思路，考虑用户表增加一个token列，当token存在，就说明已经登陆，不存在说明未登录。token的控制可以分为客户主动登出，或者超时退出(后端定时清理)。这样就不用暴露userId到外部，使用token传输放在header里，每次只要验证有没有这个参数，参数是否存在库里(加缓存)，就能判断登陆状态。
生成规则 不使用UUID，因为它无序，我们需要能够按照时间有序生成，这里参考了下twitter开源的ID生成策略项目snowflake，支持分布式唯一ID。
结构 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000
第一位为未使用，接下来的41位为毫秒级时间(41位的长度可以使用69年)，然后是5位datacenterId和5位workerId(10位的长度最多支持部署1024个节点） ，最后12位是毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号）
一共加起来刚好64位，为一个Long型。(转换成字符串后长度最多19)
snowflake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和workerId作区分），并且效率较高。经测试snowflake每秒能够产生26万个ID。
源码 public class SnowFlakeIdWorker { /** * 开始时间截(2015-01-01) */ private final long twepoch = 1420041600000L; /** * 机器ID所占位数 */ private final long workerIdBits = 5L; /** * 数据标识id所占位数 */ private final long datacenterIdBits = 5L; /** * 支持的最大机器ID，结果是31， */ private final long maxWorkerId = -1L ^ (-1L &amp;lt;&amp;lt; workerIdBits); /** * 支持的最大数据标识id，结果是31 */ private final long maxDatacenterId = -1L ^ (-1L &amp;lt;&amp;lt; datacenterIdBits); /** * 序列在id中占的位数 */ private final long sequenceBits = 12L; /** * 机器ID向左移12位 */ private final long workerIdShift = sequenceBits; /** * 数据标识id向左移17位(12+5) */ private final long datacenterIdShift = sequenceBits + workerIdBits; /** * 时间截向左移22位(5+5+12) */ private final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits; /** * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */ private final long sequenceMask = -1L ^ (-1L &amp;lt;&amp;lt; sequenceBits); /** * 工作机器ID(0~31) */ private long workerId; /** * 数据中心ID(0~31) */ private long datacenterId; /** * 毫秒内序列(0~4095) */ private long sequence = 0L; /** * 上次生成ID的时间截 */ private long lastTimestamp = -1L; //==============================Constructors===================================== public SnowFlakeIdWorker(long workerId, long datacenterId) { if (workerId &amp;gt; maxWorkerId || workerId &amp;lt; 0) { throw new IllegalArgumentException(String.</description><content type="html"><![CDATA[<h2 id="arts---share-补2019220">ARTS - Share 补2019.2.20</h2>
<h2 id="关于app后端的登陆状态">关于APP后端的登陆状态</h2>
<h4 id="问题">问题</h4>
<p>最近做APP的后端，考虑如何做登陆的状态，要实现的目标是区分用户，并且不用频繁重新登登录，不暴露系统用户的实际ID。</p>
<h4 id="思路">思路</h4>
<p>有这样一个思路，考虑用户表增加一个token列，当token存在，就说明已经登陆，不存在说明未登录。token的控制可以分为客户主动登出，或者超时退出(后端定时清理)。这样就不用暴露userId到外部，使用token传输放在header里，每次只要验证有没有这个参数，参数是否存在库里(加缓存)，就能判断登陆状态。</p>
<h4 id="生成规则">生成规则</h4>
<p>不使用UUID，因为它无序，我们需要能够按照时间有序生成，这里参考了下twitter开源的ID生成策略项目snowflake，支持分布式唯一ID。</p>
<h4 id="结构">结构</h4>
<p>0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000</p>
<p>第一位为未使用，接下来的41位为毫秒级时间(41位的长度可以使用69年)，然后是5位datacenterId和5位workerId(10位的长度最多支持部署1024个节点） ，最后12位是毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号）</p>
<p>一共加起来刚好64位，为一个Long型。(转换成字符串后长度最多19)</p>
<p>snowflake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和workerId作区分），并且效率较高。经测试snowflake每秒能够产生26万个ID。</p>
<h4 id="源码">源码</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SnowFlakeIdWorker</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 开始时间截(2015-01-01)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> twepoch <span style="color:#f92672">=</span> <span style="color:#ae81ff">1420041600000L</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 机器ID所占位数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> workerIdBits <span style="color:#f92672">=</span> <span style="color:#ae81ff">5L</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 数据标识id所占位数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> datacenterIdBits <span style="color:#f92672">=</span> <span style="color:#ae81ff">5L</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 支持的最大机器ID，结果是31，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> maxWorkerId <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1L</span> <span style="color:#f92672">^</span> <span style="color:#f92672">(-</span><span style="color:#ae81ff">1L</span> <span style="color:#f92672">&lt;&lt;</span> workerIdBits<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 支持的最大数据标识id，结果是31
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> maxDatacenterId <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1L</span> <span style="color:#f92672">^</span> <span style="color:#f92672">(-</span><span style="color:#ae81ff">1L</span> <span style="color:#f92672">&lt;&lt;</span> datacenterIdBits<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 序列在id中占的位数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> sequenceBits <span style="color:#f92672">=</span> <span style="color:#ae81ff">12L</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 机器ID向左移12位
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> workerIdShift <span style="color:#f92672">=</span> sequenceBits<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 数据标识id向左移17位(12+5)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> datacenterIdShift <span style="color:#f92672">=</span> sequenceBits <span style="color:#f92672">+</span> workerIdBits<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 时间截向左移22位(5+5+12)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> timestampLeftShift <span style="color:#f92672">=</span> sequenceBits <span style="color:#f92672">+</span> workerIdBits <span style="color:#f92672">+</span> datacenterIdBits<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> sequenceMask <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1L</span> <span style="color:#f92672">^</span> <span style="color:#f92672">(-</span><span style="color:#ae81ff">1L</span> <span style="color:#f92672">&lt;&lt;</span> sequenceBits<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 工作机器ID(0~31)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">long</span> workerId<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 数据中心ID(0~31)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">long</span> datacenterId<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 毫秒内序列(0~4095)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">long</span> sequence <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>L<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 上次生成ID的时间截
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">long</span> lastTimestamp <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1L</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//==============================Constructors=====================================
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">SnowFlakeIdWorker</span><span style="color:#f92672">(</span><span style="color:#66d9ef">long</span> workerId<span style="color:#f92672">,</span> <span style="color:#66d9ef">long</span> datacenterId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>workerId <span style="color:#f92672">&gt;</span> maxWorkerId <span style="color:#f92672">||</span> workerId <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;worker Id can&#39;t be grater than %d or less than 0&#34;</span><span style="color:#f92672">,</span> maxWorkerId<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>datacenterId <span style="color:#f92672">&gt;</span> maxDatacenterId <span style="color:#f92672">||</span> datacenterId <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;datacenter Id can&#39;t be greater than %d or less than 0&#34;</span><span style="color:#f92672">,</span> maxDatacenterId<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">workerId</span> <span style="color:#f92672">=</span> workerId<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">datacenterId</span> <span style="color:#f92672">=</span> datacenterId<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//==============================Methods==============================
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 获得下个ID
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">synchronized</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">nextId</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">long</span> timestamp <span style="color:#f92672">=</span> timeGen<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 如果当前时间小于上次ID生成的时间戳，说明系统时钟回退过，这时候抛出异常
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>timestamp <span style="color:#f92672">&lt;</span> lastTimestamp<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RuntimeException<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>                    String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Clock moved backwards.  Refusing to generate id for %d milliseconds&#34;</span><span style="color:#f92672">,</span> lastTimestamp <span style="color:#f92672">-</span> timestamp<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 如果同一时间生成的，则进行毫秒内序列
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>lastTimestamp <span style="color:#f92672">==</span> timestamp<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            sequence <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>sequence <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;</span> sequenceMask<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>sequence <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 阻塞到下一毫秒，获得新的时间戳
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                timestamp <span style="color:#f92672">=</span> tilNextMillis<span style="color:#f92672">(</span>lastTimestamp<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 时间戳改变，毫秒内序列重置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            sequence <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>L<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 上次生成ID的时间戳
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        lastTimestamp <span style="color:#f92672">=</span> timestamp<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//移位并通过或运算拼到一起组成64位的ID
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> <span style="color:#f92672">((</span>timestamp <span style="color:#f92672">-</span> twepoch<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;&lt;</span> timestampLeftShift<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">|</span> <span style="color:#f92672">(</span>datacenterId <span style="color:#f92672">&lt;&lt;</span> datacenterIdShift<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">|</span> <span style="color:#f92672">(</span>workerId <span style="color:#f92672">&lt;&lt;</span> workerIdShift<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">|</span> sequence<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 阻塞到下一个毫秒，直到获得新的时间戳
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param lastTimestamp
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">tilNextMillis</span><span style="color:#f92672">(</span><span style="color:#66d9ef">long</span> lastTimestamp<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">long</span> timestamp <span style="color:#f92672">=</span> timeGen<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>timestamp <span style="color:#f92672">&lt;=</span> lastTimestamp<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            timestamp <span style="color:#f92672">=</span> timeGen<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> timestamp<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 获取当前时间，毫秒数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">timeGen</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">currentTimeMillis</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 测试
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        SnowFlakeIdWorker worker <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SnowFlakeIdWorker<span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1000</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">long</span> id <span style="color:#f92672">=</span> worker<span style="color:#f92672">.</span><span style="color:#a6e22e">nextId</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>Long<span style="color:#f92672">.</span><span style="color:#a6e22e">toBinaryString</span><span style="color:#f92672">(</span>id<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>id<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><hr>
<p>参考</p>
<p><a href="https://www.cnblogs.com/relucent/p/4955340.html">Twitter的分布式自增ID算法snowflake(Java版)</a></p>
]]></content></item><item><title>Week1033_tip</title><link>/posts/arts/week1033_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:45 +0000</pubDate><guid>/posts/arts/week1033_tip/</guid><description>ARTS - Tip 补2019.2.20 MySQL 的GTID
背景 在数据库备份与恢复中碰到了不能导入的情况，报错是GTID相关，查了资料，发现是MySQL在5.6时引入的。
概念 GTID (Global Transaction Identifier) 即全局I事务ID，GTID实际是由UUID 和 TID 组成的。UUID是MySQL实例的唯一标识。TID代表了该实例上已经提交的事务数量，并且随着事务提交单调递增，所以GTID能保证每个MySQL实例事务的执行(不会重复执行同一个事务，并且会补全没有执行的事务)。具体的看官方文档：17.1.3 Replication with Global Transaction Identifiers
GTID 意义 引入GTID的意义是什么?
因为清楚了GTID的格式，所以通过UUID可以知道这个事务是在哪个实例上提交的。 通过GTID可以方便进行复制结构上的故障转移，新主设置。 假设一主两从服务器， Server1 主， Server2 从，Server3 从，Server1崩溃，我们要提升Server2、Server3其中之一为主，提升的前提是跟上了主，我们发下Server2跟上了主，Server3没有跟上，这时候就提升Server2为主，然后让Server3跟到和Server2一样的位置，跟上的操作其实就是把Server2已经执行或，但是Server2没执行过的事务再走一遍，这个过程就需要定位事务了，在GTID出现之前是比较难定位的，出现了实例 UUID + 事务数量TID组成的GTID之后，事情就容易了，很容易补全剩下的事务。
总结 GTID， 主从结构只有一台Master和一台Slave，对于GTID来说就没有优势了，对于2台以上的结构优势明显，可以在数据不丢失的情况下切换新主。
使用GTID要注意，构建主从复制之前，在一台将成为主的实例上进行一些操作(如数据清理等)，通过GTID复制，这些在主从成立之前的操作也会复制到从服务器上，因为复制失败。
即：通过GTID复制都是从最先开始的事务日志开始，即使这些操作在复制之前执行。
比如是server1上执行drop\delete清理工作，接着在server2上执行change操作，会使得server2进行server1的清理工作。
文章引用：
[MySQL5.6 新特性之GTID]</description><content type="html"><![CDATA[<h2 id="arts---tip-补2019220">ARTS - Tip 补2019.2.20</h2>
<p>MySQL 的GTID</p>
<h4 id="背景">背景</h4>
<p>在数据库备份与恢复中碰到了不能导入的情况，报错是GTID相关，查了资料，发现是MySQL在5.6时引入的。</p>
<h4 id="概念">概念</h4>
<p>GTID (Global Transaction Identifier) 即全局I事务ID，GTID实际是由UUID 和 TID 组成的。UUID是MySQL实例的唯一标识。TID代表了该实例上已经提交的事务数量，并且随着事务提交单调递增，所以GTID能保证每个MySQL实例事务的执行(不会重复执行同一个事务，并且会补全没有执行的事务)。具体的看官方文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/replication-gtids.html">17.1.3 Replication with Global Transaction Identifiers</a></p>
<h4 id="gtid-意义">GTID 意义</h4>
<p>引入GTID的意义是什么?</p>
<ol>
<li>因为清楚了GTID的格式，所以通过UUID可以知道这个事务是在哪个实例上提交的。</li>
<li>通过GTID可以方便进行复制结构上的故障转移，新主设置。</li>
</ol>
<p>假设一主两从服务器， Server1 主， Server2 从，Server3 从，Server1崩溃，我们要提升Server2、Server3其中之一为主，提升的前提是跟上了主，我们发下Server2跟上了主，Server3没有跟上，这时候就提升Server2为主，然后让Server3跟到和Server2一样的位置，跟上的操作其实就是把Server2已经执行或，但是Server2没执行过的事务再走一遍，这个过程就需要定位事务了，在GTID出现之前是比较难定位的，出现了实例 UUID + 事务数量TID组成的GTID之后，事情就容易了，很容易补全剩下的事务。</p>
<h4 id="总结">总结</h4>
<p>GTID， 主从结构只有一台Master和一台Slave，对于GTID来说就没有优势了，对于2台以上的结构优势明显，可以在数据不丢失的情况下切换新主。</p>
<p>使用GTID要注意，构建主从复制之前，在一台将成为主的实例上进行一些操作(如数据清理等)，通过GTID复制，这些在主从成立之前的操作也会复制到从服务器上，因为复制失败。</p>
<p>即：通过GTID复制都是从最先开始的事务日志开始，即使这些操作在复制之前执行。</p>
<p>比如是server1上执行drop\delete清理工作，接着在server2上执行change操作，会使得server2进行server1的清理工作。</p>
<hr>
<p>文章引用：</p>
<p>[<a href="https://www.cnblogs.com/zhoujinyi/p/4717951.html">MySQL5.6 新特性之GTID</a>]</p>
]]></content></item><item><title>Week1034_algorithm</title><link>/posts/arts/week1034_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:45 +0000</pubDate><guid>/posts/arts/week1034_algorithm/</guid><description>ARTS - Algorithm 补2019.2.27 86. 分隔列表 题目 给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。
你应当保留两个分区中每个节点的初始相对位置。
示例:
输入: head = 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;2, x = 3 输出: 1-&amp;gt;2-&amp;gt;2-&amp;gt;4-&amp;gt;3-&amp;gt;5 分析 这里其实就是把链表分隔成两部分，左边的都小于 x, 右边的都大于或等于 x, 为了保持原来顺序，按照顺序遍历就行了，把小的拼到一个链表， 把大的拼到另一个链表，然后合并链表就行了。
代码如下 public class PartitionTest { public static ListNode partition(ListNode head, int x) { ListNode node = head; ListNode low = new ListNode(0); ListNode high = new ListNode(0); ListNode l = low; ListNode h = high; while (node != null) { if (node.</description><content type="html"><![CDATA[<h2 id="arts----algorithm-补2019227">ARTS  - Algorithm 补2019.2.27</h2>
<h2 id="86-分隔列表httpsleetcode-cncomproblemspartition-list"><a href="https://leetcode-cn.com/problems/partition-list/">86. 分隔列表</a></h2>
<h4 id="题目">题目</h4>
<p>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。</p>
<p>你应当保留两个分区中每个节点的初始相对位置。</p>
<p>示例:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">输入</span><span style="color:#f92672">:</span> head <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">4</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">3</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">输出</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">4</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">3</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">5</span>
</span></span></code></pre></div><h4 id="分析">分析</h4>
<p>这里其实就是把链表分隔成两部分，左边的都小于 x, 右边的都大于或等于 x, 为了保持原来顺序，按照顺序遍历就行了，把小的拼到一个链表， 把大的拼到另一个链表，然后合并链表就行了。</p>
<h4 id="代码如下">代码如下</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PartitionTest</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ListNode <span style="color:#a6e22e">partition</span><span style="color:#f92672">(</span>ListNode head<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ListNode node <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ListNode low <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode high <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode l <span style="color:#f92672">=</span> low<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        ListNode h <span style="color:#f92672">=</span> high<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>node <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>node<span style="color:#f92672">.</span><span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;</span> x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 去左边
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                low<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                low <span style="color:#f92672">=</span> low<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                high<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                high <span style="color:#f92672">=</span> high<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 大的链表末尾为空，小的末尾是大的起点
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        high<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        low<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> h<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> l<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        ListNode n1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">4</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n3 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">3</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n4 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n5 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">5</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n6 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        n1<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n2<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        n2<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n3<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        n3<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n4<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        n4<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n5<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        n5<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n6<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        print<span style="color:#f92672">(</span>n1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        print<span style="color:#f92672">(</span>partition<span style="color:#f92672">(</span>n1<span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>ListNode node<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>node <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>node<span style="color:#f92672">.</span><span style="color:#a6e22e">val</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;-&gt;&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1034_review</title><link>/posts/arts/week1034_review/</link><pubDate>Fri, 31 Mar 2023 15:45:45 +0000</pubDate><guid>/posts/arts/week1034_review/</guid><description>ARTS - Review 补2019.2.27 Developers — here is the best WHY to quit your 9–5 job 开发者 — 这是你退出朝九晚五工作的最佳选择
prowess n. 非凡的技能， fret v. 苦恼 meagre adj. 微薄的 compensation n. 补偿 supervise v. 监督，管理 console v. 安慰 come across 偶然发现 unilaterally 单方面的 applauds 鼓掌 metal n. 金属 carpentry n. 木工 manufacturing n. 制造业 colonies n. 殖民地 boycotted v. 拒绝购买，抵制boycott过去式 harmoniums 和声 despite prep. 尽管，即使 clutter v.杂乱，. gargantuan adj. 巨大的 Archaic adj.</description><content type="html"><![CDATA[<h2 id="arts---review--补2019227">ARTS - Review  补2019.2.27</h2>
<h2 id="developershere-is-the-best-why-to-quit-your-95-jobhttpsmediumcomswlhdevelopers-here-is-the-most-convincing-reason-for-quitting-your-9-5-job-111801b7bd8"><a href="https://medium.com/swlh/developers-here-is-the-most-convincing-reason-for-quitting-your-9-5-job-111801b7bd8">Developers — here is the best WHY to quit your 9–5 job</a></h2>
<p>开发者 — 这是你退出朝九晚五工作的最佳选择</p>
<ul>
<li>prowess n. 非凡的技能，</li>
<li>fret v. 苦恼</li>
<li>meagre adj. 微薄的</li>
<li>compensation n. 补偿</li>
<li>supervise v. 监督，管理</li>
<li>console v. 安慰</li>
<li>come across 偶然发现</li>
<li>unilaterally 单方面的</li>
<li>applauds 鼓掌</li>
<li>metal n. 金属</li>
<li>carpentry n. 木工</li>
<li>manufacturing n. 制造业</li>
<li>colonies n. 殖民地</li>
<li>boycotted v. 拒绝购买，抵制boycott过去式</li>
<li>harmoniums 和声</li>
<li>despite prep. 尽管，即使</li>
<li>clutter v.杂乱，.</li>
<li>gargantuan adj. 巨大的</li>
<li>Archaic adj. 过时的</li>
<li>daunting adj. 望而生畏的，令人气馁的</li>
<li>Democratization n. 民主化</li>
<li>unpredictable adj. 不可预知的</li>
<li>stark adj. 无修饰的</li>
<li>notwithstanding adv. 虽然，尽管</li>
<li>predict adj. 预测</li>
</ul>
<blockquote>
<p>A senior dev whom I respect for his technical prowess called me this morning. He called to fret over the meagre 12% raise he got, against a junior dev working under him and got 40% raise — his compensation now totaling 85% of the senior dev supervising 10 other junior devs like him.</p>
<p>I didn’t know how to console him. I gave him the best I could — by listening to him for 30 long minutes.</p>
<p>Then I realized it wasn’t the best thing I could do for him.</p>
</blockquote>
<p>一个我对他技术非常敬佩的高级开发者早上给我打了电话。他说对于他的收入12%的增长很苦恼，而他的手下一个初级开发者增长了40% — 他的报酬是和85%的像他一样管理着10个初级开发的高级开发者一样。</p>
<p>我不知道如何安慰他。我给了他我认为能做的最好的 — 倾听他说了30分钟。</p>
<p>然后我意识到这不是我能为他做的最好的事。</p>
<blockquote>
<p>This morning I came across a <a href="https://timesofindia.indiatimes.com/india/sound-of-music-how-a-temple-town-in-gujarat-gave-mehndi-hassan-ghulam-ali-their-harmonic-ragas/articleshow/69532552.cms">news item about Palitana’s Harmonium reeds</a>that Bollywood movie artists unilaterally applauds. Run by mostly uneducated metal and carpentry workers — this Indian town took up manufacturing them to serve British dynasty in 1902.</p>
</blockquote>
<blockquote>
<p>Their fortunes turned after world war II, when most British colonies boycotted goods manufactured in Germany, harmoniums included. <a href="https://www.ratilaljivanlalmistri.com/">The 114 year old firm</a> that professes in this art is still leading Google search result for phrase <strong>“Harmonium reeds”</strong> globally. It is supplying worldwide through amazon too.</p>
</blockquote>
<blockquote>
<p>Key to their success is not automation, but deep understanding of the craft, improved manually over generations.</p>
</blockquote>
<blockquote>
<p><strong>That, combined with understanding for industry needs.</strong></p>
</blockquote>
<blockquote>
<p>Today, despite automating most of the manufacturing, Palitana’s reeds are still tuned manually to produce most melodious tunes - a USP that couldn’t be taken away by 3D printers at least until next 50 years.</p>
</blockquote>
<blockquote>
<p>It’s a lesson — not in improvising one’s craft, but in figuring out what must be optimized, what must be outsourced to machines, and what must be refined through one’s own passions.</p>
</blockquote>
<p>这周我偶然看到一个关于 Palitana&rsquo;s Harmonium reeds的新闻，宝莱坞的艺术家单方面为之鼓掌。1902年，这座印度小镇开始制造它们，为英国王朝服务。</p>
<p>他们的财富在第二次世界大战后就转变了，当大多数不列颠殖民地在德国大量生产商品， 也包括和声。114年的电影艺术底蕴依然引领这&quot;和声风琴&quot;谷歌搜索结果.他也通过亚me讯供应全世界。</p>
<p>他们的成功不是自动化的，而是深入理解了工艺，经过几代人的改进。</p>
<p>这样，合并并理解了工业需求。</p>
<p>今天，尽管大部分制造业自动化了，但是需要指出哪些需要被优化，哪些必须外包给机器，哪些必须通过人的热情来提炼。</p>
<blockquote>
<p>Senior Developer is dying (a definite death)</p>
</blockquote>
<blockquote>
<p>In programming world, too, craft is being lost gradually. A senior developer is losing his / her edge to:</p>
</blockquote>
<ul>
<li>Online IDEs (JSConsole and its ilk) — super easy to run your code on the fly. Bye bye clutter of buttons and panes that senior dev went through to <em>make it work.</em></li>
<li>Open source repos and forums, without relying upon gargantuan API documentation that senior dev went through to <em>put it together</em></li>
<li>Training videos, without relying upon archaic publication books that senior devs could only peek into to <em>get the hold of it —</em> at the expense of his family time during weekends.</li>
</ul>
<blockquote>
<p>True, senior devs always create building blocks that can be used and re-used by junior developers. But the balance in rewards highly tilts in favor of the later.</p>
</blockquote>
<p>高级开发正在死亡(一种明确的死亡)</p>
<p>在编程世界，工艺也逐渐丢失。一个高级开发正在丢失他的技术边缘给：</p>
<ul>
<li>
<p>在线IDEs, (JSConsole和它同类) — 非常方便在线运行你的代码。和高级开发经历的杂乱的按钮和面板才能工作的情况说拜拜。</p>
</li>
<li>
<p>不需要高级开发过去依赖巨大的API文档，开源库和论坛把他们合并到了一起</p>
</li>
<li>
<p>练习视频，不需要依赖过时的工具书， 像高级开发花费宝贵的陪家人时间</p>
<p>诚然，高级开发经常创造被低级开发经常复用到的模块，但是回报的平衡高度依赖后者。</p>
<blockquote>
<p>We are already living in the tech world where experience adds value to the product life cycle, but not to the product itself.</p>
</blockquote>
<blockquote>
<p>An experienced developer will know where to find resources to <em>make it work</em> — but is less likely to go further than that. Not because of lack of passion, but because of lack of reward and motivation. And it is this later truth that is more daunting, because, let me just say it:</p>
</blockquote>
<blockquote>
<p>To a company, a senior developer is a box that keeps its marbles together.</p>
</blockquote>
<blockquote>
<p>Technical reasons behind this are:</p>
</blockquote>
<ul>
<li>Democratization by internet</li>
<li>Exponential volume realized from modularization — ability of software to be built on top of each other.</li>
</ul>
<blockquote>
<p>Business reasons are more visible to everyone. A startup employer is more likely to hire a junior dev over senior one who will demand 1.5x-2x compensation. A senior dev is justified only over a team of junior devs — that too on a project scope basis, and only with critical mass of the team.</p>
</blockquote>
<p>我们早已生活在科技给产品生命的时代，但是不是智能时代。</p>
<p>一个有经验的开发者会知道去哪里找资源解决问题 — 但是不太可能走的更远。因为缺乏耐心，缺乏激励和动力。正是后来的真相更让人望而生畏，因为只会让我说：</p>
<p>对于一个公司，一个高级开发者是一个会多种技能的工具箱。</p>
<p>科技理由随后是：</p>
<p>兴趣民主化</p>
<p>通过模块化实现的指数量-软件相互之间的能力</p>
<p>商业原因对每个人来说可加可视化。初创企业更可能雇佣初级开发而不是高级开发，后者将要求1.5-2倍报酬。一个高级开发只在组里全是初级开发才有效 — 仅仅是哪种项目组里，起着关键作用那种。</p>
<blockquote>
<p>To keep justifying one’s place as a senior dev, one has to</p>
</blockquote>
<ul>
<li>Keep optimizing processes — batch files to dockerization</li>
<li>Keep digging up languages that could optimize something that doesn’t necessarily need optimizing</li>
<li>Keep inventing mundane tasks within existing products that customers don’t always use</li>
<li>Polishing soft-skills to remain in good books of Who’s who, something that was originally expected of management &amp; sales people</li>
</ul>
<blockquote>
<p>Financial reward of becoming a senior developer in particular technology is highly unpredictable. <a href="https://codinginfinite.com/stack-overflow-developers-survey-2019-vs-2018-technology-comparison/">Stackoverflow developer surveys of 2018 and 2019</a>revealed stark contrast in highest paid technologies. Surveys notwithstanding, one can always predict which tech to go into, but one can never predict which tech to become senior into. Obsolescence of technology is always looming.</p>
</blockquote>
<blockquote>
<p>Of course, popular advices says you can keep learning new languages by spending sleepless nights and precious holidays, but that does not make you senior in each of them.</p>
</blockquote>
<blockquote>
<p>A guy with 2 years experience in Kotlin can outrank your interview chances even if you knew Java for 8 years, and learned Kotlin in 6 months, if HR isn’t smart enough. Even if you get an interview, salary becomes your Achilles heel.</p>
</blockquote>
<blockquote>
<p>Developer markets like China and India are huge factories of junior developers who are not holding software degrees — a fact lately replicated by other markets through freecodecamp, codeacademy and hackathon cultists.</p>
</blockquote>
<p>为了保持高级开发的地位，他需要做</p>
<ul>
<li>持续优化流程— 批量文件容器化</li>
<li>持续挖掘语言中需要优化的地方</li>
<li>在客户不经常使用的产品中持续发现普通问题</li>
<li>磨练软技能，使之保持在“谁是谁”的好书中，这是管理和销售人员最初期望的。</li>
</ul>
<p>成为一个高级开发尤其是一个技术开发的财务奖金是不可预测的。Stackoverflow 2018和2019开发者调查显示高收入人群的鲜明对比。尽管调查显示，人们可以预测全面进入哪个技术，但是无法预测哪个技术会成为高级技术。技术过时总是迫在眉睫。</p>
<p>所以，流行建议是你花费珍贵的休假时间和睡眠时间持续学习新语言，但这并不会让你在哪一个变得高级。</p>
<p>一个有2年经验的kotlin程序员可能比拥有8年Java经验的你获得面试机会，实际学了6个月kotlin,如果HR不够聪明。尽管你获得了面试，但是薪资会成为弱点。</p>
<p>像中国和印度这样的开发者市场是大型的初级开发者工厂，他们没有持有软件学位，这一事实也被其他其他市场如 freecodecamp, codeacademy 和 hackathon cultists 复制。</p>
</li>
</ul>
<h3 id="final-push-towards-escape-velocity">Final push towards escape velocity:</h3>
<h3 id="向逃跑速度的最后推力">向逃跑速度的最后推力</h3>
<p>It is not age-old wisdom. It is rule of the jungle. Markets can be brutal, and you must bow to demand &amp; supply every time it doesn’t suit you.</p>
<p>这不是老年智慧。这是丛林法则。市场是残酷的，你必须每次在不适合你时候向供需低头。</p>
<p>When you are no longer valued for the character you play, it is time to leave the stage and set up your own drama.</p>
<p>当你不再对你扮演的角色产生价值，是时候离开舞台启动你自己的的表演了。</p>
<p>Today, a non-tech founder can purchase a booking app template and start pitching to investors. Oftentimes, they hound senior developers to sweat out working demo for them while they create glossy presentations.</p>
<p>今天，一个非技术创始人可以购买一个预定的应用模板开始向投资者推销。通常情况下，他们在制作精美的演示文稿时，让高级开发为他们的演示付出大量精力。</p>
<h3 id="the-two-options"><strong>The two options:</strong></h3>
<p>The names they give you range from <strong>offshore contract dev</strong> to a <strong>CTO</strong>. The compensation can range from<code>$500 to 5% equity (of $0 revenue)</code>. You will sell your expertise, most probably for the best of the 2 options: $500 in hand, rather than 5% of uncertain future. Off course, as CTO you <em>may</em> get your usual salary, but it may be substantially less than your market counterparts because you are a brick in the base that’s supposed to support the building, not a painted wall to attract the premise visitors.</p>
<p>Later on, you will see several sales executives cruising ahead of your compensation + stocks just because they <em>supposedly</em> bring in the customers.</p>
<h4 id="两个观点">两个观点</h4>
<p>他们给你的名字范围从离岸合同开发到一个CTO。薪酬范围从500美元到5%不等(收入为0美元)。你将会售卖你的技能，很可能会是这两个选择中的最好的一种：500美元到手而不是5%的不确定的未来。当然，作为CTO你可能获得一般收入，可能比你市场同行少，因为你是支撑大厦的基础砖石，不是吸引客户的粉刷墙。</p>
<h3 id="the-third-alternative"><strong>The third alternative:</strong></h3>
<h4 id="第三个替代品">第三个替代品：</h4>
<p>What you miss out on is the 3rd option that is never presented. Why not join them as competitors rather than collaborators? Technically, you possess an edge that even a Harvard or Wharton executive is eager to suck upon.</p>
<p>你错过的第三个从未出现的选项。为什么不作为竞争对手而是合作者加入他们？技术上讲，你拥有一种优势，即使哈佛大学或沃顿管理人员也渴望得到的这种优势。</p>
<p>What you miss can be summed up here:</p>
<p>你错过的可以总结如下：</p>
<ul>
<li>How to perform market surveys</li>
<li>如何进行市场调查</li>
<li>How to advertise</li>
<li>如何打广告</li>
<li>How to get investments</li>
<li>如何获得投资</li>
</ul>
<p>Upon hindsight, above is just some bullshit being taught in <a href="https://www.amazon.com/What-Teach-Harvard-Business-School/dp/0553345834">overrated management schools</a>. The ultimate questions you need to answer is:</p>
<p>你需要回答的最终问题是：</p>
<ul>
<li>Will they want it</li>
<li>Can I build it</li>
<li>他们需要这吗</li>
<li>我可以建立起来吗</li>
</ul>
<p>Being a senior dev, you are more comfortable answering the 2nd question. Answering the first question takes up the real grind that doesn’t necessarily require going to school.</p>
<p>作为一个高级开发，你会非常轻松回答这两问题。</p>
<p>An oversimplified approach is summed up here, but it has been tried by thousands of successful entrepreneurs.</p>
<p>这里总结一个非常简单的方法，但成千上万个成功的企业家都尝试过这种方法：</p>
<p>And you don’t need an <strong>entrepreneur</strong> <strong>tag</strong> in your linkedIn profile to attempt it, by the way.</p>
<p>你不需要在你的Linkedin个人资料里有个企业家标签来尝试他。</p>
<p>It requires building it first, trying to sell it to some 10 people, iterating over it to sell it to yet more 10 people, then showing it to:</p>
<p>他需要首先构建，尝试卖给10个人，迭代卖给更多十个人，然后显示给：</p>
<ul>
<li>People with big pockets i.e. investors, and / or</li>
<li>有钱人</li>
<li>People with huge audiences i.e. media.</li>
<li>有影响力的媒体人</li>
</ul>
<p>And since you have 20 already trusting people, it’s not as hard as it seems.</p>
<p>既然你有20个信任的人了，那就不难了。</p>
<p>That’s how you, a senior dev sulking for that 12% raise, can get over it, forever.</p>
<p>这就是作为一个只涨薪12%而闷闷不乐的高级开发，永远客服他的方法。</p>
<p>** <strong>UPDATE</strong> ***</p>
<p>更新</p>
<p>Being a doomsayer sounds painful (uncool? meh…) to both the doomsayer and the audience. From some readers’ responses about the article being biased, I felt compelled to supplement the forecasts with some data, especially seeing huge viewership it got in one day after publication.</p>
<p>My primary input for the article was some competent software industry colleagues whom I observed progressing through their careers. The input was also myself who has worked with many different <em>shops</em> (which incidentally employ highest number of software devs against core product firms) as employee as well as freelance, and big product companies too.</p>
<p>I am not a guy who relies too much on surveys, but in the absence of stories that can be commonly connected to, observations can be easily perceived as ‘<em>biased</em>’ — and I do observe it here. So here goes something:</p>
<hr>
<ul>
<li><a href="https://www.techrepublic.com/article/software-had-the-highest-job-turnover-rate-of-any-industry-in-2017/">Software has the highest job turnover </a>— reasons being compensation, or unhappiness with management. Not to mention, those career hoppers finally land up into management — ceasing to be a developer forever. <strong>End of pride.</strong></li>
<li>If not hopping jobs, they become remote freelancers. This is not so <a href="https://hackernoon.com/best-tech-company-to-work-for-in-2019-is-as-always-illusive-a1b88b87446c">new fad nowadays</a>, and they are <a href="https://freelancinghacks.com/20-mind-blowing-freelancing-statistics-remote-work-future/">only increasing</a>. Remote freelancers are mostly no one but senior devs <em>moving for good.</em></li>
<li><a href="https://medium.com/@billjordan1/the-quiet-crisis-unfolding-in-software-development-cffbdafbf450">How star developers aren’t that good when their goals do not overlap with that of management </a>— a medium article with <strong>4.2k</strong> claps from a Software Development Director.</li>
<li><a href="http://www.bloomberg.com/news/2012-04-22/software-engineers-will-work-one-day-for-english-majors.html">Software Engineering is dead-end career, employability decline at the age of 35</a> — says Bloomberg. Unfortunately the article is paywalled today, but I saw some interesting number talking about going indie on <a href="https://news.ycombinator.com/item?id=3878522">ycombinator forum post about the article</a>.</li>
</ul>
<p>But again, those are opinions from ivory towers or surveys —and I don’t give a damn. But alas, <a href="https://www.reddit.com/r/programming/comments/5m8amp/the_reality_of_developer_burnout/">reddit also concurs</a> — burnout resulting into ageism fulfilling the prophecy of bias against senior devs.</p>
<p><strong>Conclusion:</strong></p>
<p>The happier lot is lucky. I was also one of them. That changed. The change was painful, but it taught me many things, including some super-useful technical skills.</p>
<p>Today I don’t feel happy being a doomsayer, but there is nothing to feel sad about it either. Those are market forces, which, in the long run are being driven by technology. It’s just difficult to see it happen.</p>
<p>Unlike <strong>Start Debug</strong> or <strong>Double click</strong> action.</p>
<p>做一个预言家听起来很痛苦（不酷？我…）对预言家和观众。从一些读者对这篇文章有偏见的反应来看，我觉得有必要用一些数据来补充预测，尤其是看到它在出版后的一天获得了巨大的读者群。</p>
<p>我对这篇文章的主要投入是一些有能力的软件行业同事，我观察到他们在职业生涯中取得了进步。我也曾在许多不同的商店工作过（顺便说一下，这些商店针对核心产品公司雇佣了数量最多的软件开发人员），同时也是员工、自由职业者和大型产品公司。</p>
<p>我不是一个过分依赖调查的人，但在缺乏可普遍联系的故事的情况下，观察结果很容易被认为是“有偏见的”-，我确实在这里观察到了。下面是一些内容：</p>
<p>软件拥有最高的工作营业额（https://www.technrepublic.com/article/software-had-the-highest-job-turnover-rate-of-any-industry-in-2017/）—原因是薪酬或对管理层的不满。更不用说，这些职业跳槽者最终会进入管理层，不再是一个永远的开发者。<strong>骄傲结束。</strong></p>
<p>-如果不跳槽，他们就会成为远程自由职业者。这并非如此[当今的新时尚]（https://hacker noon.com/best-tech-company-to-work-for-in-2019-is-as-always-illustrive-a1b88b87446c），它们[只是在增长]（https://freelancinghacks.com/20令人惊异的自由职业统计-远程工作未来/）。远程自由职业者大多不是别人，而是高级开发人员*。</p>
<p>-[当明星开发者的目标与管理层的目标不重叠时，他们是多么的不好》（https://medium.com/@billjordan1/the-quiet-crisis-unfolding-in-software-development-cffbdaffb450）-软件开发总监的一篇带有<strong>4.2k</strong>拍手的中型文章。</p>
<p>-[软件工程是一个死胡同，35岁时就业率下降了]（http://www.bloomberg.com/news/2012-04-22/software engineers will work one day for english majors.html）-bloomberg说。不幸的是，今天这篇文章是付费的，但我看到一些有趣的数字在[关于这篇文章的YCombinator论坛帖子]（https://news.ycombinator.com/item）上谈论独立性。ID=3878522）。</p>
<p>但同样，这些都是来自象牙塔或调查的意见——我一点也不在乎。但是，遗憾的是，【Reddit也同意】（https://www.reddit.com/r/programming/comments/5m8amp/the_developer_burnout/的_reality_），-burnout导致年龄歧视，实现了对高级开发人员的偏见预言。</p>
<p><strong>结论：</strong></p>
<p>幸福的人是幸运的。我也是其中之一。改变了。变化是痛苦的，但它教会了我很多东西，包括一些非常有用的技术技能。</p>
<p>今天作为一个预言家，我不感到高兴，但也没有什么可悲的。这些都是市场力量，从长远来看，它们是由技术驱动的。很难看到它的发生。</p>
]]></content></item><item><title>Week1034_share</title><link>/posts/arts/week1034_share/</link><pubDate>Fri, 31 Mar 2023 15:45:45 +0000</pubDate><guid>/posts/arts/week1034_share/</guid><description>ARTS - Share 补2019.2.27 Spring容器启动过程 根据这个图了解spring的启动过程:
Web.xml
-Start-contextInitialzed(ServletContextEvent event)
​ ContextLoaderListener
​ -1. initWebApplicationContext(event.getServletContext)
​ ContextLoader
​ -1.1 createWebApplicationContext(servletContext)
​ -1.1.1 determineContextClass(sc) 获取web应用上下文类的class
​ -1.1.1.1 BeanUtils.instantiateClass(contextClass)工具实例化bean
​ -1.1.1.2 T
​ 1.1.2 ClasscontextClass
​ 1.2 WebApplicationContext context
​ 1.3 configureAndRefreshWebApplicationContext(cwac, servletContext)
​ 1.3.1 customizeContext(sc, wac) 查找所有配置的ApplicationContext初始化容器
​ 1.3.2 void
​ 1.3.3 -wac.refresh()
​ 1.3.4 void
​ 1.4 void
web.xml Tomcat启动会首先找web.xml文件，spring容器的入口自然就是这里注册的ContextLoaderListener
&amp;lt;listener&amp;gt; &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt; &amp;lt;/listener&amp;gt; ContextLoaderListener 进入这个类
public class ContextLoaderListener extends ContextLoader implements ServletContextListener{ /** * 创建一个新的 ContextLoaderListener ，将会创建一个基于 contextClass 和 ContextConfigLocation context-params 的web应用上下文。看父类的ContextLoader来看默认配置值。 * * 在web.</description><content type="html"><![CDATA[<h2 id="arts---share-补2019227">ARTS - Share 补2019.2.27</h2>
<h2 id="spring容器启动过程">Spring容器启动过程</h2>
<p><img src="https://images2018.cnblogs.com/blog/592104/201808/592104-20180824155830858-1586865600.png" alt=""></p>
<p>根据这个图了解spring的启动过程:</p>
<p>Web.xml</p>
<p>-Start-contextInitialzed(ServletContextEvent event)</p>
<p>​	ContextLoaderListener</p>
<p>​	-1. initWebApplicationContext(event.getServletContext)</p>
<p>​		ContextLoader</p>
<p>​			-1.1 createWebApplicationContext(servletContext)</p>
<p>​			-1.1.1 determineContextClass(sc) 获取web应用上下文类的class</p>
<p>​			-1.1.1.1 BeanUtils.instantiateClass(contextClass)工具实例化bean</p>
<p>​			-1.1.1.2 T</p>
<p>​			1.1.2 Class<!-- raw HTML omitted -->contextClass</p>
<p>​			1.2 WebApplicationContext context</p>
<p>​			1.3 configureAndRefreshWebApplicationContext(cwac, servletContext)</p>
<p>​			1.3.1 customizeContext(sc, wac) 查找所有配置的ApplicationContext初始化容器</p>
<p>​			1.3.2 void</p>
<p>​			1.3.3 -wac.refresh()</p>
<p>​			1.3.4 void</p>
<p>​			1.4 void</p>
<h4 id="webxml">web.xml</h4>
<p>Tomcat启动会首先找web.xml文件，spring容器的入口自然就是这里注册的ContextLoaderListener</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;listener&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span style="color:#f92672">&lt;/listener-class&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;/listener&gt;</span>
</span></span></code></pre></div><h4 id="contextloaderlistener">ContextLoaderListener</h4>
<p>进入这个类</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ContextLoaderListener</span> <span style="color:#66d9ef">extends</span> ContextLoader <span style="color:#66d9ef">implements</span> ServletContextListener<span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   * 创建一个新的 ContextLoaderListener ，将会创建一个基于 contextClass 和 	 ContextConfigLocation context-params 的web应用上下文。看父类的ContextLoader来看默认配置值。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 *  在web.xml里声明ContextLoaderListener时候一个无参构造是必须的。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 创建的应用上下文将会注册到ServletContext里， 在属性名为WebApplicationContext 的ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ContextLoaderListener</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 使用给定的应用context来创建一个新的ContextLoaderListener.这个构造方法在基于实例的Servet3.0+环境中使用javax.servlet.ServletContext#addListener注册listener  也是可以的。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 如果以下情况context可能没被ConfigurableApplicationContext 重新刷新:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * a. 该context实现了ConfigurableWebApplicationContext接口
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * b. 没有被推荐方法重新刷新
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 之后会发生以下情况：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   * 1.如果给定的context 没有被分配一个ConfigurableApplicationContext#setId的 id，将会分配一个
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   * 2.ServletContext和ServletConfig 对象将会委托给应用上下文
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   * 3.customizeContext将会被调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   * 4.任意的ApplicationContextInitializer通过contextInitializerClasses定义的init-param参数将会被应用 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 5.ConfigurableApplicationContext#refresh 将会被调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 如果context上下文已经被重新刷新或者没有实现ConfigurableWebApplicationContext，以上都不会发生。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 用户根据自己需要明确定义。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 看 org.springframework.web.WebApplicationInitializer} 使用例子.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 无论何种情况，给定的context都会被注册到ServletContext 的属性WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE之下，spring应用上下文将在调用contextDestroyed 方法后关闭。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ContextLoaderListener</span><span style="color:#f92672">(</span>WebApplicationContext context<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">super</span><span style="color:#f92672">(</span>context<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 初始化根web应用上下文
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">contextInitialized</span><span style="color:#f92672">(</span>ServletContextEvent event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		initWebApplicationContext<span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getServletContext</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 关闭根web应用上下文
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">contextDestroyed</span><span style="color:#f92672">(</span>ServletContextEvent event<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		closeWebApplicationContext<span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getServletContext</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>		ContextCleanupListener<span style="color:#f92672">.</span><span style="color:#a6e22e">cleanupAttributes</span><span style="color:#f92672">(</span>event<span style="color:#f92672">.</span><span style="color:#a6e22e">getServletContext</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="1initwebapplicationcontexteventgetservletcontext">1.initWebApplicationContext(event.getServletContext)</h4>
<p>初始化WebApplicationContext。我们继续看看这里的初始化方法，它调用了父类ContextLoader的initWebApplicationContext方法，</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 初始化给定的servlet上下文 ，或者根据CONTEXT_CLASS_PARAM 上下文类和 CONFIG_LOCATION_PARAM上下文配置的context-params来创建一个新的。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> WebApplicationContext <span style="color:#a6e22e">initWebApplicationContext</span><span style="color:#f92672">(</span>ServletContext servletContext<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>servletContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getAttribute</span><span style="color:#f92672">(</span>WebApplicationContext<span style="color:#f92672">.</span><span style="color:#a6e22e">ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span><span style="color:#f92672">)</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 如果已经存在这个属性，说明已经创建过根上下文了，抛异常
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalStateException<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>					<span style="color:#e6db74">&#34;Cannot initialize context because there is already a root application context present - &#34;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>					<span style="color:#e6db74">&#34;check whether you have multiple ContextLoader* definitions in your web.xml!&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Log logger <span style="color:#f92672">=</span> LogFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getLog</span><span style="color:#f92672">(</span>ContextLoader<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		servletContext<span style="color:#f92672">.</span><span style="color:#a6e22e">log</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Initializing Spring root WebApplicationContext&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>logger<span style="color:#f92672">.</span><span style="color:#a6e22e">isInfoEnabled</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			logger<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Root WebApplicationContext: initialization started&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">long</span> startTime <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">currentTimeMillis</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 储存context到本地实例变量，保证ServletContext关闭时候也存在
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span> <span style="color:#f92672">=</span> createWebApplicationContext<span style="color:#f92672">(</span>servletContext<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 如果context实现了ConfigurableWebApplicationContext 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span> <span style="color:#66d9ef">instanceof</span> ConfigurableWebApplicationContext<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				ConfigurableWebApplicationContext cwac <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>ConfigurableWebApplicationContext<span style="color:#f92672">)</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>cwac<span style="color:#f92672">.</span><span style="color:#a6e22e">isActive</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">// 如果context没被刷新，就去配置父context, context id 等
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>					<span style="color:#75715e">// The context has not yet been refreshed -&gt; provide services such as
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>					<span style="color:#75715e">// setting the parent context, setting the application context id, etc
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>					<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>cwac<span style="color:#f92672">.</span><span style="color:#a6e22e">getParent</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>						<span style="color:#75715e">// The context instance was injected without an explicit parent -&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>						<span style="color:#75715e">// determine parent for root web application context, if any.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>						ApplicationContext parent <span style="color:#f92672">=</span> loadParentContext<span style="color:#f92672">(</span>servletContext<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>						cwac<span style="color:#f92672">.</span><span style="color:#a6e22e">setParent</span><span style="color:#f92672">(</span>parent<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>					<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">// 配置并刷新context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>					configureAndRefreshWebApplicationContext<span style="color:#f92672">(</span>cwac<span style="color:#f92672">,</span> servletContext<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			servletContext<span style="color:#f92672">.</span><span style="color:#a6e22e">setAttribute</span><span style="color:#f92672">(</span>WebApplicationContext<span style="color:#f92672">.</span><span style="color:#a6e22e">ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			ClassLoader ccl <span style="color:#f92672">=</span> Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">currentThread</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getContextClassLoader</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ccl <span style="color:#f92672">==</span> ContextLoader<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getClassLoader</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				currentContext <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ccl <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				currentContextPerThread<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>ccl<span style="color:#f92672">,</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>logger<span style="color:#f92672">.</span><span style="color:#a6e22e">isDebugEnabled</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				logger<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Published root WebApplicationContext as ServletContext attribute with name [&#34;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>						WebApplicationContext<span style="color:#f92672">.</span><span style="color:#a6e22e">ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;]&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>logger<span style="color:#f92672">.</span><span style="color:#a6e22e">isInfoEnabled</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">long</span> elapsedTime <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">currentTimeMillis</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> startTime<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>				logger<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Root WebApplicationContext: initialization completed in &#34;</span> <span style="color:#f92672">+</span> elapsedTime <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; ms&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>RuntimeException ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			logger<span style="color:#f92672">.</span><span style="color:#a6e22e">error</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Context initialization failed&#34;</span><span style="color:#f92672">,</span> ex<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			servletContext<span style="color:#f92672">.</span><span style="color:#a6e22e">setAttribute</span><span style="color:#f92672">(</span>WebApplicationContext<span style="color:#f92672">.</span><span style="color:#a6e22e">ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span><span style="color:#f92672">,</span> ex<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> ex<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Error err<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			logger<span style="color:#f92672">.</span><span style="color:#a6e22e">error</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Context initialization failed&#34;</span><span style="color:#f92672">,</span> err<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			servletContext<span style="color:#f92672">.</span><span style="color:#a6e22e">setAttribute</span><span style="color:#f92672">(</span>WebApplicationContext<span style="color:#f92672">.</span><span style="color:#a6e22e">ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span><span style="color:#f92672">,</span> err<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> err<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="11-createwebapplicationcontextservletcontext">1.1 createWebApplicationContext(servletContext)</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 为loader 初始化根WebApplicationContext,不是默认的context class 就是一个明确自定义的context class 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 这个实现期望自定义context实现ConfigurableWebApplicationContext接口
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 可以在自类被覆盖
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 另外，customizeContext调用刷新context， 允许子类自定义修改context.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @param sc 当前context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @return the root WebApplicationContext
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @see ConfigurableWebApplicationContext
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">protected</span> WebApplicationContext <span style="color:#a6e22e">createWebApplicationContext</span><span style="color:#f92672">(</span>ServletContext sc<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		Class<span style="color:#f92672">&lt;?&gt;</span> contextClass <span style="color:#f92672">=</span> determineContextClass<span style="color:#f92672">(</span>sc<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>ConfigurableWebApplicationContext<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">isAssignableFrom</span><span style="color:#f92672">(</span>contextClass<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ApplicationContextException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Custom context class [&#34;</span> <span style="color:#f92672">+</span> contextClass<span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>					<span style="color:#e6db74">&#34;] is not of type [&#34;</span> <span style="color:#f92672">+</span> ConfigurableWebApplicationContext<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;]&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>ConfigurableWebApplicationContext<span style="color:#f92672">)</span> BeanUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">instantiateClass</span><span style="color:#f92672">(</span>contextClass<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="111-determinecontextclasssc-获取web应用上下文类的class">1.1.1 determineContextClass(sc) 获取web应用上下文类的class</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 返回WebApplicationContext实现的class来使用，不是默认XmlWebApplicationContext就是明确自定义的context 类。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @param servletContext 当前 servlet context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @return the WebApplicationContext implementation class to use
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @see #CONTEXT_CLASS_PARAM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @see org.springframework.web.context.support.XmlWebApplicationContext
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">protected</span> Class<span style="color:#f92672">&lt;?&gt;</span> determineContextClass<span style="color:#f92672">(</span>ServletContext servletContext<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		String contextClassName <span style="color:#f92672">=</span> servletContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getInitParameter</span><span style="color:#f92672">(</span>CONTEXT_CLASS_PARAM<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>contextClassName <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">return</span> ClassUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">forName</span><span style="color:#f92672">(</span>contextClassName<span style="color:#f92672">,</span> ClassUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">getDefaultClassLoader</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>ClassNotFoundException ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ApplicationContextException<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>						<span style="color:#e6db74">&#34;Failed to load custom context class [&#34;</span> <span style="color:#f92672">+</span> contextClassName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;]&#34;</span><span style="color:#f92672">,</span> ex<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			contextClassName <span style="color:#f92672">=</span> defaultStrategies<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span>WebApplicationContext<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">return</span> ClassUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">forName</span><span style="color:#f92672">(</span>contextClassName<span style="color:#f92672">,</span> ContextLoader<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getClassLoader</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>ClassNotFoundException ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ApplicationContextException<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>						<span style="color:#e6db74">&#34;Failed to load default context class [&#34;</span> <span style="color:#f92672">+</span> contextClassName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;]&#34;</span><span style="color:#f92672">,</span> ex<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="1111-beanutilsinstantiateclasscontextclass工具实例化bean">1.1.1.1 BeanUtils.instantiateClass(contextClass)工具实例化bean</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// createWebApplicationContext方法里determineContextClass 返回加载的Class, 之后实例化这些class
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>ConfigurableWebApplicationContext<span style="color:#f92672">)</span> BeanUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">instantiateClass</span><span style="color:#f92672">(</span>contextClass<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 使用无参构造初始化class
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 注意如果方法非public ，会尝试设置为可操作的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * &lt;p&gt;Note that this method tries to set the constructor accessible
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * if given a non-accessible (that is, non-public) constructor.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @param clazz class to instantiate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @return the new instance
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @throws BeanInstantiationException if the bean cannot be instantiated
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @see Constructor#newInstance
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> T <span style="color:#a6e22e">instantiateClass</span><span style="color:#f92672">(</span>Class<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> clazz<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> BeanInstantiationException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">notNull</span><span style="color:#f92672">(</span>clazz<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Class must not be null&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>clazz<span style="color:#f92672">.</span><span style="color:#a6e22e">isInterface</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> BeanInstantiationException<span style="color:#f92672">(</span>clazz<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Specified class is an interface&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> instantiateClass<span style="color:#f92672">(</span>clazz<span style="color:#f92672">.</span><span style="color:#a6e22e">getDeclaredConstructor</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>NoSuchMethodException ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> BeanInstantiationException<span style="color:#f92672">(</span>clazz<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;No default constructor found&#34;</span><span style="color:#f92672">,</span> ex<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * 使用给定的构造器实例化class
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * &lt;p&gt;Note that this method tries to set the constructor accessible if given a
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * non-accessible (that is, non-public) constructor.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @param ctor the constructor to instantiate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @param args the constructor arguments to apply
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @return the new instance
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @throws BeanInstantiationException if the bean cannot be instantiated
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @see Constructor#newInstance
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> T <span style="color:#a6e22e">instantiateClass</span><span style="color:#f92672">(</span>Constructor<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> ctor<span style="color:#f92672">,</span> Object<span style="color:#f92672">...</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> BeanInstantiationException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">notNull</span><span style="color:#f92672">(</span>ctor<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Constructor must not be null&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			ReflectionUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">makeAccessible</span><span style="color:#f92672">(</span>ctor<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> ctor<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">(</span>args<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>InstantiationException ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> BeanInstantiationException<span style="color:#f92672">(</span>ctor<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Is it an abstract class?&#34;</span><span style="color:#f92672">,</span> ex<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>IllegalAccessException ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> BeanInstantiationException<span style="color:#f92672">(</span>ctor<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Is the constructor accessible?&#34;</span><span style="color:#f92672">,</span> ex<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>IllegalArgumentException ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> BeanInstantiationException<span style="color:#f92672">(</span>ctor<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Illegal arguments for constructor&#34;</span><span style="color:#f92672">,</span> ex<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>InvocationTargetException ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> BeanInstantiationException<span style="color:#f92672">(</span>ctor<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Constructor threw exception&#34;</span><span style="color:#f92672">,</span> ex<span style="color:#f92672">.</span><span style="color:#a6e22e">getTargetException</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 实例化完成，强转为ConfigurableWebApplicationContext 类型返回
</span></span></span></code></pre></div><h4 id="13-configureandrefreshwebapplicationcontextcwac-servletcontext">1.3 configureAndRefreshWebApplicationContext(cwac, servletContext)</h4>
<p>之后就进入了ConfigurableWebApplicationContext逻辑了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 如果当前context是实现了可配置的WebApplicationContet, 就去刷新一下
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span> <span style="color:#66d9ef">instanceof</span> ConfigurableWebApplicationContext<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				ConfigurableWebApplicationContext cwac <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>ConfigurableWebApplicationContext<span style="color:#f92672">)</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  			<span style="color:#75715e">// 没被刷新(设置父context, 设置context id等)，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>cwac<span style="color:#f92672">.</span><span style="color:#a6e22e">isActive</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>					<span style="color:#75715e">// The context has not yet been refreshed -&gt; provide services such as
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>					<span style="color:#75715e">// setting the parent context, setting the application context id, etc
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>					<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>cwac<span style="color:#f92672">.</span><span style="color:#a6e22e">getParent</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>						<span style="color:#75715e">// The context instance was injected without an explicit parent -&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>						<span style="color:#75715e">// determine parent for root web application context, if any.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>						ApplicationContext parent <span style="color:#f92672">=</span> loadParentContext<span style="color:#f92672">(</span>servletContext<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>						cwac<span style="color:#f92672">.</span><span style="color:#a6e22e">setParent</span><span style="color:#f92672">(</span>parent<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>					<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">// 之后刷新context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>					configureAndRefreshWebApplicationContext<span style="color:#f92672">(</span>cwac<span style="color:#f92672">,</span> servletContext<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configureAndRefreshWebApplicationContext</span><span style="color:#f92672">(</span>ConfigurableWebApplicationContext wac<span style="color:#f92672">,</span> ServletContext sc<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ObjectUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">identityToString</span><span style="color:#f92672">(</span>wac<span style="color:#f92672">).</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>wac<span style="color:#f92672">.</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// The application context id is still set to its original default value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#75715e">// -&gt; assign a more useful id based on available information
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#75715e">// context id 设置为原始默认值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			String idParam <span style="color:#f92672">=</span> sc<span style="color:#f92672">.</span><span style="color:#a6e22e">getInitParameter</span><span style="color:#f92672">(</span>CONTEXT_ID_PARAM<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>idParam <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				wac<span style="color:#f92672">.</span><span style="color:#a6e22e">setId</span><span style="color:#f92672">(</span>idParam<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// Generate default id...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 生成默认ID
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				wac<span style="color:#f92672">.</span><span style="color:#a6e22e">setId</span><span style="color:#f92672">(</span>ConfigurableWebApplicationContext<span style="color:#f92672">.</span><span style="color:#a6e22e">APPLICATION_CONTEXT_ID_PREFIX</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>						ObjectUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">getDisplayString</span><span style="color:#f92672">(</span>sc<span style="color:#f92672">.</span><span style="color:#a6e22e">getContextPath</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		wac<span style="color:#f92672">.</span><span style="color:#a6e22e">setServletContext</span><span style="color:#f92672">(</span>sc<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		String configLocationParam <span style="color:#f92672">=</span> sc<span style="color:#f92672">.</span><span style="color:#a6e22e">getInitParameter</span><span style="color:#f92672">(</span>CONFIG_LOCATION_PARAM<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>configLocationParam <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			wac<span style="color:#f92672">.</span><span style="color:#a6e22e">setConfigLocation</span><span style="color:#f92672">(</span>configLocationParam<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// The wac environment&#39;s #initPropertySources will be called in any case when the context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// is refreshed; do it eagerly here to ensure servlet property sources are in place for
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// use in any post-processing or initialization that occurs below prior to #refresh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		ConfigurableEnvironment env <span style="color:#f92672">=</span> wac<span style="color:#f92672">.</span><span style="color:#a6e22e">getEnvironment</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>env <span style="color:#66d9ef">instanceof</span> ConfigurableWebEnvironment<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">((</span>ConfigurableWebEnvironment<span style="color:#f92672">)</span> env<span style="color:#f92672">).</span><span style="color:#a6e22e">initPropertySources</span><span style="color:#f92672">(</span>sc<span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 处置自定义的Context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		customizeContext<span style="color:#f92672">(</span>sc<span style="color:#f92672">,</span> wac<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		wac<span style="color:#f92672">.</span><span style="color:#a6e22e">refresh</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="131-customizecontextsc-wac-查找所有配置的applicationcontext初始化容器">1.3.1 customizeContext(sc, wac) 查找所有配置的ApplicationContext初始化容器</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   * context refresh 之前、config location应用之后，设置自定义参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * &lt;p&gt;The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * determines} what (if any) context initializer classes have been specified through
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * {@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * {@linkplain ApplicationContextInitializer#initialize invokes each} with the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * given web application context.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * &lt;p&gt;Any {@code ApplicationContextInitializers} implementing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * {@link org.springframework.core.Ordered Ordered} or marked with @{@link
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * org.springframework.core.annotation.Order Order} will be sorted appropriately.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @param sc the current servlet context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @param wac the newly created application context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @see #CONTEXT_INITIALIZER_CLASSES_PARAM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">customizeContext</span><span style="color:#f92672">(</span>ServletContext sc<span style="color:#f92672">,</span> ConfigurableWebApplicationContext wac<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 要初始化的类
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		List<span style="color:#f92672">&lt;</span>Class<span style="color:#f92672">&lt;</span>ApplicationContextInitializer<span style="color:#f92672">&lt;</span>ConfigurableApplicationContext<span style="color:#f92672">&gt;&gt;&gt;</span> initializerClasses <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>				determineContextInitializerClasses<span style="color:#f92672">(</span>sc<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Class<span style="color:#f92672">&lt;</span>ApplicationContextInitializer<span style="color:#f92672">&lt;</span>ConfigurableApplicationContext<span style="color:#f92672">&gt;&gt;</span> initializerClass <span style="color:#f92672">:</span> initializerClasses<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			Class<span style="color:#f92672">&lt;?&gt;</span> initializerContextClass <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>					GenericTypeResolver<span style="color:#f92672">.</span><span style="color:#a6e22e">resolveTypeArgument</span><span style="color:#f92672">(</span>initializerClass<span style="color:#f92672">,</span> ApplicationContextInitializer<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>initializerContextClass <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>initializerContextClass<span style="color:#f92672">.</span><span style="color:#a6e22e">isInstance</span><span style="color:#f92672">(</span>wac<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ApplicationContextException<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>						<span style="color:#e6db74">&#34;Could not apply context initializer [%s] since its generic parameter [%s] &#34;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>						<span style="color:#e6db74">&#34;is not assignable from the type of application context used by this &#34;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>						<span style="color:#e6db74">&#34;context loader: [%s]&#34;</span><span style="color:#f92672">,</span> initializerClass<span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">(),</span> initializerContextClass<span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">(),</span>
</span></span><span style="display:flex;"><span>						wac<span style="color:#f92672">.</span><span style="color:#a6e22e">getClass</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">contextInitializers</span><span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>BeanUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">instantiateClass</span><span style="color:#f92672">(</span>initializerClass<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		AnnotationAwareOrderComparator<span style="color:#f92672">.</span><span style="color:#a6e22e">sort</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">contextInitializers</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>ApplicationContextInitializer<span style="color:#f92672">&lt;</span>ConfigurableApplicationContext<span style="color:#f92672">&gt;</span> initializer <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">contextInitializers</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			initializer<span style="color:#f92672">.</span><span style="color:#a6e22e">initialize</span><span style="color:#f92672">(</span>wac<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   * 返回使用CONTEXT_INITIALIZER_CLASSES_PARAM指定的实现class
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * Return the {@link ApplicationContextInitializer} implementation classes to use
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @param servletContext current servlet context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 * @see #CONTEXT_INITIALIZER_CLASSES_PARAM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">protected</span> List<span style="color:#f92672">&lt;</span>Class<span style="color:#f92672">&lt;</span>ApplicationContextInitializer<span style="color:#f92672">&lt;</span>ConfigurableApplicationContext<span style="color:#f92672">&gt;&gt;&gt;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">determineContextInitializerClasses</span><span style="color:#f92672">(</span>ServletContext servletContext<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// 创建集合储存所有的全局参数定义，和自定的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		List<span style="color:#f92672">&lt;</span>Class<span style="color:#f92672">&lt;</span>ApplicationContextInitializer<span style="color:#f92672">&lt;</span>ConfigurableApplicationContext<span style="color:#f92672">&gt;&gt;&gt;</span> classes <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;</span>Class<span style="color:#f92672">&lt;</span>ApplicationContextInitializer<span style="color:#f92672">&lt;</span>ConfigurableApplicationContext<span style="color:#f92672">&gt;&gt;&gt;();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		String globalClassNames <span style="color:#f92672">=</span> servletContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getInitParameter</span><span style="color:#f92672">(</span>GLOBAL_INITIALIZER_CLASSES_PARAM<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>globalClassNames <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String className <span style="color:#f92672">:</span> StringUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">tokenizeToStringArray</span><span style="color:#f92672">(</span>globalClassNames<span style="color:#f92672">,</span> INIT_PARAM_DELIMITERS<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				classes<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>loadInitializerClass<span style="color:#f92672">(</span>className<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		String localClassNames <span style="color:#f92672">=</span> servletContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getInitParameter</span><span style="color:#f92672">(</span>CONTEXT_INITIALIZER_CLASSES_PARAM<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>localClassNames <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String className <span style="color:#f92672">:</span> StringUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">tokenizeToStringArray</span><span style="color:#f92672">(</span>localClassNames<span style="color:#f92672">,</span> INIT_PARAM_DELIMITERS<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				classes<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>loadInitializerClass<span style="color:#f92672">(</span>className<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> classes<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>这之后，刷新context :  wac.refresh();</p>
<p>刷新完context， 所有调用结束，返回。</p>
]]></content></item><item><title>Week1034_tip</title><link>/posts/arts/week1034_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:45 +0000</pubDate><guid>/posts/arts/week1034_tip/</guid><description>ARTS - Tip 补2019.2.27 Ajax跨域 背景 在对APP、服务端项目开发时候，由于APP使用了html5做页面，有一些ajax调用后台数据的需求，测试时候前后端部署一台机器上没问题，当两者分开部署时候，就产生了跨域问题。
介绍： 什么是AJAX跨域问题 产生AJAX跨域问题的原因 解决AJAX跨域的思路和方法 什么是AJAX跨域 简单说就是前端调用后端服务接口时，如果服务接口不是同一个域，就会产生跨域问题。
AJAX跨域场景 前后端分离、服务化的开发模式 AJAX跨域原因 浏览器限制： 浏览器安全校验限制 跨域(协议、域名、端口任何一个不一样都会认为是跨域) XHR请求 AJAX跨域问题解决思路 浏览器： 浏览器去掉跨域校验 XHR： 不使用XHR，使用JSONP，有很多弊端（JsonP向Server提交URL的长度限制在8000字符，超过了则被浏览器拒绝，因此不采用。），无法满足现在开发要求 跨域：被调用方法支持跨域调用(指定参数)；调用方法修改跨域（基于代理） 解决方法 后端要做的工作：
接口允许允许跨域请求：
header(&amp;#39;Access-Control-Allow-Origin:*&amp;#39;); //支持全域名访问，不安全，部署后需要限制为R.com header(&amp;#39;Access-Control-Allow-Methods:POST,GET,OPTIONS,DELETE&amp;#39;); //支持的http动作 header(&amp;#39;Access-Control-Allow-Headers:x-requested-with,content-type&amp;#39;); //响应头 请按照自己需求添加。 前端发起跨域请求：
就是正常的$.ajax请求即可。
OPTION问题 正式跨域请求前，浏览器会根据需要发起一个PreFlight OPTION请求，用来让服务器返回允许的方法（如GET,POST），被跨域访问的来源(Origin),还有是否需要认证信息（Credentials）。
三种场景： 如果跨域的请求是Simple Request（简单请求 ），则不会触发“PreFlight”。
Mozilla对于简单请求的要求是：
以下三项必须都成立：
只能是Get、Head、Post方法
除了浏览器自己在Http头上加的信息（如Connection、User-Agent），开发者只能加这几个：Accept、Accept-Language、Content-Type、。。。。
Content-Type只能取这几个值：
application/x-www-form-urlencoded` multipart/form-data text/plain 其他会导致“PreFlight”的请求。条件基本上是简单请求的补集。
如果是PreFlight request 并且是Redirect的, 浏览器直接拒绝</description><content type="html"><![CDATA[<h2 id="arts---tip-补2019227">ARTS - Tip 补2019.2.27</h2>
<h2 id="ajax跨域">Ajax跨域</h2>
<h4 id="背景">背景</h4>
<p>在对APP、服务端项目开发时候，由于APP使用了html5做页面，有一些ajax调用后台数据的需求，测试时候前后端部署一台机器上没问题，当两者分开部署时候，就产生了跨域问题。</p>
<h4 id="介绍">介绍：</h4>
<ul>
<li>什么是AJAX跨域问题</li>
<li>产生AJAX跨域问题的原因</li>
<li>解决AJAX跨域的思路和方法</li>
</ul>
<h4 id="什么是ajax跨域">什么是AJAX跨域</h4>
<p>简单说就是前端调用后端服务接口时，如果服务接口不是同一个域，就会产生跨域问题。</p>
<h4 id="ajax跨域场景">AJAX跨域场景</h4>
<ul>
<li>前后端分离、服务化的开发模式</li>
</ul>
<h4 id="ajax跨域原因">AJAX跨域原因</h4>
<ul>
<li>浏览器限制： 浏览器安全校验限制</li>
<li>跨域(协议、域名、端口任何一个不一样都会认为是跨域)</li>
<li>XHR请求</li>
</ul>
<h4 id="ajax跨域问题解决思路">AJAX跨域问题解决思路</h4>
<ul>
<li>浏览器： 浏览器去掉跨域校验</li>
<li>XHR： 不使用XHR，使用JSONP，有很多弊端（JsonP向Server提交URL的长度限制在8000字符，超过了则被浏览器拒绝，因此不采用。），无法满足现在开发要求</li>
<li>跨域：被调用方法支持跨域调用(指定参数)；调用方法修改跨域（基于代理）</li>
</ul>
<h4 id="解决方法">解决方法</h4>
<p>后端要做的工作：</p>
<p>接口允许允许跨域请求：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Access-Control-Allow-Origin:*&#39;</span>);  <span style="color:#75715e">//支持全域名访问，不安全，部署后需要限制为R.com
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Access-Control-Allow-Methods:POST,GET,OPTIONS,DELETE&#39;</span>); <span style="color:#75715e">//支持的http动作
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Access-Control-Allow-Headers:x-requested-with,content-type&#39;</span>);  <span style="color:#75715e">//响应头 请按照自己需求添加。
</span></span></span></code></pre></div><p>前端发起跨域请求：</p>
<p>就是正常的$.ajax请求即可。</p>
<h4 id="option问题">OPTION问题</h4>
<p>正式跨域请求前，浏览器会根据需要发起一个PreFlight OPTION请求，用来让服务器返回允许的方法（如GET,POST），被跨域访问的来源(Origin),还有是否需要认证信息（Credentials）。</p>
<h4 id="三种场景">三种场景：</h4>
<ol>
<li>
<p>如果跨域的请求是Simple Request（简单请求 ），则不会触发“PreFlight”。</p>
<p>Mozilla对于简单请求的要求是：</p>
<p>以下三项必须都成立：</p>
<ol>
<li>
<p>只能是Get、Head、Post方法</p>
</li>
<li>
<p>除了浏览器自己在Http头上加的信息（如Connection、User-Agent），开发者只能加这几个：Accept、Accept-Language、Content-Type、。。。。</p>
</li>
<li>
<p>Content-Type只能取这几个值：</p>
<ul>
<li>application/x-www-form-urlencoded`</li>
<li><code>multipart/form-data</code></li>
<li><code>text/plain</code></li>
</ul>
</li>
</ol>
</li>
<li>
<p>其他会导致“PreFlight”的请求。条件基本上是简单请求的补集。</p>
</li>
<li>
<p>如果是PreFlight request 并且是Redirect的, 浏览器直接拒绝</p>
</li>
</ol>
]]></content></item><item><title>Week1035_algorithm</title><link>/posts/arts/week1035_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:45 +0000</pubDate><guid>/posts/arts/week1035_algorithm/</guid><description>ARTS - Algorithm 补2019.3.6 92. 反转链表 II 题目 反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。
说明: 1 ≤ m ≤ n ≤ 链表长度。
示例:
输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, m = 2, n = 4 输出: 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;NULL
分析 要求是反转从m到n的一段，一次扫描。我们需要找到几个临界点：
反转起点前一个，pstart 反转起点，start 反转结束节点，end 反转结束节点后一个 aend 注意情况：
起点相同，即m=1 m = n 代码 public class ReverseBetweenTest { public static ListNode reverseBetween(ListNode head, int m, int n) { if (m == n) { return head; } ListNode node = head; ListNode prev = null; for (int i = 1; i &amp;lt; m; i++) { prev = node; node = node.</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补201936">ARTS - Algorithm 补2019.3.6</h2>
<h2 id="92-反转链表-iihttpsleetcode-cncomproblemsreverse-linked-list-ii"><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h2>
<h4 id="题目">题目</h4>
<p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p>
<p>说明:
1 ≤ m ≤ n ≤ 链表长度。</p>
<p>示例:</p>
<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4
输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</p>
<h4 id="分析">分析</h4>
<p>要求是反转从m到n的一段，一次扫描。我们需要找到几个临界点：</p>
<ul>
<li>反转起点前一个，pstart</li>
<li>反转起点，start</li>
<li>反转结束节点，end</li>
<li>反转结束节点后一个 aend</li>
</ul>
<p>注意情况：</p>
<ol>
<li>起点相同，即m=1</li>
<li>m = n</li>
</ol>
<h4 id="代码">代码</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ReverseBetweenTest</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ListNode <span style="color:#a6e22e">reverseBetween</span><span style="color:#f92672">(</span>ListNode head<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> m<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> n<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>m <span style="color:#f92672">==</span> n<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ListNode node <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ListNode prev <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> m<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            prev <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 起点前一个
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        ListNode tail1 <span style="color:#f92672">=</span> prev<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 起点
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        ListNode start <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        ListNode next <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> n <span style="color:#f92672">-</span> m <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 逆转
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            next <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> prev<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            prev <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> next<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//prev 是翻转了最后一个， node的是list外的第一个
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        start<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>tail1 <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> prev<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            tail1<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> prev<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ListNode n1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n3 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">3</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//        ListNode n4 = new ListNode(4);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        ListNode n5 = new ListNode(5);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        n1<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n2<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        n2<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n3<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//        n3.next = n4;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        n4.next = n5;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        n1<span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//        ListNode a1 = new ListNode(3);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        ListNode a2 = new ListNode(5);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        a1.next = a2;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        a1.print();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//        reverseBetween(a1, 1, 2).print(); // 5,3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        reverseBetween(a1, 1, 1).print(); // 3,5
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 1,2,3, 1,2   213
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1031_algorithm</title><link>/posts/arts/week1031_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:44 +0000</pubDate><guid>/posts/arts/week1031_algorithm/</guid><description>ARTS - Algorithm 补2019.2.6 [24. 两两交换链表中的节点] 题目 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换
示例:
给定 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, 你应该返回 2-&amp;gt;1-&amp;gt;4-&amp;gt;3. 分析 这道题要两两交换，且是节点实际交换，那么就是操作指针了。交换节点操作指针时候的重点是不能丢了指向，就是 1、2交换不能丢失他们后继 3，而且，交换后也不能忘了3 的前驱是1，因此我们要保留四个节点：
Prev -&amp;gt; node -&amp;gt; node.next -&amp;gt; node.next.next
可以给开头一个假的节点，作为第一个前驱。所以操作步骤如下：
建立假头部指向链表，这个假头部当做prev。 建立三个指针指向当前、当前的后继、当前的后继的后继 操作指向 前驱指向第二个节点 第一个节点指向第三个节点 第二个节点指向第一个节点 当前指针向前推进 代码 public static ListNode swapPairs(ListNode head) { ListNode prev = new ListNode(0); prev.next = head; head = prev; ListNode node = prev.next; while (node != null &amp;amp;&amp;amp; node.next != null) { // 保存三个 ListNode first = node; ListNode second = node.</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补201926">ARTS - Algorithm 补2019.2.6</h2>
<h2 id="24-两两交换链表中的节点httpsleetcode-cncomproblemsswap-nodes-in-pairs">[<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a>]</h2>
<h3 id="题目">题目</h3>
<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>
<p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换</p>
<p><strong>示例:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">给定</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">3</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">4</span>, <span style="color:#960050;background-color:#1e0010">你应该返回</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">4</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">3.</span>
</span></span></code></pre></div><h3 id="分析">分析</h3>
<p>这道题要两两交换，且是节点实际交换，那么就是操作指针了。交换节点操作指针时候的重点是不能丢了指向，就是 1、2交换不能丢失他们后继 3，而且，交换后也不能忘了3 的前驱是1，因此我们要保留四个节点：</p>
<p><code>Prev -&gt; node -&gt; node.next -&gt; node.next.next</code></p>
<p>可以给开头一个假的节点，作为第一个前驱。所以操作步骤如下：</p>
<ol>
<li>建立假头部指向链表，这个假头部当做prev。</li>
<li>建立三个指针指向当前、当前的后继、当前的后继的后继</li>
<li>操作指向
<ol>
<li>前驱指向第二个节点</li>
<li>第一个节点指向第三个节点</li>
<li>第二个节点指向第一个节点</li>
</ol>
</li>
<li>当前指针向前推进</li>
</ol>
<h3 id="代码">代码</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ListNode <span style="color:#a6e22e">swapPairs</span><span style="color:#f92672">(</span>ListNode head<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ListNode prev <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        prev<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        head <span style="color:#f92672">=</span> prev<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        ListNode node <span style="color:#f92672">=</span> prev<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>node <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 保存三个
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            ListNode first <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            ListNode second <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            ListNode third <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            prev<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> second<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            first<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> third<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            second<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> first<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>						<span style="color:#75715e">// 这时的node已经是交换过的node了，所以推动前驱就是指向这个第二个node
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            prev <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 此时只需要往前推动一步就跳过了这一对节点
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            node <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> head<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1031_review</title><link>/posts/arts/week1031_review/</link><pubDate>Fri, 31 Mar 2023 15:45:44 +0000</pubDate><guid>/posts/arts/week1031_review/</guid><description>ARTS - Review 补 2019.2.6 The Best Questions to Ask at Your Performance Review Rebecca Fishbein
在绩效评估中最好的问题
disservice n. 损害，伤害 specific adj. 明确的，具体的 exactly adv. 精确地，准确地 quarterly adj.季度的 annual adj. 每年的 buckets n. 桶 assistant n. 助理 Negotiable adj. 可协商的 striving v. 努力 informed adj. 有学问的 v.了解，熟悉 engaged adj. 忙于，从事于 bonus n. 奖金 jittery adj. 紧张不安的 entails v. 牵涉，需要，带来 temperature n. 温度 impacting 影响 attaining 获得 rough adj. 粗略的 dental hygienist adj.</description><content type="html"><![CDATA[<h2 id="arts---review-补-201926">ARTS - Review 补 2019.2.6</h2>
<h2 id="the-best-questions-to-ask-at-your-performance-reviewhttpsmediumcomsstorythe-best-questions-to-ask-at-your-performance-review-5aba3fb86528"><a href="https://medium.com/s/story/the-best-questions-to-ask-at-your-performance-review-5aba3fb86528">The Best Questions to Ask at Your Performance Review</a></h2>
<p>Rebecca Fishbein</p>
<p>在绩效评估中最好的问题</p>
<ul>
<li>disservice n. 损害，伤害</li>
<li>specific adj. 明确的，具体的</li>
<li>exactly adv. 精确地，准确地</li>
<li>quarterly adj.季度的</li>
<li>annual adj. 每年的</li>
<li>buckets n. 桶</li>
<li>assistant n. 助理</li>
<li>Negotiable adj. 可协商的</li>
<li>striving v. 努力</li>
<li>informed adj. 有学问的  v.了解，熟悉</li>
<li>engaged adj. 忙于，从事于</li>
<li>bonus n. 奖金</li>
<li>jittery adj. 紧张不安的</li>
<li>entails v. 牵涉，需要，带来</li>
<li>temperature n. 温度</li>
<li>impacting 影响</li>
<li>attaining 获得</li>
<li>rough adj. 粗略的</li>
<li>dental hygienist adj. 牙科的，牙齿的 ，员工， 洗牙师</li>
<li>metric adj. 米制的，</li>
<li>assess v. 评估</li>
<li>frustratingly 令人沮丧的</li>
<li>vague adj. 不清楚的，模糊的</li>
<li>generalized adj. 笼统的，概括的</li>
<li>productivity n. 生产率，生产效率</li>
<li>curt  adj. 简略的</li>
<li>mild adj. 温和的</li>
<li>unprompted adj. 主动的，自发的</li>
<li>trait n. 特点，特征</li>
<li>stellar adj. 优秀的</li>
<li>mentor n. 导师，顾问</li>
<li>strengthen v. 增强</li>
<li>initiative n. 主动权，</li>
<li>budget n.预算</li>
<li>presumptive adj. 很可能的，假设的</li>
<li>proactive adj. 积极主动的</li>
<li>compensation n. 补偿，</li>
<li>Typically adv. 通常地</li>
</ul>
<p>You’re doing yourself a disservice if you don’t use this time to bring up a few specific points</p>
<p>如果你没有利用这段时间提出一些具体的观点，那么你将对对自己造成损害。</p>
<p>The primary purpose of a performance review is exactly what it sounds like: It’s an opportunity for your employer to tell you how you’re doing. But while a quarterly or annual sit-down is certainly a good time to get feedback, you aren’t doing yourself any favors if feedback is all you hope to get out of it. It’s also a chance for you, the employee, to look forward, and to get some tips on how you can grow both in your specific role and in your career, overall.</p>
<p>绩效评估的主要目的就是它听起来的那么明确：他是你的雇主告诉你做的怎么的一个机会。但是，虽然每季度或年度座谈会确实是获得反馈的一个好机会，但是如果你仅仅希望得到反馈，那么你不会给自己带来任何好处。这也是对你的一个机会，一个雇员期望的，在你独特的角色和事业生涯中获取一些成长的建议。</p>
<p>“Think about it in three buckets,” says executive coach <a href="https://www.megmyersmorgan.com/about">Meg Myers Morgan</a>, an assistant professor of public administration at the University of Oklahoma and the author of <em>Everything is Negotiable.</em> “It’s about the work you do now, the work you’re striving to do later, and the relationship you’re having with your manager.” <a href="https://medium.com/s/story/a-beginners-guide-to-giving-performance-reviews-963aba23bd">A good manager </a>will give you the space to ask about all of those things. That way, you’ll leave your review not just informed of your past performance, but armed with the tools to improve upon it in the future, which can altogether help keep you more engaged and happier at work.</p>
<p>&ldquo;用三个桶考虑&rdquo;(多方考虑)，Meg Myers Morgan， 执行教练，俄克拉荷马州立大学公馆管理专业助理教授，《一切都是可协商的》作者，如是说道。&ldquo;这是关于你正在做的工作，你正在奋斗的事业，你正在拥有的和你经理的关系&rdquo;。一个好的经理会给你做事的空间。这样的话，你在离开会谈后不仅仅获得你对过往工作表现的了解，而且也会让你让你在未来依靠它提高，还能让你更快乐地从事你的工作。</p>
<p>In order to achieve this, though, you need to come prepared. If your manager asks if you have any questions, don’t just stare at them blankly. For one thing, you want to show them that you take your job and career seriously. For another, this is a rare chance to ask for things that you want. And as a bonus, the more you prepare, the less jittery you’ll be in the actual review. “Everybody feels nervous going into a performance evaluation. It’s like being called into the principal’s office,” Morgan says. “I advise thinking through what you want to say before you go in there, so you don’t get nervous and forget your side of it.”</p>
<p>为了实现这个，所以，你需要提前准备。如果你的经理问你有什么问题，不要空洞的注视着他们。一方面，你想要对他们表现出你对工作事业的严谨。另一方面，这也是你询问你想知道的事情的绝佳机会。作为意外收获，你越多准备，你在实际面谈中就会越少的紧张不安。&ldquo;每个人在进行绩效评估中都会感到紧张。就像被叫进大学校长办公室&rdquo;， 摩根说道，&ldquo;我建议在进去之前就想好说什么，所以就不会感到紧张忘了你想要说的&rdquo;。</p>
<p>Jaime Klein, founder of <a href="https://inspirehumanresources.com/">Inspire Human Resources</a>, suggests doing some self-assessment in advance of your review (if you’re not sure what that entails, there are lots of <a href="https://www.thebalancecareers.com/use-an-employee-self-evaluation-1918856">sample employee evaluations online</a>). “I encourage employees to do a temperature check on how they think they’re doing,” Klein says. “What is it that the company really values, and how does my role fit in to what the company does? What are the core values of the people that work there? How is the work that I’m doing impacting the attaining of the company’s goals?”</p>
<p>杰米 凯琳， 激发人类灵感 创始人，建议做一些自我回顾在会谈之前(如果你不确定说什么，这有很多 &ldquo;雇员价值简易在线评估&rdquo;)。 &ldquo;我鼓励雇员对他们正在做的事怎么想的做一个热度检查&rdquo;， 凯琳说，&ldquo;公司真正的价值是什么，我的角色怎么做才更符合公司的战略？在这工作的人的核心价值是什么？我正在做的工作如何影响公司目标的实现？&rdquo;</p>
<p>Once you’ve got a rough idea of where you stand, it’s time to come up with your questions. To get you started, here are some of the best ones to ask, no matter what your role in the company.</p>
<p>一旦你获得一个你所处位置的粗略想法，是时候提出你的问题了。为了开始，这些是一些好的问题，不论你在公司角色是什么。</p>
<h4 id="how-is-my-performance-relative-to-your-expectations"><strong>“How is my performance relative to your expectations?”</strong></h4>
<h4 id="我的表现相对我的预期怎么样">我的表现相对我的预期怎么样？</h4>
<p>You don’t just want to know where you fall on a scale of one to five — you want to know exactly how your employer is defining one, five, and all the scores in between. “It’s important that you hear not just how you’re doing, but how close are you to the bar, and how high the bar is,” Klein says.</p>
<p>你不仅仅想知道你的分数落到1分到5分的哪里 — 你也想要确切知道你的雇主是如何定义1分，5分，和他们之间所有的分数的。&ldquo;不仅你要听到怎么做，还要知道你离目标多远，目标有多高&rdquo;， 凯琳说。</p>
<p>For instance, you may think you’re doing well because you write four blog posts a day, but it turns out the company would like you to write five. Or you’ve hit X number of sales targets, but your manager draws the line for success at Y. “If you’re a customer-service rep for Home Depot, what is your rating after a call with a customer? If you’re a dental hygienist, how healthy are your patients that get your care?” Klein says. “It’s about understanding what the metric is.”</p>
<p>例如，你可能觉得自己做的很好因为你每天写四个博客文章，但是公司希望你写五个。或者你已经触及 某个目标数字X，但是你的经理写了成功数字是Y。&ldquo;如果你是一个Home Depot公司的客服，你和客户通话后的排名是多少？如果你是一个洗牙师，得到你护理的客户变得多健康？&ldquo;凯琳说，&ldquo;这就是关于理解标准是什么。&rdquo;</p>
<h4 id="what-other-metrics-are-you-using-to-assess-how-im-doing"><strong>“What other metrics are you using to assess how I’m doing?”</strong></h4>
<h4 id="其他评估你正在做的工作的标准">&ldquo;其他评估你正在做的工作的标准&rdquo;</h4>
<p>Sometimes performance reviews can be frustratingly formal and vague, with ratings systems for generalized categories like time management and productivity. But as Morgan points out, your manager may also be evaluating more specific aspects of your performance without you even realizing it.</p>
<p>有时，绩效评估可能令人沮丧的正式和模糊的，如评估系统对时间官吏和生产效率进行模糊的分类。但是摩根观点之处，你的经理可能也是在你都没有意识到的情况下评估你的表现。</p>
<p>“I had a client whose emails were really curt, and she just didn’t know it,” Morgan says. Though something that mild might not come up in your review unprompted, it’ll be helpful for you to ask, especially because every manager pays attention to different things. If you know what bothers yours, you can tackle those small issues before they become larger ones.</p>
<p>&ldquo;我有一个客户他的邮件非常短，他还没意识到&rdquo;，摩根说。尽管有些温和的东西不会出现在你的评论里，但他有助于你提问，尤其是每个经理都注意不同的东西。如果你知道什么困扰着你，你可以在这些小问题变大之前解决他们。</p>
<h4 id="what-do-you-see-are-my-strengths-what-do-you-see-are-my-weaknesses"><strong>“What do you see are my strengths? What do you see are my weaknesses?”</strong></h4>
<p>####你觉得我的长处是什么？你觉得我的弱点是什么？</p>
<p>Jennifer Kraszewski, vice president of human resources at the online human resources provider <a href="https://www.paycom.com/">Paycom</a>, says you shouldn’t shy away from asking your manager for specific feedback, even on smaller things like past projects. “It’s very important for the employee to be comfortable asking their leader, ‘What things can I improve upon? What things am I doing well on? What does my growth track look like within my department?’” she writes in an email. “And leaders should be able to speak to all of those things.”</p>
<p>杰妮芙 克莱威斯克 人类资源在线供应商 Paycom 的副总说，你不应该羞于向你的经历提问获得专业反馈，甚至在更小的事情上，如过去的项目。&ldquo;对雇员来说舒服的问他领导非常重要， &lsquo;哪些事上我可以提高？那些事我做的好？在我们部门我的成长轨迹是什么？&rsquo;&ldquo;她在一封邮件中写道。&ldquo;领导应该告诉你这一切事情。&rdquo;</p>
<p>And if you’re comfortable doing so, you should feel free to press your manager for more detail when it comes to addressing your weaker areas. “If your leader does not give specific feedback about what you can improve upon, continue to ask for those examples,” Kraszewski says. “Some leaders are not as good at giving constructive feedback as others, so if you don’t get those specifics, it’s harder for you as an employee to know where you need to improve.”</p>
<p>如果你很舒服做这些了，当你的经理问你关于你弱点更详细时候，你会感到很轻松。&ldquo;如果你的领导没有给你明确的反馈关于你的提高上，继续这么问，&ldquo;克莱斯维克说，&ldquo;有些领导并不能给出建设性的意见，所以如果你不那么明确，作为员工你很难知道哪方面你需要提高。&rdquo;</p>
<h4 id="what-are-the-skills-and-traits-that-i-need-to-get-to-the-next-level"><strong>“What are the skills and traits that I need to get to the next level?”</strong></h4>
<h4 id="获得下一级别我需要掌握哪些技能特点">获得下一级别我需要掌握哪些技能特点？</h4>
<p>Even if you’re not on track for a promotion, you should be constantly striving to move up. This shows your employer you care about your job, your company, and your career, and it’ll also help you <a href="https://medium.com/s/story/how-to-stay-productive-when-you-hate-your-job-f0ff9aa05f45">feel more engaged in all three</a>.</p>
<p>即使你不在升职的轨道上，你也要不断努力。这向你老板展示了你关心你的工作，你的公司，你的事业，它们也会让你感觉在这三个方面更加投入。</p>
<p>“So much energy is spent on low performers to get them to expectations,” Klein says. “If you get a stellar review, you should say, ‘Fantastic, what can I do to get myself prepared to grow my role even more? Is there a mentor externally or internally you can recommend? Is there a class I can take? What core experiences do I need?’”</p>
<p>&ldquo;花如此多的精力在低绩效的员工身上以使得他们达到预期”，凯琳说道，“如果你获得优秀的评估，你应该说，&lsquo;太好了，我该如何准备来使我角色成长更多？这里有你可以推荐的外部或内部导师吗？有我可以上的课程吗？我需要什么类的核心经验？&rsquo;”</p>
<p>This is also a good time to ask how you can help strengthen your team, particularly if you had a good review. “Deep down, what every leader wants to do is surround themselves with really strong people so they themselves can grow their own career,” Klein says. “If an employee asks, ‘How can I help you be successful, or help the department be more successful, or can I be part of an initiative?’ every leader loves for an employee to ask how they can help success happen.”</p>
<p>这也是询问你如何帮助你的团队变得更强的一个好的时机，尤其是你获得了好的评估。&ldquo;在内心深处，每个领导都希望真正强的人围在他的左右，以便他们发展自己的事业&rdquo;，凯琳说，&ldquo;如果一个员工问，&lsquo;我如何能帮你成功，或者帮助部门更成功，或者&rsquo;我如何成为拥有主动权的一部分呢？&rsquo; 每个领导都喜欢员工问如何帮他们让成功发生。&rdquo;</p>
<h4 id="what-is-in-the-budget-for-professional-development"><strong>“What is in the budget for professional development?”</strong></h4>
<h4 id="专业发展的预算是多少">专业发展的预算是多少？</h4>
<p>It sounds presumptive to ask your manager for company money, but it can actually be a great way to show that you’re proactive. If your manager thinks you need to improve in specific areas, it’s fair to ask them if there are any resources available to help you do that. For instance, if public speaking isn’t your strength, you could ask if you could work with a coach. If you’d like to improve your design skills, perhaps there’s money in the budget for a class.</p>
<p>如果可能就问下你经理公司资金情况，它是一个展示你积极性的一个绝佳方式。如果你的经理认为你需要在特定领域有所提高，那么询问有哪些你可以使用的资源来帮你实现目标就很合理了。例如，公共演讲不是你的长处，你可以问你是否可以和一个教练一起工作。如果你更想要提高设计技能，或许有预算支持你学一个课程。</p>
<p>Note that it’s extra helpful to offer your manager some concrete suggestions for ways they could invest in you, rather than just asking what they suggest. “Leaders have 25 things in their inbox that have to be answered and dealt with at any given time,” Klein says. “If an employee comes to the performance review and says, ‘I’ve given this thought, I have this ask,’ it saves time.”</p>
<p>注意，这是一些额外的帮助来让你的经理提供一些对你投资的实际的方式，而不是仅仅问他们的建议。&ldquo;领导邮箱中有25件事，在任何时候都必须回复和处理，&ldquo;凯琳说，&ldquo;如果一个员工来到绩效评估会上说， &lsquo;我给出如下思考，有这些提问&rsquo;, 那就节省时间了&rdquo;。</p>
<h4 id="can-we-talk-about-my-compensation"><strong>“Can we talk about my compensation?”</strong></h4>
<h4 id="我们可以谈报酬吗">我们可以谈报酬吗</h4>
<p>Typically, a performance review is an appropriate time <a href="https://medium.com/s/story/a-by-the-numbers-guide-to-asking-for-a-raise-39d495c7f7d7">to ask for a raise</a>. “You should ask if there’s any opportunity to increase your salary. It’s a fair question to ask during a review time,” says David Rock, CEO of the <a href="https://neuroleadership.com/">NeuroLeadership Institute</a> and author of <em>Your Brain at Work</em>. But if you’re going to ask for more money, make sure you come armed with the reasons you deserve it.</p>
<p>通常，一个绩效评估会是一个合适的时机去要求升级，&ldquo;你应该问是否有机会涨薪。在会谈期间提问是一个非常合理的问题&rdquo;，大卫 石头 ， <a href="https://neuroleadership.com/">NeuroLeadership Institute</a> CEO， 《你的大脑在工作》作者， 如是说到。但是如果你准备要更多的钱，确定你有足够值得的理由。</p>
<p>“Make sure you’ve got strong market research or a value you’ve brought to the organization,” Morgan says. “You can say, ‘I think I’ve contributed in these ways and I’m interested in looking for raise this year, is that possible?’”</p>
<p>“Then,” she adds, “the goal there is to be very quiet.”</p>
<p>&ldquo;确定你已经获得强大的市场研究或带给组织足够的价值&rdquo;， 摩根说，&ldquo;你可以说， &lsquo;我认为今年我已经努力在用这几种我感兴趣的方式来获得提升，这可以吗？&rsquo;&rdquo;</p>
<p>&ldquo;然后&rdquo;， 她补充道，&ldquo;那个目标是非常平静的。&rdquo;</p>
]]></content></item><item><title>Week1031_share</title><link>/posts/arts/week1031_share/</link><pubDate>Fri, 31 Mar 2023 15:45:44 +0000</pubDate><guid>/posts/arts/week1031_share/</guid><description>ARTS - Share 补2019.2.6 JVM的守护线程和用户线程 线程池创建非daemon线程 最近在看线程池时候, 发现线程池创建线程特别设置了线程为非daemon，以下是DefaultThreadFactory 中的一段代码：
public Thread newThread(Runnable r) { Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0); if (t.isDaemon()) t.setDaemon(false); if (t.getPriority() != Thread.NORM_PRIORITY) t.setPriority(Thread.NORM_PRIORITY); return t; } 于是就了解了下JVM的线程。
守护线程和用户线程 Java线程分类为daemon 即守护线程，和非守护线程即用户线程，守护线程一般用来辅助用户线程，如GC线程就是守护线程，
守护线程的生命周期：随着程序在JVM中运行，守护线程第一时间被启动，并且一直处于运行状态。
当所有用户线程执行完毕，程序就会杀死守护线程，离开JVM，终止程序。
也就是是说，当用户线程为0，那么JVM就会退出。
守护线程的创建 其实线程 Thread类里有个 setDaemon方法，用来设置线程为守护线程：
/** * Marks this thread as either a {@linkplain #isDaemon daemon} thread * or a user thread. The Java Virtual Machine exits when the only * threads running are all daemon threads.</description><content type="html"><![CDATA[<h2 id="arts---share-补201926">ARTS - Share 补2019.2.6</h2>
<h2 id="jvm的守护线程和用户线程">JVM的守护线程和用户线程</h2>
<h4 id="线程池创建非daemon线程">线程池创建非daemon线程</h4>
<p>最近在看线程池时候, 发现线程池创建线程特别设置了线程为非daemon，以下是DefaultThreadFactory 中的一段代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Thread <span style="color:#a6e22e">newThread</span><span style="color:#f92672">(</span>Runnable r<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            Thread t <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread<span style="color:#f92672">(</span>group<span style="color:#f92672">,</span> r<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                                  namePrefix <span style="color:#f92672">+</span> threadNumber<span style="color:#f92672">.</span><span style="color:#a6e22e">getAndIncrement</span><span style="color:#f92672">(),</span>
</span></span><span style="display:flex;"><span>                                  <span style="color:#ae81ff">0</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">isDaemon</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>                t<span style="color:#f92672">.</span><span style="color:#a6e22e">setDaemon</span><span style="color:#f92672">(</span><span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">getPriority</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">NORM_PRIORITY</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                t<span style="color:#f92672">.</span><span style="color:#a6e22e">setPriority</span><span style="color:#f92672">(</span>Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">NORM_PRIORITY</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> t<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>于是就了解了下JVM的线程。</p>
<h4 id="守护线程和用户线程">守护线程和用户线程</h4>
<p>Java线程分类为daemon 即守护线程，和非守护线程即用户线程，守护线程一般用来辅助用户线程，如GC线程就是守护线程，</p>
<p>守护线程的生命周期：随着程序在JVM中运行，守护线程第一时间被启动，并且一直处于运行状态。</p>
<p>当所有用户线程执行完毕，程序就会杀死守护线程，离开JVM，终止程序。</p>
<p>也就是是说，当用户线程为0，那么JVM就会退出。</p>
<h4 id="守护线程的创建">守护线程的创建</h4>
<p>其实线程 Thread类里有个 setDaemon方法，用来设置线程为守护线程：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * Marks this thread as either a {@linkplain #isDaemon daemon} thread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * or a user thread. The Java Virtual Machine exits when the only
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * threads running are all daemon threads.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 当所有运行的线程都是守护线程，那么JVM退出。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * &lt;p&gt; This method must be invoked before the thread is started.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     注意这句，必须在start方法调用之前设置这个
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param  on
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         if {@code true}, marks this thread as a daemon thread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @throws  IllegalThreadStateException
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *          if this thread is {@linkplain #isAlive alive}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @throws  SecurityException
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *          if {@link #checkAccess} determines that the current
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *          thread cannot modify this thread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setDaemon</span><span style="color:#f92672">(</span><span style="color:#66d9ef">boolean</span> on<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        checkAccess<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isAlive<span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalThreadStateException<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        daemon <span style="color:#f92672">=</span> on<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>另外守护线程创建的都是守护线程，当所有线程都为守护线程时候，JVM就会退出，下面我们验证一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.Scanner<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.concurrent.TimeUnit<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DaemonThreadTest</span> <span style="color:#66d9ef">extends</span> Thread <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        DaemonThreadTest test <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> DaemonThreadTest<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        test<span style="color:#f92672">.</span><span style="color:#a6e22e">setDaemon</span><span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        test<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Scanner sc <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Scanner<span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">in</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        sc<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Runtime<span style="color:#f92672">.</span><span style="color:#a6e22e">getRuntime</span><span style="color:#f92672">().</span><span style="color:#a6e22e">addShutdownHook</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Thread<span style="color:#f92672">(()</span> <span style="color:#f92672">-&gt;</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;JVM exits!&#34;</span><span style="color:#f92672">)));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                TimeUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECONDS</span><span style="color:#f92672">.</span><span style="color:#a6e22e">sleep</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                Thread t <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread<span style="color:#f92672">(()</span> <span style="color:#f92672">-&gt;</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;I am inner thread&#34;</span><span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34; inner thread isDaemon = &#34;</span> <span style="color:#f92672">+</span> t<span style="color:#f92672">.</span><span style="color:#a6e22e">isDaemon</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>                t<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>InterruptedException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                e<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>以上逻辑很简单：</p>
<p>DaemonThreadTest 作为一个Daemon线程，它不停的创建线程，在主线程里加了个控制台输入的Scanner ，相当于用户线程，只要不输入，就不会退出，最后控制台打印的都是 daemon=true, 当手动输入字符回车之后，打印 JVM退出。</p>
]]></content></item><item><title>Week1031_tip</title><link>/posts/arts/week1031_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:44 +0000</pubDate><guid>/posts/arts/week1031_tip/</guid><description>ARTS - Tip 补 2019.2.6 线程池的getTask()方法 线程池持有线程不退出的思路 学线程池，都知道它的好处就是减少了频繁创建、销毁线程的开销，从而提高效率的，那么到底是怎么实现这个机制的呢？
我们自己设想下，线程的声明周期就是创建、就绪、运行、销毁。如果线程一直在运行状态并且可以接收其他任务，那么其实就相当于是避开了频繁创建、销毁的开销。那么，线程池也是这么个思路。
先看代码 runWorker, 我们知道runWorker其实就是相当于线程的run方法， 同理addWorker 可以看做是创建线程。
runWorker final void runWorker(Worker w) { Thread wt = Thread.currentThread(); Runnable task = w.firstTask; w.firstTask = null; w.unlock(); // allow interrupts boolean completedAbruptly = true; try { /** 注意这个while循环， task为空时候就调用了getTask()方法， * 这个getTask()方法其实就充当了获取待执行任务的功能 * 还有个重要点是看这个while循环里的最后，重置 task = null, * 这时候就相当于调用getTask()获取任务了,接下来我们看getTask() */ while (task != null || (task = getTask()) != null) { w.lock(); // If pool is stopping, ensure thread is interrupted; // if not, ensure thread is not interrupted.</description><content type="html"><![CDATA[<h2 id="arts---tip-补-201926">ARTS - Tip 补 2019.2.6</h2>
<h2 id="线程池的gettask方法">线程池的getTask()方法</h2>
<h4 id="线程池持有线程不退出的思路">线程池持有线程不退出的思路</h4>
<p>学线程池，都知道它的好处就是减少了频繁创建、销毁线程的开销，从而提高效率的，那么到底是怎么实现这个机制的呢？</p>
<p>我们自己设想下，线程的声明周期就是创建、就绪、运行、销毁。如果线程一直在运行状态并且可以接收其他任务，那么其实就相当于是避开了频繁创建、销毁的开销。那么，线程池也是这么个思路。</p>
<p>先看代码 runWorker, 我们知道runWorker其实就是相当于线程的run方法， 同理addWorker 可以看做是创建线程。</p>
<h4 id="runworker">runWorker</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">final</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">runWorker</span><span style="color:#f92672">(</span>Worker w<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Thread wt <span style="color:#f92672">=</span> Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">currentThread</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        Runnable task <span style="color:#f92672">=</span> w<span style="color:#f92672">.</span><span style="color:#a6e22e">firstTask</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        w<span style="color:#f92672">.</span><span style="color:#a6e22e">firstTask</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        w<span style="color:#f92672">.</span><span style="color:#a6e22e">unlock</span><span style="color:#f92672">();</span> <span style="color:#75715e">// allow interrupts
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">boolean</span> completedAbruptly <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        		<span style="color:#75715e">/** 注意这个while循环， task为空时候就调用了getTask()方法，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          	* 这个getTask()方法其实就充当了获取待执行任务的功能
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          	* 还有个重要点是看这个while循环里的最后，重置 task = null, 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          	* 这时候就相当于调用getTask()获取任务了,接下来我们看getTask()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          	*/</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>task <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>task <span style="color:#f92672">=</span> getTask<span style="color:#f92672">())</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                w<span style="color:#f92672">.</span><span style="color:#a6e22e">lock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// If pool is stopping, ensure thread is interrupted;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// if not, ensure thread is not interrupted.  This
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// requires a recheck in second case to deal with
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// shutdownNow race while clearing interrupt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>runStateAtLeast<span style="color:#f92672">(</span>ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(),</span> STOP<span style="color:#f92672">)</span> <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span>                     <span style="color:#f92672">(</span>Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">interrupted</span><span style="color:#f92672">()</span> <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>                      runStateAtLeast<span style="color:#f92672">(</span>ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(),</span> STOP<span style="color:#f92672">)))</span> <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">!</span>wt<span style="color:#f92672">.</span><span style="color:#a6e22e">isInterrupted</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>                    wt<span style="color:#f92672">.</span><span style="color:#a6e22e">interrupt</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    beforeExecute<span style="color:#f92672">(</span>wt<span style="color:#f92672">,</span> task<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    Throwable thrown <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        task<span style="color:#f92672">.</span><span style="color:#a6e22e">run</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>RuntimeException x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        thrown <span style="color:#f92672">=</span> x<span style="color:#f92672">;</span> <span style="color:#66d9ef">throw</span> x<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Error x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        thrown <span style="color:#f92672">=</span> x<span style="color:#f92672">;</span> <span style="color:#66d9ef">throw</span> x<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Throwable x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        thrown <span style="color:#f92672">=</span> x<span style="color:#f92672">;</span> <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error<span style="color:#f92672">(</span>x<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        afterExecute<span style="color:#f92672">(</span>task<span style="color:#f92672">,</span> thrown<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                  	<span style="color:#75715e">// 这里重置了task 为 null，循环继续走task = getTask()的条件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    task <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    w<span style="color:#f92672">.</span><span style="color:#a6e22e">completedTasks</span><span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>                    w<span style="color:#f92672">.</span><span style="color:#a6e22e">unlock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            completedAbruptly <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            processWorkerExit<span style="color:#f92672">(</span>w<span style="color:#f92672">,</span> completedAbruptly<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="gettask方法">getTask()方法</h4>
<p>我们看源码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> Runnable <span style="color:#a6e22e">getTask</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">boolean</span> timedOut <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span> <span style="color:#75715e">// Did the last poll() time out?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(;;)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> rs <span style="color:#f92672">=</span> runStateOf<span style="color:#f92672">(</span>c<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// Check if queue empty only if necessary.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>rs <span style="color:#f92672">&gt;=</span> SHUTDOWN <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>rs <span style="color:#f92672">&gt;=</span> STOP <span style="color:#f92672">||</span> workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                decrementWorkerCount<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> wc <span style="color:#f92672">=</span> workerCountOf<span style="color:#f92672">(</span>c<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// Are workers subject to culling?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	<span style="color:#75715e">// 如果设置了核心线程超时退出 或者线程数大于核心线程大小，timed 就是true
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">boolean</span> timed <span style="color:#f92672">=</span> allowCoreThreadTimeOut <span style="color:#f92672">||</span> wc <span style="color:#f92672">&gt;</span> corePoolSize<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>wc <span style="color:#f92672">&gt;</span> maximumPoolSize <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>timed <span style="color:#f92672">&amp;&amp;</span> timedOut<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>wc <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>compareAndDecrementWorkerCount<span style="color:#f92672">(</span>c<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>               <span style="color:#75715e">/* 最重要的部分看这里,这做了一个判断就是 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">               * 1. timed == true, 走 workQueue.pool() 方法，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">               * 2. timed == false, 走 workQueue.task() 方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">               */</span>
</span></span><span style="display:flex;"><span>                Runnable r <span style="color:#f92672">=</span> timed <span style="color:#f92672">?</span>
</span></span><span style="display:flex;"><span>                    workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">poll</span><span style="color:#f92672">(</span>keepAliveTime<span style="color:#f92672">,</span> TimeUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">NANOSECONDS</span><span style="color:#f92672">)</span> <span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                    workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">take</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>r <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                timedOut <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>InterruptedException retry<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                timedOut <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>以上代码我们得到结果：</p>
<ol>
<li>timed== true 其实就是非核心线程处理和设置了核心线程超时的核心线程处理， 走poll()方法</li>
<li>timed == false 其实就是核心线程处理， 走 take() 方法</li>
</ol>
<p>所以实际上核心线程和非核心线程的区别(设置了超时时间的其实就是当做非核心线程处理了)  就是获取阻塞队列中方式不一样的区别了。</p>
<p>pool 取得队列中元素，没有就返回null， take没有就阻塞，不返回，根据这个特性，我们就发现了在runWorker里的getTask() 方法在队列为空时候就会被一直被阻塞，也就是实现了runWorker卡在那不退出的情况，也就是线程一直处在 running 的状态，等到取得新的任务，线程继续执行。</p>
<h4 id="简单总结">简单总结</h4>
<p>线程池实现方式：</p>
<ol>
<li>
<p>Execute 方法提交任务</p>
</li>
<li>
<p>addWorker 相当于线程创建，并调用了start方法，这相当于创建了一大堆线程，</p>
</li>
<li>
<p>每个线程执行自己的 runWorker() 方法，runWorker方法本质就是死循环从队列中取任务，当都取不到任务时候，就相当于队列为空，非核心线程获取到null 任务，核心线程获取不到任务一直被阻塞，</p>
</li>
<li>
<p>非核心线程继续走完runWorker() 方法，线程结束退出。</p>
</li>
</ol>
<h4 id="poll-和take">poll 和take</h4>
<p>这里说下poll和take的不同，这里看下LinkedBlockingQueue的实现：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> E <span style="color:#a6e22e">poll</span><span style="color:#f92672">(</span><span style="color:#66d9ef">long</span> timeout<span style="color:#f92672">,</span> TimeUnit unit<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> InterruptedException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        E x <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">long</span> nanos <span style="color:#f92672">=</span> unit<span style="color:#f92672">.</span><span style="color:#a6e22e">toNanos</span><span style="color:#f92672">(</span>timeout<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> AtomicInteger count <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">count</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> ReentrantLock takeLock <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">takeLock</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        takeLock<span style="color:#f92672">.</span><span style="color:#a6e22e">lockInterruptibly</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        	<span style="color:#75715e">// 当取不到元素时候，就延迟 返回null
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>count<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nanos <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                nanos <span style="color:#f92672">=</span> notEmpty<span style="color:#f92672">.</span><span style="color:#a6e22e">awaitNanos</span><span style="color:#f92672">(</span>nanos<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            x <span style="color:#f92672">=</span> dequeue<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            c <span style="color:#f92672">=</span> count<span style="color:#f92672">.</span><span style="color:#a6e22e">getAndDecrement</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>c <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                notEmpty<span style="color:#f92672">.</span><span style="color:#a6e22e">signal</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            takeLock<span style="color:#f92672">.</span><span style="color:#a6e22e">unlock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>c <span style="color:#f92672">==</span> capacity<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>            signalNotFull<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> x<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> E <span style="color:#a6e22e">take</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> InterruptedException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        E x<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> AtomicInteger count <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">count</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> ReentrantLock takeLock <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">takeLock</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        takeLock<span style="color:#f92672">.</span><span style="color:#a6e22e">lockInterruptibly</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">// 当取不到元素时候，就执行了await()方法，阻塞
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>count<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                notEmpty<span style="color:#f92672">.</span><span style="color:#a6e22e">await</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            x <span style="color:#f92672">=</span> dequeue<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            c <span style="color:#f92672">=</span> count<span style="color:#f92672">.</span><span style="color:#a6e22e">getAndDecrement</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>c <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                notEmpty<span style="color:#f92672">.</span><span style="color:#a6e22e">signal</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            takeLock<span style="color:#f92672">.</span><span style="color:#a6e22e">unlock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>c <span style="color:#f92672">==</span> capacity<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>            signalNotFull<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> x<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>那么，take方法 notEmpty.await() 又是什么呢？跟上去，代码如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> Condition notEmpty <span style="color:#f92672">=</span> takeLock<span style="color:#f92672">.</span><span style="color:#a6e22e">newCondition</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 那么，什么是Condition呢？我们继续看newCondition()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 这个是在ReentrantLock类里的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> Condition <span style="color:#a6e22e">newCondition</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> sync<span style="color:#f92672">.</span><span style="color:#a6e22e">newCondition</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> ConditionObject <span style="color:#a6e22e">newCondition</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> ConditionObject<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">await</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> InterruptedException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">interrupted</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> InterruptedException<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            Node node <span style="color:#f92672">=</span> addConditionWaiter<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> savedState <span style="color:#f92672">=</span> fullyRelease<span style="color:#f92672">(</span>node<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> interruptMode <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(!</span>isOnSyncQueue<span style="color:#f92672">(</span>node<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                LockSupport<span style="color:#f92672">.</span><span style="color:#a6e22e">park</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>interruptMode <span style="color:#f92672">=</span> checkInterruptWhileWaiting<span style="color:#f92672">(</span>node<span style="color:#f92672">))</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>acquireQueued<span style="color:#f92672">(</span>node<span style="color:#f92672">,</span> savedState<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> interruptMode <span style="color:#f92672">!=</span> THROW_IE<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                interruptMode <span style="color:#f92672">=</span> REINTERRUPT<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>node<span style="color:#f92672">.</span><span style="color:#a6e22e">nextWaiter</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#75715e">// clean up if cancelled
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                unlinkCancelledWaiters<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>interruptMode <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                reportInterruptAfterWait<span style="color:#f92672">(</span>interruptMode<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>至于这一大段 await 到底是什么意思，留个坑，以后再填吧，(我也不懂)。</p>
]]></content></item><item><title>Week1032_algorithm</title><link>/posts/arts/week1032_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:44 +0000</pubDate><guid>/posts/arts/week1032_algorithm/</guid><description>ARTS - Algorithm 补2019.2.13 25. k个一组翻转链表 题目 给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。
k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。
示例 :
给定这个链表：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5
当 k = 2 时，应当返回: 2-&amp;gt;1-&amp;gt;4-&amp;gt;3-&amp;gt;5
当 k = 3 时，应当返回: 3-&amp;gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;5
说明 :
你的算法只能使用常数的额外空间。 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 分析 这道题和上一题24. 两两交换链表中的节点很是相似，不同的是上道题是交换两个节点，这道题是交换k个节点。我们根据上题的思路，也是要找出列表分段的头和尾，然后转换相邻两个节点的指向，一段遍历完成，把上一段的尾巴指向这一段的新头部，代码如下：
代码 /** * 25. k个一组翻转链表 * https://leetcode-cn.com/problems/reverse-nodes-in-k-group/ * * @author jacklove * @date 2019/5/8 */ public class ReverseKGroup { public static ListNode reverseKGroup(ListNode head, int k) { ListNode node = head; ListNode fake = new ListNode(0); fake.</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补2019213">ARTS - Algorithm 补2019.2.13</h2>
<h2 id="25-k个一组翻转链表httpsleetcode-cncomproblemsreverse-nodes-in-k-group"><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">25. k个一组翻转链表</a></h2>
<h4 id="题目">题目</h4>
<p>给出一个链表，每 <em>k</em> 个节点一组进行翻转，并返回翻转后的链表。</p>
<p><em>k</em> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <em>k</em> 的整数倍，那么将最后剩余节点保持原有顺序。</p>
<p><strong>示例 :</strong></p>
<p>给定这个链表：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>
<p>当 <em>k</em> = 2 时，应当返回: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>
<p>当 <em>k</em> = 3 时，应当返回: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>
<p><strong>说明 :</strong></p>
<ul>
<li>你的算法只能使用常数的额外空间。</li>
<li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</li>
</ul>
<h4 id="分析">分析</h4>
<p>这道题和上一题<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a>很是相似，不同的是上道题是交换两个节点，这道题是交换k个节点。我们根据上题的思路，也是要找出列表分段的头和尾，然后转换相邻两个节点的指向，一段遍历完成，把上一段的尾巴指向这一段的新头部，代码如下：</p>
<h4 id="代码">代码</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * 25. k个一组翻转链表
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * https://leetcode-cn.com/problems/reverse-nodes-in-k-group/
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @author jacklove
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @date 2019/5/8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ReverseKGroup</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ListNode <span style="color:#a6e22e">reverseKGroup</span><span style="color:#f92672">(</span>ListNode head<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ListNode node <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        ListNode fake <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        fake<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//  上一段的尾巴
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        ListNode tail <span style="color:#f92672">=</span> fake<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>node <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>checked<span style="color:#f92672">(</span>node<span style="color:#f92672">,</span> k<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 剩下的不符合翻转条件，直接用上一段的尾巴指向node
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                tail<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          	<span style="color:#75715e">// 用来记录当前指针的前一个节点
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            ListNode prev <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>          	<span style="color:#75715e">// 记录当前一段的第一个节点，也就是翻转后的段尾巴
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            ListNode first <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> k<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                ListNode oldnext <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 改变指向
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> prev<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// prev前进， node前进
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                prev <span style="color:#f92672">=</span> node<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                node <span style="color:#f92672">=</span> oldnext<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 头，尾
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#75715e">// 新的， 这一段结尾是prev , 下一段开头是 node,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            tail<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> prev<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 重置tail为转换后的新尾巴
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            tail <span style="color:#f92672">=</span> first<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> fake<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  	<span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  	* 检查链表是否足够翻转
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  	*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">checked</span><span style="color:#f92672">(</span>ListNode node<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> k<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>node <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        ListNode n1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n3 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">3</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n4 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">4</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n5 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">5</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        n1<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n2<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        n2<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n3<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        n3<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n4<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        n4<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n5<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        print<span style="color:#f92672">(</span>n1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//        print(reverseKGroup(n1, 2));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        print<span style="color:#f92672">(</span>reverseKGroup<span style="color:#f92672">(</span>n1<span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>ListNode node<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>node <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>node<span style="color:#f92672">.</span><span style="color:#a6e22e">val</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;-&gt;&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1032_review</title><link>/posts/arts/week1032_review/</link><pubDate>Fri, 31 Mar 2023 15:45:44 +0000</pubDate><guid>/posts/arts/week1032_review/</guid><description>ARTS - Review 补2019.2.13 MySQL数据类型总览 11.1.1 Numeric Type Overview unrelated adj. 无关联的. specify v. 具体说明 subtraction n. 减法 omit v. 忽略 synonyms n. 同义词 precision n. 精确，准确 A summary of the numeric data types follows. For additional information about properties and storage requirements of the numeric types, see Section 11.2, “Numeric Types”, and Section 11.8, “Data Type Storage Requirements”.
主要的数字数据类型如下。更多关于数字类型的属性和存储信息，请看11.2章，和11.8章。
M indicates the maximum display width for integer types. The maximum display width is 255.</description><content type="html"><![CDATA[<h2 id="arts---review--补2019213">ARTS - Review  补2019.2.13</h2>
<h2 id="mysql数据类型总览httpsdevmysqlcomdocrefman80endata-type-overviewhtml"><a href="https://dev.mysql.com/doc/refman/8.0/en/data-type-overview.html">MySQL数据类型总览</a></h2>
<h3 id="1111-numeric-type-overview">11.1.1 Numeric Type Overview</h3>
<ul>
<li>unrelated adj. 无关联的.</li>
<li>specify v. 具体说明</li>
<li>subtraction n. 减法</li>
<li>omit v. 忽略</li>
<li>synonyms n. 同义词</li>
<li>precision n. 精确，准确</li>
</ul>
<p>A summary of the numeric data types follows. For additional information about properties and storage requirements of the numeric types, see <a href="https://dev.mysql.com/doc/refman/8.0/en/numeric-types.html">Section 11.2, “Numeric Types”</a>, and <a href="https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html">Section 11.8, “Data Type Storage Requirements”</a>.</p>
<p>主要的数字数据类型如下。更多关于数字类型的属性和存储信息，请看11.2章，和11.8章。</p>
<p><em>M</em> indicates the maximum display width for integer types. The maximum display width is 255. Display width is unrelated to the range of values a type can contain, as described in <a href="https://dev.mysql.com/doc/refman/8.0/en/numeric-types.html">Section 11.2, “Numeric Types”</a>. For floating-point and fixed-point types, <em>M</em> is the total number of digits that can be stored.</p>
<p><em>M</em> 表示整型表示的最大宽度。最大展示宽度是255.展示宽度和一个类型能包含的值的范围无关， 11.2看描述。对浮点和定点类型，<em>M</em>是可以存储的总位数。</p>
<p>If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.</p>
<p>如果你具体说明 <code>零填充 ZEROFILL</code>一个数字类型的列，MySQL给列自动填充 <code>UNSIGNED</code>属性。</p>
<p>Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code>attribute has no effect.</p>
<p>数字数据类型允许 <code>UNSIGNED</code>和 <code>SIGNED</code>属性。 但是，这些数据类型默认是已签名的，所以SIGNED 属性没影响。</p>
<p><code>SERIAL</code> is an alias for <code>BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE</code>.</p>
<p><code>SERIAL DEFAULT VALUE</code> in the definition of an integer column is an alias for <code>NOT NULL AUTO_INCREMENT UNIQUE</code>.</p>
<blockquote>
<p>Warning</p>
<p>When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the<a href="https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction"><code>NO_UNSIGNED_SUBTRACTION</code></a> SQL mode is enabled. See <a href="https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html">Section 12.10, “Cast Functions and Operators”</a>.</p>
</blockquote>
<blockquote>
<p>警告</p>
<p>当在其中一个是 UNSIGNED 类型的两个整数值之间做减法，结果也会是 unsigned ， 除非 NO_UNSIGNED_SUBTRACTION SQL模式是可用的。看12.10章节。</p>
</blockquote>
<ul>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/bit-type.html"><code>BIT[(*M*)\]</code></a></p>
<p>A bit-value type. <em>M</em> indicates the number of bits per value, from 1 to 64. The default is 1 if <em>M</em> is omitted.</p>
<p>一个 位值类型。 M表示每个值多少位，从1到64.默认是1</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>TINYINT[(*M*)\] [UNSIGNED] [ZEROFILL]</code></a></p>
<p>A very small integer. The signed range is <code>-128</code> to <code>127</code>. The unsigned range is <code>0</code> to <code>255</code>.</p>
<p>一个非常小的整型。带签名范围从-128到127. 不带签名是从0 到255</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BOOL</code></a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BOOLEAN</code></a></p>
<p>These types are synonyms for <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>TINYINT(1)</code></a>. A value of zero is considered false. Nonzero values are considered true:</p>
<p>这两个类型是 TINYINT(1) 的同义词。0值表示 false, 非0表示 true:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-mysql" data-lang="mysql"><span style="display:flex;"><span>mysql<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">select</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#f92672">+------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>) <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">false</span>                  <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> row <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> sec)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">select</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">-&gt;</span> ;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>) <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">true</span>                   <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> row <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> sec)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">select</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#f92672">+------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>) <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">true</span>                   <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> row <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> sec)
</span></span></code></pre></div><p>但是，TRUE 和 FALSE 这俩只是 1 和 0 的别名：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-mysql" data-lang="mysql"><span style="display:flex;"><span>mysql<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">select</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">0</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#f92672">+--------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">0</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>) <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+--------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">true</span>                           <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+--------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> row <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> sec)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">select</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#f92672">+-------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>) <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+-------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">true</span>                          <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+-------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> row <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> sec)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">select</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#f92672">+-------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>) <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+-------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">false</span>                         <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+-------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> row <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> sec)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">select</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#f92672">+--------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, <span style="color:#e6db74">&#39;true&#39;</span>, <span style="color:#e6db74">&#39;false&#39;</span>) <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+--------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#66d9ef">false</span>                          <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+--------------------------------+</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> row <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">set</span> (<span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> sec)
</span></span></code></pre></div><p>后两句展示了 2 既不等于0 ，也不等于 1.</p>
</li>
</ul>
<ul>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>SMALLINT[(*M*)\] [UNSIGNED] [ZEROFILL]</code></a></p>
<p>A small integer. The signed range is <code>-32768</code> to <code>32767</code>. The unsigned range is <code>0</code> to <code>65535</code>.</p>
<p>一个小的整型。有符号取值范围是 -32768 - 32767 。 无符号取值范围是0 到65535</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>MEDIUMINT[(*M*)\] [UNSIGNED] [ZEROFILL]</code></a></p>
<p>A medium-sized integer. The signed range is <code>-8388608</code> to <code>8388607</code>. The unsigned range is <code>0</code> to <code>16777215</code>.</p>
<p>一个中型整型。有符号范围是 -8388608 - 8388607.无符号范围是0 到16777215</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>INT[(*M*)\] [UNSIGNED] [ZEROFILL]</code></a></p>
<p>A normal-size integer. The signed range is <code>-2147483648</code> to <code>2147483647</code>. The unsigned range is <code>0</code> to <code>4294967295</code>.</p>
<p>一个正常整型。</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>INTEGER[(*M*)\] [UNSIGNED] [ZEROFILL]</code></a></p>
<p>This type is a synonym for <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>INT</code></a>.</p>
<p>INT 的同义词</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BIGINT[(*M*)\] [UNSIGNED] [ZEROFILL]</code></a></p>
<p>A large integer. The signed range is <code>-9223372036854775808</code> to <code>9223372036854775807</code>. The unsigned range is <code>0</code> to <code>18446744073709551615</code>.</p>
<p>更大的整型。</p>
<p><code>SERIAL</code> is an alias for <code>BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE</code>.</p>
<p>Some things you should be aware of with respect to <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BIGINT</code></a> columns:</p>
<ul>
<li>
<p>All arithmetic is done using signed <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BIGINT</code></a> or <a href="https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html"><code>DOUBLE</code></a> values, so you should not use unsigned big integers larger than<code>9223372036854775807</code> (63 bits) except with bit functions! If you do that, some of the last digits in the result may be wrong because of rounding errors when converting a <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BIGINT</code></a> value to a <a href="https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html"><code>DOUBLE</code></a>.</p>
</li>
<li>
<p>所有的算术运算使用有符号BIGINT 或者DOUBLE值计算，所以不应该使用超过63位的无符号大整数 除了位方法。如果你那么做，一些后位可能出错，因为转换BIGINT 值为DOUBLE时候可能会出现舍入错误。</p>
<p>MySQL can handle <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BIGINT</code></a> in the following cases:</p>
<p>MySQL能在如下情况中处理BIGINT</p>
<ul>
<li>When using integers to store large unsigned values in a <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BIGINT</code></a> column.</li>
<li>In <a href="https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_min"><code>MIN(*col_name*)</code></a> or <a href="https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_max"><code>MAX(*col_name*)</code></a>, where <em>col_name</em> refers to a <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BIGINT</code></a> column.</li>
<li>When using operators (<a href="https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_plus"><code>+</code></a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_minus"><code>-</code></a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_times"><code>*</code></a>, and so on) where both operands are integers.</li>
<li>当使用整型存储大的无符号值在BIGINT列。</li>
<li>在 min(col_name)或者 max(col_name) ， 且col_name 为 BIGINT 列。</li>
<li>当使用操作符 + - * 等都是整型时候。</li>
</ul>
</li>
<li>
<p>You can always store an exact integer value in a <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BIGINT</code></a> column by storing it using a string. In this case, MySQL performs a string-to-number conversion that involves no intermediate double-precision representation.</p>
</li>
<li>
<p>你可以在BIGINT列存储一个精确的整型值用字符型。这样的话，MySQL会做字符串到数字转换，不涉及中间精度表示问题。</p>
</li>
<li>
<p>The <a href="https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_minus"><code>-</code></a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_plus"><code>+</code></a>, and <a href="https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_times"><code>*</code></a> operators use <a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"><code>BIGINT</code></a> arithmetic when both operands are integer values. This means that if you multiply two big integers (or results from functions that return integers), you may get unexpected results when the result is larger than <code>9223372036854775807</code>.</p>
</li>
<li>
<p><code> -, +, *</code>操作使用BIGINT运算当两个是整型值。这意味着当你用两个大整数相乘(或者返回整型结果的方法)， 你可能获得不希望的值，当这个值超过 <code>9223372036854775807</code>;</p>
</li>
</ul>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html"><code>DECIMAL[(*M*[,*D*\])] [UNSIGNED] [ZEROFILL]</code></a></p>
<p>A packed “exact” fixed-point number. <em>M</em> is the total number of digits (the precision) and <em>D</em> is the number of digits after the decimal point (the scale). The decimal point and (for negative numbers) the <code>-</code> sign are not counted in <em>M</em>. If <em>D</em> is 0, values have no decimal point or fractional part. The maximum number of digits (<em>M</em>) for <a href="https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html"><code>DECIMAL</code></a> is 65. The maximum number of supported decimals (<em>D</em>) is 30. If <em>D</em> is omitted, the default is 0. If <em>M</em> is omitted, the default is 10.</p>
<p><code>UNSIGNED</code>, if specified, disallows negative values.</p>
<p>All basic calculations (<code>+, -, *, /</code>) with <a href="https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html"><code>DECIMAL</code></a> columns are done with a precision of 65 digits.</p>
<p>DECIMAL(M[, D])</p>
<p>一个包装的精确的固定点数字。 M 是位数，D是小数位数。如果D是0，就没有小数位。最大位数 M 是65.支持的最大小数位D 是30. 如果D缺省，默认就是0。如果M缺省，默认是10.</p>
</li>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html"><code>DEC[(*M*[,*D*\])] [UNSIGNED] [ZEROFILL]</code></a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html"><code>NUMERIC[(*M*[,*D*\])] [UNSIGNED] [ZEROFILL]</code></a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html"><code>FIXED[(*M*[,*D*\])] [UNSIGNED] [ZEROFILL]</code></a></p>
<p>These types are synonyms for <a href="https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html"><code>DECIMAL</code></a>. The <a href="https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html"><code>FIXED</code></a> synonym is available for compatibility with other database systems.</p>
<p>这个类型就是DECIMAL别称。</p>
</li>
</ul>
]]></content></item><item><title>Week1032_share</title><link>/posts/arts/week1032_share/</link><pubDate>Fri, 31 Mar 2023 15:45:44 +0000</pubDate><guid>/posts/arts/week1032_share/</guid><description>ARTS - Share 补2019.2.13 基础的重要性 现代计算机的存储结构 现代计算机大多采用冯诺依曼机构，主要分为核心计算中央处理器CPU，内存，作为临时存储数据的模块，硬盘，永久存储数据的地方，还有数据总线，负责之间数据传输通信。
我们与计算机交互，其实就是把数据交给CPU处理，然后结果返回。中间涉及到数据存储、传输、读取，也就是输入输出，简称IO(input output)。实现这个过程的实体就是CPU、内存、硬盘。速度上CPU&amp;gt;内存&amp;raquo;硬盘。 我们的目标是用尽可能少的资源(计算资源、时间资源、空间存储资源)得到尽可能多的结果。
由于目前经常是CPU处理性能强大，我们经常优化点就在磁盘(硬盘)IO，和内存存取计算这块，为了实现目标，落到实地就是尽可能的减少磁盘IO，尽可能减少内存开销，和尽可能少的计算。于是出现了各种数据结构，就是为了在不同场景下最大化的利用资源达到目的。数据结构和算法并非凭空产生，都是依托于场景存在，所以学习这类知识不能孤立的只是学习记忆，要尽可能的学习它的适用场景。
数组与链表 数组和链表的产生是基于内存结构的。内存其实就是一块有编号的存储单元。可以想象成有编号的一组柜子。我们程序需要频繁的往这些箱子里放东西，取东西。为了更好的利用这些箱子，提高存取效率，就出现了数据结构和算法，数组和链表就是其中最基础的。
想象一下，我要存十个东西到箱子里，我可以申请编号1-10 的箱子，把东西依次放入，并获得每个东西的箱子号码(内存地址)，下次我要取出3号箱子，就直接去3号拿，取出8号的就去8号箱拿。这就是数组结构。我的东西都是连续的，我拿出3，我若需要7就去7号箱子拿，不需要打开4,5,6去看看，但是如果我需要放一个新的东西，按照顺序只能放到3和4之间，于是我就需要把4-10的东西先往后平移一个，在把东西放到4号箱子。这就有点麻烦了，为了放一个，我需要移动4-10 7个箱子。
这时候链表结构就出现了。它的特点就是可能不是非要连续的箱子，我要放十个东西，第一个放入了3号箱，三号箱里还放了第二个东西的箱子编号7，然后第二个东西放入7号箱子，然后7号箱子还放了接下来第三个东西地址，以此类推。这就是链表结构，他的特点就是不需要连续的箱子，只要有空箱子，我的东西就能放进去。目前我们知道我的东西放在 3 -&amp;gt; 7 -&amp;gt; 2 -&amp;gt; 5 -&amp;gt;13 -&amp;gt;9 箱子， 加入我有一个东西需要放在三和四之间，我只需要申请一个空箱子比如 20， 然后把第三个箱子2的下一个箱子指向20， 然后20的下一个箱子指向原来的5就行了，不用移动后面箱子的东西。这就是链表的好处，但是它的坏处就是，假如我只是查找，只能从头开始查，没有数组那种跳着查的方便。
这时候我们已经看到了，数组方便查询，但不方便插入删除，链表方便插入删除，不方便查询。其实这两个结构已经告诉我们使用场景了：在查询多的场景用数组，在插入删除多的场景用链表。
二叉树 数据并非只有数组和链表这样线性的关系，还可能是家谱一样树形关系。典型的是二叉树，每个节点最多有两个孩子节点。二叉树应用场景主要在查询操作和维持相对顺序。
比如一个二叉树的左子树不为空，所有左子树节点均小于根节点的值，右子树不为空的话，所有右子树节点均大于根节点的值。这样的二叉树叫二叉查找树。不用刻意记名字，根据这样特性构建的数，非常方便查询，只要每次比较根节点，小的往左边找，大的往右边找。
二叉树如果只有左子树或者右子树，那么就会退化成了链表结构。为了避免这种情况，或者树太深层级导致查询困难，就产生了各种类型的数，如红黑树、B树之类。
MySQL的B+树 这里说一个典型的mysql索引B+树。我们知道磁盘数据库，要查询数据就要尽可能减少磁盘IO，这样才能加速。于是就有相应场景的B树。它允许每个节点有多于2个的元素，这样可以多存数据，降低数的深度，B+树是在B树的基础上，非叶子节点只有索引功能，数据放在叶子节点上，同时，所有叶子节点构成一个有序链表，这样在limit m, n时候，可以根据找到的一个直接遍历到后边。</description><content type="html"><![CDATA[<h2 id="arts---share-补2019213">ARTS - Share 补2019.2.13</h2>
<h4 id="基础的重要性">基础的重要性</h4>
<h4 id="现代计算机的存储结构">现代计算机的存储结构</h4>
<p>现代计算机大多采用冯诺依曼机构，主要分为核心计算中央处理器CPU，内存，作为临时存储数据的模块，硬盘，永久存储数据的地方，还有数据总线，负责之间数据传输通信。</p>
<p>我们与计算机交互，其实就是把数据交给CPU处理，然后结果返回。中间涉及到数据存储、传输、读取，也就是输入输出，简称IO(input output)。实现这个过程的实体就是CPU、内存、硬盘。速度上CPU&gt;内存&raquo;硬盘。 我们的目标是<strong>用尽可能少的资源(计算资源、时间资源、空间存储资源)得到尽可能多的结果</strong>。</p>
<p>由于目前经常是CPU处理性能强大，我们经常优化点就在磁盘(硬盘)IO，和内存存取计算这块，为了实现目标，落到实地就是尽可能的减少磁盘IO，尽可能减少内存开销，和尽可能少的计算。于是出现了各种数据结构，就是为了在不同场景下最大化的利用资源达到目的。数据结构和算法并非凭空产生，都是依托于场景存在，所以学习这类知识不能孤立的只是学习记忆，要尽可能的学习它的适用场景。</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1558329180946&amp;di=52d288af6176df19aa7adbcd8decc1d5&amp;imgtype=0&amp;src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fjpg%2Fea62f18cb28922ddc5aa80e3bb270e47.jpg%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100" alt=""></p>
<h4 id="数组与链表">数组与链表</h4>
<p>数组和链表的产生是基于内存结构的。内存其实就是一块有编号的存储单元。可以想象成有编号的一组柜子。我们程序需要频繁的往这些箱子里放东西，取东西。为了更好的利用这些箱子，提高存取效率，就出现了数据结构和算法，数组和链表就是其中最基础的。</p>
<p>想象一下，我要存十个东西到箱子里，我可以申请编号1-10 的箱子，把东西依次放入，并获得每个东西的箱子号码(内存地址)，下次我要取出3号箱子，就直接去3号拿，取出8号的就去8号箱拿。这就是数组结构。我的东西都是连续的，我拿出3，我若需要7就去7号箱子拿，不需要打开4,5,6去看看，但是如果我需要放一个新的东西，按照顺序只能放到3和4之间，于是我就需要把4-10的东西先往后平移一个，在把东西放到4号箱子。这就有点麻烦了，为了放一个，我需要移动4-10 7个箱子。</p>
<p>这时候链表结构就出现了。它的特点就是可能不是非要连续的箱子，我要放十个东西，第一个放入了3号箱，三号箱里还放了第二个东西的箱子编号7，然后第二个东西放入7号箱子，然后7号箱子还放了接下来第三个东西地址，以此类推。这就是链表结构，他的特点就是不需要连续的箱子，只要有空箱子，我的东西就能放进去。目前我们知道我的东西放在  3 -&gt; 7 -&gt; 2 -&gt; 5 -&gt;13 -&gt;9 箱子， 加入我有一个东西需要放在三和四之间，我只需要申请一个空箱子比如 20， 然后把第三个箱子2的下一个箱子指向20， 然后20的下一个箱子指向原来的5就行了，不用移动后面箱子的东西。这就是链表的好处，但是它的坏处就是，假如我只是查找，只能从头开始查，没有数组那种跳着查的方便。</p>
<p>这时候我们已经看到了，数组方便查询，但不方便插入删除，链表方便插入删除，不方便查询。其实这两个结构已经告诉我们使用场景了：在查询多的场景用数组，在插入删除多的场景用链表。</p>
<h4 id="二叉树">二叉树</h4>
<p>数据并非只有数组和链表这样线性的关系，还可能是家谱一样树形关系。典型的是二叉树，每个节点最多有两个孩子节点。二叉树应用场景主要在查询操作和维持相对顺序。</p>
<p>比如一个二叉树的左子树不为空，所有左子树节点均小于根节点的值，右子树不为空的话，所有右子树节点均大于根节点的值。这样的二叉树叫二叉查找树。不用刻意记名字，根据这样特性构建的数，非常方便查询，只要每次比较根节点，小的往左边找，大的往右边找。</p>
<p>二叉树如果只有左子树或者右子树，那么就会退化成了链表结构。为了避免这种情况，或者树太深层级导致查询困难，就产生了各种类型的数，如红黑树、B树之类。</p>
<h4 id="mysql的b树">MySQL的B+树</h4>
<p>这里说一个典型的mysql索引B+树。我们知道磁盘数据库，要查询数据就要尽可能减少磁盘IO，这样才能加速。于是就有相应场景的B树。它允许每个节点有多于2个的元素，这样可以多存数据，降低数的深度，B+树是在B树的基础上，非叶子节点只有索引功能，数据放在叶子节点上，同时，所有叶子节点构成一个有序链表，这样在limit m, n时候，可以根据找到的一个直接遍历到后边。</p>
<p><img src="https://images0.cnblogs.com/blog/94031/201403/290050088914733.png" alt=""></p>
]]></content></item><item><title>Week1032_tip</title><link>/posts/arts/week1032_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:44 +0000</pubDate><guid>/posts/arts/week1032_tip/</guid><description>ARTS - Tip 补 2019.2.13 linux前后台切换 ctrl + z 和 bg 、fg 最近使用到了Linux命令的前后台切换功能。本来是命令是在前台执行，但是执行时间过长，就想要调到后台执行，于是就找了这一块的知识。
Linux终端，执行命令后加 &amp;amp; 可以让程序在后台运行。注意的是，如果退出终端，程序也停止运行，要永久运行使用 nohup， 后面再讲。
如果程序已经在前台运行，可以用 ctrl+z 调到后台，但是此时程序是暂停的，需要用bg %n 放到后台继续运行
## 前台启动了一个Java程序 java -jar push-1.0.0-GA.jar ## 使用ctrl+z 放到后台，但是此时是挂起的，要想让他在后台运行，就要用 bg %n ^Z [1] + 5618 suspended java -jar push-1.0.0-GA.jar ## 后台运行 bg %1 对于所有运行的程序，可以用 jobs -l 查看
## 查看所有运行中的程序 jobs -l [1] + 5618 running java -jar push-1.0.0-GA.jar 用 fg %n 把后台程序调到前台
## 后台调到前台 fg %1 fg %1 [1] + 5618 running java -jar push-1.</description><content type="html"><![CDATA[<h2 id="arts---tip--补-2019213">ARTS - Tip  补 2019.2.13</h2>
<h2 id="linux前后台切换">linux前后台切换</h2>
<h4 id="ctrl--z-和-bg-fg">ctrl + z 和 bg 、fg</h4>
<p>最近使用到了Linux命令的前后台切换功能。本来是命令是在前台执行，但是执行时间过长，就想要调到后台执行，于是就找了这一块的知识。</p>
<ol>
<li>
<p>Linux终端，执行命令后加 &amp; 可以让程序在后台运行。注意的是，如果退出终端，程序也停止运行，要永久运行使用 nohup， 后面再讲。</p>
</li>
<li>
<p>如果程序已经在前台运行，可以用 ctrl+z 调到后台，但是此时程序是暂停的，需要用bg %n 放到后台继续运行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">## 前台启动了一个Java程序</span>
</span></span><span style="display:flex;"><span>java -jar push-1.0.0-GA.jar
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## 使用ctrl+z 放到后台，但是此时是挂起的，要想让他在后台运行，就要用 bg %n </span>
</span></span><span style="display:flex;"><span>^Z
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">5618</span> suspended  java -jar push-1.0.0-GA.jar
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## 后台运行</span>
</span></span><span style="display:flex;"><span>bg %1
</span></span></code></pre></div></li>
<li>
<p>对于所有运行的程序，可以用 jobs -l 查看</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">## 查看所有运行中的程序</span>
</span></span><span style="display:flex;"><span>jobs -l
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">5618</span> running    java -jar push-1.0.0-GA.jar
</span></span></code></pre></div></li>
<li>
<p>用 fg %n 把后台程序调到前台</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">## 后台调到前台</span>
</span></span><span style="display:flex;"><span>fg %1
</span></span><span style="display:flex;"><span>fg %1
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">5618</span> running    java -jar push-1.0.0-GA.jar
</span></span></code></pre></div></li>
<li>
<p>终止后台命令 kill %n</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">## 终止</span>
</span></span><span style="display:flex;"><span>kill %1
</span></span><span style="display:flex;"><span>2019-05-17 15:37:39.125  INFO <span style="color:#ae81ff">5618</span> --- <span style="color:#f92672">[</span>       Thread-3<span style="color:#f92672">]</span> o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService <span style="color:#e6db74">&#39;applicationTaskExecutor&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">5618</span> exit <span style="color:#ae81ff">143</span>   java -jar push-1.0.0-GA.jar
</span></span></code></pre></div></li>
</ol>
<h4 id="mysql-终端的妙用">mysql 终端的妙用</h4>
<p>很明显，如果需要登录终端看MySQL，那么这套操作就很有用了，如果不想开太多窗口，也不想频繁登录登出，可以登录使用完后直接 ctrl + z 调到后台，需要了再fg %n回来</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">## 用完就 ctrl+z</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>  + <span style="color:#ae81ff">21841</span> suspended  mysql -uroot -proot
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## 再用就fg %1</span>
</span></span><span style="display:flex;"><span>fg %1
</span></span></code></pre></div><h4 id="nohup-的使用">nohup 的使用</h4>
<p>我们已经知道了使用 &amp; 后台运行，关闭终端退出账号程序也会停止，那么如果我们想要一个程序后台持续运行下去，就使用到了nohup。</p>
<p>nohup 是 no hang up ， 不挂断的意思</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">## 不挂断执行command, 输出到myout.file文件</span>
</span></span><span style="display:flex;"><span>nohup command &gt; myout.file 2&gt;&amp;<span style="color:#ae81ff">1</span> &amp;
</span></span></code></pre></div><p>上面的例子， 0 是stdin， 标准输入， 1 是stdout 标准输出， 2是stderr 标准错误</p>
<p>2 &gt; &amp;1 是将标准错误重定向到 标准输出 &amp;1 里，标准输出&amp;1 再被重定向到myout.file里。</p>
<h4 id="nohup-和---的区别">nohup 和 &amp;  的区别</h4>
<p>&amp; 是在后台运行。</p>
<p>Nohup 是不挂断运行，注意并不是后台运行，最后加了个 &amp; 一起，表示不间断的后台运行。</p>
<ol>
<li>sh test.sh &amp; .  将 test.sh任务放到后台，关闭终端，任务停止</li>
<li>nohup sh test.sh  将test.sh放到前台运行，输出到nohup.out 文件，注意这时候使用 ctrl+z ，bg %n是可以放到后台运行的，而且退出终端不会停止任务</li>
<li>Nohup sh test.sh &amp;   将test.sh 放到后台运行，输出到nohup.out文件，退出不会停止任务，和2放后台一样。</li>
</ol>
<p>2 和3 都不会输出日志到终端屏幕，直接输出到了nohup.out</p>
<h4 id="结论"><strong>结论</strong></h4>
<p>使用**&amp;**后台运行程序：</p>
<ul>
<li>结果会输出到终端</li>
<li>使用Ctrl + C发送SIGINT信号，程序免疫</li>
<li>关闭session发送SIGHUP信号，程序关闭</li>
</ul>
<p>使用<strong>nohup</strong>运行程序：</p>
<ul>
<li>结果默认会输出到nohup.out</li>
<li>使用Ctrl + C发送SIGINT信号，程序关闭</li>
<li>关闭session发送SIGHUP信号，程序免疫</li>
</ul>
<p><strong>平日线上经常使用nohup和&amp;配合来启动程序</strong>：</p>
<ul>
<li>同时免疫SIGINT和SIGHUP信号</li>
</ul>
<p>同时，还有一个最佳实践：</p>
<ul>
<li>不要将信息输出到终端标准输出，标准错误输出，而要用日志组件将信息记录到日志里</li>
</ul>
]]></content></item><item><title>Week1033_algorithm</title><link>/posts/arts/week1033_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:44 +0000</pubDate><guid>/posts/arts/week1033_algorithm/</guid><description>ARTS - Algorithm 补 2019.2.20 [61. 旋转链表](https://leetcode-cn.com/problems/rotate-list/submissions/) 题目 给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。
示例 1:
输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, k = 2 输出: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL 解释: 向右旋转 1 步: 5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;NULL 向右旋转 2 步: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL 示例 2:
输入: 0-&amp;gt;1-&amp;gt;2-&amp;gt;NULL, k = 4 输出: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL 解释: 向右旋转 1 步: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL 向右旋转 2 步: 1-&amp;gt;2-&amp;gt;0-&amp;gt;NULL 向右旋转 3 步: 0-&amp;gt;1-&amp;gt;2-&amp;gt;NULL 向右旋转 4 步: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL 分析 这道题实际是找到新头部，和新头部的前驱，把新头部的前驱的后继指向NULL，老尾部指向老头部。
我们知道向前推动了k步，其实就是链表头部向前走了(len - k)步，k &amp;lt; len, 如果k &amp;gt; len, 那么就是 k = k % len。</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补-2019220">ARTS - Algorithm 补 2019.2.20</h2>
<h2 id="61-旋转链表httpsleetcode-cncomproblemsrotate-listhttpsleetcode-cncomproblemsrotate-listsubmissions">[<a href="https://leetcode-cn.com/problems/rotate-list/">61. 旋转链表</a>](<a href="https://leetcode-cn.com/problems/rotate-list/submissions/">https://leetcode-cn.com/problems/rotate-list/submissions/</a>)</h2>
<h4 id="题目">题目</h4>
<p>给定一个链表，旋转链表，将链表每个节点向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p>
<p><strong>示例 1:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">输入</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">3</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">4</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-&gt;</span>NULL<span style="color:#f92672">,</span> k <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">输出</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">3</span><span style="color:#f92672">-&gt;</span>NULL
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">解释</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">向右旋转</span> <span style="color:#ae81ff">1</span> <span style="color:#960050;background-color:#1e0010">步</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">3</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">4</span><span style="color:#f92672">-&gt;</span>NULL
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">向右旋转</span> <span style="color:#ae81ff">2</span> <span style="color:#960050;background-color:#1e0010">步</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">3</span><span style="color:#f92672">-&gt;</span>NULL
</span></span></code></pre></div><p><strong>示例 2:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">输入</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span>NULL<span style="color:#f92672">,</span> k <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">输出</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">0</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span>NULL
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">解释</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">向右旋转</span> <span style="color:#ae81ff">1</span> <span style="color:#960050;background-color:#1e0010">步</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">0</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span>NULL
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">向右旋转</span> <span style="color:#ae81ff">2</span> <span style="color:#960050;background-color:#1e0010">步</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">0</span><span style="color:#f92672">-&gt;</span>NULL
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">向右旋转</span> <span style="color:#ae81ff">3</span> <span style="color:#960050;background-color:#1e0010">步</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span>NULL
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">向右旋转</span> <span style="color:#ae81ff">4</span> <span style="color:#960050;background-color:#1e0010">步</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">0</span><span style="color:#f92672">-&gt;</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-&gt;</span>NULL
</span></span></code></pre></div><h4 id="分析">分析</h4>
<p>这道题实际是找到新头部，和新头部的前驱，把新头部的前驱的后继指向NULL，老尾部指向老头部。</p>
<p>我们知道向前推动了k步，其实就是链表头部向前走了(len - k)步，k &lt; len,  如果k &gt; len, 那么就是 k = k % len。</p>
<p>于是步骤为：</p>
<ol>
<li>找出链表长度 len.</li>
<li>头部向前走 len - (k % len) 步，且记录前驱prev, 此时的头部就是新头部</li>
<li>记录新头部，然后prev 指向null</li>
<li>继续往后走到老队尾，老队尾next指向老头部。</li>
</ol>
<p>继续思考下，如果该链表是环形的，那么我们知道找到新头部，然后断开就行了，所以第4步是可以优化的。</p>
<h4 id="代码">代码</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RotateRightTest</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>ListNode node<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>node <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>node<span style="color:#f92672">.</span><span style="color:#a6e22e">val</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;-&gt;&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ListNode <span style="color:#a6e22e">rotateRight</span><span style="color:#f92672">(</span>ListNode head<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ListNode node <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> len <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            len<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        k <span style="color:#f92672">%=</span> len<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> len <span style="color:#f92672">-</span> k<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        head <span style="color:#f92672">=</span> node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        node<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        ListNode n1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        ListNode n2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ListNode<span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//        ListNode n3 = new ListNode(3);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        ListNode n4 = new ListNode(4);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        ListNode n5 = new ListNode(5);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        n1<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> n2<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//        n2.next = n3;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        n3.next = n4;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        n4.next = n5;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        print<span style="color:#f92672">(</span>n1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        print<span style="color:#f92672">(</span>rotateRight<span style="color:#f92672">(</span>n1<span style="color:#f92672">,</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1028_share</title><link>/posts/arts/week1028_share/</link><pubDate>Fri, 31 Mar 2023 15:45:43 +0000</pubDate><guid>/posts/arts/week1028_share/</guid><description>ARTS - Share 补2019.1.16 快速迭代与流程开发的一点思考 软件工程与互联网 我们很早接受了软件工程的思想，有一套非常标准的工作流程： 客户谈需求、形成用例、完成文档、开发、测试、上线部署等。如果有需求变更，就再走一遍流程，变更的需求大约在下一期上线。
这样的工作流程或准则在业务变更不频繁，时间充裕的传统企业是比较适合的，因为比较好控制质量、成本等。但是在瞬息万变的互联网行业是不行的，因为互联网的特点就是新颖的事物层出不穷，快速响应变化。因此需求变更是常态。如果哪家互联网企业严格按照软件工程那一套，必然容易失去先机，不会成为一流。
技术架构的多变 以业务导向为核心，需求的频繁变更不可避免，那么架构就要适应这个变化。然而现实很容易走极端，过度架构设计保证灵活性可能带来复杂性，如果变更的一点需求需要大量的时间开发、测试，然后上线，最后发现付出的成本远超产生的价值；不进行架构设计，又容易造成重复开发，疲于应付各种意外，造成项目越来越臃肿，直到改无可改，开始重构。那么，该如何思考架构设计？答案是，适度设计。
不可避免的不够“优雅”的代码 面对复杂多变的需求，和时间紧任务重压力下的产品，可能不那么精雕细琢。但是至少在长久运行中长期保持稳定，那么当一个新人接手这块功能，在开始骂代码不够好之前，请先全面的了解系统，了解之前的场景，然后在最简单影响最小的地方开始着手重构，然后测试、运维上线，走完流程后，在进行下一个，相信做过几次重构后肯定会形成更为全面的认知。
质量下降与管控 快速开发，有时不可避免有些问题想的不够周到，质量有下降，比软件工程这种标准流程下的产品质量有所下降，这也是快速的一种代价。因此这种更要注重测试，使用各种自动化的工具，在保证质量与快速迭代之间做平衡。
总结 为了快速推出市场，敏捷不可避免，因此带来的副作用是不那么稳定或bug率提高了，但是依然是值得的，也必须这么做，在做技术决策中始终要综合考虑。</description><content type="html"><![CDATA[<h2 id="arts---share-补2019116">ARTS - Share 补2019.1.16</h2>
<h2 id="快速迭代与流程开发的一点思考">快速迭代与流程开发的一点思考</h2>
<h3 id="软件工程与互联网">软件工程与互联网</h3>
<p>我们很早接受了软件工程的思想，有一套非常标准的工作流程： 客户谈需求、形成用例、完成文档、开发、测试、上线部署等。如果有需求变更，就再走一遍流程，变更的需求大约在下一期上线。</p>
<p>这样的工作流程或准则在业务变更不频繁，时间充裕的传统企业是比较适合的，因为比较好控制质量、成本等。但是在瞬息万变的互联网行业是不行的，因为互联网的特点就是新颖的事物层出不穷，快速响应变化。因此需求变更是常态。如果哪家互联网企业严格按照软件工程那一套，必然容易失去先机，不会成为一流。</p>
<h3 id="技术架构的多变">技术架构的多变</h3>
<p>以业务导向为核心，需求的频繁变更不可避免，那么架构就要适应这个变化。然而现实很容易走极端，过度架构设计保证灵活性可能带来复杂性，如果变更的一点需求需要大量的时间开发、测试，然后上线，最后发现付出的成本远超产生的价值；不进行架构设计，又容易造成重复开发，疲于应付各种意外，造成项目越来越臃肿，直到改无可改，开始重构。那么，该如何思考架构设计？答案是，适度设计。</p>
<h3 id="不可避免的不够优雅的代码">不可避免的不够“优雅”的代码</h3>
<p>面对复杂多变的需求，和时间紧任务重压力下的产品，可能不那么精雕细琢。但是至少在长久运行中长期保持稳定，那么当一个新人接手这块功能，在开始骂代码不够好之前，请先全面的了解系统，了解之前的场景，然后在最简单影响最小的地方开始着手重构，然后测试、运维上线，走完流程后，在进行下一个，相信做过几次重构后肯定会形成更为全面的认知。</p>
<h3 id="质量下降与管控">质量下降与管控</h3>
<p>快速开发，有时不可避免有些问题想的不够周到，质量有下降，比软件工程这种标准流程下的产品质量有所下降，这也是快速的一种代价。因此这种更要注重测试，使用各种自动化的工具，在保证质量与快速迭代之间做平衡。</p>
<h3 id="总结">总结</h3>
<p>为了快速推出市场，敏捷不可避免，因此带来的副作用是不那么稳定或bug率提高了，但是依然是值得的，也必须这么做，在做技术决策中始终要综合考虑。</p>
]]></content></item><item><title>Week1029_algorithm</title><link>/posts/arts/week1029_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:43 +0000</pubDate><guid>/posts/arts/week1029_algorithm/</guid><description>ARTS - Algorithm 补 2019.1.23 19. 删除链表的倒数第N个节点 题目 给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。
示例：
给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2. 当删除了倒数第二个节点后，链表变为 1-&amp;gt;2-&amp;gt;3-&amp;gt;5. 说明：
给定的 n 保证是有效的。
进阶：
你能尝试使用一趟扫描实现吗？
分析 如果没有一趟扫描实现的限制，那么通过两次扫描就能实现： 第一次算出总长度，第二次删除指定节点。但是要求一次扫描就完成，我们有没有更好的思路？
我们根据条件知道 队尾和删除节点相距为 n, 我们可以使用两个指针，距离为n， 然后同步走，先走的指针到达队尾，那么后出发的指针就到了要删除的节点，代码如下：
代码 public ListNode removeNthFromEnd(ListNode head, int n) { if (head == null || n &amp;lt;= 0) { return null; } ListNode first = head; ListNode second = head; for (int i = 0; i &amp;lt; n; i++) { second = second.</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补-2019123">ARTS - Algorithm 补 2019.1.23</h2>
<h2 id="19-删除链表的倒数第n个节点httpsleetcode-cncomproblemsremove-nth-node-from-end-of-list"><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第N个节点</a></h2>
<h3 id="题目">题目</h3>
<p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p>
<p>示例：</p>
<pre tabindex="0"><code>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.
</code></pre><p>说明：</p>
<p>给定的 n 保证是有效的。</p>
<p>进阶：</p>
<p>你能尝试使用一趟扫描实现吗？</p>
<h3 id="分析">分析</h3>
<p>如果没有一趟扫描实现的限制，那么通过两次扫描就能实现： 第一次算出总长度，第二次删除指定节点。但是要求一次扫描就完成，我们有没有更好的思路？</p>
<p>我们根据条件知道 队尾和删除节点相距为 n, 我们可以使用两个指针，距离为n， 然后同步走，先走的指针到达队尾，那么后出发的指针就到了要删除的节点，代码如下：</p>
<h3 id="代码">代码</h3>
<pre tabindex="0"><code>public ListNode removeNthFromEnd(ListNode head, int n) {

        if (head == null || n &lt;= 0) {
            return null;
        }

        ListNode first = head;
        ListNode second = head;
        for (int i = 0; i &lt; n; i++) {
            second = second.next;

        }

        if (second == null) {
            // 第一个first
            return head.next;
        }

        while (second.next != null) {
            first = first.next;
            second = second.next;
        }
        first.next = first.next.next;

        return head;

    }
</code></pre>]]></content></item><item><title>Week1029_review</title><link>/posts/arts/week1029_review/</link><pubDate>Fri, 31 Mar 2023 15:45:43 +0000</pubDate><guid>/posts/arts/week1029_review/</guid><description>ARTS - Review 补2019.1.23 1.5 MySQL8.0服务状态变量和可选性的增加、过时或删除 rotated v. 回转 activate vt. 激活 Options and Variables Introduced in MySQL 8.0 he following system variables, status variables, and options are new in MySQL 8.0, and have not been included in any previous release series. 以下系统变量，状态变量，和可选项是MySQL8.0新增的，在之前的的发布系列中是不包含的。
Acl_cache_items_count: Number of cached privilege objects. Added in MySQL 8.0.0.Each object is the privilege combination of a user and its active roles. 缓存的权限对象数量。MySQL8.0.0添加。 每个对象都是连接一个用户和它的角色的权限。 Audit_log_current_size: Audit log file current size.</description><content type="html"><![CDATA[<h1 id="arts---review-补2019123">ARTS - Review 补2019.1.23</h1>
<h1 id="15-mysql80服务状态变量和可选性的增加过时或删除httpsdevmysqlcomdocrefman80enadded-deprecated-removedhtml"><a href="https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html">1.5 MySQL8.0服务状态变量和可选性的增加、过时或删除</a></h1>
<ul>
<li>rotated v. 回转</li>
<li>activate vt. 激活</li>
</ul>
<h3 id="options-and-variables-introduced-in-mysql-80">Options and Variables Introduced in MySQL 8.0</h3>
<p>he following system variables, status variables, and options are new in MySQL 8.0, and have not been included in any previous release series.
以下系统变量，状态变量，和可选项是MySQL8.0新增的，在之前的的发布系列中是不包含的。</p>
<ul>
<li>Acl_cache_items_count: Number of cached privilege objects. Added in MySQL 8.0.0.Each object is the privilege combination of a user and its active roles.</li>
<li>缓存的权限对象数量。MySQL8.0.0添加。 每个对象都是连接一个用户和它的角色的权限。</li>
<li>Audit_log_current_size: Audit log file current size. Added in MySQL 8.0.11.The value increases when an event is written to the log and is reset to 0 when the log is rotated.</li>
<li>审批日志文件当前的大小。MySQL8.0.11添加的。当一个写入日志事件发生值会增加，当日志回转会重置为0</li>
<li></li>
<li>Audit_log_event_max_drop_size: Size of largest dropped audited event. Added in MySQL 8.0.11.The size of the largest dropped event in performance logging mode</li>
<li>审批时间最大删除大小。MySQL8.0.11添加。在日志记录性能模式下的最大删除大小。</li>
<li>Audit_log_events: Number of handled audited events. Added in MySQL 8.0.11. The number of events handled by the audit log plugin, whether or not they were written to the log based on filtering policy (see Section 6.4.5.5, “Audit Log Logging Configuration”).</li>
<li>处理审批时间的数量。MySQL8.0.11添加。通过审批日志插件处理时间数量，不论是否写入日志，基于过滤机制。</li>
<li>Audit_log_events_filtered: Number of filtered audited events. Added in MySQL 8.0.11.The number of events handled by the audit log plugin that were filtered (not written to the log) based on filtering policy</li>
<li>过滤审批文时间数量。MySQL8.0.11添加。审批日志插件处理的过滤时间的数量。</li>
<li>Audit_log_events_lost: Number of dropped audited events. Added in MySQL 8.0.11.</li>
<li>丢掉的审批事件数量。</li>
<li>Audit_log_events_written: Number of written audited events. Added in MySQL 8.0.11.</li>
<li>写入的审批时间数量。</li>
<li>Audit_log_total_size: Combined size of written audited events. Added in MySQL 8.0.11.</li>
<li>写入的审批时间数量汇总。</li>
<li>Audit_log_write_waits: Number of write-delayed audited events. Added in MySQL 8.0.11.</li>
<li>延迟写入的审批事件数量。</li>
<li>Caching_sha2_password_rsa_public_key: caching_sha2_password authentication plugin RSA public key value. Added in MySQL 8.0.4.</li>
<li>加密插件RAS 公钥值。</li>
<li>Com_alter_resource_group: Count of ALTER RESOURCE GROUP statements. Added in MySQL 8.0.3.</li>
<li>ALTER RESOURCE GROUP 语句数量。</li>
<li>Com_alter_user_default_role: Count of ALTER USER &hellip; DEFAULT ROLE statements. Added in MySQL 8.0.0.</li>
<li>ALTER USER .. DEFAULT ROLE 语句数量。</li>
<li>Com_create_resource_group: Count of CREATE RESOURCE GROUP statements. Added in MySQL 8.0.3.</li>
<li>CREATE RESOURCE GROUP 语句数量。</li>
<li>Com_create_role: Count of CREATE ROLE statements. Added in MySQL 8.0.0.</li>
<li>CREATE ROLE 语句数量。</li>
<li>Com_drop_resource_group: Count of DROP RESOURCE GROUP statements. Added in MySQL 8.0.3.</li>
<li>DROP RESOURCE GROUP 语句数量。</li>
<li>Com_drop_role: Count of DROP ROLE statements. Added in MySQL 8.0.0.</li>
<li>DROP ROLE 语句的数量。</li>
<li>Com_grant_roles: Count of GRANT ROLE statements. Added in MySQL 8.0.0.</li>
<li>GRANT ROLE 语句的数量。</li>
<li>Com_install_component: Count of INSTALL COMPONENT statements. Added in MySQL 8.0.0.</li>
<li>INSTALL COMPONENT 语句数量。</li>
<li>Com_revoke_roles: Count of REVOKE ROLES statements. Added in MySQL 8.0.0.</li>
<li>REVOKE ROLE是语句数量。</li>
<li>Com_set_resource_group: Count of SET RESOURCE GROUP statements. Added in MySQL 8.0.3.</li>
<li>SET RESOURCE GROUP 语句数量。</li>
<li>Com_set_role: Count of SET ROLE statements. Added in MySQL 8.0.0.</li>
<li>Com_uninstall_component: Count of UINSTALL COMPONENT statements. Added in MySQL 8.0.0.</li>
<li>Connection_control_delay_generated: How many times the server delayed a connection request. Added in MySQL 8.0.1.</li>
<li>一次连接服务器延迟的次数。</li>
<li>Current_tls_ca: Current value of ssl_ca system variable. Added in MySQL 8.0.16.</li>
<li>ssl_ca 系统变量当前值</li>
<li>Current_tls_capath: Current value of ssl_capath system variable. Added in MySQL 8.0.16.</li>
<li>系统变量 ssl_capath 当前值。</li>
<li>Current_tls_cert: Current value of ssl_cert system variable. Added in MySQL 8.0.16.</li>
<li>系统变量 ssl_cert 当前值。</li>
<li>Current_tls_cipher: Current value of ssl_cipher system variable. Added in MySQL 8.0.16.</li>
<li>Current_tls_ciphersuites: Current value of tsl_ciphersuites system variable. Added in MySQL 8.0.16.</li>
<li>Current_tls_crl: Current value of ssl_crl system variable. Added in MySQL 8.0.16.</li>
<li>Current_tls_crlpath: Current value of ssl_crlpath system variable. Added in MySQL 8.0.16.</li>
<li>Current_tls_key: Current value of ssl_key system variable. Added in MySQL 8.0.16.</li>
<li>Current_tls_version: Current value of tls_version system variable. Added in MySQL 8.0.16.</li>
<li>Firewall_access_denied: Number of statements rejected by MySQL Enterprise Firewall. Added in MySQL 8.0.11.</li>
<li>MySQL企业防火墙拒绝的语句数量</li>
<li>Firewall_access_granted: Number of statements accepted by MySQL Enterprise Firewall. Added in MySQL 8.0.11.</li>
<li>MySQL企业级防火墙被通过的语句数量。</li>
<li>Firewall_cached_entries: Number of statements recorded by MySQL Enterprise Firewall. Added in MySQL 8.0.11.</li>
<li>MySQL企业防火墙记录的语句数量。</li>
<li>Secondary_engine_execution_count: For future use. Added in MySQL 8.0.13.</li>
<li>未来使用。</li>
<li>activate_all_roles_on_login: Whether to activate all user roles at connect time. Added in MySQL 8.0.2.</li>
<li>连接时激活所有用户角色。</li>
<li>admin_address: IP address to bind to for connections on administrative interface. Added in MySQL 8.0.14.</li>
<li>管理接口上的连接要绑定到的Ip地址。</li>
<li>admin_port: TCP/IP number to use for connections on administrative interface. Added in MySQL 8.0.14.</li>
<li>管理接口的连接使用TCP/IP的数量。</li>
<li>audit-log: Whether to activate the audit log plugin. Added in MySQL 8.0.11.</li>
<li>是否激活审批日志插件。</li>
<li>audit_log_buffer_size: The size of the audit log buffer. Added in MySQL 8.0.11.</li>
<li>审批日志缓冲大小。</li>
<li>audit_log_compression: Audit log file compression method. Added in MySQL 8.0.11.</li>
<li>审批日志文件压缩方法。</li>
<li>audit_log_connection_policy: Audit logging policy for connection-related events. Added in MySQL 8.0.11.</li>
<li>审批日志连接事件策略。</li>
<li>audit_log_current_session: Whether to audit current session. Added in MySQL 8.0.11.</li>
<li>是否审批当前会话。</li>
<li>audit_log_encryption: Audit log file encryption method. Added in MySQL 8.0.11. 审批日志文件加密方法</li>
<li>audit_log_exclude_accounts: Accounts not to audit. Added in MySQL 8.0.11.</li>
<li>不审批的账户。</li>
<li>audit_log_file: The name of the audit log file. Added in MySQL 8.0.11.</li>
<li>审批文件名称。</li>
<li>audit_log_filter_id: ID of current audit log filter. Added in MySQL 8.0.11.</li>
<li>当前审批日志过利器ID。</li>
<li>audit_log_flush: Close and reopen the audit log file. Added in MySQL 8.0.11.</li>
<li>关闭和重新打开审批日志文件。</li>
<li>audit_log_format: The audit log file format. Added in MySQL 8.0.11.</li>
<li>审批文件日志格式。</li>
<li>audit_log_include_accounts: Accounts to audit. Added in MySQL 8.0.11.</li>
<li>审批账户。</li>
<li>audit_log_policy: Audit logging policy. Added in MySQL 8.0.11.</li>
<li>audit_log_read_buffer_size: Audit log file read buffer size. Added in MySQL 8.0.11.</li>
<li>audit_log_rotate_on_size: Close and reopen the audit log file at a certain size. Added in MySQL 8.0.11.</li>
<li>audit_log_statement_policy: Audit logging policy for statement-related events. Added in MySQL 8.0.11.</li>
<li>audit_log_strategy: The audit logging strategy. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_auth_method_name: Authentication method name. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_bind_base_dn: LDAP server base distinguished name. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_bind_root_dn: LDAP server root distinguished name. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_bind_root_pwd: LDAP server root bind password. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_ca_path: LDAP server certificate authority file name. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_group_search_attr: LDAP server group search attribute. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_group_search_filter: LDAP custom group search filter. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_init_pool_size: LDAP server initial connection pool size. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_log_status: LDAP server log level. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_max_pool_size: LDAP server maximum connection pool size. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_server_host: LDAP server host name or IP address. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_server_port: LDAP server port number. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_tls: Whether to use encrypted connections to LDAP server. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_sasl_user_search_attr: LDAP server user search attribute. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_auth_method_name: Authentication method name. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_bind_base_dn: LDAP server base distinguished name. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_bind_root_dn: LDAP server root distinguished name. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_bind_root_pwd: LDAP server root bind password. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_ca_path: LDAP server certificate authority file name. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_group_search_attr: LDAP server group search attribute. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_group_search_filter: LDAP custom group search filter. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_init_pool_size: LDAP server initial connection pool size. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_log_status: LDAP server log level. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_max_pool_size: LDAP server maximum connection pool size. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_server_host: LDAP server host name or IP address. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_server_port: LDAP server port number. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_tls: Whether to use encrypted connections to LDAP server. Added in MySQL 8.0.11.</li>
<li>authentication_ldap_simple_user_search_attr: LDAP server user search attribute. Added in MySQL 8.0.11.</li>
<li>authentication_windows_log_level: Windows authentication plugin logging level. Added in MySQL 8.0.11.</li>
<li>authentication_windows_use_principal_name: Whether to use Windows authentication plugin principal name. Added in MySQL 8.0.11.</li>
<li>binlog_encryption: Enable encryption for binary log files and relay log files on this server. Added in MySQL 8.0.14.</li>
<li>binlog_expire_logs_seconds: Purge binary logs after this many seconds. Added in MySQL 8.0.1.</li>
<li>binlog_rotate_encryption_master_key_at_startup: Rotate the binary log master key at server startup. Added in MySQL 8.0.14.</li>
<li>binlog_row_event_max_size: Binary log max event size. Added in MySQL 8.0.14.</li>
<li>binlog_row_metadata: Configures the amount of table related metadata binary logged when using row-based logging.. Added in MySQL 8.0.1.</li>
<li>binlog_row_value_options: Enables binary logging of partial JSON updates for row-based replication.. Added in MySQL 8.0.3.</li>
<li>binlog_transaction_dependency_history_size: Number of row hashes kept for looking up transaction that last updated some row.. Added in MySQL 8.0.1.</li>
<li>binlog_transaction_dependency_tracking: Source of dependency information (commit timestamps or transaction write sets) from which to assess which transactions can be executed in parallel by slave&rsquo;s multithreaded applier.. Added in MySQL 8.0.1.</li>
<li>caching_sha2_password_auto_generate_rsa_keys: Whether to autogenerate RSA key-pair files. Added in MySQL 8.0.4.</li>
<li>caching_sha2_password_private_key_path: SHA2 authentication plugin private key path name. Added in MySQL 8.0.3.</li>
<li>caching_sha2_password_public_key_path: SHA2 authentication plugin public key path name. Added in MySQL 8.0.3.</li>
<li>connection_control_failed_connections_threshold: Consecutive failed connection attempts before delays occur. Added in MySQL 8.0.1.</li>
<li>connection_control_max_connection_delay: Maximum delay (milliseconds) for server response to failed connection attempts. Added in MySQL 8.0.1.</li>
<li>connection_control_min_connection_delay: Minimum delay (milliseconds) for server response to failed connection attempts. Added in MySQL 8.0.1.</li>
<li>create_admin_listener_thread: Whether to use dedicated listening thread for connections on administrative interface. Added in MySQL 8.0.14.</li>
<li>cte_max_recursion_depth: Common table expression maximum recursion depth. Added in MySQL 8.0.3.</li>
<li>ddl-rewriter: Whether to activate the ddl_rewriter plugin. Added in MySQL 8.0.16.</li>
<li>default_collation_for_utf8mb4: Default collation for utf8mb4 character set. Added in MySQL 8.0.11.</li>
<li>default_table_encryption: The default schema and tablespace encryption setting. Added in MySQL 8.0.16.</li>
<li>dragnet.Status: Result of most recent assignment to dragnet.log_error_filter_rules. Added in MySQL 8.0.12.</li>
<li>dragnet.log_error_filter_rules: Filter rules for error logging. Added in MySQL 8.0.4.</li>
<li>early-plugin-load: Specify plugins to load before loading mandatory built-in plugins and before storage engine initialization. Added in MySQL 8.0.0.</li>
<li>group_replication_autorejoin_tries: Number of tries that a member makes to automatically rejoin the group. Added in MySQL 8.0.16.</li>
<li>group_replication_communication_debug_options: The level of debugging messages for Group Replication components.. Added in MySQL 8.0.3.</li>
<li>group_replication_communication_max_message_size: Maximum message size for Group Replication communications, larger messages are fragmented. Added in MySQL 8.0.16.</li>
<li>group_replication_consistency: The type of transaction consistency guarantee which the group provides. Added in MySQL 8.0.14.</li>
<li>group_replication_exit_state_action: How the instance behaves when it leaves the group involuntarily. Added in MySQL 8.0.12.</li>
<li>group_replication_flow_control_hold_percent: Defines what percentage of the group quota remains unused. Added in MySQL 8.0.2.</li>
<li>group_replication_flow_control_max_commit_quota: Defines the maximum flow control quota of the group. Added in MySQL 8.0.2.</li>
<li>group_replication_flow_control_member_quota_percent: Defines the percentage of the quota that a member should assume is available for itself when calculating the quotas. Added in MySQL 8.0.2.</li>
<li>group_replication_flow_control_min_quota: Controls the lowest flow control quota that can be assigned to a member. Added in MySQL 8.0.2.</li>
<li>group_replication_flow_control_min_recovery_quota: Controls the lowest quota that can be assigned to a member because of another recovering member in the group. Added in MySQL 8.0.2.</li>
<li>group_replication_flow_control_period: Defines how many seconds to wait between flow control iterations. Added in MySQL 8.0.2.</li>
<li>group_replication_flow_control_release_percent: Defines how the group quota should be released when flow control no longer needs to throttle the writer members. Added in MySQL 8.0.2.</li>
<li>group_replication_member_expel_timeout: The time between a suspected failure of a group member and it being expelled from the group, causing a group membership reconfiguration.. Added in MySQL 8.0.13.</li>
<li>group_replication_member_weight: Chance of this member being elected as primary. Added in MySQL 8.0.2.</li>
<li>group_replication_message_cache_size: Maximum memory for the message cache in the group communication engine (XCom). Added in MySQL 8.0.16.</li>
<li>group_replication_recovery_get_public_key: Whether to accept preference about fetching public key from master. Added in MySQL 8.0.4.</li>
<li>group_replication_recovery_public_key_path: To accept public key information. Added in MySQL 8.0.4.</li>
<li>group_replication_unreachable_majority_timeout: How long to wait for network partitions that result in a minority to leave the group. Added in MySQL 8.0.2.</li>
<li>histogram_generation_max_mem_size: Maximum memory for creating histogram statistics. Added in MySQL 8.0.2.</li>
<li>immediate_server_version: The MySQL Server release number of the server that is the immediate master in a replication topology. Added in MySQL 8.0.14.</li>
<li>information_schema_stats_expiry: Expiration setting for cached table statistics. Added in MySQL 8.0.3.</li>
<li>innodb_buffer_pool_debug: Permits multiple buffer pool instances when the buffer pool is less than 1GB in size. Added in MySQL 8.0.0.</li>
<li>innodb_buffer_pool_in_core_file: Controls writing of buffer pool pages to core files. Added in MySQL 8.0.14.</li>
<li>innodb_checkpoint_disabled: Disables checkpoints so that a deliberate server exit always initiates recovery. Added in MySQL 8.0.2.</li>
<li>innodb_ddl_log_crash_reset_debug: A debug option that resets DDL log crash injection counters. Added in MySQL 8.0.3.</li>
<li>innodb_deadlock_detect: Enables or disables deadlock detection. Added in MySQL 8.0.0.</li>
<li>innodb_dedicated_server: Enables automatic configuration of buffer pool size, log file size, and flush method. Added in MySQL 8.0.3.</li>
<li>innodb_directories: Defines directories to scan at startup for tablespace data files. Added in MySQL 8.0.4.</li>
<li>innodb_fsync_threshold: Controls how often InnoDB calls fsync when creating a new file. Added in MySQL 8.0.13.</li>
<li>innodb_log_checkpoint_fuzzy_now: A debug option that forces InnoDB to write a fuzzy checkpoint. Added in MySQL 8.0.13.</li>
<li>innodb_log_spin_cpu_abs_lwm: Minimum amount of CPU usage below which user threads no longer spin while waiting for flushed redo. Added in MySQL 8.0.11.</li>
<li>innodb_log_spin_cpu_pct_hwm: Maximum amount of CPU usage above which user threads no longer spin while waiting for flushed redo. Added in MySQL 8.0.11.</li>
<li>innodb_log_wait_for_flush_spin_hwm: The maximum average log flush time beyond which user threads no longer spin while waiting for flushed redo. Added in MySQL 8.0.11.</li>
<li>innodb_parallel_read_threads: Defines the number of threads for parallel index reads. Added in MySQL 8.0.14.</li>
<li>innodb_print_ddl_logs: Whether or not to print DDL logs to the error log. Added in MySQL 8.0.3.</li>
<li>innodb_redo_log_encrypt: Controls encryption of redo log data for encrypted tablespaces. Added in MySQL 8.0.1.</li>
<li>innodb_scan_directories: Defines directories to scan for tablespace files during InnoDB recovery. Added in MySQL 8.0.2.</li>
<li>innodb_spin_wait_pause_multiplier: Defines a multiplier value used to determine the number of PAUSE instructions in spin-wait loops.. Added in MySQL 8.0.16.</li>
<li>innodb_stats_include_delete_marked: Include delete-marked records when calculating persistent InnoDB statistics. Added in MySQL 8.0.1.</li>
<li>innodb_temp_tablespaces_dir: Session temporary tablespaces path. Added in MySQL 8.0.13.</li>
<li>innodb_tmpdir: The directory location for the temporary table files created during online ALTER TABLE operations. Added in MySQL 8.0.0.</li>
<li>innodb_undo_log_encrypt: Controls encryption of undo log data for encrypted tablespaces. Added in MySQL 8.0.1.</li>
<li>internal_tmp_mem_storage_engine: Defines the storage to use for internal in-memory temporary tables. Added in MySQL 8.0.2.</li>
<li>keyring-migration-destination: Key migration destination keyring plugin. Added in MySQL 8.0.4.</li>
<li>keyring-migration-host: Host name for connecting to running server for key migration. Added in MySQL 8.0.4.</li>
<li>keyring-migration-password: Password for connecting to running server for key migration. Added in MySQL 8.0.4.</li>
<li>keyring-migration-port: TCP/IP port number for connecting to running server for key migration. Added in MySQL 8.0.4.</li>
<li>keyring-migration-socket: Unix socket file or Windows named pipe for connecting to running server for key migration. Added in MySQL 8.0.4.</li>
<li>keyring-migration-source: Key migration source keyring plugin. Added in MySQL 8.0.4.</li>
<li>keyring-migration-user: User name for connecting to running server for key migration. Added in MySQL 8.0.4.</li>
<li>keyring_aws_cmk_id: AWS keyring plugin customer master key ID value. Added in MySQL 8.0.11.</li>
<li>keyring_aws_conf_file: AWS keyring plugin configuration file location. Added in MySQL 8.0.11.</li>
<li>keyring_aws_data_file: AWS keyring plugin storage file location. Added in MySQL 8.0.11.</li>
<li>keyring_aws_region: AWS keyring plugin region. Added in MySQL 8.0.11.</li>
<li>keyring_encrypted_file_data: keyring_encrypted_file plugin data file. Added in MySQL 8.0.11.</li>
<li>keyring_encrypted_file_password: keyring_encrypted_file plugin password. Added in MySQL 8.0.11.</li>
<li>keyring_okv_conf_dir: Oracle Key Vault keyring plugin configuration directory. Added in MySQL 8.0.11.</li>
<li>keyring_operations: Whether keyring operations are enabled. Added in MySQL 8.0.4.</li>
<li>log_error_filter_rules: Filter rules for error logging. Added in MySQL 8.0.2.</li>
<li>log_error_services: Components to use for error logging. Added in MySQL 8.0.2.</li>
<li>log_error_suppression_list: Warning/information error log messages to suppress. Added in MySQL 8.0.13.</li>
<li>log_slow_extra: Whether to write extra information to the slow query log file. Added in MySQL 8.0.14.</li>
<li>mandatory_roles: Automatically granted roles for all users. Added in MySQL 8.0.2.</li>
<li>mysql_firewall_mode: Whether MySQL Enterprise Firewall is operational. Added in MySQL 8.0.11.</li>
<li>mysql_firewall_trace: Whether to enable firewall trace. Added in MySQL 8.0.11.</li>
<li>mysqlx: Whether X Plugin is initialized. Added in MySQL 8.0.11.</li>
<li>mysqlx_interactive_timeout: Number of seconds to wait for interactive clients to timeout. Added in MySQL 8.0.4.</li>
<li>mysqlx_read_timeout: Number of seconds to wait for blocking read operations to complete. Added in MySQL 8.0.4.</li>
<li>mysqlx_wait_timeout: Number of seconds to wait for activity on a connection. Added in MySQL 8.0.4.</li>
<li>mysqlx_write_timeout: Number of seconds to wait for blocking write operations to complete. Added in MySQL 8.0.4.</li>
<li>named_pipe_full_access_group: Name of Windows group granted full access to the named pipe. Added in MySQL 8.0.14.</li>
<li>no-dd-upgrade: Prevent automatic upgrade of data dictionary tables at startup. Added in MySQL 8.0.4.</li>
<li>no-monitor: Do not fork monitor process required for RESTART. Added in MySQL 8.0.12.</li>
<li>original_commit_timestamp: The time when a transaction was committed on the original master. Added in MySQL 8.0.1.</li>
<li>original_server_version: The MySQL Server release number of the server where a transaction was originally committed. Added in MySQL 8.0.14.</li>
<li>partial_revokes: Whether partial revocation is enabled. Added in MySQL 8.0.16.</li>
<li>password_history: Number of password changes required before password reuse. Added in MySQL 8.0.3.</li>
<li>password_require_current: Whether password changes require current password verification. Added in MySQL 8.0.13.</li>
<li>password_reuse_interval: Number of days elapsed required before password reuse. Added in MySQL 8.0.3.</li>
<li>performance_schema_max_digest_sample_age: The query resample age in seconds. Added in MySQL 8.0.3.</li>
<li>persist_only_admin_x509_subject: SSL certificate X.509 Subject that enables persisting persist-restricted system variables. Added in MySQL 8.0.14.</li>
<li>persisted_globals_load: Whether to load persisted configuration settings. Added in MySQL 8.0.0.</li>
<li>print_identified_with_as_hex: For SHOW CREATE USER, print hash values containing unprintable characters in hex. Added in MySQL 8.0.17.</li>
<li>regexp_stack_limit: Regular expression match stack size limit. Added in MySQL 8.0.4.</li>
<li>regexp_time_limit: Regular expression match timeout. Added in MySQL 8.0.4.</li>
<li>resultset_metadata: Whether the server returns result set metadata. Added in MySQL 8.0.3.</li>
<li>rpl_read_size: Set the minimum amount of data in bytes that is read from the binary log files and relay log files. Added in MySQL 8.0.11.</li>
<li>secondary_engine_cost_threshold: For future use. Added in MySQL 8.0.16.</li>
<li>show_create_table_verbosity: Whether to display ROW_FORMAT in SHOW CREATE TABLE even if it has the default value. Added in MySQL 8.0.11.</li>
<li>sql_require_primary_key: Whether tables must have a primary key. Added in MySQL 8.0.13.</li>
<li>ssl_fips_mode: Whether to enable FIPS mode on server side. Added in MySQL 8.0.11.</li>
<li>syseventlog.facility: Facility for syslog messages. Added in MySQL 8.0.13.</li>
<li>syseventlog.include_pid: Whether to include server PID in syslog messages. Added in MySQL 8.0.13.</li>
<li>syseventlog.tag: Tag for server identifier in syslog messages. Added in MySQL 8.0.13.</li>
<li>table_encryption_privilege_check: Enables the TABLE_ENCRYPTION_ADMIN privilege check. Added in MySQL 8.0.16.</li>
<li>temptable_max_ram: Defines the maximum amount of memory that can occupied by the TempTable storage engine before data is stored on disk. Added in MySQL 8.0.2.</li>
<li>temptable_use_mmap: Defines whether the TempTable storage engine allocates memory-mapped files when the temptable_max_ram threshold is reached.. Added in MySQL 8.0.16.</li>
<li>thread_pool_algorithm: The thread pool algorithm. Added in MySQL 8.0.11.</li>
<li>thread_pool_high_priority_connection: Whether the current session is high priority. Added in MySQL 8.0.11.</li>
<li>thread_pool_max_unused_threads: The maximum permitted number of unused threads. Added in MySQL 8.0.11.</li>
<li>thread_pool_prio_kickup_timer: How long before a statement is moved to high-priority execution. Added in MySQL 8.0.11.</li>
<li>thread_pool_size: Number of thread groups in the thread pool. Added in MySQL 8.0.11.</li>
<li>thread_pool_stall_limit: How long before a statement is defined as stalled. Added in MySQL 8.0.11.</li>
<li>tls_ciphersuites: TLSv1.3 ciphersuites permitted for encrypted connections. Added in MySQL 8.0.16.</li>
<li>upgrade: Control automatic upgrade at startup. Added in MySQL 8.0.16.</li>
<li>use_secondary_engine: For future use. Added in MySQL 8.0.13.</li>
<li>validate-config: Validate server configuration. Added in MySQL 8.0.16.</li>
<li>validate_password.check_user_name: Whether to check passwords against user name. Added in MySQL 8.0.4.</li>
<li>validate_password.dictionary_file: validate_password dictionary file. Added in MySQL 8.0.4.</li>
<li>validate_password.dictionary_file_last_parsed: When the dictionary file was last parsed. Added in MySQL 8.0.4.</li>
<li>validate_password.dictionary_file_words_count: Number of words in dictionary file. Added in MySQL 8.0.4.</li>
<li>validate_password.length: validate_password required password length. Added in MySQL 8.0.4.</li>
<li>validate_password.mixed_case_count: validate_password required number of uppercase/lowercase characters. Added in MySQL 8.0.4.</li>
<li>validate_password.number_count: validate_password required number of digit characters. Added in MySQL 8.0.4.</li>
<li>validate_password.policy: validate_password password policy. Added in MySQL 8.0.4.</li>
<li>validate_password.special_char_count: validate_password required number of special characters. Added in MySQL 8.0.4.</li>
<li>version_compile_zlib: Version of compiled-in zlib library. Added in MySQL 8.0.11.</li>
<li>windowing_use_high_precision: Whether to compute window functions to high precision. Added in MySQL 8.0.2.</li>
</ul>
]]></content></item><item><title>Week1029_share</title><link>/posts/arts/week1029_share/</link><pubDate>Fri, 31 Mar 2023 15:45:43 +0000</pubDate><guid>/posts/arts/week1029_share/</guid><description>ARTS - Share 补2019.1.23 再谈代码规范 为什么要有规范 代码是方便给人读的，机器码是方便给机器读的。
探本溯源来看代码这个问题。为什么会出现不同的编程语言？为什么不直接使用机器码0，1或汇编来进行编程？为什么进化出了一大堆语言，比如适合做系统开发的C，面向对象的C++、Java， 浏览器方面的JavaScript ?我们多问几遍为什么，就离答案不远了，—— 为了方便我们人类工作。
并非人人都是冯诺依曼 冯诺依曼是个天才，当我们在争论&amp;quot;PHP是最好的语言&amp;quot;时候，人家认为的最好的语言是汇编，因为汇编可以做到一切。我们软件、互联网行业并非人人都是开宗立派级的大师，还有很多水平一般的从业者，他们的目的并非是研究一门性能卓越的语言或开拓一个技术新领域，而是使用现有的技术手段完成任务。 相信大多数人都是这样，基于这个目的，我们需要的就是一个 人类逻辑习惯与计算机性能之间平衡最好的语言。于是就出现了各种编程语言，慢慢形成了各自的适应领域。
合作编程 说了这么多，其实就是为了说明我们为了一个完成一个目的而编程，大多数人都是互相合作配合来完成这个任务，也就是合作编程。这时候我们的代码就需要可读性了。可读性是个很重要的指标，有人戏说，别人读你代码骂的次数和你代码质量成反比。这就一定程度反映了代码可读性问题。所以写出正确、可读、优雅的代码就是一个很重要的能力。巧合的是，简单优雅的代码往往性能表现也突出，所以，我们追求优雅的代码就成了一个正确的方向。注明的KISS(Keep It Sample Stupid)原则就是反映这一点。
编程规范 所以规范就出来，目的就是为了保证可读性与性能，比如：
命名规范。命名太重要的，好的名字见名知意，为什么需要写注释？因为名字不好。
避免设计臃肿的代码。一个方法最好能一个屏幕读完，简单明了，多了说明你需要重构了。
避免在for循环里操作数据库，最好提出来批处理。
if/else ，如果else逻辑简短但if繁多，就把 else 内容提前面。比如在循环里这种应该直接把 else 提前面
// 反例 for (xxx) { if (abc) { 1. ... 2. ... 3. ... ... } else { continue; } } // 正例 for (xxx) { if (!abc) { continue; } 1. ... 2. ... 3. ... ... } 变量名尽量不重复。避免在多次使用到的变量来回改值，这样不方便追踪。</description><content type="html"><![CDATA[<h2 id="arts---share-补2019123">ARTS - Share 补2019.1.23</h2>
<h2 id="再谈代码规范">再谈代码规范</h2>
<h3 id="为什么要有规范">为什么要有规范</h3>
<p><strong>代码是方便给人读的，机器码是方便给机器读的</strong>。</p>
<p>探本溯源来看代码这个问题。为什么会出现不同的编程语言？为什么不直接使用机器码0，1或汇编来进行编程？为什么进化出了一大堆语言，比如适合做系统开发的C，面向对象的C++、Java， 浏览器方面的JavaScript ?我们多问几遍为什么，就离答案不远了，—— 为了方便我们人类工作。</p>
<h3 id="并非人人都是冯诺依曼">并非人人都是冯诺依曼</h3>
<p>冯诺依曼是个天才，当我们在争论&quot;PHP是最好的语言&quot;时候，人家认为的最好的语言是汇编，因为汇编可以做到一切。我们软件、互联网行业并非人人都是开宗立派级的大师，还有很多水平一般的从业者，他们的目的并非是研究一门性能卓越的语言或开拓一个技术新领域，而是<strong>使用现有的技术手段完成任务。</strong> 相信大多数人都是这样，基于这个目的，我们需要的就是一个 人类逻辑习惯与计算机性能之间平衡最好的语言。于是就出现了各种编程语言，慢慢形成了各自的适应领域。</p>
<h3 id="合作编程">合作编程</h3>
<p>说了这么多，其实就是为了说明我们为了一个完成一个目的而编程，大多数人都是互相合作配合来完成这个任务，也就是合作编程。这时候我们的代码就需要<strong>可读性</strong>了。可读性是个很重要的指标，有人戏说，别人读你代码骂的次数和你代码质量成反比。这就一定程度反映了代码可读性问题。所以写出正确、可读、优雅的代码就是一个很重要的能力。巧合的是，简单优雅的代码往往性能表现也突出，所以，我们追求优雅的代码就成了一个正确的方向。注明的KISS(Keep It Sample Stupid)原则就是反映这一点。</p>
<h3 id="编程规范">编程规范</h3>
<p>所以规范就出来，目的就是为了保证可读性与性能，比如：</p>
<ul>
<li>
<p>命名规范。命名太重要的，好的名字见名知意，为什么需要写注释？因为名字不好。</p>
</li>
<li>
<p>避免设计臃肿的代码。一个方法最好能一个屏幕读完，简单明了，多了说明你需要重构了。</p>
</li>
<li>
<p>避免在for循环里操作数据库，最好提出来批处理。</p>
</li>
<li>
<p>if/else ，如果else逻辑简短但if繁多，就把 else 内容提前面。比如在循环里这种应该直接把 else 提前面</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 反例
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>xxx<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>abc<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">1.</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">2.</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">3.</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 正例
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>xxx<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>abc<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">1.</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">2.</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">3.</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>变量名尽量不重复。避免在多次使用到的变量来回改值，这样不方便追踪。</p>
</li>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 反例
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span><span style="color:#a6e22e">findCount</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>a <span style="color:#f92672">&gt;</span> count<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	count <span style="color:#f92672">=</span> a <span style="color:#f92672">-</span> count <span style="color:#f92672">-</span> x<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>count <span style="color:#f92672">&gt;</span><span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		b <span style="color:#f92672">=</span> b <span style="color:#f92672">+</span> count<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 正例
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span><span style="color:#a6e22e">findCount</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>a <span style="color:#f92672">&gt;</span> count<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> num <span style="color:#f92672">=</span> a <span style="color:#f92672">-</span> count <span style="color:#f92672">-</span> x<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>num <span style="color:#f92672">&gt;</span><span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		b <span style="color:#f92672">=</span> b <span style="color:#f92672">+</span> num<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
<li>
<p>代码格式化。这条很简单，很多编辑器都带自动排版的功能，但是仍然大量存在没有格式化的代码。</p>
</li>
</ul>
<p>更多关于规范的请参考这篇文章<a href="https://time.geekbang.org/column/article/8700">程序员修养</a></p>
<h3 id="面向xx编程">面向xx编程</h3>
<p>最近和小伙伴讨论了一个话题，如何写出优质的代码。有人提出TDD，测试驱动开发，直接先开发测试代码，再为满足测试写业务代码，这样能避免很多低级问题。有人提出代码审查机制，避免提交不规范的代码。更有人提出，<strong>面向离职编程</strong>，也就是说把你当前工作当做去赴下一个翻倍薪资的工作离职前的交接，把各种文档、代码注释写的清清楚楚，坚持一段时间后你会发现，你的代码可读性上了一个大台阶。</p>
]]></content></item><item><title>Week1029_tip</title><link>/posts/arts/week1029_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:43 +0000</pubDate><guid>/posts/arts/week1029_tip/</guid><description>ARTS - Tip 补2019.1.23 线程池的execute 方法 源码 线程池提交两种任务，一种是无返回值的，就是execute, 另一种是有返回值的submit,下次讲。
先来看源码：
public void execute(Runnable command) { if (command == null) throw new NullPointerException(); /* * 三步处理: * 1. 如果比核心线程数小，会尝试打开一个新线程来执行任务。调用addWorker自动检查runState状态和workerCount 运行中的任务数，添加失败返回false. * 2. 如果一个任务可以入队成功，仍要二次校验是否添加成功(因为存在上次检查过后就消亡了)。 * 3. 如果任务不能入队，尝试添加一个新线程，如果失败，我们知道线程池关闭或队列饱和，拒绝任务。 */ // 获得线程池(包含状态 + 数量) int c = ctl.get(); if (workerCountOf(c) &amp;lt; corePoolSize) { if (addWorker(command, true)) return; c = ctl.get(); } if (isRunning(c) &amp;amp;&amp;amp; workQueue.offer(command)) { int recheck = ctl.get(); if (! isRunning(recheck) &amp;amp;&amp;amp; remove(command)) reject(command); else if (workerCountOf(recheck) == 0) addWorker(null, false); } else if (!</description><content type="html"><![CDATA[<h2 id="arts---tip-补2019123">ARTS - Tip 补2019.1.23</h2>
<h2 id="线程池的execute-方法">线程池的execute 方法</h2>
<h3 id="源码">源码</h3>
<p>线程池提交两种任务，一种是无返回值的，就是execute, 另一种是有返回值的submit,下次讲。</p>
<p>先来看源码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">execute</span><span style="color:#f92672">(</span>Runnable command<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>command <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> NullPointerException<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         * 三步处理:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         * 1. 如果比核心线程数小，会尝试打开一个新线程来执行任务。调用addWorker自动检查runState状态和workerCount 运行中的任务数，添加失败返回false.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         * 2. 如果一个任务可以入队成功，仍要二次校验是否添加成功(因为存在上次检查过后就消亡了)。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         * 3. 如果任务不能入队，尝试添加一个新线程，如果失败，我们知道线程池关闭或队列饱和，拒绝任务。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// 获得线程池(包含状态 + 数量)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>workerCountOf<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;</span> corePoolSize<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>addWorker<span style="color:#f92672">(</span>command<span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            c <span style="color:#f92672">=</span> ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isRunning<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">offer</span><span style="color:#f92672">(</span>command<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> recheck <span style="color:#f92672">=</span> ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span> isRunning<span style="color:#f92672">(</span>recheck<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> remove<span style="color:#f92672">(</span>command<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                reject<span style="color:#f92672">(</span>command<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>workerCountOf<span style="color:#f92672">(</span>recheck<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                addWorker<span style="color:#f92672">(</span><span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>addWorker<span style="color:#f92672">(</span>command<span style="color:#f92672">,</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>            reject<span style="color:#f92672">(</span>command<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="辅助方法workercountofc--isrunningc">辅助方法：workerCountOf(c) , isRunning(c)</h3>
<p>在看addWorker之前，先看看到底怎么获得工作线程数和状态的，我们已知到32位原子变量的前三位是状态，后29位是数量：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>		<span style="color:#75715e">// Packing and unpacking ctl
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// 对后29位数量位取反后按位与， 获得状态
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">runStateOf</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> c<span style="color:#f92672">)</span>     <span style="color:#f92672">{</span> <span style="color:#66d9ef">return</span> c <span style="color:#f92672">&amp;</span> <span style="color:#f92672">~</span>CAPACITY<span style="color:#f92672">;</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 直接 32位 和29 位按位与，获得后29位数字(32位前三位000)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">workerCountOf</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> c<span style="color:#f92672">)</span>  <span style="color:#f92672">{</span> <span style="color:#66d9ef">return</span> c <span style="color:#f92672">&amp;</span> CAPACITY<span style="color:#f92672">;</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// 按位或，获得包装后的线程池代数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">ctlOf</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> rs<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> wc<span style="color:#f92672">)</span> <span style="color:#f92672">{</span> <span style="color:#66d9ef">return</span> rs <span style="color:#f92672">|</span> wc<span style="color:#f92672">;</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// 比SHUTDOWN 小的只能是RUNNING了
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isRunning</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> c<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> c <span style="color:#f92672">&lt;</span> SHUTDOWN<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="addworker">addWorker</h3>
<p>再来看最重要的addWorker方法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      检查一个任务是否被正常添加成功不会越界。如果成功worker 数量增加，如果可能一个新
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      线程创建启动，该任务作为线程第一个任务执行。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      如果线程池关闭或正在shutdown, 返回false.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      如果线程工厂创建线程失败，也返回false.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">      如果线程创建失败，无论是线程工厂返回null或异常(OOM错误在Thread.start())，直接回滚。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       @param firstTask 新线程应该第一个运行的任务。当线程数小于核心线程 任务会入队，队列满时候，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       非核心线程创建执行任务。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       @param core 如果true, 使用corePoolSize 作为边界，否则使用maximumPoolSize.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return 添加成功返回true
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">addWorker</span><span style="color:#f92672">(</span>Runnable firstTask<span style="color:#f92672">,</span> <span style="color:#66d9ef">boolean</span> core<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 死循环标签
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        retry<span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(;;)</span> <span style="color:#f92672">{</span> <span style="color:#75715e">// 死循环
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          
</span></span><span style="display:flex;"><span>          	<span style="color:#75715e">// 获得当前池子情况
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> rs <span style="color:#f92672">=</span> runStateOf<span style="color:#f92672">(</span>c<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// Check if queue empty only if necessary.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	<span style="color:#75715e">// 1. 如果不是RUNNING状态， rs &gt; SHUTDOWN 直接返回 false,不接受新线程
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	<span style="color:#75715e">// 2. 如果是 SHUTDOWN 状态， 并且firstTask != null 那么还是返回false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	<span style="color:#75715e">// 3. 如果是 SHUTDOWN 状态， 并且firstTask == null , 而且 workQueue不为空，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	<span style="color:#75715e">// 	可以增加 first==null 的worker，来消耗队列中的任务。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	<span style="color:#75715e">// 结论：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	<span style="color:#75715e">// rs &gt; SHUTDOWN ，说明是STOP或以上状态，会关闭所有线程同时移除QUEUE中所有待执行线程的，所以不需要增加 firstWorker == null 的Worker了。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	<span style="color:#75715e">// SHUTDOWN 状态下，只能增加 firstWorker == null 的线程，主要为了消耗 队列中的任务
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>rs <span style="color:#f92672">&gt;=</span> SHUTDOWN <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">!</span> <span style="color:#f92672">(</span>rs <span style="color:#f92672">==</span> SHUTDOWN <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>                   firstTask <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>                   <span style="color:#f92672">!</span> workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">()))</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          	<span style="color:#75715e">// RUNNING状态继续往下走，进入内部死循环
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(;;)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>              	<span style="color:#75715e">// 获得线程数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">int</span> wc <span style="color:#f92672">=</span> workerCountOf<span style="color:#f92672">(</span>c<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>              	<span style="color:#75715e">// 如果线程数大于最大容量 或者 大于核心线程数 或者 设置的最大线程数，返回false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>wc <span style="color:#f92672">&gt;=</span> CAPACITY <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span>                    wc <span style="color:#f92672">&gt;=</span> <span style="color:#f92672">(</span>core <span style="color:#f92672">?</span> corePoolSize <span style="color:#f92672">:</span> maximumPoolSize<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>              	<span style="color:#75715e">// 原子操作，增加线程数，增加成功，跳出 retry 外部死循环
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>compareAndIncrementWorkerCount<span style="color:#f92672">(</span>c<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span> retry<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>              	<span style="color:#75715e">// 如果线程增加失败, 获得线程状态，如果还是rs状态，就继续增加尝试
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>              	<span style="color:#75715e">// 如果已经不是rs状态，跳出内部循环，去外部检查状态再说
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                c <span style="color:#f92672">=</span> ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>  <span style="color:#75715e">// Re-read ctl
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>runStateOf<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> <span style="color:#f92672">!=</span> rs<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">continue</span> retry<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// else CAS failed due to workerCount change; retry inner loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 走到这里说明已经成功记录了线程数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 初始化 线程启动状态为false, 线程添加状态为false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">boolean</span> workerStarted <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">boolean</span> workerAdded <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 这个 Worker 其实就是 Thread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        Worker w <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          	<span style="color:#75715e">// 这里创建线程, 创建过程我们先按下不表。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          	<span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          	* Worker(Runnable firstTask) {
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">              setState(-1); // inhibit interrupts until runWorker
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">              this.firstTask = firstTask;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">              this.thread = getThreadFactory().newThread(this);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        			}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">          	*/</span>
</span></span><span style="display:flex;"><span>            w <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Worker<span style="color:#f92672">(</span>firstTask<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">final</span> Thread t <span style="color:#f92672">=</span> w<span style="color:#f92672">.</span><span style="color:#a6e22e">thread</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>          	<span style="color:#75715e">// 线程创建成功的情况下
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>              	<span style="color:#75715e">// 加锁操作
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">final</span> ReentrantLock mainLock <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">mainLock</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                mainLock<span style="color:#f92672">.</span><span style="color:#a6e22e">lock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e">// Recheck while holding lock.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    <span style="color:#75715e">// Back out on ThreadFactory failure or if
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    <span style="color:#75715e">// shut down before lock acquired.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                  	<span style="color:#75715e">// 再次检查 获得锁期间是否发生了状态改变
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    <span style="color:#66d9ef">int</span> rs <span style="color:#f92672">=</span> runStateOf<span style="color:#f92672">(</span>ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                  	<span style="color:#75715e">// 只能是 RUNNING状态，或者SHUTDOWN状态同时 firstTask为空 情况才能走下边
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>rs <span style="color:#f92672">&lt;</span> SHUTDOWN <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">(</span>rs <span style="color:#f92672">==</span> SHUTDOWN <span style="color:#f92672">&amp;&amp;</span> firstTask <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                      	<span style="color:#75715e">// 检查线程任务 t 是否在等待启动，不是就抛异常
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">isAlive</span><span style="color:#f92672">())</span> <span style="color:#75715e">// precheck that t is startable
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalThreadStateException<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                      	<span style="color:#75715e">// 添加任务到HashSet结构
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                        workers<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>w<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">int</span> s <span style="color:#f92672">=</span> workers<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">&gt;</span> largestPoolSize<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                            largestPoolSize <span style="color:#f92672">=</span> s<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                        workerAdded <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    mainLock<span style="color:#f92672">.</span><span style="color:#a6e22e">unlock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>              	<span style="color:#75715e">// 添加成功，就启动线程
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>workerAdded<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    t<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                    workerStarted <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span> workerStarted<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                addWorkerFailed<span style="color:#f92672">(</span>w<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> workerStarted<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * Rolls back the worker thread creation.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * - removes worker from workers, if present
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * - decrements worker count
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * - rechecks for termination, in case the existence of this
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *   worker was holding up termination
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     	添加worker失败，就回滚操作
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     	1. 删除wokers里添加的wokers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     	2. 减少 worker 数量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     	3. 再次检查，防止在termination还持有workers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">addWorkerFailed</span><span style="color:#f92672">(</span>Worker w<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> ReentrantLock mainLock <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">mainLock</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        mainLock<span style="color:#f92672">.</span><span style="color:#a6e22e">lock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>w <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                workers<span style="color:#f92672">.</span><span style="color:#a6e22e">remove</span><span style="color:#f92672">(</span>w<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            decrementWorkerCount<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            tryTerminate<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            mainLock<span style="color:#f92672">.</span><span style="color:#a6e22e">unlock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1030_algorithm</title><link>/posts/arts/week1030_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:43 +0000</pubDate><guid>/posts/arts/week1030_algorithm/</guid><description>ARTS - Algorithm 补2019.1.30 23. 合并K个排序链表 题目 合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。
示例:
输入: [ 1-&amp;gt;4-&amp;gt;5, 1-&amp;gt;3-&amp;gt;4, 2-&amp;gt;6 ] 输出: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6 分析 相当于合并多个有序数组，也可以先合并两个有序数组，再合并剩下的，于是代码如下：
代码： public class MergeKLists { public static ListNode mergeKLists(ListNode[] lists) { int len = lists.length; if (len == 0) { return null; } ListNode res = lists[0]; for (int i = 1; i &amp;lt; len; i++) { res = mergeNode(res, lists[i]); } return res; } private static ListNode mergeNode(ListNode node1, ListNode node2) { ListNode fake = new ListNode(0); ListNode head = fake; while (node1 !</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补2019130">ARTS - Algorithm 补2019.1.30</h2>
<h2 id="23-合并k个排序链表httpsleetcode-cncomproblemsmerge-k-sorted-listssubmissions"><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/submissions/">23. 合并K个排序链表</a></h2>
<h3 id="题目">题目</h3>
<p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>
<p>示例:</p>
<pre tabindex="0"><code>输入:
[
  1-&gt;4-&gt;5,
  1-&gt;3-&gt;4,
  2-&gt;6
]
输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6
</code></pre><h3 id="分析">分析</h3>
<p>相当于合并多个有序数组，也可以先合并两个有序数组，再合并剩下的，于是代码如下：</p>
<h3 id="代码">代码：</h3>
<pre tabindex="0"><code>public class MergeKLists {


    public static ListNode mergeKLists(ListNode[] lists) {


        int len = lists.length;

        if (len == 0) {
            return null;
        }

        ListNode res = lists[0];
        for (int i = 1; i &lt; len; i++) {

            res = mergeNode(res, lists[i]);

        }

        return res;

    }

    private static ListNode mergeNode(ListNode node1, ListNode node2) {

        ListNode fake = new ListNode(0);
        ListNode head = fake;

        while (node1 != null &amp;&amp; node2 != null) {
            if (node1.val &lt; node2.val) {
                head.next = node1;
                node1 = node1.next;
            } else {
                head.next = node2;
                node2 = node2.next;
            }
            head = head.next;
        }

        if (node1 == null) {
            head.next = node2;
        }
        if (node2 == null) {
            head.next = node1;
        }

        return fake.next;
    }

    public static void main(String[] args) {
        ListNode n1 = new ListNode(1);
        ListNode n2 = new ListNode(4);
        ListNode n3 = new ListNode(5);
        n1.next = n2;
        n2.next = n3;

        ListNode n4 = new ListNode(2);
        ListNode n5 = new ListNode(4);
        n4.next = n5;

        System.out.println(&#34;------&#34;);
        print(n1);
        System.out.println(&#34;\n------&#34;);
        print(n4);
        System.out.println(&#34;\n------&#34;);
        print(mergeKLists(new ListNode[]{null}));
//        print(mergeKLists(new ListNode[]{n1, n4}));


    }


    private static void print(ListNode node) {
        while (node != null) {
            System.out.print(node.val + &#34;-&gt;&#34;);

            node = node.next;


        }
    }
}
</code></pre>]]></content></item><item><title>Week1030_review</title><link>/posts/arts/week1030_review/</link><pubDate>Fri, 31 Mar 2023 15:45:43 +0000</pubDate><guid>/posts/arts/week1030_review/</guid><description>ARTS - Reivew 补2019.1.30 As a Leader, Time Is Your Most Valuable Resource 来自 Medium, 作者 Dave Anderson As a Leader, Time Is Your Most Valuable Resource
Inquire v.调查 查究 Occasionally adv. 偶尔 candidate n. 候选人 thrive v.兴旺发达，茁壮成长 variation n. 变种，变体 critical adj. 批评的，挑剔的，极重要的 packed adj. 异常拥挤的 infinite adj. 极大的，无限的 fire hose 消防水管 abate vt. 减少 throttle v. 使窒息，掐死， prioritizing v. 优先排序 guaranteed adj. 必然的 eventually adv. 最后，终于 dividends n. 红利，股息 Identify v.</description><content type="html"><![CDATA[<h2 id="arts---reivew-补2019130">ARTS - Reivew 补2019.1.30</h2>
<h2 id="as-a-leader-time-is-your-most-valuable-resource">As a Leader, Time Is Your Most Valuable Resource</h2>
<p>来自 Medium, 作者  Dave Anderson <a href="https://medium.com/s/please-advise/as-a-leader-time-is-your-most-valuable-resource-133ae50ccba4">As a Leader, Time Is Your Most Valuable Resource</a></p>
<ul>
<li>Inquire v.调查 查究</li>
<li>Occasionally adv. 偶尔</li>
<li>candidate n. 候选人</li>
<li>thrive v.兴旺发达，茁壮成长</li>
<li>variation n. 变种，变体</li>
<li>critical adj. 批评的，挑剔的，极重要的</li>
<li>packed adj. 异常拥挤的</li>
<li>infinite adj. 极大的，无限的</li>
<li>fire hose  消防水管</li>
<li>abate vt. 减少</li>
<li>throttle v. 使窒息，掐死，</li>
<li>prioritizing v. 优先排序</li>
<li>guaranteed adj. 必然的</li>
<li>eventually adv. 最后，终于</li>
<li>dividends n. 红利，股息</li>
<li>Identify v. 确认身份，鉴别</li>
<li>approval n. 赞成，通过</li>
<li>tight adj. 牢固的，严格的</li>
<li>assume v. 假定</li>
<li>mechanism n. 机制，方法</li>
<li>literally adv. 真正地，</li>
<li>potential adj. 潜在的，可能的</li>
<li>pedaling 踏板</li>
<li>massive adj. 巨大的，非常严重的</li>
<li>leverage n. 影响力</li>
<li>drastic adj. 极端的</li>
<li>affirmative adj. 肯定的</li>
<li>mentees 学员</li>
<li>rare adj. 稀少的</li>
<li>justify v. 证明</li>
<li>delegated v. 授权，委托</li>
<li>involved adj. 参与，作为一部分</li>
<li>depriving  v. 剥夺</li>
<li>recipients n. 接受方</li>
<li>remedy n. 处理方法.</li>
<li>permanent adj. 长久的</li>
</ul>
<p>During interviews at Amazon, we allow five minutes for questions at the end. Some people ask about the team they’ll be working with, while others inquire about the technology they’ll be using.</p>
<p>在亚马逊面试期间，我们允许最后五分钟提问。有些人问他们将会一起工作的团队，有些人问他们将会用到的技术。</p>
<p>Occasionally a candidate says, “I’ve heard Amazon can be a really hard place to work. Some people thrive and some people fail. Why is that, and how can I avoid joining the ranks of those who fail?”</p>
<p>偶尔一个候选人说，&ldquo;我听说亚马逊可能是一个工作非常困难的地方。有些人茁壮成长，有些人黯然退场。为什么会这样，我怎么能够避免加入到失败者行列？&rdquo;</p>
<p>This is a great question. I have heard a variation of this statement at Amazon dozens of times over the years:</p>
<p>这是一个非常好的问题。这些年我在亚马逊也听过这种话的几十种变体：</p>
<blockquote>
<p>I’m going to lose my mind! I have 14 direct reports and one critical project on fire, and my calendar is completely packed. The only way I can make any progress is by working after my team goes home. I’m not sure how much longer I can take it.</p>
<p>我要疯了！我有14个直接报告和一个极重要的项目在做，我的日程非常拥挤了。我能推进我工作的唯一办法就是下班回家继续工作。我不确定我还能坚持多久。</p>
</blockquote>
<p>My usual answer to the interviewee is this:</p>
<p>我通常是这么回答面试者的：</p>
<blockquote>
<p>Amazon has an infinite amount of work. The fire hose of work will never abate. No one will throttle your work for you. If you have a hard time saying no, or a hard time prioritizing your tasks, you are guaranteed to drown. You will work more and more hours until you eventually quit. On the other hand, if you aren’t terrible at your job, and you can pick the right things to work on and say no to everything else, you’ll love it here.</p>
<p>亚马逊有干不完的工作。像消防水管一样的工作永远不会减少。没有人能代替你工作。如果你难于说不或者不会优先级排序工作，你必然会崩溃。你将会每天工作越来越多小时知道你离开。从另一方面来说，如果你不讨厌你的工作，你可以找出正确事情去做，对其他说不，你会在这爱上工作。</p>
</blockquote>
<p>If you put this advice into practice, it will pay dividends for the rest of your life. You can replace “Amazon” with any modern company, a side business, or even your personal life. Your time is your most valuable resource. You can’t make more. You can’t pause it. You can only allocate it. Here’s how.</p>
<p>如果你实践了这个建议，你的余生将会受益。你可以用任何一个时髦的公司，一项业务，甚至你的个人生活取代&quot;亚马逊&quot;。你的时间就是你最重要的资源。你不可能得到更多。你不能暂停它。你只能分配它。以下是怎么分配。</p>
<h3 id="identify-your-most-important-task">Identify your most important task</h3>
<h3 id="找出你最重要的任务">找出你最重要的任务</h3>
<p>Early in my career at Amazon, I received approval to hire five additional engineers for an important project with a tight deadline. I opened the positions in Amazon’s internal system and talked to a few people about transferring. I also began writing up a project plan, creating the major stories to begin working on, and scheduling design review meetings with our engineers. I had a discussion with my manager a few weeks later, which went something like this:</p>
<p>在我亚马逊早期生涯时候，我得到批准去招聘五个工程师加入一个重要的且有明确截止日期的项目。我在亚马逊内部系统打开了职位，告诉不少人转发。我也开始写下一个项目计划，创建要开始工作的主要任务，定期与我们的工程师设计和审查开会。几周后我和我经理讨论，如下：</p>
<blockquote>
<p><strong>Manager</strong>: How’s the hiring going? As you’re aware, you have a tight deadline.</p>
<p><strong>经理</strong>： 招聘工作进展如何？你知道，你有明确的截止时间。</p>
</blockquote>
<blockquote>
<p><strong>Me:</strong> It’s a bit slow. I might have one position filled.</p>
<p><strong>我</strong>：有点慢。我可能有一个职位空缺。</p>
</blockquote>
<blockquote>
<p><strong>Manager:</strong> Are you treating this as your most important task?</p>
<p><strong>经理</strong> ： 你把这个当做你最重要的任务了吗？</p>
</blockquote>
<blockquote>
<p><strong>Me:</strong> I’m spending as much time on it as I can, but I have a pretty full calendar. I have this critical project, my existing work, and a pretty big team. There’s a lot going on. I’ll try harder.</p>
<p><strong>我</strong>： 我把我能花费的全部时间都用在它上，但我有一个非常满的日程。我目前的工作，有一个关键项目，和一个非常大的团队。发生了很多事情，我会更努力的。</p>
</blockquote>
<blockquote>
<p><strong>Manager:</strong> I assume you agree that you can’t finish the project without those five engineers. There will always be a lot going on. Trying harder is not a mechanism. If you’re not literally spending at least 50% of your time on this, you’re planning to fail. You need to spend at least four hours a day on hiring. Coffees with potential hires. Meetings with recruiting. Updating job descriptions. You can’t succeed without this. You can succeed without almost everything else.</p>
<p><strong>经理</strong>： 我假定你认同如果没有那五个工程师的话你不能完成那个项目。总有很多事会发生。更努力工作不是一个办法。如果你没有真正的花费至少50%的时间在这上面，那么你正在计划失败。你需要每天至少花费4小时在招聘上。和潜在雇员喝咖啡。和新成员开会。更新职位描述。如果没有这些不可能会成功。但是(拥有这些的话)可以在没有其他情况下取得成功。</p>
</blockquote>
<p>My manager taught me a very valuable lesson that day. I was looking one level deep at the seemingly important things I had to do right then and there. But I needed to take a step back and assess whether I was allocating my time to take me to where I wanted to go. I was pedaling my bike as hard as I could, but I wasn’t looking at the street signs.</p>
<p>那天我的经理给我上了非常宝贵的一课。我在一个深入层次审视当时我必须做的看似很重要的事情。但是我需要回退一步，评估我是否在我想要达成的事情上分配时间。</p>
<p>I internalized what my manager said. I recognized I was making progress in general, but not toward my most important destination. I was broadly focused on the bulk of my work, but I needed to focus narrowly on my most important work.我用尽全力去蹬自行车，但是我没有注意路标。</p>
<h3 id="realize-that-business-as-usual-wont-work">Realize that business as usual won’t work</h3>
<h3 id="意识到常规方法是行不通的">意识到常规方法是行不通的</h3>
<p>A number of years ago, I was a very busy bee. I had multiple teams, with dozens of engineers and managers reporting to me. I had long-term project planning, architecture and design discussions, a couple of dozen one-on-one meetings a week, broad organizational meetings, operation review meetings, and more. My calendar was always booked with at least 40 hours of meetings a week, and I tended to spend at least another 10 to 20 hours at work per week. I was having fun, but I was also burning the candle at both ends.</p>
<p>很多年前，我是一只非常繁忙的小蜜蜂。我有多个拥有几打工程师和经理向我汇报的团队。我又长期的项目计划，架构与设计讨论会，一周几十个一对一会议，大量组织会议，操作复查会议，等更多。我常常每周日程至少40小时，我倾向于每周至少多花费10到20小时。我很开心，但是我也是同时从两头燃烧蜡烛。</p>
<p>I was then asked to run a massive cross-organizational planning process. I was told very clearly that this would be my top priority for the next three months. During that time, I would be expected to spend at least 20 hours per week on this planning process. The process would help determine what our organization would focus on for the next year, so it had leverage over hundreds of engineers. As is always true at Amazon, I wasn’t being taken off anything I already managed. I was just offered this important role, and expected to solve the problem.</p>
<p>我之后被告知要运行一个跨组织的计划进度。我被明确告知这将会我接下来三个月优先级最高的工作。在那期间，我会每周花费至少20小时在这个计划进度上。这个进度将会帮助确定我们下个年度的工作聚焦，所以他会影响到数百个工程师。在亚马逊总是如此，我并没有被拿走任何我已经规划好的工作。我只是被赋予这个重要的角色，希望能够解决这个问题。</p>
<blockquote>
<p>Selectively pick a few things, and cut everything else. Work on only your most important things.</p>
<p>选择一些事情，把其他的都剪掉。只处理你最重要的工作。</p>
</blockquote>
<p>I was excited for the career opportunity, but I also had to fit another 20 hours into my 50- to 60-hour workweek.</p>
<p>我对这个职业机会非常兴奋，但是我也必须在我50到60小时的工作周里再添加另外20小时。</p>
<p>I can still remember sitting in my office that evening with a beer (don’t judge me), staring at my completely full calendar. I started by looking for anything obvious to cut. I switched one weekly one-on-one to biweekly. Then I stared at my calendar some more. Finally I recognized that something drastic had to change. Business as usual was not going to cut it.</p>
<p>我仍然记得那天晚上坐在办公室喝着啤酒(不要评判我)，同时盯着我满满的日程看。我开始寻找哪些明显需要砍掉的事情。我切换一周一次的 一对一 为两周一次。然我看日程其他的。最后我认出极端需要改变的。照常办事是不可能的。</p>
<h3 id="cut-to-the-bone-and-measure-the-pain">Cut to the bone and measure the pain</h3>
<h3 id="切成多块评估后果">切成多块评估后果</h3>
<p>When trying to cut things out of our lives, we often ask the wrong questions. We ask whether something is important, or if we value it. It is far too easy to answer in the affirmative. Instead, we should ask these two questions:</p>
<p>当我们试图摆脱生活中的一切，我们却常提出错误的问题。我们问那些事是重要的，或者是否有价值。太容易就得到肯定回答了。我们应该问如下两个问题：</p>
<ul>
<li>“What is the worst case result if I cut this?”</li>
<li>我砍掉这个事情最坏情况是什么？</li>
<li>“Is this going to get me where I want to go in the long run?”</li>
<li>在长跑中这个事会带我到想去的地方吗？</li>
</ul>
<p>Think of the pain you’ll experience if you cut this item/work/task/meeting. What is the worst result? Can you handle it? And, equally important, is this item/work/task/meeting related to your most important long-term goals?</p>
<p>想象你砍掉这个项目/工作/任务/会议，你会经历的痛苦。什么是最坏的结果？你能搞定它吗？还有，同样重要的，这个项目/工作/任务/会议和你长期最重要的目标有关吗？</p>
<p>That night I finished my beer and cut my schedule to the bone. I asked one of my managers to attend the weekly operations meeting, then dropped it. I asked one of my senior engineers to take charge of the architecture meeting series, then dropped it. I moved all junior employees to biweekly meetings. I moved a couple of direct employees to report to a manager. I dropped the weekly project status meeting. I dropped a couple of mentees—with apologies.</p>
<p>那晚我喝完了我的啤酒把我的日程安排切碎。我让我的一个经理参加每周的运营会议，然后我甩掉了它。我让我的一个高级工程师组织架构会议，然后我甩掉了这个。我让所有的初级员工一起开两周一次的见面会。我让几个直接雇员(手下)去向一个经理汇报工作。我甩掉了每周一次的工程状态会议。我甩掉了几个学员 — 抱歉。</p>
<p>I was down to perhaps 15 hours of meetings a week. I was able to easily schedule the planning process into my calendar, and at the same time cut down my hours worked each week.</p>
<p>我一周要开15小时的会议。我可以很容易的把计划过程安排到我的日程表中，同时减少每周的工作时间。</p>
<h3 id="examine-results-and-aftermath"><strong>Examine results and aftermath</strong></h3>
<h3 id="检查结果和后果">检查结果和后果</h3>
<p>When I completed the planning process, my calendar was suddenly half-empty. This was very rare for those in positions like mine. I had certainly never experienced it.</p>
<p>当我完成计划安排，我的日程表突然空了一半。这对我这样职位的人来说是非常少见的。我当然从未体验过。</p>
<p>First, I had completely removed some work. These meetings were useful, but not enough to justify their time on my or anyone else’s calendar. Free time back gives an infinite return on investment.</p>
<p>首先，我完全丢掉一些工作。(虽然)这些会议确实有用，但是并不能足够声明它在我或者其他人的日程时间里是合理的。</p>
<p>Second, I had delegated some high visibility and critical work to my managers and a few senior engineers. It was a wild success for both parties. I was delegating work I knew how to do. This wasn’t growth work; it was maintenance. I gave people growth opportunities, and they thrived. The new owners changed some processes and made improvements. They were challenged by the new opportunities, and it was exciting for all involved.</p>
<p>第二，我已经委派一些高可见性和极重要的工作给我的经理和一些高级工程师。双方都取得了巨大的成功。我委派出我已经知道怎么做的工作。这些不在(对我)有成长性的工作;它只是维护。我给了其他人成长的的机会，让他们通过新的机会茁壮成长，这让所有参与者都很兴奋。</p>
<p>Challenging work is growth work, and by holding on to those leadership positions I had been depriving someone else of their own opportunity to grow. Delegating is a gift with two recipients. You get more time, and someone else gains valuable experience.</p>
<p>有挑战的工作也是成长性的工作，我持续持有哪些需要领导力的职位，我就在持续剥夺其他人成长的机会。授权对双方都是一个礼物。你获得了更多时间，其他人获得有价值的经历。</p>
<p>I expected temporary pain that I would remedy once the project was over. Instead, I had made a healthy cut, and most of the changes were permanent. I now had the time to re-evaluate what was important to me and my group in the long run, and I could schedule that work instead.</p>
<p>我期望一旦项目结束我会弥补我暂时的痛苦。相反，我做了一个健康的削减，大多数改变都是长久的。从长远看，我现在有时间再次评估什么才是对我和我的团队有重要价值的东西。</p>
<h3 id="make-regular-cuts">Make regular cuts</h3>
<p>###进行常规切割</p>
<p>When you remove something from your schedule, you’re usually picking a single item from the bottom of your importance stack rank. You’re saying, “I need 30 minutes more per day, so I’ll drop this single 30-minute task.” It has limited return on investment, because you’re swapping one item for another.</p>
<p>当你从你的计划表删除一些东西，你通常会从你的重要事件排行单中拿走最底下一项。你会说，&ldquo;我每天需要更多30分钟，所以我扔掉这个单个30分钟的任务&rdquo;。这在投资上回报是有限的，因为你只是用一个项目交换另一个。</p>
<p>Instead, make regular cuts to the bone with your schedule, your possessions, and the like. Instead of cutting from the bottom of your stack rank, switch your process. Selectively pick a few things, and cut everything else. Work on only your most important things.</p>
<p>相反，把你的计划，你拥有的等类似东西正常切割成块。而不是切掉你的优先级任务列表最底下的，切换你的进程。选择一些东西，切掉另外的东西。专注于你最重要的事。</p>
<p>Look at every single thing you’re doing. Determine whether you need each one to achieve your most important long-term goals. If not, ask yourself how much pain you’d feel if you cut it. Consider whether it makes sense to spend that time on your top priorities instead. Your top priorities are almost always the things that move the needle in your life, and time spent there is the most precious.</p>
<p>查看每个你在做的单个事情。确认每个在你最重要的长期目标里是否需要。如果是不，问你自己如果砍掉的话你承受多少痛苦。考虑花时间在它上面是否对你最高优先级的事有意义。你的最高优先级的是总是需要你在人生中聚集的事，花在这上面的时间是最珍贵的。</p>
<hr>
<p><em>Disclaimer: I’m not representing Amazon in any way with my posts; opinions written here are strictly my own.</em></p>
]]></content></item><item><title>Week1030_share</title><link>/posts/arts/week1030_share/</link><pubDate>Fri, 31 Mar 2023 15:45:43 +0000</pubDate><guid>/posts/arts/week1030_share/</guid><description>ARTS - Share 补2019.1.30 其实产业只有金融业与非金融业 存钱与放贷 我们假设这样一种情况：
A给一笔钱到B，约定利率是年化3%， 也就是一万元，一年后能够取回一万零三百。
B拿这笔钱借给C，约定年化利率是8%，也就是一万元一年以后还一万零八百。
这个过程中，粗略计算(存在运营成本)，A赚了300元，B赚了800-300=500 元。
我们继续这个模型：
C拿到钱后以13%的年化利率给了D， 赚5%的息差。
D拿到钱后以20%的年化利率给了E， 赚7%的息差。
E拿到钱后以30%的年化利率给了F，赚10的息差。
当然，如果还有人肯借的话，会继续下去，直到不肯借这么高的资金成本。
我们知道，合法的利率基本超过25%，使用的人就不是主流人群了(很多人还信用卡习惯还最低还款额，其实这种年化真实利率接近20%)。
在上面的模型中，很容易找到现实中对应的情况，A是储户，拿自有资金存到银行B，银行在加价贷出去给个人或公司C，CDE其实都可以看做二道货币贩子，直到F拿到钱，去做生意，比如办工厂，赚了50%的收益，减去资金成本30%，还有20%的利润空间。然后给员工工资奖金，员工拿着钱又存到银行。这一整套形成一个完美的闭环。
闭环形成，由F向E支付本金和利息，E向上继续支付，直到A取钱。
商品才是真正的货币 上面的模型中，我们发现，所有人都赚到了钱。但是也是存在一个很本质的情况：
必须由办工厂的F使用这些钱落地赚到钱，才能维持这一级级的金融机构。
如果办工厂的F违约，那么，以上各级假设没有抵押的情况下，都会全部违约，其实就是崩盘。那么为什么会出现这种情况？其实答案已经很明显了，因为货币的本质是财富的媒介。
货币的产生是为了方便人们交易，货币本身并不是财富。当然各大金融机构的出现提供给人们更方便的交易方式，其实也是创造了一定程度的财富，但本质是为别人创造财富提供方便。所以，必须市场上有人在金融体系外创造了产品、提供了服务、达成了交易，财富才会产生，才会&amp;quot;夯实&amp;quot;经济的基础。也就是说商品才是真正的货币。
产业的划分 现代国家喜欢划分自己的产业，大致上所谓第一产业就是基于自然产品的产业，如农林牧渔；第二产业就是对第一产业的加工，就是各种制造业、工业类；第三产业就是除一二产业外的非物质生产的产业，如各种服务业，电影娱乐文艺创作等本质也是服务业。
这些各种产业本质都是创造财富的产业，金融可以切入进所有产业，就是因为它的货币媒介属性。所以，产业的划分其实就只有一条，金融媒介业，和其他。
只要金融业 那么是否存在这种情况，我只要金融业，因为赚钱方便快捷，不用苦哈哈的办工厂、管工人、谈客户、进销存….
现在的美国其实就很像这种了，全球第一的金融业，除了互联网和保持武力的军工业，基本没有其他可以拿得出手产业了，因为这些产业实体早就转移到成本更低廉的其他国家了，自己只需要金融控制就行了。与之相反的是中国。中国建立起了世界上最完整的产业链结构，所有的东西都能生产，所谓&amp;quot;世界工厂&amp;quot;，这种情况下，其实中国的资产更&amp;quot;务实&amp;quot;一些，美国的资产更&amp;quot;务虚&amp;quot;一些。这里不谈&amp;quot;航母&amp;quot;撑起来的美元霸权，单从金融与产业角度来看，中国的经济其实健康的多，只要不发生金融的过度投机(美国次贷危机就是过度投机引起)，那么基本不会发生经济危机。</description><content type="html"><![CDATA[<h2 id="arts---share--补2019130">ARTS - Share  补2019.1.30</h2>
<h2 id="其实产业只有金融业与非金融业">其实产业只有金融业与非金融业</h2>
<h3 id="存钱与放贷">存钱与放贷</h3>
<p>我们假设这样一种情况：</p>
<blockquote>
<p>A给一笔钱到B，约定利率是年化3%， 也就是一万元，一年后能够取回一万零三百。</p>
<p>B拿这笔钱借给C，约定年化利率是8%，也就是一万元一年以后还一万零八百。</p>
</blockquote>
<p>这个过程中，粗略计算(存在运营成本)，A赚了300元，B赚了800-300=500 元。</p>
<p>我们继续这个模型：</p>
<blockquote>
<p>C拿到钱后以13%的年化利率给了D， 赚5%的息差。</p>
<p>D拿到钱后以20%的年化利率给了E， 赚7%的息差。</p>
<p>E拿到钱后以30%的年化利率给了F，赚10的息差。</p>
<p>当然，如果还有人肯借的话，会继续下去，直到不肯借这么高的资金成本。</p>
</blockquote>
<p>我们知道，合法的利率基本超过25%，使用的人就不是主流人群了(很多人还信用卡习惯还最低还款额，其实这种年化真实利率接近20%)。</p>
<p>在上面的模型中，很容易找到现实中对应的情况，A是储户，拿自有资金存到银行B，银行在加价贷出去给个人或公司C，CDE其实都可以看做二道货币贩子，直到F拿到钱，去做生意，比如办工厂，赚了50%的收益，减去资金成本30%，还有20%的利润空间。然后给员工工资奖金，员工拿着钱又存到银行。这一整套形成一个完美的闭环。</p>
<p>闭环形成，由F向E支付本金和利息，E向上继续支付，直到A取钱。</p>
<h3 id="商品才是真正的货币">商品才是真正的货币</h3>
<p>上面的模型中，我们发现，所有人都赚到了钱。但是也是存在一个很本质的情况：</p>
<p><strong>必须由办工厂的F使用这些钱落地赚到钱，才能维持这一级级的金融机构。</strong></p>
<p>如果办工厂的F违约，那么，以上各级假设没有抵押的情况下，都会全部违约，其实就是崩盘。那么为什么会出现这种情况？其实答案已经很明显了，<strong>因为货币的本质是财富的媒介</strong>。</p>
<p>货币的产生是为了方便人们交易，货币本身并不是财富。当然各大金融机构的出现提供给人们更方便的交易方式，其实也是创造了一定程度的财富，但本质是为别人创造财富提供方便。所以，必须市场上有人在金融体系外创造了产品、提供了服务、达成了交易，财富才会产生，才会&quot;夯实&quot;经济的基础。也就是说<strong>商品才是真正的货币</strong>。</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556735591223&amp;di=c3fa979c66a742a5e1238d09cabb9bc0&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.xinglico.com%2FUploadFiles%2FPictures%2Fliuying%2F2018_01%2F20180122152630_4207.jpg" alt=""></p>
<h3 id="产业的划分">产业的划分</h3>
<p>现代国家喜欢划分自己的产业，大致上所谓第一产业就是基于自然产品的产业，如农林牧渔；第二产业就是对第一产业的加工，就是各种制造业、工业类；第三产业就是除一二产业外的非物质生产的产业，如各种服务业，电影娱乐文艺创作等本质也是服务业。</p>
<p>这些各种产业本质都是创造财富的产业，金融可以切入进所有产业，就是因为它的货币媒介属性。所以，产业的划分其实就只有一条，金融媒介业，和其他。</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556735639554&amp;di=6b97c5405b932bc151eaaa926e7dd640&amp;imgtype=0&amp;src=http%3A%2F%2Fphotocdn.sohu.com%2F20151209%2FImg430530656.jpg" alt=""></p>
<h3 id="只要金融业">只要金融业</h3>
<p>那么是否存在这种情况，我只要金融业，因为赚钱方便快捷，不用苦哈哈的办工厂、管工人、谈客户、进销存….</p>
<p>现在的美国其实就很像这种了，全球第一的金融业，除了互联网和保持武力的军工业，基本没有其他可以拿得出手产业了，因为这些产业实体早就转移到成本更低廉的其他国家了，自己只需要金融控制就行了。与之相反的是中国。中国建立起了世界上最完整的产业链结构，所有的东西都能生产，所谓&quot;世界工厂&quot;，这种情况下，其实中国的资产更&quot;务实&quot;一些，美国的资产更&quot;务虚&quot;一些。这里不谈&quot;航母&quot;撑起来的美元霸权，单从金融与产业角度来看，中国的经济其实健康的多，只要不发生金融的过度投机(美国次贷危机就是过度投机引起)，那么基本不会发生经济危机。</p>
]]></content></item><item><title>Week1030_tip</title><link>/posts/arts/week1030_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:43 +0000</pubDate><guid>/posts/arts/week1030_tip/</guid><description>ARTS - Tip 补2019.1.30 线程池addWorker里的Worker探析 Worker是什么 我们在addWorker方法看到这样的一段代码：
boolean workerStarted = false; boolean workerAdded = false; Worker w = null; try { w = new Worker(firstTask); final Thread t = w.thread; if (t != null) { ... if (workerAdded) { t.start(); workerStarted = true; } } } finally { if (! workerStarted) addWorkerFailed(w); } return workerStarted; 这里主要做的就是启动Worker，我们再来看看Worker是什么。
private final class Worker extends AbstractQueuedSynchronizer implements Runnable { /** * This class will never be serialized, but we provide a * serialVersionUID to suppress a javac warning.</description><content type="html"><![CDATA[<h2 id="arts---tip--补2019130">ARTS - Tip  补2019.1.30</h2>
<h2 id="线程池addworker里的worker探析">线程池addWorker里的Worker探析</h2>
<h3 id="worker是什么">Worker是什么</h3>
<p>我们在addWorker方法看到这样的一段代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>				<span style="color:#66d9ef">boolean</span> workerStarted <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">boolean</span> workerAdded <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        Worker w <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            w <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Worker<span style="color:#f92672">(</span>firstTask<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">final</span> Thread t <span style="color:#f92672">=</span> w<span style="color:#f92672">.</span><span style="color:#a6e22e">thread</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>workerAdded<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    t<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                    workerStarted <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span> workerStarted<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                addWorkerFailed<span style="color:#f92672">(</span>w<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> workerStarted<span style="color:#f92672">;</span>
</span></span></code></pre></div><p>这里主要做的就是启动Worker，我们再来看看Worker是什么。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Worker</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">extends</span> AbstractQueuedSynchronizer
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">implements</span> Runnable
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         * This class will never be serialized, but we provide a
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         * serialVersionUID to suppress a javac warning.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">long</span> serialVersionUID <span style="color:#f92672">=</span> <span style="color:#ae81ff">6138294804551838833L</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/** Thread this worker is running in.  Null if factory fails. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> Thread thread<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/** Initial task to run.  Possibly null. */</span>
</span></span><span style="display:flex;"><span>        Runnable firstTask<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/** Per-thread task counter */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">volatile</span> <span style="color:#66d9ef">long</span> completedTasks<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         * Creates with given first task and thread from ThreadFactory.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         * @param firstTask the first task (null if none)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">         */</span>
</span></span><span style="display:flex;"><span>        Worker<span style="color:#f92672">(</span>Runnable firstTask<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            setState<span style="color:#f92672">(-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span> <span style="color:#75715e">// inhibit interrupts until runWorker
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">firstTask</span> <span style="color:#f92672">=</span> firstTask<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 这里获得线程工厂创建线程
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">thread</span> <span style="color:#f92672">=</span> getThreadFactory<span style="color:#f92672">().</span><span style="color:#a6e22e">newThread</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/** Delegates main run loop to outer runWorker  */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        		<span style="color:#75715e">// 这里的runWorker, 其实就调用了run方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        		<span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        			*  try {
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">                    beforeExecute(wt, task);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">                    Throwable thrown = null;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">                    try {
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">                        task.run();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">                    } catch (RuntimeException x) {
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">                   ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">                } f 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">        			*/</span>
</span></span><span style="display:flex;"><span>            runWorker<span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Lock methods
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>我们继续看这个 this.thread = getThreadFactory().newThread(this);</p>
<p>线程工厂如何创建线程的，我们查看ThreadPoolExecutor.java的构造方法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ThreadPoolExecutor</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> corePoolSize<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                              <span style="color:#66d9ef">int</span> maximumPoolSize<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                              <span style="color:#66d9ef">long</span> keepAliveTime<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                              TimeUnit unit<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                              BlockingQueue<span style="color:#f92672">&lt;</span>Runnable<span style="color:#f92672">&gt;</span> workQueue<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">(</span>corePoolSize<span style="color:#f92672">,</span> maximumPoolSize<span style="color:#f92672">,</span> keepAliveTime<span style="color:#f92672">,</span> unit<span style="color:#f92672">,</span> workQueue<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>             <span style="color:#75715e">// 这里调用defaultThreadFactory
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>             Executors<span style="color:#f92672">.</span><span style="color:#a6e22e">defaultThreadFactory</span><span style="color:#f92672">(),</span> defaultHandler<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DefaultThreadFactory</span> <span style="color:#66d9ef">implements</span> ThreadFactory <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> AtomicInteger poolNumber <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> AtomicInteger<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ThreadGroup group<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> AtomicInteger threadNumber <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> AtomicInteger<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> String namePrefix<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        DefaultThreadFactory<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            SecurityManager s <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">getSecurityManager</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            group <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">?</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">getThreadGroup</span><span style="color:#f92672">()</span> <span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                                  Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">currentThread</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getThreadGroup</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            namePrefix <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pool-&#34;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>                          poolNumber<span style="color:#f92672">.</span><span style="color:#a6e22e">getAndIncrement</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>                         <span style="color:#e6db74">&#34;-thread-&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  			<span style="color:#75715e">// 终于找到这个真正的newThread方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">public</span> Thread <span style="color:#a6e22e">newThread</span><span style="color:#f92672">(</span>Runnable r<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            Thread t <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread<span style="color:#f92672">(</span>group<span style="color:#f92672">,</span> r<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>                                  namePrefix <span style="color:#f92672">+</span> threadNumber<span style="color:#f92672">.</span><span style="color:#a6e22e">getAndIncrement</span><span style="color:#f92672">(),</span>
</span></span><span style="display:flex;"><span>                                  <span style="color:#ae81ff">0</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">isDaemon</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>                t<span style="color:#f92672">.</span><span style="color:#a6e22e">setDaemon</span><span style="color:#f92672">(</span><span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">getPriority</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">NORM_PRIORITY</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                t<span style="color:#f92672">.</span><span style="color:#a6e22e">setPriority</span><span style="color:#f92672">(</span>Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">NORM_PRIORITY</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> t<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>看完了创建线程的方式，我们重新关注下runWorker方法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     主要的任务运行循环。从队列循环取得任务然后执行，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 1. We may start out with an initial task, in which case we
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * don&#39;t need to get the first one. Otherwise, as long as pool is
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * running, we get tasks from getTask. If it returns null then the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * worker exits due to changed pool state or configuration
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * parameters.  Other exits result from exception throws in
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * external code, in which case completedAbruptly holds, which
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * usually leads processWorkerExit to replace this thread.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     1. 我们可以从最初的任务开始，这样就不需要获得第一个。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 2. 在运行任何任务之前，锁会避免其他池中断在运行中的任务，除非确定池子停止，否则线程不会设置中断
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 3. 每个任务执行之前都会调用一个beforeExecute, 可能会抛出一个异常，这种情况情况我们认为线程死亡
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *	(跳出循环) 不处理任务。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 4. 假如 beforeExecute 正常完成，我们运行任务，afterExecute之后聚集所有异常发送。我们分开处理
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 运行时异常 ，错误(捕获的所有)和强制抛出。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     	因为我们不能在Runnable.run里重复抛出异常，我们使用Errors包装他们(扔给线程的					UncaughtExceptionHander)。任何抛出的异常也会适度造成线程死亡。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 5. task.run 结束，我们调用 afterExecute, 也可能抛出异常也会造成线程死亡。根据 JLS Sec 14.20, 这个异常即使是task.run引发的，此异常也会生效。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 异常机制的实际效果是 afterExecute 和 线程的 UncaughtExceptionHandler 具有我们可以提供的任务用户代码遇到问题的任何信息。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param w the worker
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">runWorker</span><span style="color:#f92672">(</span>Worker w<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Thread wt <span style="color:#f92672">=</span> Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">currentThread</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        Runnable task <span style="color:#f92672">=</span> w<span style="color:#f92672">.</span><span style="color:#a6e22e">firstTask</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        w<span style="color:#f92672">.</span><span style="color:#a6e22e">firstTask</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        w<span style="color:#f92672">.</span><span style="color:#a6e22e">unlock</span><span style="color:#f92672">();</span> <span style="color:#75715e">// allow interrupts
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">boolean</span> completedAbruptly <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>task <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>task <span style="color:#f92672">=</span> getTask<span style="color:#f92672">())</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                w<span style="color:#f92672">.</span><span style="color:#a6e22e">lock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// If pool is stopping, ensure thread is interrupted;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// if not, ensure thread is not interrupted.  This
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// requires a recheck in second case to deal with
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// shutdownNow race while clearing interrupt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>runStateAtLeast<span style="color:#f92672">(</span>ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(),</span> STOP<span style="color:#f92672">)</span> <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span>                     <span style="color:#f92672">(</span>Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">interrupted</span><span style="color:#f92672">()</span> <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>                      runStateAtLeast<span style="color:#f92672">(</span>ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(),</span> STOP<span style="color:#f92672">)))</span> <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">!</span>wt<span style="color:#f92672">.</span><span style="color:#a6e22e">isInterrupted</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>                    wt<span style="color:#f92672">.</span><span style="color:#a6e22e">interrupt</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    beforeExecute<span style="color:#f92672">(</span>wt<span style="color:#f92672">,</span> task<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    Throwable thrown <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        task<span style="color:#f92672">.</span><span style="color:#a6e22e">run</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>RuntimeException x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        thrown <span style="color:#f92672">=</span> x<span style="color:#f92672">;</span> <span style="color:#66d9ef">throw</span> x<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Error x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        thrown <span style="color:#f92672">=</span> x<span style="color:#f92672">;</span> <span style="color:#66d9ef">throw</span> x<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Throwable x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        thrown <span style="color:#f92672">=</span> x<span style="color:#f92672">;</span> <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error<span style="color:#f92672">(</span>x<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        afterExecute<span style="color:#f92672">(</span>task<span style="color:#f92672">,</span> thrown<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    task <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    w<span style="color:#f92672">.</span><span style="color:#a6e22e">completedTasks</span><span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>                    w<span style="color:#f92672">.</span><span style="color:#a6e22e">unlock</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            completedAbruptly <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            processWorkerExit<span style="color:#f92672">(</span>w<span style="color:#f92672">,</span> completedAbruptly<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>这里面有一个 getTask()需要重点关注：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * Performs blocking or timed wait for a task, depending on
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * current configuration settings, or returns null if this worker
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * must exit because of any of:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       任何以下发生都会返回null:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 1. 超过maximumPoolSize的任务
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 2. The pool is stopped.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       2. 线程池
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 3. The pool is shutdown and the queue is empty.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 4. This worker timed out waiting for a task, and timed-out
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *    workers are subject to termination (that is,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *    {@code allowCoreThreadTimeOut || workerCount &gt; corePoolSize})
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *    both before and after the timed wait, and if the queue is
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *    non-empty, this worker is not the last thread in the pool.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @return task, or null if the worker must exit, in which case
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *         workerCount is decremented
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Runnable <span style="color:#a6e22e">getTask</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">boolean</span> timedOut <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span> <span style="color:#75715e">// Did the last poll() time out?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(;;)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> ctl<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> rs <span style="color:#f92672">=</span> runStateOf<span style="color:#f92672">(</span>c<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// Check if queue empty only if necessary.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>rs <span style="color:#f92672">&gt;=</span> SHUTDOWN <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>rs <span style="color:#f92672">&gt;=</span> STOP <span style="color:#f92672">||</span> workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                decrementWorkerCount<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> wc <span style="color:#f92672">=</span> workerCountOf<span style="color:#f92672">(</span>c<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// Are workers subject to culling?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">boolean</span> timed <span style="color:#f92672">=</span> allowCoreThreadTimeOut <span style="color:#f92672">||</span> wc <span style="color:#f92672">&gt;</span> corePoolSize<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>wc <span style="color:#f92672">&gt;</span> maximumPoolSize <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>timed <span style="color:#f92672">&amp;&amp;</span> timedOut<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>wc <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>compareAndDecrementWorkerCount<span style="color:#f92672">(</span>c<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                Runnable r <span style="color:#f92672">=</span> timed <span style="color:#f92672">?</span>
</span></span><span style="display:flex;"><span>                    workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">poll</span><span style="color:#f92672">(</span>keepAliveTime<span style="color:#f92672">,</span> TimeUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">NANOSECONDS</span><span style="color:#f92672">)</span> <span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                    workQueue<span style="color:#f92672">.</span><span style="color:#a6e22e">take</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>r <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                timedOut <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>InterruptedException retry<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                timedOut <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Week1026_share</title><link>/posts/arts/week1026_share/</link><pubDate>Fri, 31 Mar 2023 15:45:42 +0000</pubDate><guid>/posts/arts/week1026_share/</guid><description>ARTS - Share 补2019.1.2 提高系统性能方式的总结 问题提出 根据最近一列的优化系统性能，形成了一点思考，做下总结。
所谓提高系统性能，就是把慢的地方，变成快的地方。哪个地方容易慢？磁盘、网络IO、计算密集操作，这些就对应着数据库优化，网络请求，和各类计算。那么，对应的解决方案就是减少磁盘操作，如优化数据库索引，换成内存操作，如使用缓存，如进行预处理。
加缓存 因为内存操作远快于磁盘操作，所以对于有些查询类且不经常变化的数据例如用户信息类、历史统计表等放入缓存，下次直接读取缓存，提高的性能就相当于内存相对磁盘的性能。
加缓存要注意的事项是，这些数据确实变动小，这样缓存命中率高，很少穿透。同时选择好缓存失效策略。
另外注意事项是，缓存作为一种提高系统性能的工具，是系统辅助部分，并不能把核心数据只存进缓存，持久化操作还是必须要有的。
优化MySQL 当数据量达到百万级别时，数据库的查询优化就变成了很重要的一件事，特别是在各种连接和分组函数共同使用情况。
几个关键字是 慢查询日志、explain 、索引、processlist.
平时打开慢查询日志，找出查询缓慢的SQL，使用执行计划explain, 判断索引情况，调整索引策略。 使用show processlist 查看当前正在执行的语句，当系统拥挤时候，可以看到是哪些语句正在堵塞，然后有计划的优化这些语句，或调整连接池大小等。
预处理 预处理方式就是把一下因计算量大而影响响应时间且非实时性的功能，挪到空闲时间计算，用到直接取。
例如系统要获得前一天人员工作效率情况，那么这些查询工作可以在第二天凌晨进行跑各种批量与聚合数据，然后在使用时候直接就能获取到结果，不必实时计算。
梳理业务实现 面对这些系统问题，不能只使用程序员的技术手段，同时要根据业务情况，考虑是否自己实现方式出现了问题。比如要做个每日用户数统计，当天的不算，可以选择每天跑批计算存储当天的用户数， 也可以实时统计过滤掉当天的用户，明显第二种更方便简洁，所以有时候多想想自己真正需要的东西，和业务需求背后隐藏的真实需求，这样设计出的系统更能从人为角度避开性能问题。
总结 总之，当系统出现响应慢时候，要首先去定位问题，不要上来就直接加缓存。当然时间紧急情况下当然可以，只是这是个治标不治本的方案。在时间够的情况下，我们要主动分析到底哪里是真正的瓶颈。比如本人最近遇到的一个报表查询问题， 数据量百万级别，首先定位问题是由于联合索引最左匹配原则没匹配好，导致了全表扫描，因此系统巨慢，最后建好索引，速度顿时飞起。但是偶尔还会报这个查询慢，明明已经在数据库测试查询很快了，查看show processlist ，有大量语句堆积，然后检查了连接池设置，发现最大设置为20个，明显对于几百人使用的系统，完全不够用，最后调大后，问题解决，最后由于查询数据并非经常变动， 加了缓存后，速度更是飞起。
最后，根据二八原则， 当系统变的巨慢，大部分是数据库索引问题，再加缓存，基本解决8成的问题， 剩下的两成就需要经验与耐心，去寻找真正的瓶颈了。</description><content type="html"><![CDATA[<h2 id="arts---share-补201912">ARTS - Share 补2019.1.2</h2>
<h2 id="提高系统性能方式的总结">提高系统性能方式的总结</h2>
<h3 id="问题提出">问题提出</h3>
<p>根据最近一列的优化系统性能，形成了一点思考，做下总结。</p>
<p>所谓提高系统性能，就是把慢的地方，变成快的地方。哪个地方容易慢？磁盘、网络IO、计算密集操作，这些就对应着数据库优化，网络请求，和各类计算。那么，对应的解决方案就是减少磁盘操作，如优化数据库索引，换成内存操作，如使用缓存，如进行预处理。</p>
<h3 id="加缓存">加缓存</h3>
<p>因为内存操作远快于磁盘操作，所以对于有些查询类且不经常变化的数据例如用户信息类、历史统计表等放入缓存，下次直接读取缓存，提高的性能就相当于内存相对磁盘的性能。</p>
<p>加缓存要注意的事项是，这些数据确实变动小，这样缓存命中率高，很少穿透。同时选择好缓存失效策略。</p>
<p>另外注意事项是，缓存作为一种提高系统性能的工具，是系统辅助部分，并不能把核心数据只存进缓存，持久化操作还是必须要有的。</p>
<h3 id="优化mysql">优化MySQL</h3>
<p>当数据量达到百万级别时，数据库的查询优化就变成了很重要的一件事，特别是在各种连接和分组函数共同使用情况。</p>
<p>几个关键字是 慢查询日志、explain 、索引、processlist.</p>
<p>平时打开慢查询日志，找出查询缓慢的SQL，使用执行计划explain, 判断索引情况，调整索引策略。
使用show processlist 查看当前正在执行的语句，当系统拥挤时候，可以看到是哪些语句正在堵塞，然后有计划的优化这些语句，或调整连接池大小等。</p>
<h3 id="预处理">预处理</h3>
<p>预处理方式就是把一下因计算量大而影响响应时间且非实时性的功能，挪到空闲时间计算，用到直接取。</p>
<p>例如系统要获得前一天人员工作效率情况，那么这些查询工作可以在第二天凌晨进行跑各种批量与聚合数据，然后在使用时候直接就能获取到结果，不必实时计算。</p>
<h3 id="梳理业务实现">梳理业务实现</h3>
<p>面对这些系统问题，不能只使用程序员的技术手段，同时要根据业务情况，考虑是否自己实现方式出现了问题。比如要做个每日用户数统计，当天的不算，可以选择每天跑批计算存储当天的用户数， 也可以实时统计过滤掉当天的用户，明显第二种更方便简洁，所以有时候多想想自己真正需要的东西，和业务需求背后隐藏的真实需求，这样设计出的系统更能从人为角度避开性能问题。</p>
<h3 id="总结">总结</h3>
<p>总之，当系统出现响应慢时候，要首先去定位问题，不要上来就直接加缓存。当然时间紧急情况下当然可以，只是这是个治标不治本的方案。在时间够的情况下，我们要主动分析到底哪里是真正的瓶颈。比如本人最近遇到的一个报表查询问题， 数据量百万级别，首先定位问题是由于联合索引最左匹配原则没匹配好，导致了全表扫描，因此系统巨慢，最后建好索引，速度顿时飞起。但是偶尔还会报这个查询慢，明明已经在数据库测试查询很快了，查看show processlist ，有大量语句堆积，然后检查了连接池设置，发现最大设置为20个，明显对于几百人使用的系统，完全不够用，最后调大后，问题解决，最后由于查询数据并非经常变动， 加了缓存后，速度更是飞起。</p>
<p>最后，根据二八原则， 当系统变的巨慢，大部分是数据库索引问题，再加缓存，基本解决8成的问题， 剩下的两成就需要经验与耐心，去寻找真正的瓶颈了。</p>
]]></content></item><item><title>Week1027_algorithm</title><link>/posts/arts/week1027_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:42 +0000</pubDate><guid>/posts/arts/week1027_algorithm/</guid><description>ARTS - Algorithm 补2019.1.9 122. 买卖股票的最佳时机 II 题目 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1:
输入: [7,1,5,3,6,4] 输出: 7 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。 示例 2:
输入: [1,2,3,4,5] 输出: 4 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。 示例 3:</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补201919">ARTS - Algorithm 补2019.1.9</h2>
<h2 id="122-买卖股票的最佳时机-iihttpsleetcode-cncomproblemsbest-time-to-buy-and-sell-stock-iisubmissions"><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/submissions/">122. 买卖股票的最佳时机 II</a></h2>
<h3 id="题目">题目</h3>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p>示例 1:</p>
<pre tabindex="0"><code>输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
</code></pre><p>示例 2:</p>
<pre tabindex="0"><code>输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
</code></pre><p>示例 3:</p>
<pre tabindex="0"><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre><h3 id="分析">分析</h3>
<p>所谓低买高卖没有手续费。我们先找买入时机，再找卖出时机，买入时机就是比后一天价格低，卖出时机就是阶段高点，也就是明天价格比今天低。那么代码如下：</p>
<pre tabindex="0"><code>		 
        int max = 0;
        int len = prices.length;
        boolean buy = false;
        int buyIndex = -1;
        for (int i = 0; i &lt; len - 1; i++) {
            // 买
            if (prices[i] &lt; prices[i + 1] &amp;&amp; !buy) {
                buy = true;
                buyIndex = i;
            }

            // 卖
            if (prices[i] &gt; prices[i + 1] &amp;&amp; buy) {
                buy = false;
                max += (prices[i] - prices[buyIndex]);
            }

        }

		 // 还没有卖，就最后一天价格成交
        if (buy) {
            max += (prices[len - 1] - prices[buyIndex]);
        }

        return max;
</code></pre><p>审查这个代码，我们需要一个标志确定当前是否买入了股票，使用了一个布尔型来确定，使用 buyIndex记录买入的价格位置，需要卖时候使用卖价减去买入价就是利润。 其实，在拥有买入价格位置索引时候，就已经代表买入了，如果卖出就设置为负，那么久不用多一个布尔标志了。</p>
<p>简化后如下：</p>
<pre tabindex="0"><code>
		int max = 0;
        int low = -1;
        int len = prices.length;
        for (int i = 0; i &lt; len - 1; i++) {
      		// 买入
            if (prices[i] &lt; prices[i + 1] &amp;&amp; low &lt; 0) {
                low = i;
            }
            // 卖出
            if (prices[i] &gt; prices[i + 1] &amp;&amp; low &gt;= 0) {
                max += (prices[i] - prices[low]);
                low = -1;
            }
        }

        if (low &gt;= 0) {
            max += (prices[len - 1] - prices[low]);
        }

        return max;
</code></pre><p>我们继续分析，其实我们只需要正确卖出时候计算利润就行了，其他情况不计算利润，那么代码简写如下：</p>
<h3 id="代码">代码</h3>
<pre tabindex="0"><code> 	public int maxProfit(int[] prices) {
        // 赚钱就卖

        int max = 0;
        for (int i = 0, len = prices.length; i &lt; len - 1; i++) {
            max += (Math.max(0, prices[i + 1] - prices[i]));

        }

        return max;

    }
</code></pre>]]></content></item><item><title>Week1027_review</title><link>/posts/arts/week1027_review/</link><pubDate>Fri, 31 Mar 2023 15:45:42 +0000</pubDate><guid>/posts/arts/week1027_review/</guid><description>ARTS - Review 补2019.1.9 Java Class Format （二） determine 决定 denote 代表 lexicographically 按字典顺序 distinguished 卓著 indicates 表示 4.1. The ClassFile Structure A class file consists of a single ClassFile structure:
ClassFile { u4 magic; u2 minor_version; u2 major_version; u2 constant_pool_count; cp_info constant_pool[constant_pool_count-1]; u2 access_flags; u2 this_class; u2 super_class; u2 interfaces_count; u2 interfaces[interfaces_count]; u2 fields_count; field_info fields[fields_count]; u2 methods_count; method_info methods[methods_count]; u2 attributes_count; attribute_info attributes[attributes_count]; } The items in the ClassFile structure are as follows:</description><content type="html"><![CDATA[<h2 id="arts---review-补201919">ARTS - Review 补2019.1.9</h2>
<h2 id="java-class-format-二">Java Class Format （二）</h2>
<ul>
<li>determine 决定</li>
<li>denote 代表</li>
<li>lexicographically 按字典顺序</li>
<li>distinguished 卓著</li>
<li>indicates 表示</li>
</ul>
<p>4.1. The ClassFile Structure
A class file consists of a single ClassFile structure:</p>
<pre tabindex="0"><code>ClassFile {
    u4             magic;
    u2             minor_version;
    u2             major_version;
    u2             constant_pool_count;
    cp_info        constant_pool[constant_pool_count-1];
    u2             access_flags;
    u2             this_class;
    u2             super_class;
    u2             interfaces_count;
    u2             interfaces[interfaces_count];
    u2             fields_count;
    field_info     fields[fields_count];
    u2             methods_count;
    method_info    methods[methods_count];
    u2             attributes_count;
    attribute_info attributes[attributes_count];
}
</code></pre><p>The items in the ClassFile structure are as follows:</p>
<p>ClassFile 的结构项如下：</p>
<blockquote>
<p>magic
The magic item supplies the magic number identifying the class file format; it has the value 0xCAFEBABE.</p>
</blockquote>
<p>魔数。 这个项目的魔数代表类文件的格式，值是 0xCAFEBABE。</p>
<blockquote>
<p>minor_version, major_version</p>
</blockquote>
<p>The values of the minor_version and major_version items are the minor and major version numbers of this class file. Together, a major and a minor version number determine the version of the class file format. If a class file has major version number M and minor version number m, we denote the version of its class file format as M.m. Thus, class file format versions may be ordered lexicographically, for example, 1.5 &lt; 2.0 &lt; 2.1.</p>
<blockquote>
<p>A Java Virtual Machine implementation can support a class file format of version v if and only if v lies in some contiguous range Mi.0 ≤ v ≤ Mj.m. The release level of the Java SE platform to which a Java Virtual Machine implementation conforms is responsible for determining the range.</p>
</blockquote>
<blockquote>
<p>Oracle&rsquo;s Java Virtual Machine implementation in JDK release 1.0.2 supports class file format versions 45.0 through 45.3 inclusive. JDK releases 1.1.* support class file format versions in the range 45.0 through 45.65535 inclusive. For k ≥ 2, JDK release 1.k supports class file format versions in the range 45.0 through 44+k.0 inclusive.</p>
</blockquote>
<p>minor_version 和 major_version 项目的值是这个类文件的 小版本号和主要版本号。主版本号和小版本号共同决定了类文件格式的版本。如果一个类文件有主版本号M 小版本号m, 我们表示这个类文件格式就是M.m. 所以，文件格式版本可能是按字典顺序，如 1.5&lt;2.0&lt;2.1</p>
<p>Java虚拟机实现可以支持版本V的类文件格式，当且仅当V位于某个连续范围 Mi.0 &lt;= v &lt;= Mj.m时，Java虚拟机实现所遵循的Java SE平台的发布级别负责确定范围。</p>
<p>Oracle的Java虚拟机实现 在JDK发布1.0.2 支持类文件格式版本从45.0 到45.3 。JDK发布1.1.* 支持类文件版本在45.0 到45.65335范围。对于 k&gt;=2 ，jdk发布1.k 支持类文件版本在45.0 到44_k.0。</p>
<blockquote>
<p>constant_pool_count</p>
</blockquote>
<p>The value of the constant_pool_count item is equal to the number of entries in the constant_pool table plus one. A constant_pool index is considered valid if it is greater than zero and less than constant_pool_count, with the exception for constants of type long and double noted in §4.4.5.</p>
<p>常量池个数</p>
<p>constant_pool_count 的值是 constant_pool表全部的项目 加一。 一个constant_pool 索引是被认为验证是否比0大比 constatn_pool_count小时候会发生类型为long的常亮类型异常。在4.4.5章节有加倍描述。</p>
<blockquote>
<p>constant_pool[]</p>
</blockquote>
<p>The constant_pool is a table of structures (§4.4) representing various string constants, class and interface names, field names, and other constants that are referred to within the ClassFile structure and its substructures. The format of each constant_pool table entry is indicated by its first &ldquo;tag&rdquo; byte.</p>
<blockquote>
</blockquote>
<p>The constant_pool table is indexed from 1 to constant_pool_count - 1.</p>
<p>constant_pool 是一个代表各类字符串常量、类和接口名字、属性名字和其他类文件结构或自己子结构的表。每个 constant_pool 表实体的格式是 第一个 tag 字节标志。</p>
<p>constant_pool 表索引从 1 到 constant_pool_count  - 1</p>
<blockquote>
<p>access_flags</p>
</blockquote>
<blockquote>
<p>The value of the access_flags item is a mask of flags used to denote access permissions to and properties of this class or interface. The interpretation of each flag, when set, is specified in Table 4.1-A.</p>
</blockquote>
<p>操作标志</p>
<p>access_flags 项目的值是一个用来记录这个类或接口属性操作许可的标志，每个标志的解释，当设置时候， 在列表 4.1-A.</p>
<p>Table 4.1-A. Class access and property modifiers</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACC_PUBLIC</td>
<td>0x0001</td>
<td>声明public ,可以从包外操作</td>
</tr>
<tr>
<td>ACC_FINAL</td>
<td>0x0010</td>
<td>声明final, 没有子类</td>
</tr>
<tr>
<td>ACC_SUPER</td>
<td>0x0020</td>
<td>invoke时候特殊对待父类方法</td>
</tr>
<tr>
<td>ACC_INTERFACE</td>
<td>0x0200</td>
<td>是一个接口，不是类</td>
</tr>
<tr>
<td>ACC_ABSTRACT</td>
<td>0x0400</td>
<td>抽象类，不被具体实例</td>
</tr>
<tr>
<td>ACC_SYNTHETIC</td>
<td>0x1000</td>
<td>不出现在源码中</td>
</tr>
<tr>
<td>ACC_ANNOTATION</td>
<td>0x2000</td>
<td>注解类型</td>
</tr>
<tr>
<td>ACC_ENUM</td>
<td>0x4000</td>
<td>枚举类型</td>
</tr>
</tbody>
</table>
<blockquote>
<p>An interface is distinguished by the ACC_INTERFACE flag being set. If the ACC_INTERFACE flag is not set, this class file defines a class, not an interface.</p>
</blockquote>
<blockquote>
<p>If the ACC_INTERFACE flag is set, the ACC_ABSTRACT flag must also be set, and the ACC_FINAL, ACC_SUPER, and ACC_ENUM flags set must not be set.</p>
</blockquote>
<blockquote>
<p>If the ACC_INTERFACE flag is not set, any of the other flags in Table 4.1-A may be set except ACC_ANNOTATION. However, such a class file must not have both its ACC_FINAL and ACC_ABSTRACT flags set (JLS §8.1.1.2).</p>
</blockquote>
<blockquote>
<p>The ACC_SUPER flag indicates which of two alternative semantics is to be expressed by the invokespecial instruction (§invokespecial) if it appears in this class or interface. Compilers to the instruction set of the Java Virtual Machine should set the ACC_SUPER flag. In Java SE 8 and above, the Java Virtual Machine considers the ACC_SUPER flag to be set in every class file, regardless of the actual value of the flag in the class file and the version of the class file.</p>
</blockquote>
<blockquote>
<p>The ACC_SUPER flag exists for backward compatibility with code compiled by older compilers for the Java programming language. In JDK releases prior to 1.0.2, the compiler generated access_flags in which the flag now representing ACC_SUPER had no assigned meaning, and Oracle&rsquo;s Java Virtual Machine implementation ignored the flag if it was set.</p>
</blockquote>
<blockquote>
<p>The ACC_SYNTHETIC flag indicates that this class or interface was generated by a compiler and does not appear in source code.</p>
</blockquote>
<blockquote>
<p>An annotation type must have its ACC_ANNOTATION flag set. If the ACC_ANNOTATION flag is set, the ACC_INTERFACE flag must also be set.</p>
</blockquote>
<blockquote>
<p>The ACC_ENUM flag indicates that this class or its superclass is declared as an enumerated type.</p>
</blockquote>
<blockquote>
<p>All bits of the access_flags item not assigned in Table 4.1-A are reserved for future use. They should be set to zero in generated class files and should be ignored by Java Virtual Machine implementations.</p>
</blockquote>
<p>ACC_INTERFACE 标志标明这是一个接口。如果ACC_INTERFACE表示没有设置，类文件定义是一个类，不是一个接口。</p>
<p>如果ACC_INTERFACE设置了，ACC_ABSTRACT 标志一定也设置了，而且ACC_FINAL和ACC_SUPER, ACC_ENUM 标志一定没有设置。</p>
<p>如果ACC_INTERFACE没有设置，表中任何其他标志都可能设置，除了ACC_ANNOTATION. 然而，诸如一个类文件必须不同时设置 ACC_FINAL 和ACC_ABSTRACT 标志。</p>
<p>ACC_SUPER 标志 表示如果出现在这个类或接口中，那么就会在执行 invokespecial 命令时候二选一的语义。编译成jvm命令集合需要设置ACC_SUPER 标志。在JAVA SE8 和以上，JVM 考虑将ACC_SUPER标志设置在每个类文件中，无论类文件实际的值是什么、版本是什么。</p>
<p>ACC_SUPER 对老的Java编译器是向后兼容的。在jdk 1.02. , 编译器构造 access_flags 现在操作ACC_SUPER 不需要分配意义，Oracle的jvm是忽略这个设置的。</p>
<p>ACC_SYNTHETIC 标志代表类或接口被编译器生成，不出现在的源码中。</p>
<p>一个注解类型必须有自己的ACC_ANNOTATION 标志集。如果 ACC_ANNOTATION设置了，ACC_INTERFACE标志也必须设置。</p>
<p>ACC_ENUM 标志代表类或他的超类声明为一个枚举类型。</p>
<p>所有的acc_Ess_flags 项目位没有在Table4.1-A 出现的都为未来保留。可能被设置为0，被Java虚拟机实现忽略。</p>
]]></content></item><item><title>Week1027_share</title><link>/posts/arts/week1027_share/</link><pubDate>Fri, 31 Mar 2023 15:45:42 +0000</pubDate><guid>/posts/arts/week1027_share/</guid><description>ARTS - Share 补2019.1.9 HashMap的key是否可以是null 简介 HashMap是一个经常要用到的键值对。我们知道它的大致原理就是对key进行hash计算，找到它在容器中的位置，在此过程重要的是hash计算，尽可能不同key不产生相同的hash值。那么 hashmap的key能否为null呢？
key能不能是null 我们在map容器中添加元素时候使用 map.put(k, v). 我们查看put方法：
public V put(K key, V value) { // 调用了putVal 方法， return putVal(hash(key), key, value, false, true); } // 在看hash(key)，是否要求不为空 static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16); } // hash(null) == 0 可见HashMap中， key可以是null，
putVal方法 final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { // 声明node 数组 Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; int n, i; // 把当前node数组指向 table, 如果为空就初始化一个 if ((tab = table) == null || (n = tab.</description><content type="html"><![CDATA[<h2 id="arts---share-补201919">ARTS - Share 补2019.1.9</h2>
<h2 id="hashmap的key是否可以是null">HashMap的key是否可以是null</h2>
<h3 id="简介">简介</h3>
<p>HashMap是一个经常要用到的键值对。我们知道它的大致原理就是对key进行hash计算，找到它在容器中的位置，在此过程重要的是hash计算，尽可能不同key不产生相同的hash值。那么 hashmap的key能否为null呢？</p>
<h3 id="key能不能是null">key能不能是null</h3>
<p>我们在map容器中添加元素时候使用 map.put(k, v). 我们查看put方法：</p>
<pre tabindex="0"><code> public V put(K key, V value) {
 	// 调用了putVal 方法，
     return putVal(hash(key), key, value, false, true);
 }
 
 // 在看hash(key)，是否要求不为空
 static final int hash(Object key) {
        int h;
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);
 }
 // hash(null) == 0
 
</code></pre><p>可见HashMap中， key可以是null，</p>
<h4 id="putval方法">putVal方法</h4>
<pre tabindex="0"><code>final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
        // 声明node 数组           
        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;
        // 把当前node数组指向 table, 如果为空就初始化一个
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
         // 如果要存放的位置没有元素，就放进去
        if ((p = tab[i = (n - 1) &amp; hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
        	// 不然，就看是否是相同的key
            Node&lt;K,V&gt; e; K k;
            if (p.hash == hash &amp;&amp;
                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
                e = p;
             // 是不是已经转化为TreeNode结构了，如果是就直接添加树里
            else if (p instanceof TreeNode)
                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);
            else {
            			// 不是的话添加，看是否需要转换成树
                for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                    if (e.hash == hash &amp;&amp;
                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                        break;
                    p = e;
                }
            }
            if (e != null) { // existing mapping for key
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            }
        }
        ++modCount;
        if (++size &gt; threshold)
            resize();
        afterNodeInsertion(evict);
        return null;
    }
</code></pre><h4 id="什么时候扩容">什么时候扩容</h4>
<p>有这么一段代码，当size 比 threshold 大时候，扩容。</p>
<pre tabindex="0"><code>if (++size &gt; threshold)
            resize();
</code></pre><p>那么，threshold是怎么来的？</p>
<p>是在resize来的。</p>
<pre tabindex="0"><code>
final Node&lt;K,V&gt;[] resize() {
        Node&lt;K,V&gt;[] oldTab = table;
        int oldCap = (oldTab == null) ? 0 : oldTab.length;
        int oldThr = threshold;
        int newCap, newThr = 0;
        if (oldCap &gt; 0) {
            if (oldCap &gt;= MAXIMUM_CAPACITY) {
                threshold = Integer.MAX_VALUE;
                return oldTab;
            }
            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;
                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)
                newThr = oldThr &lt;&lt; 1; // double threshold
        }
        else if (oldThr &gt; 0) // initial capacity was placed in threshold
            newCap = oldThr;
        else {               // zero initial threshold signifies using defaults
            newCap = DEFAULT_INITIAL_CAPACITY;
            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
        }
        if (newThr == 0) {
            float ft = (float)newCap * loadFactor;
            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?
                      (int)ft : Integer.MAX_VALUE);
        }
        
        // 第一次初始化走这段，这个newThr 又是来自于 
        // newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
        // newThr = 0.75 * 16 = 12
        
        threshold = newThr;
        @SuppressWarnings({&#34;rawtypes&#34;,&#34;unchecked&#34;})
            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];
        table = newTab;
        if (oldTab != null) {
            for (int j = 0; j &lt; oldCap; ++j) {
                Node&lt;K,V&gt; e;
                if ((e = oldTab[j]) != null) {
                    oldTab[j] = null;
                    if (e.next == null)
                        newTab[e.hash &amp; (newCap - 1)] = e;
                    else if (e instanceof TreeNode)
                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);
                    else { // preserve order
                        Node&lt;K,V&gt; loHead = null, loTail = null;
                        Node&lt;K,V&gt; hiHead = null, hiTail = null;
                        Node&lt;K,V&gt; next;
                        do {
                            next = e.next;
                            if ((e.hash &amp; oldCap) == 0) {
                                if (loTail == null)
                                    loHead = e;
                                else
                                    loTail.next = e;
                                loTail = e;
                            }
                            else {
                                if (hiTail == null)
                                    hiHead = e;
                                else
                                    hiTail.next = e;
                                hiTail = e;
                            }
                        } while ((e = next) != null);
                        if (loTail != null) {
                            loTail.next = null;
                            newTab[j] = loHead;
                        }
                        if (hiTail != null) {
                            hiTail.next = null;
                            newTab[j + oldCap] = hiHead;
                        }
                    }
                }
            }
        }
        return newTab;
    }
    
</code></pre><h4 id="什么时候转换树">什么时候转换树</h4>
<p>有这么一段，当binCount &gt;= TREEIFY_THRESHOLD - 1  时候，就转化成树，这个值是多少呢？</p>
<p>static final int TREEIFY_THRESHOLD = 8;</p>
<p>即等7时候就转为红黑树。</p>
<pre tabindex="0"><code>for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                    if (e.hash == hash &amp;&amp;
                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                        break;
                    p = e;
                }
</code></pre>]]></content></item><item><title>Week1027_tip</title><link>/posts/arts/week1027_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:42 +0000</pubDate><guid>/posts/arts/week1027_tip/</guid><description>ARTS - Tip 补2019.1.9 关于创建线程池 阿里巴巴规范 在阿里巴巴Java开发手册里有这么一条：
【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样 的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明:Executors 返回的线程池对象的弊端如下:
1)FixedThreadPool 和 SingleThreadPool: 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。
2)CachedThreadPool 和 ScheduledThreadPool: 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。
我们使用线程池一般就是这样(如下)，Java编程思想里面的也这么举例：
ExecutorService exec = Executors.newFixedThreadPool(10); ... 这里说的弊端第一条是队列堆积大量请求导致OOM，我们就看看这两个源码：
FixedThreadPool ,SingleThreadPool 首先是 FixedThreadPool:
// 这里返回了ThreadPoolExecutor 对象 public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;()); } public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&amp;lt;Runnable&amp;gt; workQueue) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.</description><content type="html"><![CDATA[<h2 id="arts---tip-补201919">ARTS - Tip 补2019.1.9</h2>
<h2 id="关于创建线程池">关于创建线程池</h2>
<h3 id="阿里巴巴规范">阿里巴巴规范</h3>
<p>在阿里巴巴Java开发手册里有这么一条：</p>
<blockquote>
<ol start="4">
<li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样
的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</li>
</ol>
</blockquote>
<blockquote>
<p>说明:Executors 返回的线程池对象的弊端如下:</p>
</blockquote>
<blockquote>
<p>1)FixedThreadPool 和 SingleThreadPool:
允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p>
<p>2)CachedThreadPool 和 ScheduledThreadPool:
允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>
</blockquote>
<p>我们使用线程池一般就是这样(如下)，Java编程思想里面的也这么举例：</p>
<pre tabindex="0"><code>ExecutorService exec = Executors.newFixedThreadPool(10);
...
</code></pre><p>这里说的弊端第一条是队列堆积大量请求导致OOM，我们就看看这两个源码：</p>
<h3 id="fixedthreadpool-singlethreadpool">FixedThreadPool ,SingleThreadPool</h3>
<p>首先是 FixedThreadPool:</p>
<pre tabindex="0"><code>// 这里返回了ThreadPoolExecutor 对象
public static ExecutorService newFixedThreadPool(int nThreads) {
        return new ThreadPoolExecutor(nThreads, nThreads,
                                      0L, TimeUnit.MILLISECONDS,
                                      new LinkedBlockingQueue&lt;Runnable&gt;());
    }
    
    
public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue&lt;Runnable&gt; workQueue) {
        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
             Executors.defaultThreadFactory(), defaultHandler);
    }
    
    
</code></pre><p>这里看到工作队列是 new LinkedBlockingQueue<!-- raw HTML omitted -->, 继续看这个队列源码：</p>
<pre tabindex="0"><code>  /**
     * Creates a {@code LinkedBlockingQueue} with a capacity of
     * {@link Integer#MAX_VALUE}.
     */
    public LinkedBlockingQueue() {
        this(Integer.MAX_VALUE);
    }
    
    
    
    /**
     * Creates a {@code LinkedBlockingQueue} with the given (fixed) capacity.
     *
     * @param capacity the capacity of this queue
     * @throws IllegalArgumentException if {@code capacity} is not greater
     *         than zero
     */
    public LinkedBlockingQueue(int capacity) {
        if (capacity &lt;= 0) throw new IllegalArgumentException();
        this.capacity = capacity;
        last = head = new Node&lt;E&gt;(null);
    }
</code></pre><p>可以知道这个LinkedBlockingQueue的最大容量就是Integer.MAX_VALUE. 上面说法正确，确实有可能堆积的请求超过这个最大限度而导致OOM。</p>
<p>我们再看SingleThreadPool:</p>
<pre tabindex="0"><code>public static ExecutorService newSingleThreadExecutor() {
        return new FinalizableDelegatedExecutorService
            (new ThreadPoolExecutor(1, 1,
                                    0L, TimeUnit.MILLISECONDS,
                                    new LinkedBlockingQueue&lt;Runnable&gt;()));
    }
    
    
</code></pre><p>这里工作队列也是使用了LinkedBlockingQueue ，显然最大也是Integer.MAX_VALUE。 他的核心也是创建了有一个 ThreadPoolExecutor，后面我们详细说这个。</p>
<h3 id="cachedthreadpool-和-scheduledthreadpool">CachedThreadPool 和 ScheduledThreadPool</h3>
<p>这两个也是说当创建线程数量大于Integer.MAX_VALUE时发生OOM异常，我们求证下:</p>
<pre tabindex="0"><code>public static ExecutorService newCachedThreadPool() {
        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                      60L, TimeUnit.SECONDS,
                                      new SynchronousQueue&lt;Runnable&gt;());
    }
</code></pre><p>这里直接设置了最大线程数为Integer.MAX_VALUE.</p>
<pre tabindex="0"><code>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {
        return new ScheduledThreadPoolExecutor(corePoolSize);
    }
    
    public ScheduledThreadPoolExecutor(int corePoolSize) {
        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,
              new DelayedWorkQueue());
    }
</code></pre><p>这里和CachedThreadPool一样，也是设置了最大线程数，super就是ThreadPoolExecutor</p>
<p>由此可知上面所言非虚。最后我们详细看看线程池创建都用到的ThreadPoolExecutor.</p>
<h3 id="threadpoolexecutor">ThreadPoolExecutor</h3>
<p>首先搞明白各个参数。</p>
<pre tabindex="0"><code>/**
 * Creates a new {@code ThreadPoolExecutor} with the given initial
 * parameters.
 *
 * @param corePoolSize the number of threads to keep in the pool, even
 *        if they are idle, unless {@code allowCoreThreadTimeOut} is set
核心池大小 。就是池中保持的线程数量，尽管他们是空闲的，除非 allowCoreThreadTimeOut 设置了核心线程最大空闲时间。
 *        
 * @param maximumPoolSize the maximum number of threads to allow in the
 *        pool
 *        池最大尺寸。池子允许的最大线程数。
 * @param keepAliveTime when the number of threads is greater than
 *        the core, this is the maximum time that excess idle threads
 *        will wait for new tasks before terminating.
 *        保持存活时间。当线程数超过核心数时，这些线程最大空闲时间。
 * @param unit the time unit for the {@code keepAliveTime} argument
 * 			单位。这个是keepAliveTime设置数量的单位。
 * 		 
 * @param workQueue the queue to use for holding tasks before they are
 *        executed.  This queue will hold only the {@code Runnable}
 *        tasks submitted by the {@code execute} method.
 *        工作队列。在任务被执行前持有这些任务的队列。在方法 execute 提交任务之前，队列一直持有。
 * @param threadFactory the factory to use when the executor
 *        creates a new thread
 *        线程工厂 执行器用来创建线程。
 *        
 * @param handler the handler to use when execution is blocked
 *        because the thread bounds and queue capacities are reached
			因为到达线程边界和队列容量执行被阻塞，这时候执行handler
 
 
 * @throws IllegalArgumentException if one of the following holds:&lt;br&gt;
 *         {@code corePoolSize &lt; 0}&lt;br&gt;
 *         {@code keepAliveTime &lt; 0}&lt;br&gt;
 *         {@code maximumPoolSize &lt;= 0}&lt;br&gt;
 *         {@code maximumPoolSize &lt; corePoolSize}
			当任一以下发生就抛出IllegalArgumentException 非法参数异常。
			
			corePoolSize &lt; 0
			keepAliveTime &lt; 0
			maximumPoolSize &lt;= 0
			maximumPoolSize &lt; corePoolSize

 * @throws NullPointerException if {@code workQueue}
 *         or {@code threadFactory} or {@code handler} is null

 	当 workQueue 或 threadFactory 或hander 为空时 抛出空指针异常。
 */
public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue&lt;Runnable&gt; workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler) {
        if (corePoolSize &lt; 0 ||
            maximumPoolSize &lt;= 0 ||
            maximumPoolSize &lt; corePoolSize ||
            keepAliveTime &lt; 0)
            throw new IllegalArgumentException();
        if (workQueue == null || threadFactory == null || handler == null)
            throw new NullPointerException();
        this.acc = System.getSecurityManager() == null ?
                null :
                AccessController.getContext();
        this.corePoolSize = corePoolSize;
        this.maximumPoolSize = maximumPoolSize;
        this.workQueue = workQueue;
        this.keepAliveTime = unit.toNanos(keepAliveTime);
        this.threadFactory = threadFactory;
        this.handler = handler;
    }
</code></pre><h3 id="分析线程池">分析线程池</h3>
<p>了解了ThreadPoolExecutor ， 就知道了FixedThreadPool的  corePoolSize 和maximumPoolSize 是相等的，也就是说核心线程数等于最大线程数，超过核心线程数的空闲线程。所以， keepAliveTime就没有存在的必要了，直接设置为0.</p>
<p>SingleThreadExecutor和 FixedThreadPool 一样， 它是FixedThreadPool的一种形式，即coreThreadPool和maximumThreadPoll 都为1 的FixedThreadPool.</p>
<p>再看CachedThreadPool， 它的核心线程数为0， 最大线程数为Integer.MAX_VALUE， 非核心线程最大空闲时间为60秒。也就是说他没有保持核心线程，只要任务提交就进队列，直到达到容量，任务完成就空闲，空闲超过60秒就释放。</p>
<p>ScheduledThreadPool，有核心线程数，最大线程数为Integer.MAX_VALUE，没有空闲时间。</p>
]]></content></item><item><title>Week1028_algorithm</title><link>/posts/arts/week1028_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:42 +0000</pubDate><guid>/posts/arts/week1028_algorithm/</guid><description>ARTS - Algorithm 补2019.1.16 160. 相交链表 题目 编写一个程序，找到两个单链表相交的起始节点。 如下面的两个链表：
在节点 c1 开始相交。
示例 1： 输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3 输出：Reference of the node with value = 8 输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
示例 2： 输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 输出：Reference of the node with value = 2 输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补2019116">ARTS - Algorithm 补2019.1.16</h2>
<h2 id="160-相交链表httpsleetcode-cncomproblemsintersection-of-two-linked-listssubmissions"><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/submissions/">160. 相交链表</a></h2>
<h3 id="题目">题目</h3>
<p>编写一个程序，找到两个单链表相交的起始节点。
如下面的两个链表：</p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt=""></p>
<p>在节点 c1 开始相交。</p>
<p>示例 1：
<img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" alt=""></p>
<blockquote>
<p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p>
</blockquote>
<p>示例 2：
<img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png" alt=""></p>
<blockquote>
<p>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Reference of the node with value = 2
输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p>
</blockquote>
<p>示例 3：</p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png" alt=""></p>
<p>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
输出：null
输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
解释：这两个链表不相交，因此返回 null。</p>
<p>注意：</p>
<p>如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</p>
<h3 id="分析">分析</h3>
<p>求链表相交，首先暴力算法，对链表 A的每个节点都遍历链表B来比较，知道找到相交的，代码如下：</p>
<pre tabindex="0"><code>public ListNode getIntersectionNode(ListNode headA, ListNode headB) {

        ListNode p1 = headA;
        ListNode p2 = headB;

        while (p1 != null) {

            while (p2 != null) {
                if (p1 == p2) {
                    return p1;
                }
                p2 = p2.next;
            }
            p1 = p1.next;
            // 重置p2
            p2 = headB;
        }


        return null;

    }
</code></pre><p>然后看到注意里说，尽量满足 O(n) 时间复杂度，且用 O(1) 内存。那么，用上面的算法就是 m x n 的时间复杂度了。</p>
<p>我们继续审题，如果两个链表长度一样，那么共进退就可以找到相逢的地方了，可以先找到两个链表的长度，然后让长的往前走几步，两个长度相等再一起走，就能找到了。</p>
<p>代码如下</p>
<h3 id="代码">代码</h3>
<pre tabindex="0"><code>public static ListNode getIntersectionNode2(ListNode headA, ListNode headB) {

        int lenA = getLength(headA);
        int lenB = getLength(headB);

        if (lenA == 0 || lenB == 0) {
            return null;
        }

        if (lenA &lt; lenB) {
            // swap
            ListNode tmp = headA;
            headA = headB;
            headB = tmp;

        }

        for (int i = 0; i &lt; Math.abs(lenA - lenB); i++) {
            headA = headA.next;
        }

        while (headA != headB) {
            headA = headA.next;
            headB = headB.next;
        }


        return headA;


    }

    private static int getLength(ListNode node) {
        if (node == null) {
            return 0;
        }
        int n = 0;
        while (node != null) {
            node = node.next;
            n++;
        }

        return n;

    }
</code></pre>]]></content></item><item><title>Week1028_review</title><link>/posts/arts/week1028_review/</link><pubDate>Fri, 31 Mar 2023 15:45:42 +0000</pubDate><guid>/posts/arts/week1028_review/</guid><description>ARTS - Review 补2019.1.16 Java class File Format（3） inherited v. 继承 specification n. 规范 this_class
The value of the this_class item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a CONSTANT_Class_info structure (§4.4.1) representing the class or interface defined by this class file.
this_class 这一项的值必须是constant_pool里验证过的值。constant_pool 实体索引必须是CONSTANT_Class_info 结构 代表定义在类文件的类或接口。
super_class For a class, the value of the super_class item either must be zero or must be a valid index into the constant_pool table.</description><content type="html"><![CDATA[<h2 id="arts---review-补2019116">ARTS - Review 补2019.1.16</h2>
<h2 id="java-class-file-format3">Java class File Format（3）</h2>
<ul>
<li>inherited v. 继承</li>
<li>specification n. 规范</li>
</ul>
<blockquote>
<p>this_class</p>
<p>The value of the this_class item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a CONSTANT_Class_info structure (§4.4.1) representing the class or interface defined by this class file.</p>
</blockquote>
<p>this_class 这一项的值必须是constant_pool里验证过的值。constant_pool 实体索引必须是CONSTANT_Class_info 结构 代表定义在类文件的类或接口。</p>
<blockquote>
<p>super_class
For a class, the value of the super_class item either must be zero or must be a valid index into the constant_pool table. If the value of the super_class item is nonzero, the constant_pool entry at that index must be a CONSTANT_Class_info structure representing the direct superclass of the class defined by this class file. Neither the direct superclass nor any of its superclasses may have the ACC_FINAL flag set in the access_flags item of its ClassFile structure.</p>
</blockquote>
<p>对于一个类，super_class 的值不能为0 也不能为一个contant_pool表里的值。如果super_class 是一个空值，constant_pool实体索引必须是一个CONSTATN_Class_info 结构代表类文件的直接父类。直接父类或它自己任何父类可能有ACC_FINAL 标志在 access_flags类文件结构。</p>
<blockquote>
<p>If the value of the super_class item is zero, then this class file must represent the class Object, the only class or interface without a direct superclass.</p>
</blockquote>
<p>如果super_class 是0，这个类文件必须代表类对象，没有直接父类。</p>
<blockquote>
<p>For an interface, the value of the super_class item must always be a valid index into the constant_pool table. The constant_pool entry at that index must be a CONSTANT_Class_info structure representing the class Object.</p>
</blockquote>
<p>对于一个借口，super_class的值必须是constant_pool验证过的索引值。constant_pool实体必须是一个 CONSTANT_Class_info结构，代表类对象。</p>
<blockquote>
<p>interfaces_count</p>
</blockquote>
<blockquote>
<p>The value of the interfaces_count item gives the number of direct superinterfaces of this class or interface type.</p>
</blockquote>
<p>interfaces_count 的值是这个类或接口的直接父接口的数量。</p>
<blockquote>
<p>interfaces[]</p>
</blockquote>
<blockquote>
<p>Each value in the interfaces array must be a valid index into the constant_pool table. The constant_pool entry at each value of interfaces[i], where 0 ≤ i &lt; interfaces_count, must be a CONSTANT_Class_info structure representing an interface that is a direct superinterface of this class or interface type, in the left-to-right order given in the source for the type.</p>
</blockquote>
<p>interfaces数组的每个值都必须是constant_table验证过的。constant_pool实体在interfaces[i]的每个值都是  0 &lt;= i &lt; interfaces_count, 必须是CONSTANT_Class_info结构代表这个在源类型中从左到右排序的类或接口的直接父接口。</p>
<blockquote>
<p>fields_count</p>
</blockquote>
<blockquote>
<p>The value of the fields_count item gives the number of field_info structures in the fields table. The field_info structures represent all fields, both class variables and instance variables, declared by this class or interface type.</p>
</blockquote>
<p>fields_count 项目的值是属性列表里的 <code>filed_info</code> 结构的数量。<code>field_info</code>结构代表这个类或接口声明的所有的属性，类属性和实例属性。</p>
<blockquote>
<p>fields[]</p>
<p>Each value in the fields table must be a field_info structure (§4.5) giving a complete description of a field in this class or interface. The fields table includes only those fields that are declared by this class or interface. It does not include items representing fields that are inherited from superclasses or superinterfaces.</p>
</blockquote>
<p>fields表每个值必须是一个field_info 结构， 提供了一个这个类或接口的属性完整描述。属性表仅仅包括这个类或接口声明的属性。不包括从父类或父接口继承的属性。</p>
<blockquote>
<p>methods_count</p>
<p>The value of the methods_count item gives the number of method_info structures in the methods table.</p>
</blockquote>
<p>方法表中 method_info 结构的数量。</p>
<blockquote>
<p>methods[]</p>
<p>Each value in the methods table must be a method_info structure (§4.6) giving a complete description of a method in this class or interface. If neither of the ACC_NATIVE and ACC_ABSTRACT flags are set in the access_flags item of a method_info structure, the Java Virtual Machine instructions implementing the method are also supplied.</p>
</blockquote>
<p>方法表中的每个值必须是一个 method_info 结构。是这个类或接口的完整描述。如果ACC_NATIVE和ACC_ABSTRACT标志在access_flags method_info结构中没有设置， Java虚拟机实现的方法也支持。</p>
<blockquote>
<p>The method_info structures represent all methods declared by this class or interface type, including instance methods, class methods, instance initialization methods (§2.9), and any class or interface initialization method (§2.9). The methods table does not include items representing methods that are inherited from superclasses or superinterfaces.</p>
</blockquote>
<p>method_info 结构代表这个类或接口类型声明的所有方法，包括实例方法，类方法，接口初始化方法。方法表不包括继承自父类或父接口的方法。</p>
<blockquote>
<p>attributes_count
The value of the attributes_count item gives the number of attributes in the attributes table of this class.</p>
</blockquote>
<p>attributes_count 表示这个类属性表的属性数量。</p>
<blockquote>
<p>attributes[]
Each value of the attributes table must be an attribute_info structure (§4.7).</p>
</blockquote>
<blockquote>
<p>The attributes defined by this specification as appearing in the attributes table of a ClassFile structure are listed in Table 4.7-C.</p>
</blockquote>
<blockquote>
<p>The rules concerning attributes defined to appear in the attributes table of a ClassFile structure are given in §4.7.</p>
</blockquote>
<blockquote>
<p>The rules concerning non-predefined attributes in the attributes table of a ClassFile structure are given in §4.7.1.</p>
</blockquote>
<p>每个属性必须是一个 attribute_info 结构。
一个类文件结构中出现的属性定义规范列表在 表 4.7-C 里。
&hellip;</p>
]]></content></item><item><title>Week1028_tip</title><link>/posts/arts/week1028_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:42 +0000</pubDate><guid>/posts/arts/week1028_tip/</guid><description>ARTS - Tip 补 2019.1.16 线程池的状态 我们来看 ThreadPoolExecutor 的execute方法。
线程池提交方法有两个， execute 和 submit, execute 提交的是无返回值的Runnable, submit提交的是有返回值 Callable.今天先看execute.
/** * * 在将来某个时刻执行给定的任务，可能在一个新的线程里或池中存在的的线程里。 * 如果任务不能被提交执行，这个执行器已经被当前 rejectExecutionHandler 停止 * * * @param command 待执行的任务 * @throws RejectedExecutionException 如果任务不被接受执行，抛出这个异常 */ public void execute(Runnable command) { if (command == null) throw new NullPointerException(); /* * Proceed in 3 steps: * * 1. 如果运行线程少于corePoolSize, 会尝试启动一个新线程首先执行这个任务。 * 调用 addWork 原子检查 运行状态 和 工作线程数，避免返回false不能添加线程的情况 * * 2. 如果一个任务能被成功进入队列， 之后我们仍需二次验证我们是否应该添加一个线程 * (因为存在存在上次检查线程死亡的情况)或者在实体进入到这个方法时 池子关闭了。所以 * 我们重新状态检查 如果必要回滚入队实体如果停止了，或者没有的话启动一个新线程 * * 3.</description><content type="html"><![CDATA[<h2 id="arts---tip-补-2019116">ARTS - Tip 补 2019.1.16</h2>
<h2 id="线程池的状态">线程池的状态</h2>
<p>我们来看 ThreadPoolExecutor 的execute方法。</p>
<p>线程池提交方法有两个， execute 和 submit, execute 提交的是无返回值的Runnable, submit提交的是有返回值 Callable.今天先看execute.</p>
<pre tabindex="0"><code>/**

     * 
     * 在将来某个时刻执行给定的任务，可能在一个新的线程里或池中存在的的线程里。
     * 如果任务不能被提交执行，这个执行器已经被当前 rejectExecutionHandler 停止
     *
     *
     * @param command 待执行的任务
     * @throws RejectedExecutionException 如果任务不被接受执行，抛出这个异常
     */
     
    public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
        /*
         * Proceed in 3 steps:
         *
         * 1. 如果运行线程少于corePoolSize, 会尝试启动一个新线程首先执行这个任务。
         * 调用 addWork 原子检查 运行状态 和 工作线程数，避免返回false不能添加线程的情况
         * 
         * 2. 如果一个任务能被成功进入队列， 之后我们仍需二次验证我们是否应该添加一个线程
         * (因为存在存在上次检查线程死亡的情况)或者在实体进入到这个方法时 池子关闭了。所以
         * 我们重新状态检查 如果必要回滚入队实体如果停止了，或者没有的话启动一个新线程
         * 
         * 3. 如果我们不能够入队任务，我们尝试添加一个新的线程。如果失败了，我们知道关闭了
         * 或者饱和了所以拒绝了任务。
         */
        int c = ctl.get();
        if (workerCountOf(c) &lt; corePoolSize) {
            if (addWorker(command, true))
                return;
            c = ctl.get();
        }
        if (isRunning(c) &amp;&amp; workQueue.offer(command)) {
            int recheck = ctl.get();
            if (! isRunning(recheck) &amp;&amp; remove(command))
                reject(command);
            else if (workerCountOf(recheck) == 0)
                addWorker(null, false);
        }
        else if (!addWorker(command, false))
            reject(command);
    }
</code></pre><p>首先要先说明ctl这个状态变量：</p>
<pre tabindex="0"><code>/**
     * ctr 是一个原子量，包含两个属性 workerCount 和 runState.
     * workerCount 表示当前有效的线程数，也就是Worker的数量
     * runState 表示的线程池状态， 运行、关闭等。。

     * 
     * 为了把它俩打包成一个int 值，我们限制 workerCount为 (2^29-1) (大约5亿) 个线程
     * 而不是 (2^31)-1 (大约20亿) 可表示的。
     * workerConunt 是已经被提交启动不允许停止的worker 数量。数值可能和实际活跃线程数
     * 稍有不同，例如，当一个线程工厂请求时创建线程失败，退出时在线程停止前记录了数量。用户
     * 可见线程池大小是当前工作数大小。
     * 
       *runState 是整个线程池生命周期，有如下值：
       1. RUNNING 可以添加任务，处理在队列中的任务
       2. SHUTDOWN 不接受新任务，但是处理完在队列中的任务
       3. STOP 不接受新任务，也不处理队列中的任务，中断正在处理的任务。
       4. TIDYING 所有任务结束，workerCount 为0, 
       5. terminated()方法结束
     *
     *   RUNNING:  Accept new tasks and process queued tasks
     *   SHUTDOWN: Don&#39;t accept new tasks, but process queued tasks
     *   STOP:     Don&#39;t accept new tasks, don&#39;t process queued tasks,
     *             and interrupt in-progress tasks
     *   TIDYING:  All tasks have terminated, workerCount is zero,
     *             the thread transitioning to state TIDYING
     *             will run the terminated() hook method
     *   TERMINATED: terminated() has completed
     *
     * The numerical order among these values matters, to allow
     * ordered comparisons. The runState monotonically increases over
     * time, but need not hit each state. The transitions are:
     * 状态转化主要是：
     * RUNNING -&gt; SHUTDOWN(调用shutdown())
     *    On invocation of shutdown(), perhaps implicitly in finalize()
     * (RUNNING or SHUTDOWN) -&gt; STOP (调用 shutdownNow())
     *    On invocation of shutdownNow()
     * SHUTDOWN -&gt; TIDYING queue队列和 pool都为空
     *    When both queue and pool are empty
     * STOP -&gt; TIDYING pool 为空
     *    When pool is empty
     * TIDYING -&gt; TERMINATED 调用 terminated() 
     *    When the terminated() hook method has completed
     *
     * Threads waiting in awaitTermination() will return when the
     * state reaches TERMINATED.
     *
     * Detecting the transition from SHUTDOWN to TIDYING is less
     * straightforward than you&#39;d like because the queue may become
     * empty after non-empty and vice versa during SHUTDOWN state, but
     * we can only terminate if, after seeing that it is empty, we see
     * that workerCount is 0 (which sometimes entails a recheck -- see
     * below).
     */
    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));
</code></pre><p>再来看状态码：</p>
<pre tabindex="0"><code>// 低29位是线程池容量，高3位是线程状态
private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));
	// 设定偏移量 29
    private static final int COUNT_BITS = Integer.SIZE - 3;
    // 设置最大容量 2^29 -1
    private static final int CAPACITY   = (1 &lt;&lt; COUNT_BITS) - 1;

	// 几个状态， 用 Integer 的高三位表示
    // runState is stored in the high-order bits
    // 111
    private static final int RUNNING    = -1 &lt;&lt; COUNT_BITS;
    // 000
    private static final int SHUTDOWN   =  0 &lt;&lt; COUNT_BITS;
    // 001
    private static final int STOP       =  1 &lt;&lt; COUNT_BITS;
    // 010
    private static final int TIDYING    =  2 &lt;&lt; COUNT_BITS;
    // 011
    private static final int TERMINATED =  3 &lt;&lt; COUNT_BITS;

    // Packing and unpacking ctl
    // 获取线程池状态，取前三位
    private static int runStateOf(int c)     { return c &amp; ~CAPACITY; }
    // 获取当前正在工作的worker ，主要是取后29位
    private static int workerCountOf(int c)  { return c &amp; CAPACITY; }
    // 获取 ctl
    private static int ctlOf(int rs, int wc) { return rs | wc; }
</code></pre>]]></content></item><item><title>Week1024_review</title><link>/posts/arts/week1024_review/</link><pubDate>Fri, 31 Mar 2023 15:45:41 +0000</pubDate><guid>/posts/arts/week1024_review/</guid><description>ARTS - Review 补12.17 1.4 What Is New in MySQL 8.0 summarizes v 总结 deprecated v 弃用 companion n 伴侣，伙伴 incorporates v 合并 associated adj. 相关 enhancements 增强 accompanying adj. 随同 latency 等待时间 restrictions 限制 This section summarizes what has been added to, deprecated in, and removed from MySQL 8.0. A companion section lists MySQL server options and variables that have been added, deprecated, or removed in MySQL 8.0. See Section 1.</description><content type="html"><![CDATA[<h2 id="arts---review-补1217">ARTS - Review 补12.17</h2>
<h2 id="14-what-is-new-in-mysql-80">1.4 What Is New in MySQL 8.0</h2>
<ul>
<li>summarizes v 总结</li>
<li>deprecated v 弃用</li>
<li>companion n 伴侣，伙伴</li>
<li>incorporates v 合并</li>
<li>associated adj. 相关</li>
<li>enhancements 增强</li>
<li>accompanying adj. 随同</li>
<li>latency 等待时间</li>
<li>restrictions 限制</li>
</ul>
<p>This section summarizes what has been added to, deprecated in, and removed from MySQL 8.0. A companion section lists MySQL server options and variables that have been added, deprecated, or removed in MySQL 8.0. See Section 1.5, “Server and Status Variables and Options Added, Deprecated, or Removed in MySQL 8.0”.</p>
<p>这一章总结了MySQL8.0 添加的和弃用的，和删除的。附属部分列出了MySQL服务器被增加、弃用或删除的选项和变量。</p>
<h3 id="features-added-in-mysql-80">Features Added in MySQL 8.0</h3>
<p>The following features have been added to MySQL 8.0:</p>
<p><strong>Data dictionary</strong>.  MySQL now incorporates a transactional data dictionary that stores information about database objects. In previous MySQL releases, dictionary data was stored in metadata files and nontransactional tables. For more information, see Chapter 14, MySQL Data Dictionary.</p>
<p><strong>Atomic Data Definition Statements (Atomic DDL)</strong>.  An atomic DDL statement combines the data dictionary updates, storage engine operations, and binary log writes associated with a DDL operation into a single, atomic transaction. For more information, see Section 13.1.1, “Atomic Data Definition Statement Support”.</p>
<p><strong>Security and account management.</strong>  These enhancements were added to improve security and enable greater DBA flexibility in account management:</p>
<p>以下特性被添加到MySQL8.0</p>
<p>数据字典。MySQL现在合并一个事务型的数据字典来存储数据库对象信息。在之前的MySQL发布版里，字典数据是存储在没有事务的表和元数据文件中。</p>
<p>原子数据定义语句 (Atomic DDL). 一个原子DDL语句将与DDL操作相关的数据字典更新，存储引擎操作，和二进制日志写入组合到单个原子事务中。</p>
<p>安全和账号管理。这些增强被添加到提升安全和在账户管理中实现更大灵活性：</p>
<ul>
<li>The grant tables in the mysql system database are now InnoDB (transactional) tables. Previously, these were MyISAM (nontransactional) tables. The change of grant table storage engine underlies an accompanying change to the behavior of account-management statements. Previously, an account-management statement (such as CREATE USER or DROP USER) that named multiple users could succeed for some users and fail for others. Now, each statement is transactional and either succeeds for all named users or rolls back and has no effect if any error occurs. The statement is written to the binary log if it succeeds, but not if it fails; in that case, rollback occurs and no changes are made. For more information, see Section 13.1.1, “Atomic Data Definition Statement Support”.</li>
</ul>
<p>授权表在MySQL系统数据库是InnoDB(事务型)表。之前是MyISAM(无事务)表。授权表底层存储引擎的改变让账户管理语句也随着变。。之前，一个账户管理语句(例如  CREATE USER or DROP USer)明明多个用户可能对某些用户成功，对另外用户失败。现在，每个语句是事务的，对所有用户要么全成功，要么全回滚，不再出错。语句是被泄劲二进制文件如果成功的话，失败的话就不会。那样的话，回滚发生时不会有任何改变。</p>
<ul>
<li>A new caching_sha2_password authentication plugin is available. Like the sha256_password plugin, caching_sha2_password implements SHA-256 password hashing, but uses caching to address latency issues at connect time. It also supports more connection protocols and does not require linking against OpenSSL for RSA key pair-based password-exchange capabilities. See Section 6.5.1.3, “Caching SHA-2 Pluggable Authentication”.</li>
</ul>
<p>一个新的 caching_sha2_password 授权插件被应用。像sha256_password 插件， caching_sha2_password 实现了 SHA-256密码三列，但是在连接时间使用缓存来定位延迟问题时间。它也支持更多链接协议，不要求链接openSSL RAS key 基于对的密码交换的容量。</p>
<ul>
<li>The caching_sha2_password and sha256_password authentication plugins provide more secure password encryption than the mysql_native_password plugin, and caching_sha2_password provides better performance than sha256_password. Due to these superior security and performance characteristics of caching_sha2_password, it is now the preferred authentication plugin, and is also the default authentication plugin rather than mysql_native_password. For information about the implications of this change of default plugin for server operation and compatibility of the server with clients and connectors, see caching_sha2_password as the Preferred Authentication Plugin.</li>
</ul>
<p>caching_sha2_password 和 sha256_password 授权插件提供比mysql_native_password插件更多安全密码加密，caching_sha2_password提供比mysql_native_password更好的性能。由于caching_sha2_password优越的安全和性能特点，它限制是更首选的身份验证插件，也是默认授权插件，而不是mysql_native_password.</p>
<ul>
<li>MySQL now supports roles, which are named collections of privileges. Roles can be created and dropped. Roles can have privileges granted to and revoked from them. Roles can be granted to and revoked from user accounts. The active applicable roles for an account can be selected from among those granted to the account, and can be changed during sessions for that account. For more information, see Section 6.3.4, “Using Roles”.</li>
</ul>
<p>MySQL现在还支持角色，可以批量分配权限。角色可以创建和删除。橘色可以自己获得授权，移除权限。可以被用户账户授权、移除授权。活跃的应用橘色对一个账户来说是可选的，在账号会话期间可以改变。</p>
<ul>
<li>MySQL now maintains information about password history, enabling restrictions on reuse of previous passwords. DBAs can require that new passwords not be selected from previous passwords for some number of password changes or period of time. It is possible to establish password-reuse policy globally as well as on a per-account basis.</li>
</ul>
<p>MySQL维护密码历史，能够管制使用之前的密码。DBA们可以要求新密码不被老密码选中正在几次或一段时间内。可以在全局和每个账户上建立密码重用策略。</p>
<ul>
<li>It is now possible to require that attempts to change account passwords be verified by specifying the current password to be replaced. This enables DBAs to prevent users from changing password without proving that they know the current password. It is possible to establish password-verification policy globally as well as on a per-account basis.</li>
</ul>
<p>现在可以要求通过指定要替换当前密码来验证更改账户密码尝试。这使得DBA能够在不证明用户知道密码的情况下，组织用户修改密码。可以在全局和每个账户上建立密码验证策略。</p>
<ul>
<li>
<p>Accounts are now permitted to have dual passwords, which enables phased password changes to be performed seamlessly in complex multiple-server systems, without downtime.</p>
</li>
<li>
<p>These new capabilities provide DBAs more complete control over password management. For more information, see Section 6.3.8, “Password Management”.</p>
</li>
<li>
<p>MySQL now supports FIPS mode, if compiled using OpenSSL, and an OpenSSL library and FIPS Object Module are available at runtime. FIPS mode imposes conditions on cryptographic operations such as restrictions on acceptable encryption algorithms or requirements for longer key lengths. See Section 6.6, “FIPS Support”.</p>
</li>
<li>
<p>MySQL now sets the access control granted to clients on the named pipe to the minimum necessary for successful communication on Windows. Newer MySQL client software can open named pipe connections without any additional configuration. If older client software cannot be upgraded immediately, the new named_pipe_full_access_group server system variable can be used to give a Windows group the necessary permissions to open a named pipe connection. Membership in the full-access group should be restricted and temporary.</p>
</li>
</ul>
<p>现在允许帐户具有双重密码，这使得在复杂的多服务器系统中可以无缝地执行阶段性密码更改，而无需停机。</p>
<p>这些新功能使DBA能够更全面地控制密码管理。有关更多信息，请参见第6.3.8节“密码管理”。</p>
<p>如果使用openssl编译，mysql现在支持fips模式，并且openssl库和fips对象模块在运行时可用。FIPS模式对加密操作施加条件，例如对可接受的加密算法的限制或对较长密钥长度的要求。参见第6.6节“FIPS支持”。</p>
<p>MySQL现在将在命名管道上授予客户端的访问控制设置为在Windows上成功通信所必需的最小值。较新的MySQL客户端软件可以打开命名管道连接，而无需任何附加配置。如果无法立即升级旧的客户端软件，则可以使用新的命名管道完整访问组服务器系统变量授予Windows组打开命名管道连接所需的权限。完全访问组中的成员资格应受到限制并是临时的。</p>
]]></content></item><item><title>Week1024_share</title><link>/posts/arts/week1024_share/</link><pubDate>Fri, 31 Mar 2023 15:45:41 +0000</pubDate><guid>/posts/arts/week1024_share/</guid><description>ARTS-Share 补12.17 对软件工程的思考 什么是工程 工程就是做成某事的一整套方案。为什么要提出软件工程，因为为了像普通工程一样，过程控制，结果控制，整体控制，达到一个好的结果，所以需要工程化软件生产实现过程。说到底，就是为了又快又好的完成产品。
怎么做 又快又好的完成软件，就需要工程化的控制怎么快，怎么好的问题。
怎么快？
时间应该花在哪里？不同阶段时间应该花在哪里？资源应该投入多少，资源投入应该如何前后搭配？
怎么好？
不同工种搭配比例如何？如何来管控过程质量？如何在时间紧任务重的情况下，和质量高妥协？以后是否方便拓展？ 下次升级在本次基础上是能更快还是更慢？
以上都是理论范畴。
软件工程的套路 来到软件工程，我们提出了敏捷的思想，结对编程的思想，TDD，DDD 各种等，都是为了更好更快的完成产品。
那么抛开以上这种思想，我们回归本源，到底需要什么？
最好的情况是高水平的人组成的相互配合效率超高的团队，类似初创企业的十八罗汉、核心三人、五人组。
当然现实是，事情是人做的，是人做有各种不确定性。我们无法保证招到的都是大牛，成本或许不允许，我们能做的就是在资源短缺的情况下，尽可能的平衡与妥协。于是我们需要还算过的去的开发人员，他们可能会出错，我们配置相应的测试人员，然后我们需要辅助工具，比如项目管理系统，bug追踪系统，这些都是为了让人更高效，项目质量更高，而不要陷入为了系统而系统。最后项目成功交付，完成。
反复实践几次，团队磨合更好，经历几次硬仗，会变成很有战斗力的团队。
先解决基础，再上台阶 团队有战斗力，当然这个也会存在一些问题，就需要在此基础上，去发现，去调整。比如引入TDD，DDD ，敏捷，是否会让整体效率再上个台阶？这时候就是打完基础后的优化过程，基础没打好，这些都是空中楼阁，更高阶的，只能说不知道，具体问题具体分析。反复实践总结，总会找到适合的路。</description><content type="html"><![CDATA[<h2 id="arts-share补1217">ARTS-Share	补12.17</h2>
<h2 id="对软件工程的思考">对软件工程的思考</h2>
<h3 id="什么是工程">什么是工程</h3>
<p>工程就是做成某事的一整套方案。为什么要提出软件工程，因为为了像普通工程一样，过程控制，结果控制，整体控制，达到一个好的结果，所以需要工程化软件生产实现过程。说到底，就是为了又快又好的完成产品。</p>
<h3 id="怎么做">怎么做</h3>
<p>又快又好的完成软件，就需要工程化的控制怎么快，怎么好的问题。</p>
<p>怎么快？</p>
<p>时间应该花在哪里？不同阶段时间应该花在哪里？资源应该投入多少，资源投入应该如何前后搭配？</p>
<p>怎么好？</p>
<p>不同工种搭配比例如何？如何来管控过程质量？如何在时间紧任务重的情况下，和质量高妥协？以后是否方便拓展？ 下次升级在本次基础上是能更快还是更慢？</p>
<p>以上都是理论范畴。</p>
<h3 id="软件工程的套路">软件工程的套路</h3>
<p>来到软件工程，我们提出了敏捷的思想，结对编程的思想，TDD，DDD 各种等，都是为了更好更快的完成产品。</p>
<p>那么抛开以上这种思想，我们回归本源，到底需要什么？</p>
<p>最好的情况是高水平的人组成的相互配合效率超高的团队，类似初创企业的十八罗汉、核心三人、五人组。</p>
<p>当然现实是，事情是人做的，是人做有各种不确定性。我们无法保证招到的都是大牛，成本或许不允许，我们能做的就是在资源短缺的情况下，尽可能的平衡与妥协。于是我们需要还算过的去的开发人员，他们可能会出错，我们配置相应的测试人员，然后我们需要辅助工具，比如项目管理系统，bug追踪系统，这些都是为了让人更高效，项目质量更高，而不要陷入为了系统而系统。最后项目成功交付，完成。</p>
<p>反复实践几次，团队磨合更好，经历几次硬仗，会变成很有战斗力的团队。</p>
<h3 id="先解决基础再上台阶">先解决基础，再上台阶</h3>
<p>团队有战斗力，当然这个也会存在一些问题，就需要在此基础上，去发现，去调整。比如引入TDD，DDD ，敏捷，是否会让整体效率再上个台阶？这时候就是打完基础后的优化过程，基础没打好，这些都是空中楼阁，更高阶的，只能说不知道，具体问题具体分析。反复实践总结，总会找到适合的路。</p>
]]></content></item><item><title>Week1025_algorithm</title><link>/posts/arts/week1025_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:41 +0000</pubDate><guid>/posts/arts/week1025_algorithm/</guid><description>ARTS - Algorithm 补12.24 205. 同构字符串 题目 给定两个字符串 s 和 t，判断它们是否是同构的。
如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。
所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。
示例 1:
输入: s = &amp;ldquo;egg&amp;rdquo;, t = &amp;ldquo;add&amp;rdquo; 输出: true 示例 2:
输入: s = &amp;ldquo;foo&amp;rdquo;, t = &amp;ldquo;bar&amp;rdquo; 输出: false 示例 3:
输入: s = &amp;ldquo;paper&amp;rdquo;, t = &amp;ldquo;title&amp;rdquo; 输出: true 说明: 你可以假设 s 和 t 具有相同的长度。
分析 找相同结构的字符串，那么，可以把字符串转换为数字，比如第一个1开始，如果和之前的字符有重复，就设置为相同的数字，如果不是，就把前一个加1.
那么代码如下：
public static boolean isIsomorphic(String s, String t) { if (s.length() != t.</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补1224">ARTS - Algorithm 补12.24</h2>
<h2 id="205-同构字符串httpsleetcode-cncomproblemsisomorphic-strings"><a href="https://leetcode-cn.com/problems/isomorphic-strings/">205. 同构字符串</a></h2>
<h3 id="题目">题目</h3>
<p>给定两个字符串 s 和 t，判断它们是否是同构的。</p>
<p>如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。</p>
<p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p>
<p>示例 1:</p>
<p>输入: s = &ldquo;egg&rdquo;, t = &ldquo;add&rdquo;
输出: true
示例 2:</p>
<p>输入: s = &ldquo;foo&rdquo;, t = &ldquo;bar&rdquo;
输出: false
示例 3:</p>
<p>输入: s = &ldquo;paper&rdquo;, t = &ldquo;title&rdquo;
输出: true
说明:
你可以假设 s 和 t 具有相同的长度。</p>
<h3 id="分析">分析</h3>
<p>找相同结构的字符串，那么，可以把字符串转换为数字，比如第一个1开始，如果和之前的字符有重复，就设置为相同的数字，如果不是，就把前一个加1.</p>
<p>那么代码如下：</p>
<pre tabindex="0"><code>public static boolean isIsomorphic(String s, String t) {

        if (s.length() != t.length()) {
            return false;
        }


        String r1 = convert(s);
        String r2 = convert(t);

        return Objects.equals(r1, r2);


    }

    private static String convert(String s) {

        int idx = 1;
        StringBuilder sb = new StringBuilder();
        sb.append(idx);



        for (int i = 1; i &lt; s.length(); i++) {

            char ch1 = s.charAt(i);
            boolean flag = false;
            for (int j = 0; j &lt; i; j++) {
                char ch2 = s.charAt(j);
                if (ch2 == ch1) {
                    flag = true;
                    sb.append(sb.charAt(j));

                    break;
                }

            }

            if (!flag) {
                sb.append(++idx);
            }

        }

        return sb.toString();
    }
</code></pre><p>这个解法能通过，但是不是最优解法，耗费内存多且效率都不高，我们想办法优化这个。</p>
<h3 id="代码">代码</h3>
<p>以下使用了codepoint来进行比较的。</p>
<pre tabindex="0"><code>public boolean isIsomorphic(String s, String t) {

        if (s.length() != t.length()) {
            return false;
        }

        int MAXCHAR = 256;
        char maps[] = new char[MAXCHAR];
        char mapt[] = new char[MAXCHAR];

        for (int i = 0; i &lt; s.length(); i++) {
            if (maps[s.charAt(i)] == 0 &amp;&amp; mapt[t.charAt(i)] == 0) {
                maps[s.charAt(i)] = t.charAt(i);
                mapt[t.charAt(i)] = s.charAt(i);
                continue;
            }

            if (maps[s.charAt(i)] == t.charAt(i) &amp;&amp; mapt[t.charAt(i)] == s.charAt(i)) {
                continue;
            }
            return false;
        }

        return true;
    }
</code></pre>]]></content></item><item><title>Week1025_review</title><link>/posts/arts/week1025_review/</link><pubDate>Fri, 31 Mar 2023 15:45:41 +0000</pubDate><guid>/posts/arts/week1025_review/</guid><description>ARTS - Review 补12.24 1.4 What Is New in MySQL 8.0(下) assigning 分配
enhancements 增强
persistent adj 持久化
specific 具体的
subsequent 后来的
encountering 遭遇
corruption 腐败
checkpoint 检查点
Resource management.
MySQL now supports creation and management of resource groups, and permits assigning threads running within the server to particular groups so that threads execute according to the resources available to the group. Group attributes enable control over its resources, to enable or restrict resource consumption by threads in the group.</description><content type="html"><![CDATA[<h2 id="arts---review-补1224">ARTS - Review 补12.24</h2>
<h2 id="14-what-is-new-in-mysql-80下">1.4 What Is New in MySQL 8.0(下)</h2>
<ul>
<li>
<p>assigning 分配</p>
</li>
<li>
<p>enhancements 增强</p>
</li>
<li>
<p>persistent adj 持久化</p>
</li>
<li>
<p>specific 具体的</p>
</li>
<li>
<p>subsequent 后来的</p>
</li>
<li>
<p>encountering 遭遇</p>
</li>
<li>
<p>corruption 腐败</p>
</li>
<li>
<p>checkpoint 检查点</p>
</li>
<li>
<p><strong>Resource management.</strong></p>
</li>
</ul>
<p>MySQL now supports creation and management of resource groups, and permits assigning threads running within the server to particular groups so that threads execute according to the resources available to the group. Group attributes enable control over its resources, to enable or restrict resource consumption by threads in the group. DBAs can modify these attributes as appropriate for different workloads. Currently, CPU time is a manageable resource, represented by the concept of “virtual CPU” as a term that includes CPU cores, hyperthreads, hardware threads, and so forth. The server determines at startup how many virtual CPUs are available, and database administrators with appropriate privileges can associate these CPUs with resource groups and assign threads to groups. For more information, see Section 8.12.5, “Resource Groups”.</p>
<p>资源管理。</p>
<p>MySQL现在支持资源组的创建和管理，并允许将服务器内运行的线程分配给特定组，以便线程根据组可用的资源执行。组属性可以控制其资源，以启用或限制组中线程的资源消耗。 DBA可以根据不同的工作负载修改这些属性。 目前，CPU时间是可管理的资源，由“虚拟CPU”的概念表示为包括CPU核心，超线程，硬件线程等的术语。 服务器在启动时确定可用的虚拟CPU数量，具有适当权限的数据库管理员可以将这些CPU与资源组关联，并将线程分配给组。 有关更多信息，请参见第8.12.5节“资源组”。</p>
<p>InnoDb增强
These InnoDB enhancements were added:</p>
<p>The current maximum auto-increment counter value is written to the redo log each time the value changes, and saved to an engine-private system table on each checkpoint. These changes make the current maximum auto-increment counter value persistent across server restarts. Additionally:
当前最大自动增长计数器值每次更改后被写入重做日志，保存在引擎私有的系统表。这些改变是的当前最大自动增长计数器在服务器重启时会保持不变。</p>
<ul>
<li>A server restart no longer cancels the effect of the AUTO_INCREMENT = N table option. If you initialize the auto-increment counter to a specific value, or if you alter the auto-increment counter value to a larger value, the new value is persisted across server restarts.</li>
</ul>
<p>一个服务器重启不再取消AUTO_INCREMENT = N 影响这个的表选项。如果你初始化胡自动增长计数器为一个具体的值，或者如果你修改 自动增长计数器的值为一个更大的值，新的值就会随着服务器重启持久化。</p>
<ul>
<li>A server restart immediately following a ROLLBACK operation no longer results in the reuse of auto-increment values that were allocated to the rolled-back transaction.</li>
</ul>
<p>一个服务器突然重启随着一个回滚操作不再使用被分配给回滚事务的自动增长的值。</p>
<ul>
<li>If you modify an AUTO_INCREMENT column value to a value larger than the current maximum auto-increment value (in an UPDATE operation, for example), the new value is persisted, and subsequent INSERT operations allocate auto-increment values starting from the new, larger value.</li>
</ul>
<p>如果你修改了 AUTO_INCREMENT 的一个列的值比当前最大自动增长值大(例如，在一个UPDATE操作里)，新的值就会持久化，后来的 INSERT 操作分配自动增长值开始是新的，大的值。</p>
<ul>
<li>For more information, see Section 15.6.1.4, “AUTO_INCREMENT Handling in InnoDB”, and InnoDB AUTO_INCREMENT Counter Initialization.</li>
</ul>
<p>更多信息看 15.6.1.4章节。</p>
<p>When encountering index tree corruption, InnoDB writes a corruption flag to the redo log, which makes the corruption flag crash safe. InnoDB also writes in-memory corruption flag data to an engine-private system table on each checkpoint. During recovery, InnoDB reads corruption flags from both locations and merges results before marking in-memory table and index objects as corrupt.</p>
<p>当遭遇索引树腐败，InnoDB 写一个腐败的标签给重做日志，会让腐败标签危害安全。InnoDB 也写在内存腐败标签数据到一个引擎私有的系统表在每次检查。回复期间InnoDB 读腐败的标志从地址，和合并结果在标记内存表索引对象腐败之前。</p>
]]></content></item><item><title>Week1025_share</title><link>/posts/arts/week1025_share/</link><pubDate>Fri, 31 Mar 2023 15:45:41 +0000</pubDate><guid>/posts/arts/week1025_share/</guid><description>ARTS - Share - 补12.24日 MySQL的联合索引 最左匹配原则 索引的重要性就不再说了，反正使用数据库的都知道，我们来说说联合索引。说到联合索引，就要说它的最左匹配原则，由于B+Tree 的特点，索引从左往右建，加入一张表 table(col1, col2, col3), 建立联合索引 create index idx_table_col1_col2 on table(col1, col2);
在查询时候 where col1 = xxx and col2 = xxx 和 where col1 ，都会用到这个联合索引，但是如果 where col2 = xxx ， 这种情况是用不到联合索引的。
实际案例 本人在进行一个百万级表的查询时候，碰到了这个问题。
在使用 where create_date = xxxx时候， 使用执行计划查看：
+----+-------------+-------+------------+--------+-----------------------------+---------+---------+-------------------+---------+----------+----------------------------------------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+-------+------------+--------+-----------------------------+---------+---------+-------------------+---------+----------+----------------------------------------------+ | 1 | SIMPLE | d | &amp;lt;null&amp;gt; | ALL | idx_create_by | &amp;lt;null&amp;gt; | &amp;lt;null&amp;gt; | &amp;lt;null&amp;gt; | 2343409 | 1.</description><content type="html"><![CDATA[<h2 id="arts---share----补1224日">ARTS - Share  - 补12.24日</h2>
<h2 id="mysql的联合索引">MySQL的联合索引</h2>
<h3 id="最左匹配原则">最左匹配原则</h3>
<p>索引的重要性就不再说了，反正使用数据库的都知道，我们来说说联合索引。说到联合索引，就要说它的最左匹配原则，由于B+Tree 的特点，索引从左往右建，加入一张表 table(col1, col2, col3), 建立联合索引  create index idx_table_col1_col2 on table(col1, col2);</p>
<p>在查询时候   where col1 = xxx and col2 = xxx  和  where col1 ，都会用到这个联合索引，但是如果 where col2 = xxx ， 这种情况是用不到联合索引的。</p>
<h3 id="实际案例">实际案例</h3>
<p>本人在进行一个百万级表的查询时候，碰到了这个问题。</p>
<p>在使用 where create_date = xxxx时候，
使用执行计划查看：</p>
<pre tabindex="0"><code>
+----+-------------+-------+------------+--------+-----------------------------+---------+---------+-------------------+---------+----------+----------------------------------------------+
| id | select_type | table | partitions | type   | possible_keys               | key     | key_len | ref               | rows    | filtered | Extra                                        |
+----+-------------+-------+------------+--------+-----------------------------+---------+---------+-------------------+---------+----------+----------------------------------------------+
| 1  | SIMPLE      | d     | &lt;null&gt;     | ALL    | idx_create_by | &lt;null&gt;  | &lt;null&gt;  | &lt;null&gt;            | 2343409 |   1.23   | Using where; Using temporary; Using filesort |
| 1  | SIMPLE      | c     | &lt;null&gt;     | eq_ref | PRIMARY                     | PRIMARY | 122     | d.apply_id  | 1       | 100.0    | Using index                                  |
| 1  | SIMPLE      | u     | &lt;null&gt;     | eq_ref | PRIMARY                     | PRIMARY | 194     | d.create_by | 1       | 100.0    | Using where                                  |
+----+-------------+-------+------------+--------+-----------------------------+---------+---------+-------------------+---------+----------+----------------------------------------------+
</code></pre><p>触发了全表扫描，而且，使用 show index from table; 查看索引情况：</p>
<pre tabindex="0"><code>+---------------------+------------+-----------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table               | Non_unique | Key_name                    | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+---------------------+------------+-----------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| table | 0          | PRIMARY                     | 1            | id          | A         | 2342964     | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |
| table | 0          | table_unique        | 1            | apply_id    | A         | 426585      | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |
| table | 0          | table_unique        | 2            | create_date | A         | 2296706     | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |
| table | 1          | table_groupId       | 1            | group_id    | A         | 10          | &lt;null&gt;   | &lt;null&gt; | YES  | BTREE      |         |               |
| table | 1          | table_time          | 1            | pay_time    | A         | 409528      | &lt;null&gt;   | &lt;null&gt; | YES  | BTREE      |         |               |
| table | 1          | table_time          | 2            | create_date | A         | 414810      | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |
| table | 1          | idx_create_by | 1            | create_by   | A         | 272         | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |
+---------------------+------------+-----------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
</code></pre><p>发现create_date 已经建立了索引，但是为什么查询计划里还是全表扫描呢？</p>
<p>最后使用 show create table  <code>table</code> ; 来查看，算是看清楚了 该表使用了 (pay_time, create_date) 来作为联合索引，而 show index 里面显示的两个同名key_name ，其实就是联合索引的意思，怪我没有看仔细，漏了这个重要线索。</p>
<p>然后解决起来就是方便了，给create_date 建立单独的索引，然后查询时间从半分钟降到1秒以内。</p>
<h3 id="总结">总结</h3>
<p>看题要仔细，不然很容易忽略细节，然后就容易南辕北辙，以为自己目前掌握的知识不足以解决，产生畏惧心理。</p>
<p>基础要打牢，最左匹配原则要结合实际案例来记忆，不然浮于表面，无法形成有效知识。</p>
]]></content></item><item><title>Week1025_tip</title><link>/posts/arts/week1025_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:41 +0000</pubDate><guid>/posts/arts/week1025_tip/</guid><description>ARTS - Tip 补12.24 MySQL报错 Packet for query is too large 问题出现 今日碰到了一个mysql报错如下：
com.mysql.jdbc.PacketTooBigException: Packet for query is too large (4281662 &amp;gt; 4194304). You can change this value on the server by setting the max_allowed_packet&amp;#39; variable. 这句话说查询包太大了，这里有一个参数叫 max_allowed_packet，查询资料发现是MySQL设置的最大查询发送包大下，现在看来是超过了。查找相应的SQL语句，确实传送了大量的数据作为参数，然后就优化了SQL，避开这种使用方式。
max_allowed_packet 这个参数是什么呢?
查询MySQL文档，发现这个是系统变量，在MySQL版本&amp;lt;=8.0.2 时候默认是4194304，也就是4M，大于这个版本是默认64M.
The maximum size of one packet or any generated/intermediate string, or any parameter sent by the mysql_stmt_send_long_data() C API function. The default is 64MB.
The packet message buffer is initialized to net_buffer_length bytes, but can grow up to max_allowed_packet bytes when needed.</description><content type="html"><![CDATA[<h2 id="arts---tip-补1224">ARTS - Tip 补12.24</h2>
<h2 id="mysql报错-packet-for-query-is-too-large">MySQL报错 Packet for query is too large</h2>
<h3 id="问题出现">问题出现</h3>
<p>今日碰到了一个mysql报错如下：</p>
<pre tabindex="0"><code>com.mysql.jdbc.PacketTooBigException: Packet for query is too large (4281662 &gt; 4194304). You can change this value on the server by setting the max_allowed_packet&#39; variable.
</code></pre><p>这句话说查询包太大了，这里有一个参数叫 <code>max_allowed_packet</code>，查询资料发现是MySQL设置的最大查询发送包大下，现在看来是超过了。查找相应的SQL语句，确实传送了大量的数据作为参数，然后就优化了SQL，避开这种使用方式。</p>
<h3 id="max_allowed_packet">max_allowed_packet</h3>
<p>这个参数是什么呢?</p>
<p>查询MySQL文档，发现这个是系统变量，在MySQL版本&lt;=8.0.2 时候默认是4194304，也就是4M，大于这个版本是默认64M.</p>
<blockquote>
<p>The maximum size of one packet or any generated/intermediate string, or any parameter sent by the mysql_stmt_send_long_data() C API function. The default is 64MB.</p>
</blockquote>
<blockquote>
<p>The packet message buffer is initialized to net_buffer_length bytes, but can grow up to max_allowed_packet bytes when needed. This value by default is small, to catch large (possibly incorrect) packets.</p>
</blockquote>
<p>这里提到了一个 net_buffer_length , 这个参数默认是 16384, 也就是16K. 在不够用时候会增长到max_allowed_packet 大小。</p>
<blockquote>
<p>You must increase this value if you are using large BLOB columns or long strings. It should be as big as the largest BLOB you want to use. The protocol limit for max_allowed_packet is 1GB. The value should be a multiple of 1024; nonmultiples are rounded down to the nearest multiple.</p>
</blockquote>
<p>你在使用大的 BLOB列或长的strings 时候，应该变大，为1024的倍数，最大为1G。</p>
<blockquote>
<p>When you change the message buffer size by changing the value of the max_allowed_packet variable, you should also change the buffer size on the client side if your client program permits it. The default max_allowed_packet value built in to the client library is 1GB, but individual client programs might override this. For example, mysql and mysqldump have defaults of 16MB and 24MB, respectively. They also enable you to change the client-side value by setting max_allowed_packet on the command line or in an option file.</p>
</blockquote>
<p>当在服务端改变这个大小时候，也要在客户端跟着改变。</p>
<blockquote>
<p>The session value of this variable is read only. The client can receive up to as many bytes as the session value. However, the server will not send to the client more bytes than the current global max_allowed_packet value. (The global value could be less than the session value if the global value is changed after the client connects.)</p>
</blockquote>
<p>客户端连接后如果全局变量被修改，那么实际的服务端传输大小会小于客户端设置的大小。</p>
]]></content></item><item><title>Week1026_algorithm</title><link>/posts/arts/week1026_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:41 +0000</pubDate><guid>/posts/arts/week1026_algorithm/</guid><description>ARTS - Algorithm 补2019.1.2 155. 最小栈 题目 设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。
push(x) &amp;ndash; 将元素 x 推入栈中。 pop() &amp;ndash; 删除栈顶的元素。 top() &amp;ndash; 获取栈顶元素。 getMin() &amp;ndash; 检索栈中的最小元素。 示例:
MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --&amp;gt; 返回 -3. minStack.pop(); minStack.top(); --&amp;gt; 返回 0. minStack.getMin(); --&amp;gt; 返回 -2. 分析 两个要求，一是设计一个栈的数据结构，第二是要求取得最小元素时间复杂度为常数。
对于一，我们可以根据栈的先进后出的特点，使用数组来实现，维护一个移动指针，指向栈顶，也就是数组尾巴， 要考虑数组扩容问题。
对于二，要常数时间获得最小元素，就要提前保存下这个最小元素，最初想法就是把最小的单独保存起来，遇到更小的元素就刷新最小的值，但是在做pop操作时候，无法获得倒数第二小的元素，于是就需要用数组维护起来。比如维护一个有序的队列，但是这个明显不需要保存那么多元素，只保存小的就行，这时候就有保存最小元素还是保存索引的问题，如果保存最小元素，可能会出现重复现象，保存索引就不存在，于是最后选定使用保存索引方式。 代码如下。
代码 class MinStack { private int[] stack; private int[] mins; private int index; private int minIndex; private int capacity; /** initialize your data structure here.</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补201912">ARTS - Algorithm 补2019.1.2</h2>
<h2 id="155-最小栈httpsleetcode-cncomproblemsmin-stacksubmissions"><a href="https://leetcode-cn.com/problems/min-stack/submissions/">155. 最小栈</a></h2>
<h3 id="题目">题目</h3>
<p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p>
<ul>
<li>push(x) &ndash; 将元素 x 推入栈中。</li>
<li>pop() &ndash; 删除栈顶的元素。</li>
<li>top() &ndash; 获取栈顶元素。</li>
<li>getMin() &ndash; 检索栈中的最小元素。</li>
</ul>
<p><strong>示例:</strong></p>
<pre tabindex="0"><code>MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --&gt; 返回 -3.
minStack.pop();
minStack.top();      --&gt; 返回 0.
minStack.getMin();   --&gt; 返回 -2.
</code></pre><h3 id="分析">分析</h3>
<p>两个要求，一是设计一个栈的数据结构，第二是要求取得最小元素时间复杂度为常数。</p>
<p>对于一，我们可以根据栈的先进后出的特点，使用数组来实现，维护一个移动指针，指向栈顶，也就是数组尾巴， 要考虑数组扩容问题。</p>
<p>对于二，要常数时间获得最小元素，就要提前保存下这个最小元素，最初想法就是把最小的单独保存起来，遇到更小的元素就刷新最小的值，但是在做pop操作时候，无法获得倒数第二小的元素，于是就需要用数组维护起来。比如维护一个有序的队列，但是这个明显不需要保存那么多元素，只保存小的就行，这时候就有保存最小元素还是保存索引的问题，如果保存最小元素，可能会出现重复现象，保存索引就不存在，于是最后选定使用保存索引方式。
代码如下。</p>
<h3 id="代码">代码</h3>
<pre tabindex="0"><code>class MinStack {
    private int[] stack;
    private int[] mins;
    private int index;
    private int minIndex;
    private int capacity;

    /** initialize your data structure here. */
    public MinStack() {
        index = -1;
        minIndex = 0;
        capacity = 10;
        stack = new int[capacity];
        mins = new int[capacity];
    }
    
    public void push(int x) {
        index++;

        if (index &gt; capacity -1) {
            // 扩容
            expand();

        }
        stack[index] = x;

       
        if (x &lt; getMin()) {
            minIndex++;

            mins[minIndex] = index;
        }

    }
    
    public void pop() {
      

        if (index == mins[minIndex]) {
            mins[minIndex] = 0;
            minIndex--;
        }

        stack[index] = 0;
        index--;



    }
    
    public int top() {
        
        if (index &lt; 0) {
            return 0;
        }

        return stack[index];
    }
    
    public int getMin() {
        
        if (minIndex &lt; 0) {
            return stack[0];
        }
        return stack[mins[minIndex]];
    }
    
    
  
    private void expand() {
 
        int[] tmp = new int[2 * capacity];
        System.arraycopy(stack, 0, tmp, 0, capacity);
        stack = tmp;

        tmp = new int[2 * capacity];
        System.arraycopy(mins, 0, tmp, 0, capacity);
        mins = tmp;

        capacity = capacity * 2;

    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
</code></pre>]]></content></item><item><title>Week1026_review</title><link>/posts/arts/week1026_review/</link><pubDate>Fri, 31 Mar 2023 15:45:41 +0000</pubDate><guid>/posts/arts/week1026_review/</guid><description>ARTS - Review 补2019.1.2 Java Class文件格式 本片来自于官网文档: Chapter 4. The class File Format
definition n. 定义 external 外部的 representation 表现 literally 字面上的 colloquially 口语的，白话的 consists 包括 respectively 分别地，各自地 This chapter describes the class file format of the Java Virtual Machine. Each class file contains the definition of a single class or interface. Although a class or interface need not have an external representation literally contained in a file (for instance, because the class is generated by a class loader), we will colloquially refer to any valid representation of a class or interface as being in the class file format.</description><content type="html"><![CDATA[<h2 id="arts---review-补201912">ARTS - Review 补2019.1.2</h2>
<h2 id="java-class文件格式">Java Class文件格式</h2>
<p>本片来自于官网文档:
<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4">Chapter 4. The class File Format</a></p>
<ul>
<li>definition n. 定义</li>
<li>external  外部的</li>
<li>representation 表现</li>
<li>literally 字面上的</li>
<li>colloquially 口语的，白话的</li>
<li>consists  包括</li>
<li>respectively 分别地，各自地</li>
</ul>
<blockquote>
<p>This chapter describes the class file format of the Java Virtual Machine. Each class file contains the definition of a single class or interface. Although a class or interface need not have an external representation literally contained in a file (for instance, because the class is generated by a class loader), we will colloquially refer to any valid representation of a class or interface as being in the class file format.</p>
</blockquote>
<p>本章描述Java虚拟机 类文件格式。每个class文件包括一个单个clas或接口的定义。尽管一个class或接口不需要有一个包含在一个文件外部字面上的表示(例如，因为class是通过一个类加载器构造的)，我们通俗的将类或接口的任何有效表示称为类文件格式。</p>
<blockquote>
<p>A class file consists of a stream of 8-bit bytes. All 16-bit, 32-bit, and 64-bit quantities are constructed by reading in two, four, and eight consecutive 8-bit bytes, respectively. Multibyte data items are always stored in big-endian order, where the high bytes come first. In the Java SE platform, this format is supported by interfaces java.io.DataInput and java.io.DataOutput and classes such as java.io.DataInputStream and java.io.DataOutputStream.</p>
</blockquote>
<p>一个class文件由8位字节流组成。所有的的16位、32位、64位的数量都是通过分别读取两个、四个和八个连续的8位字节来构造的。多字节数据项始终以big-endian 顺序存储，其中高字节首先出现。在Java SE平台， 这个格式被接口 java.io.DataInput 和java.io.DataOupt 支持， 被类支持诸如 java.io.DataInputStream 和  java.io.DataOutputStream.</p>
<blockquote>
<p>This chapter defines its own set of data types representing class file data: The types u1, u2, and u4 represent an unsigned one-, two-, or four-byte quantity, respectively. In the Java SE platform, these types may be read by methods such as readUnsignedByte, readUnsignedShort, and readInt of the interface java.io.DataInput.</p>
</blockquote>
<p>这个章节定义了它自己的一群代表类文件的数据类型： 类型 u1, u2和u4 代表一个无符号的 一，二，或四字节数量的区别。在Java平台，这些类型可能被方法 readUnsignedByte,readUnsignedShort, 和接口里的java.io.DataInput readInt 读取。</p>
<blockquote>
<p>This chapter presents the class file format using pseudostructures written in a C-like structure notation. To avoid confusion with the fields of classes and class instances, etc., the contents of the structures describing the class file format are referred to as items. Successive items are stored in the class file sequentially, without padding or alignment.</p>
</blockquote>
<p>本章呈现类文件格式使用像C语言结构的伪代码。为避免类属性和类实例混乱，类文件格式描述结构作为项目提及。连续项目按顺序村塾在类文件中，无需填充或对齐。</p>
<blockquote>
<p>Tables, consisting of zero or more variable-sized items, are used in several class file structures. Although we use C-like array syntax to refer to table items, the fact that tables are streams of varying-sized structures means that it is not possible to translate a table index directly to a byte offset into the table.</p>
</blockquote>
<p>Where we refer to a data structure as an array, it consists of zero or more contiguous fixed-sized items and can be indexed like an array.</p>
<blockquote>
</blockquote>
<p>Reference to an ASCII character in this chapter should be interpreted to mean the Unicode code point corresponding to the ASCII character.</p>
<p>由零个或多个可变大小的项组成的表用于多个类文件结构中。 尽管我们使用类似C的数组语法来引用表项，但表是不同大小结构的流这一事实意味着无法将表索引直接转换为表中的字节偏移量。</p>
<p>在我们将数据结构称为数组的情况下，它由零个或多个连续的固定大小的项组成，并且可以像数组一样索引。</p>
<p>本章中对ASCII字符的引用应解释为与ASCII字符对应的Unicode代码点。</p>
]]></content></item><item><title>Week1026_tip</title><link>/posts/arts/week1026_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:41 +0000</pubDate><guid>/posts/arts/week1026_tip/</guid><description>ARTS - Tip 补 2019.1.2 多人查询系统加锁 问题 由于有几百人同时查询一个借口，造成数据库压力飙升，在优化完数据库索引、缓存之后，发现了多人查询返回的结果是一样的，然后在系统中做过滤，可以根据这一特点进行优化。
思路 因为多人请求返回同样的数据，那么就可以让第一个人请求数据库，返回后放入缓存，其他人从缓存中拿，如果在请求中出现了另一个人查询，直接返回空。
实现 刚开始使用了AtomicInteger 原子整形来实现，通过和初始化值做对比，如果没被修改过，就相当于获得了锁，把他改变值，然后去查询db, 存入缓存。
后来发现，如果其他参数的用户请求数据，那么也会因此而被阻塞，所以就使用了集合，以参数为key, 存入集合，如果存在该key,那么相当于没有获得锁，当然集合要线程安全，使用了ConcurrentLinkedQueue来实现。
总结 上线之后，性能提升明显。 优化系统不仅从技术层考虑： 优化索引、加缓存， 还要从系统业务角度入手，优化哪些不需要的流程，进一步提高系统性能。
隐忧 虽然通过加锁方式提高了性能， 但是目前是单机应用，当用户量进一步提升，势必会改成多机分布式应用，到时候这种加锁方式就需要改造成分布式锁来实现了。</description><content type="html"><![CDATA[<h2 id="arts---tip-补-201912">ARTS - Tip 补 2019.1.2</h2>
<h2 id="多人查询系统加锁">多人查询系统加锁</h2>
<h3 id="问题">问题</h3>
<p>由于有几百人同时查询一个借口，造成数据库压力飙升，在优化完数据库索引、缓存之后，发现了多人查询返回的结果是一样的，然后在系统中做过滤，可以根据这一特点进行优化。</p>
<h3 id="思路">思路</h3>
<p>因为多人请求返回同样的数据，那么就可以让第一个人请求数据库，返回后放入缓存，其他人从缓存中拿，如果在请求中出现了另一个人查询，直接返回空。</p>
<h3 id="实现">实现</h3>
<p>刚开始使用了AtomicInteger  原子整形来实现，通过和初始化值做对比，如果没被修改过，就相当于获得了锁，把他改变值，然后去查询db, 存入缓存。</p>
<p>后来发现，如果其他参数的用户请求数据，那么也会因此而被阻塞，所以就使用了集合，以参数为key, 存入集合，如果存在该key,那么相当于没有获得锁，当然集合要线程安全，使用了ConcurrentLinkedQueue来实现。</p>
<h3 id="总结">总结</h3>
<p>上线之后，性能提升明显。 优化系统不仅从技术层考虑： 优化索引、加缓存， 还要从系统业务角度入手，优化哪些不需要的流程，进一步提高系统性能。</p>
<h3 id="隐忧">隐忧</h3>
<p>虽然通过加锁方式提高了性能， 但是目前是单机应用，当用户量进一步提升，势必会改成多机分布式应用，到时候这种加锁方式就需要改造成分布式锁来实现了。</p>
]]></content></item><item><title>Week1022_review</title><link>/posts/arts/week1022_review/</link><pubDate>Fri, 31 Mar 2023 15:45:40 +0000</pubDate><guid>/posts/arts/week1022_review/</guid><description>ARTS - Review 补12.3 gallery n. 画廊、走廊， vast amount of 大量的 standalone utilities 独立应用程序 relational adj. 亲属的，有关系的 governing v. 统治，控制 enforces v.强制执行 inconsistent adj. 不一致的 orphan adj. 孤立的 embed 嵌入 commercial 商业的 dedicate 奉献 demanding 苛求的 consists 包括 pronounce 发音 1.3.1 What is MySQL?
MySQL, the most popular Open Source SQL database management system, is developed, distributed, and supported by Oracle Corporation.
The MySQL website (http://www.mysql.com/) provides the latest information about MySQL software.</description><content type="html"><![CDATA[<h2 id="arts---review--补123">ARTS - Review  补12.3</h2>
<ul>
<li>gallery n. 画廊、走廊，</li>
<li>vast amount of 大量的</li>
<li>standalone utilities 独立应用程序</li>
<li>relational adj. 亲属的，有关系的</li>
<li>governing v. 统治，控制</li>
<li>enforces v.强制执行</li>
<li>inconsistent adj. 不一致的</li>
<li>orphan adj. 孤立的</li>
<li>embed 嵌入</li>
<li>commercial 商业的</li>
<li>dedicate 奉献</li>
<li>demanding 苛求的</li>
<li>consists 包括</li>
<li>pronounce 发音</li>
</ul>
<p>1.3.1 What is MySQL?</p>
<p>MySQL, the most popular Open Source SQL database management system, is developed, distributed, and supported by Oracle Corporation.</p>
<p>The MySQL website (<a href="http://www.mysql.com/">http://www.mysql.com/</a>) provides the latest information about MySQL software.</p>
<blockquote>
<p>什么是mysql, 最流行的开源SQL数据库挂历系统，由甲骨文集团开发、发布和支持。MySQL的网址 <a href="http://www.mysql.com">http://www.mysql.com</a> ，提供最新的MySQL软件信息。</p>
</blockquote>
<p>MySQL is a database management system.</p>
<blockquote>
<p>MySQL是一个数据库管理系统</p>
</blockquote>
<p>A database is a structured collection of data. It may be anything from a simple shopping list to a picture gallery or the vast amounts of information in a corporate network. To add, access, and process data stored in a computer database, you need a database management system such as MySQL Server. Since computers are very good at handling large amounts of data, database management systems play a central role in computing, as standalone utilities, or as parts of other applications.</p>
<blockquote>
<p>一个数据库是一个结构化的数据集合。他可以是一个简单的图片画廊的购物清单，或者是一个集团网络的大量信息。去添加、操作，处理保存在计算机中的数据库，你需要一个数据库管理系统例如MySQL 服务器。自从电脑开始非常擅长处理大量数据，数据库管理系统就在计算、独立应用，应用的一部分中扮演了一个中心角色。</p>
</blockquote>
<p>MySQL databases are relational.</p>
<blockquote>
<p>MySQL数据库是关系型的。</p>
</blockquote>
<p>A relational database stores data in separate tables rather than putting all the data in one big storeroom. The database structures are organized into physical files optimized for speed. The logical model, with objects such as databases, tables, views, rows, and columns, offers a flexible programming environment. You set up rules governing the relationships between different data fields, such as one-to-one, one-to-many, unique, required or optional, and “pointers” between different tables. The database enforces these rules, so that with a well-designed database, your application never sees inconsistent, duplicate, orphan, out-of-date, or missing data.</p>
<blockquote>
<p>一个关系型的数据库存储数据在独立的表中而不是把全部的数据放在一个大的储存室。数据库结构被优雅组织在物理文件中方便查询。逻辑模型，像数据库对象，表，视图，行，列，提供一个复杂的程序环境。你设置规则控制不同数据属性的关系，像一对一，一对多，唯一，必须或非必须，还有两个不同表之间的”指针“。数据库强制执行这些规则，所以就会产生一个良好设计的数据库，你的应用就不会看到不一致、重复、孤立、过期的或丢失数据。</p>
</blockquote>
<p>The SQL part of “MySQL” stands for “Structured Query Language”. SQL is the most common standardized language used to access databases. Depending on your programming environment, you might enter SQL directly (for example, to generate reports), embed SQL statements into code written in another language, or use a language-specific API that hides the SQL syntax.</p>
<blockquote>
<p>SQL 作为MySQL一部分代表 ”结构化查询语言“。 SQL是最常见的操作数据库的标准语言。决定于你的程序环境，你可能直接进入SQL(例如，构造报表), 把sql语句嵌入到另外一种语言里，或者用一个隐藏SQL语法的特定语言api。</p>
</blockquote>
<p>SQL is defined by the ANSI/ISO SQL Standard. The SQL standard has been evolving since 1986 and several versions exist. In this manual, “SQL-92” refers to the standard released in 1992, “SQL:1999” refers to the standard released in 1999, and “SQL:2003” refers to the current version of the standard. We use the phrase “the SQL standard” to mean the current version of the SQL Standard at any time.</p>
<blockquote>
<p>SQL由 ANSI/ISO SQL标准定义。SQL定义从1986进化了几个版本。在本手册，”SQL-92”表示在1992年发布的SQL-92“标准，”SQL:1999“表示1999年发布的。SQL：2003表示当前发布的版本。我们使用词语“SQL标准”意思是任何时间的当前版本的标准版本。</p>
</blockquote>
<p>MySQL software is Open Source.</p>
<p>Open Source means that it is possible for anyone to use and modify the software. Anybody can download the MySQL software from the Internet and use it without paying anything. If you wish, you may study the source code and change it to suit your needs. The MySQL software uses the GPL (GNU General Public License), <a href="http://www.fsf.org/licenses/">http://www.fsf.org/licenses/</a>, to define what you may and may not do with the software in different situations. If you feel uncomfortable with the GPL or need to embed MySQL code into a commercial application, you can buy a commercially licensed version from us. See the MySQL Licensing Overview for more information (<a href="http://www.mysql.com/company/legal/licensing/)">http://www.mysql.com/company/legal/licensing/)</a>.</p>
<blockquote>
<p>Mysql 软件是开源的。
开源意味着可以被任何人使用修改的软件。任何人可以从网上下载MySQL软件使用它而不付费。如果你希望，你可以学习源码，修改它适应你的需要。MySQL软件使用GPL授权协议，http://www.fsf.org/licenses/， 定义了不同场景下可以和不可以做的事。如果你感到不舒服对GPL或者需要嵌入MySQL代码到一个商业应用里，你看购买一个商业授权版本从us.</p>
</blockquote>
<p>The MySQL Database Server is very fast, reliable, scalable, and easy to use.</p>
<p>If that is what you are looking for, you should give it a try. MySQL Server can run comfortably on a desktop or laptop, alongside your other applications, web servers, and so on, requiring little or no attention. If you dedicate an entire machine to MySQL, you can adjust the settings to take advantage of all the memory, CPU power, and I/O capacity available. MySQL can also scale up to clusters of machines, networked together.</p>
<blockquote>
<p>Mysql 数据库非常快，可靠，可扩展，易于使用。
如果那就是你要找的，你应该尝试一下它。MySQL服务器可以舒适的运行在一个台式机或笔记本，或你的其他应用的一边，web服务器，等。需要很少或不需要注意。如果你奉献所有的机器资源给MySQL，你可以调整设置来使得内存、CPU和IO容量物尽其用。MySQL也可以机器集群，网络连接到一起。</p>
</blockquote>
<p>MySQL Server was originally developed to handle large databases much faster than existing solutions and has been successfully used in highly demanding production environments for several years. Although under constant development, MySQL Server today offers a rich and useful set of functions. Its connectivity, speed, and security make MySQL Server highly suited for accessing databases on the Internet.</p>
<blockquote>
<p>MySQL服务原来开发出来去处理大数据比现存解决方案都快得多，已经成功用在高苛求的生产环境好多年了。尽管在常规开发底下，MySQL服务今天提供了丰富的有用的方案。它的连通性，速度和安全性使得MySQL服务非常适合处理网上数据。</p>
</blockquote>
<p>MySQL Server works in client/server or embedded systems.</p>
<p>The MySQL Database Software is a client/server system that consists of a multithreaded SQL server that supports different back ends, several different client programs and libraries, administrative tools, and a wide range of application programming interfaces (APIs).</p>
<blockquote>
<p>MySQL工作在客户端/服务端 或者嵌入式系统。
MySQL数据库软件是一个 客户端、服务端系统，包括多线程SQL服务器支持不同的后台，几个不同的客户端程序和库，管理员工具，宽范围的应用程序接口。</p>
</blockquote>
<p>We also provide MySQL Server as an embedded multithreaded library that you can link into your application to get a smaller, faster, easier-to-manage standalone product.</p>
<blockquote>
<p>我们也提供MySQL服务组委一个嵌入式多线程库，你可以连接进入你的应用获得一个更小，更快，更方便管理的独立产品。</p>
</blockquote>
<p>A large amount of contributed MySQL software is available.</p>
<p>MySQL Server has a practical set of features developed in close cooperation with our users. It is very likely that your favorite application or language supports the MySQL Database Server.</p>
<p>The official way to pronounce “MySQL” is “My Ess Que Ell” (not “my sequel”), but we do not mind if you pronounce it as “my sequel” or in some other localized way.</p>
<blockquote>
<p>大量的捐助MySQL软件是有用的。
MySQL服务有一套实用的功能是封闭的集团用户开发的。它非常娘你瞎换应用或语言支持MySQL数据库服务。
专业方式发音 MySQL是 “My Ess Que Ell” (不是 my sequel), 但是我们不介意你的发音是“my sequel”或者其他的个性化叫法。</p>
</blockquote>
]]></content></item><item><title>Week1022_share</title><link>/posts/arts/week1022_share/</link><pubDate>Fri, 31 Mar 2023 15:45:40 +0000</pubDate><guid>/posts/arts/week1022_share/</guid><description>ARTS - Share 补12.3 学技术要结合使用场景 结合场景理解技术 常常有这样的想法，学习了一段新语言、新技术，然后由于工作中没有使用，就闲置了，然后再过一段时间就忘了，等于没学。了解了一个技术实现，但是没有和实际结合起来，造成记忆不深，说明并没有完全吃透，因为没有适用场景的结合，造成知识如同空中楼阁。我建议由需求、场景引出使用这类技术的必要性，这样更能掌握技术。
比如MySQL的使用 Q: 发现MySQL查询很慢，会怎么做呢？
A: 看条件字段有没有加索引，没有的话就建立索引。
Q: 那么MySQL索引使用了什么数据结构？
A: B+树。
Q： B+树查询时间复杂度多少？
A: 和树的高度有关，大概log(n).
Q: 用hash存储索引，时间复杂度多少呢？
A: hash 是 O(1)
Q: 既然hash比B+树快，为什么MySQL还用B+树来存储索引呢？
各种树 这时候，我们就要思考下，B+树的数据结构，MySQL为什么要使用B+树。
说到树，它的基础知识就是前中后序遍历、二叉树、儿茶搜索树、平衡二叉树、红黑树、B树、B+树、、
比如红黑树，他是一个二叉树，但是有几条规则：
节点是红色或黑色。 根是黑色。 所有叶子都是黑色（叶子是NIL节点）。 每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。） 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。 根据这些定义感觉一头雾水，那么要理解它，掌握背后的设计理念、原理和解决问题的方法，比技术本身更重要。
先从二叉排序树说起。
二叉排序树是左边比根节点小，右边比根节点大, 并且左右子树都是二叉排序树。
但是有一些极端情况，插入序列是有序的，那么就会退化成链表。
所以要用平衡树，插入的同时调整这棵树，让他的节点尽量均匀分布。
红黑树就是平衡树的一种，它的复杂的定义和规则，都是为了保证数的平衡性。
为什么要保证树的平衡？因为树的查找性能取决于树的高度，让树尽量平衡，就是为了降低树的高度。
Java中TreeSet的底层就是红黑树。
再来说说B树。
B树是一种多路搜索树，他的每个节点可以拥有多余两个孩子节点。M树的B树最多拥有M个孩子节点。
为什么要设计成多路的呢？ 为了进一步降低树的高度。但是也不能无限多路，因为无限多路就是有序数组。
那么这样的结构用在哪里呢？文件系统。
但是文件系统为什么不用红黑树或者有序数组呢？
我们知道文件系统和数据库索引都是存在硬盘上的，如果数据量大的话，不能一次性加载到内存中。一棵树无法一次性加载到内存里的情况，就发现B树多路存储的威力了，每次加载B树的一个节点，然后一步步找。
于是，在内存时候，红黑树比B树效率高，但是在磁盘操作中，B树就更优了。
B+树是在B树的基础上改造，数据都集中在叶子节点，同时叶子节点之间还加了指针形成链表。
为什么要这么设计？
比如数据库一个select语句， 不止查一条，比如按照ID排序后取10条，这样的情况，如果是B树的话，需要做局部的中序遍历，可能要跨层访问，B+树都在叶子节点，不用跨层，同时又链表存在，找到首尾就可通过链表把数据取出来。
回到之前 Q： 既然hash比B+树快，为什么MySQL还用B+树。
A: 如果只选一个数据，hash更快，数据库经常查多条，由于B+树有序，索引结构有链表，那么整体会更优。数据库索引一般在磁盘上，数据量大的话没法一次装入内存，B+树可以分批加载。</description><content type="html"><![CDATA[<h2 id="arts---share-补123">ARTS - Share 补12.3</h2>
<h3 id="学技术要结合使用场景">学技术要结合使用场景</h3>
<h4 id="结合场景理解技术">结合场景理解技术</h4>
<p>常常有这样的想法，学习了一段新语言、新技术，然后由于工作中没有使用，就闲置了，然后再过一段时间就忘了，等于没学。了解了一个技术实现，但是没有和实际结合起来，造成记忆不深，说明并没有完全吃透，因为没有适用场景的结合，造成知识如同空中楼阁。我建议由需求、场景引出使用这类技术的必要性，这样更能掌握技术。</p>
<h4 id="比如mysql的使用">比如MySQL的使用</h4>
<p>Q: 发现MySQL查询很慢，会怎么做呢？</p>
<p>A: 看条件字段有没有加索引，没有的话就建立索引。</p>
<p>Q: 那么MySQL索引使用了什么数据结构？</p>
<p>A: B+树。</p>
<p>Q： B+树查询时间复杂度多少？</p>
<p>A: 和树的高度有关，大概log(n).</p>
<p>Q: 用hash存储索引，时间复杂度多少呢？</p>
<p>A: hash 是 O(1)</p>
<p>Q: 既然hash比B+树快，为什么MySQL还用B+树来存储索引呢？</p>
<h4 id="各种树">各种树</h4>
<p>这时候，我们就要思考下，B+树的数据结构，MySQL为什么要使用B+树。</p>
<p>说到树，它的基础知识就是前中后序遍历、二叉树、儿茶搜索树、平衡二叉树、红黑树、B树、B+树、、</p>
<p>比如红黑树，他是一个二叉树，但是有几条规则：</p>
<ol>
<li>节点是红色或黑色。</li>
<li>根是黑色。</li>
<li>所有叶子都是黑色（叶子是NIL节点）。</li>
<li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li>
<li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</li>
</ol>
<p>根据这些定义感觉一头雾水，那么要理解它，掌握背后的设计理念、原理和解决问题的方法，比技术本身更重要。</p>
<p>先从二叉排序树说起。</p>
<p>二叉排序树是左边比根节点小，右边比根节点大, 并且左右子树都是二叉排序树。</p>
<p>但是有一些极端情况，插入序列是有序的，那么就会退化成链表。</p>
<p>所以要用平衡树，插入的同时调整这棵树，让他的节点尽量均匀分布。</p>
<p>红黑树就是平衡树的一种，它的复杂的定义和规则，都是为了保证数的平衡性。</p>
<p>为什么要保证树的平衡？因为树的查找性能取决于树的高度，让树尽量平衡，就是为了降低树的高度。</p>
<p>Java中TreeSet的底层就是红黑树。</p>
<p>再来说说B树。</p>
<p>B树是一种多路搜索树，他的每个节点可以拥有多余两个孩子节点。M树的B树最多拥有M个孩子节点。</p>
<p>为什么要设计成多路的呢？ 为了进一步降低树的高度。但是也不能无限多路，因为无限多路就是有序数组。</p>
<p>那么这样的结构用在哪里呢？文件系统。</p>
<p>但是文件系统为什么不用红黑树或者有序数组呢？</p>
<p>我们知道文件系统和数据库索引都是存在硬盘上的，如果数据量大的话，不能一次性加载到内存中。一棵树无法一次性加载到内存里的情况，就发现B树多路存储的威力了，每次加载B树的一个节点，然后一步步找。</p>
<p>于是，在内存时候，红黑树比B树效率高，但是在磁盘操作中，B树就更优了。</p>
<p>B+树是在B树的基础上改造，数据都集中在叶子节点，同时叶子节点之间还加了指针形成链表。</p>
<p>为什么要这么设计？</p>
<p>比如数据库一个select语句， 不止查一条，比如按照ID排序后取10条，这样的情况，如果是B树的话，需要做局部的中序遍历，可能要跨层访问，B+树都在叶子节点，不用跨层，同时又链表存在，找到首尾就可通过链表把数据取出来。</p>
<h3 id="回到之前">回到之前</h3>
<p>Q： 既然hash比B+树快，为什么MySQL还用B+树。</p>
<p>A: 如果只选一个数据，hash更快，数据库经常查多条，由于B+树有序，索引结构有链表，那么整体会更优。数据库索引一般在磁盘上，数据量大的话没法一次装入内存，B+树可以分批加载。</p>
]]></content></item><item><title>Week1022_tip</title><link>/posts/arts/week1022_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:40 +0000</pubDate><guid>/posts/arts/week1022_tip/</guid><description>ARTS - Tip 补12.3 MySQL备份数据过滤与自动化 导数据 在工作中要同步生产数据到测试服务器的需求，以方便测试，于是经常要复制表.
最开始我是这么做的：
// 首先备份表 mysqldump -uusername -p dbname tablename &amp;gt; tablename.sql // 把表复制到其他服务器 scp tablename.sql user@ip:~/ // 登录user机器，导入数据 mysql -uusername -p dbname &amp;lt; tablename.sql 由于测试机测试和本机测试还是不一样，有时使用 sz tablename.sql 到本地，再测试，这种情况下如果网络不好，而且数据文件非常大，要很慢才能传送完毕，于是就想到，有些数据按天产生，只需要最近几天的数据，对于之前的没必要传送。于是查文档找到了方案.
备份数据过滤 &amp;ndash;tables Override the &amp;ndash;databases or -B option. mysqldump regards all name arguments following the option as table names.
&amp;ndash;where=&amp;lsquo;where_condition&amp;rsquo;, -w &amp;lsquo;where_condition&amp;rsquo;
Dump only rows selected by the given WHERE condition. Quotes around the condition are mandatory if it contains spaces or other characters that are special to your command interpreter.</description><content type="html"><![CDATA[<h2 id="arts---tip-补123">ARTS - Tip 补12.3</h2>
<h3 id="mysql备份数据过滤与自动化">MySQL备份数据过滤与自动化</h3>
<h4 id="导数据">导数据</h4>
<p>在工作中要同步生产数据到测试服务器的需求，以方便测试，于是经常要复制表.</p>
<p>最开始我是这么做的：</p>
<pre tabindex="0"><code>// 首先备份表
mysqldump -uusername  -p dbname tablename &gt; tablename.sql
// 把表复制到其他服务器
scp tablename.sql user@ip:~/

// 登录user机器，导入数据
mysql -uusername -p dbname &lt; tablename.sql
</code></pre><p>由于测试机测试和本机测试还是不一样，有时使用  sz  tablename.sql 到本地，再测试，这种情况下如果网络不好，而且数据文件非常大，要很慢才能传送完毕，于是就想到，有些数据按天产生，只需要最近几天的数据，对于之前的没必要传送。于是查文档找到了方案.</p>
<h4 id="备份数据过滤">备份数据过滤</h4>
<blockquote>
<p>&ndash;tables
Override the &ndash;databases or -B option. mysqldump regards all name arguments  following the option as table names.</p>
<p>&ndash;where=&lsquo;where_condition&rsquo;, -w &lsquo;where_condition&rsquo;</p>
</blockquote>
<blockquote>
<p>Dump only rows selected by the given WHERE condition. Quotes around the condition are mandatory if it contains spaces or other characters that are special to your command interpreter.</p>
</blockquote>
<blockquote>
<p>Examples:</p>
</blockquote>
<blockquote>
<p>&ndash;where=&ldquo;user=&lsquo;jimf&rsquo;&rdquo;</p>
<p>-w&quot;userid&gt;1&quot;</p>
</blockquote>
<blockquote>
<p>-w&quot;userid&lt;1&quot;</p>
</blockquote>
<p>可以使用 &ndash;tables 和 &ndash;where 来过滤，
如我有t_user表</p>
<pre tabindex="0"><code>mysql&gt; select * from t_user;
+----+------+------+-------------+
| id | name | age  | telephone   |
+----+------+------+-------------+
|  1 | jack |   20 | 18877771111 |
|  2 | rose |   33 | 18977771111 |
|  3 | tom  |   21 | 13877761111 |
|  4 | bob  |   24 | 13356771111 |
+----+------+------+-------------+
</code></pre><p>要备份id &gt;2的数据，使用</p>
<pre tabindex="0"><code>mysqldump -uroot -p dbname --tables t_user --where=&#34;id&gt;2&#34; &gt; t_user.sql
</code></pre><p>打开文件t_user.sql， 部分如下</p>
<pre tabindex="0"><code>--
 -- WHERE:  id&gt;2

 LOCK TABLES `t_user` WRITE;
 /*!40000 ALTER TABLE `t_user` DISABLE KEYS */;
 INSERT INTO `t_user` VALUES (3,&#39;tom&#39;,21,&#39;13877761111&#39;),(4,&#39;bob&#39;,24,&#39;13356771111&#39;);
 /*!40000 ALTER TABLE `t_user` ENABLE KEYS */;
 UNLOCK TABLES;
</code></pre><p>可见，已经生效了</p>
<h4 id="脚本化">脚本化</h4>
<p>我想自动化同步表数据，于是就写了个shell脚本来实现，
对于同步服务器脚本如下：</p>
<pre tabindex="0"><code>#!/bin/bash
 echo &#34;####start sync data to test####&#34;

 for i in &#34;$@&#34;; do
     echo $i
     mysqldump -uusername -ppassword db $i &gt; &#34;$i.sql&#34;
     scp &#34;$i.sql&#34; user@test_ip:~/script/ &amp;
 done

 wait
 rm ./*.sql
 echo &#34;####end sync data####&#34;
</code></pre><p>该脚本参数是要同步的表，对于测试服务器脚本如下：</p>
<pre tabindex="0"><code>#!/bin/bash
 echo &#34;####start import sql####&#34;

 for i in $(ls *.sql); do
     echo $i
     mysql -uusername -ppassword db &lt;  &#34;$i&#34; &amp;
 done

wait
mv *.sql ../tmp

 echo &#34;### end import###&#34;
</code></pre><p>以上就做到了简单了数据同步，还没实现在服务器A调用B的脚本的功能，以后在加。</p>
]]></content></item><item><title>Week1023_algorithm</title><link>/posts/arts/week1023_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:40 +0000</pubDate><guid>/posts/arts/week1023_algorithm/</guid><description>ARTS - Algorithm 补12.10 143. 重排链表 题目 给定一个单链表 L：L0→L1→…→Ln-1→Ln ，
将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
示例 1:
给定链表 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, 重新排列为 1-&amp;gt;4-&amp;gt;2-&amp;gt;3.
示例 2:
给定链表 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 重新排列为 1-&amp;gt;5-&amp;gt;2-&amp;gt;4-&amp;gt;3.
分析 还是先用最简单的方法实现。我们发现最后的排列结果其实就是取一个首，取一个尾，用栈这种数据结构很合适，于是就想到了如下代码：
public void reorderList(ListNode head) { LinkedList&amp;lt;Integer&amp;gt; list = new LinkedList&amp;lt;&amp;gt;(); while (head != null) { list.add(head.val); head = head.next; } ListNode node = new ListNode(0); ListNode n = node; while (list.size() &amp;gt; 0) { int a = list.pollFirst(); n.next = new ListNode(a); Integer x = list.</description><content type="html"><![CDATA[<h2 id="arts---algorithm--补1210">ARTS - Algorithm  补12.10</h2>
<h3 id="143-重排链表httpsleetcode-cncomproblemsreorder-list"><a href="https://leetcode-cn.com/problems/reorder-list/">143. 重排链表</a></h3>
<h3 id="题目">题目</h3>
<blockquote>
<p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ，</p>
<p>将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</p>
</blockquote>
<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
<p>示例 1:</p>
<p>给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</p>
<p>示例 2:</p>
<p>给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</p>
<h3 id="分析">分析</h3>
<p>还是先用最简单的方法实现。我们发现最后的排列结果其实就是取一个首，取一个尾，用栈这种数据结构很合适，于是就想到了如下代码：</p>
<pre tabindex="0"><code>public void reorderList(ListNode head) {

        LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;();

        while (head != null) {
            list.add(head.val);
            head = head.next;
        }


        ListNode node = new ListNode(0);
        ListNode n = node;

        while (list.size() &gt; 0) {

            int a = list.pollFirst();
            n.next = new ListNode(a);

            Integer x = list.pollLast();
            if (x == null) {
                n.next.next = null;
            } else {
                n.next.next = new ListNode(x);
            }
            n = n.next.next;

        }

        head = node.next;

    }
</code></pre><p>但是，题目要求：</p>
<p><strong>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</strong></p>
<p>所以，改变了值的是不行的。那么应该把ListNode对象放进队列，然后再取头取尾。</p>
<p>如下：</p>
<pre tabindex="0"><code>public void reorderList2(ListNode head) {

        LinkedList&lt;ListNode&gt; list = new LinkedList&lt;&gt;();

        while (head != null) {
            list.add(head);
            head = head.next;
        }

        for (ListNode node:
             list) {
            node.next = null;
        }

        ListNode first = list.pollFirst();
        ListNode node = first;

        boolean flag = true;
        while (list.size() &gt; 0) {
            if (flag) {
                node.next = list.pollLast();
                flag = false;
            } else {
                node.next = list.pollFirst();
                flag = true;

            }
            node = node.next;

        }

        

    }
</code></pre><p>这个提交结果是超出时间限制，超出内存限制。我们再优化下，如下：</p>
<pre tabindex="0"><code>public static ListNode reorderList2(ListNode head) {

        LinkedList&lt;ListNode&gt; list = new LinkedList&lt;&gt;();

        ListNode node = head;
        while (node != null) {
            list.add(node);
            node = node.next;
        }
        node = list.pollFirst();
        boolean flag = true;
        while (!list.isEmpty()) {
            if (flag) {
                node.next = list.pollLast();
                flag = false;
            } else {
                node.next = list.pollFirst();
                flag = true;

            }
            node = node.next;

        }

        if (node != null) {
            node.next  = null;
        }


        return node;
    }
</code></pre><p>然后可以了。</p>
<p>我们继续思考，肯定有更好的解决方法，不用引入队列，那么该如何做呢？想象一下，用双指针，找到中点，然后list截成两段，后一段翻转，再合并。代码如下</p>
<h3 id="代码">代码</h3>
<h4 id="c版">C++版</h4>
<pre tabindex="0"><code>// Source : https://oj.leetcode.com/problems/reorder-list/
// Author : Hao Chen
// Date   : 2014-06-17

/********************************************************************************** 
* 
* Given a singly linked list L: L0→L1→…→Ln-1→Ln,
* reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…
* 
* You must do this in-place without altering the nodes&#39; values.
* 
* For example,
* Given {1,2,3,4}, reorder it to {1,4,2,3}.
* 
*               
**********************************************************************************/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
/**
 * Definition for singly-linked list.
 */
class ListNode {
public:
    int val;
    ListNode *next;
    ListNode():val(0), next(NULL) {}
    ListNode(int x) : val(x), next(NULL) {}
};

class Solution {
public:
    void reorderList(ListNode *head) {
        ListNode *pMid = findMidPos(head);
        pMid = reverseList(pMid);
        head = Merge(head, pMid);
    }
    
private:
    ListNode* findMidPos(ListNode *head){

        ListNode *p1, *p2, *p=NULL;
        p1 = p2 = head;
        
        while(p1!=NULL &amp;&amp; p2!=NULL &amp;&amp; p2-&gt;next!=NULL){
            p = p1;
            p1 = p1-&gt;next;
            p2 = p2-&gt;next-&gt;next;
        }

        if(p!=NULL){
            p-&gt;next = NULL;
        }
        
        return p1;
    }
    
    ListNode* reverseList(ListNode *head){
        ListNode* h = NULL;
        ListNode *p;
        while (head!=NULL){
            p = head;
            head = head-&gt;next;
            p-&gt;next = h;
            h = p;
        }
        return h;
    }
    
    ListNode* Merge(ListNode *h1, ListNode* h2) {
        ListNode *p1=h1, *p2=h2, *p1nxt, *p2nxt;
        while(p1!=NULL &amp;&amp; p2!=NULL){
            p1nxt = p1-&gt;next;
            p2nxt = p2-&gt;next;
            
            p1-&gt;next = p2;
            p2-&gt;next = p1nxt;
            
            if (p1nxt==NULL){
                p2-&gt;next = p2nxt;
                break;
            }
            p1=p1nxt;
            p2=p2nxt;
        }
    }
};

void printList(ListNode *h){
    while(h!=NULL){
        printf(&#34;%d-&gt;&#34;, h-&gt;val);
        h = h-&gt;next;
    }
    printf(&#34;nil\n&#34;);
}

int main(int argc, char** argv)
{
    int size = atoi(argv[1]);
    ListNode* n = new ListNode[size] ;

    for(int i=0; i&lt;size; i++){
        n[i].val = i;
        if( i+1 &lt; size) {
            n[i].next = &amp;n[i+1];
        }
    }


    Solution s;
    s.reorderList(&amp;n[0]);
    printList(&amp;n[0]);
    
    
    
    return 0;
}
</code></pre><h4 id="python版">Python版</h4>
<pre tabindex="0"><code>def reorderList(self, head):
    if not head or not head.next: return
    
    # Step 1: find the middle node
    middle = None
    slow, fast = head, head
    while fast and fast.next:
        middle = slow
        slow = slow.next
        fast = fast.next.next
    middle.next = None
    
    # Step 2: reverse the second half
    prev = None
    while slow:
        nextNode = slow.next
        slow.next = prev
        prev, slow = slow, nextNode
        
    # Step 3: merge two lists
    while head and prev:
        first, second = head.next, prev.next
        head.next = prev
        if first: prev.next = first
        head, prev = first, second
</code></pre>]]></content></item><item><title>Week1023_review</title><link>/posts/arts/week1023_review/</link><pubDate>Fri, 31 Mar 2023 15:45:40 +0000</pubDate><guid>/posts/arts/week1023_review/</guid><description>ARTS - Review 补12.10 1.3.2 MySQL重要特性 respects n. 敬意；考虑；关联 roadmap n. 路标 appropriate adj. 适合的 Nutshell n. 果壳，简言之，一言以蔽之 Internals 内部 Portability 可移植性 commercial adj. 商用的 Internals 内幕 Portability 可移植性 temporary 临时的 optimized 优化 retrieve v. 取回 restriction 限制 privilege 特权 flexible 灵活 Scalability n. 可扩展性 consist of 由&amp;hellip;组成 Connectivity 连通性 Localization 局部化，地方化 specified 规定 This section describes some of the important characteristics of the MySQL Database Software. In most respects, the roadmap applies to all versions of MySQL.</description><content type="html"><![CDATA[<h2 id="arts---review-补1210">ARTS - Review 补12.10</h2>
<h2 id="132-mysql重要特性">1.3.2 MySQL重要特性</h2>
<ul>
<li>respects n. 敬意；考虑；关联</li>
<li>roadmap n. 路标</li>
<li>appropriate adj. 适合的</li>
<li>Nutshell n. 果壳，简言之，一言以蔽之</li>
<li>Internals  内部</li>
<li>Portability 可移植性</li>
<li>commercial adj. 商用的</li>
<li>Internals 内幕</li>
<li>Portability 可移植性</li>
<li>temporary 临时的</li>
<li>optimized 优化</li>
<li>retrieve v. 取回</li>
<li>restriction 限制</li>
<li>privilege 特权</li>
<li>flexible 灵活</li>
<li>Scalability n. 可扩展性</li>
<li>consist of  由&hellip;组成</li>
<li>Connectivity 连通性</li>
<li>Localization 局部化，地方化</li>
<li>specified 规定</li>
</ul>
<blockquote>
<p>This section describes some of the important characteristics of the MySQL Database Software. In most respects, the roadmap applies to all versions of MySQL. For information about features as they are introduced into MySQL on a series-specific basis, see the “In a Nutshell” section of the appropriate<br>
Manual:</p>
</blockquote>
<p>这一章节讲述MySQL数据库软件的一些重要特性。在大多数方面，路线图适合MySQL所有版本。有关基于系列的MySQL特性介绍，看相对应的 “简言” 手册。</p>
<p><strong>Internals and Portability</strong></p>
<blockquote>
<p>Written in C and C++.</p>
</blockquote>
<blockquote>
<p>Tested with a broad range of different compilers.</p>
</blockquote>
<blockquote>
<p>Works on many different platforms. See <a href="https://www.mysql.com/support/supportedplatforms/database.html">https://www.mysql.com/support/supportedplatforms/database.html</a>.</p>
</blockquote>
<blockquote>
<p>For portability, uses CMake in MySQL 5.5 and up. Previous series use GNU Automake, Autoconf, and Libtool.</p>
</blockquote>
<blockquote>
<p>Tested with Purify (a commercial memory leakage detector) as well as with Valgrind, a GPL tool (<a href="http://developer.kde.org/~sewardj/)">http://developer.kde.org/~sewardj/)</a>.</p>
</blockquote>
<blockquote>
<p>Uses multi-layered server design with independent modules.</p>
</blockquote>
<blockquote>
<p>Designed to be fully multithreaded using kernel threads, to easily use multiple CPUs if they are available.</p>
</blockquote>
<blockquote>
<p>Provides transactional and nontransactional storage engines.</p>
</blockquote>
<blockquote>
<p>Uses very fast B-tree disk tables (MyISAM) with index compression.</p>
</blockquote>
<blockquote>
<p>Designed to make it relatively easy to add other storage engines. This is useful if you want to provide an SQL interface for an in-house database.</p>
</blockquote>
<blockquote>
<p>Uses a very fast thread-based memory allocation system.</p>
</blockquote>
<blockquote>
<p>Executes very fast joins using an optimized nested-loop join.</p>
</blockquote>
<blockquote>
<p>Implements in-memory hash tables, which are used as temporary tables.</p>
</blockquote>
<blockquote>
<p>Implements SQL functions using a highly optimized class library that should be as fast as possible. Usually there is no memory allocation at all after query initialization.</p>
</blockquote>
<blockquote>
<p>Provides the server as a separate program for use in a client/server networked environment, and as a library that can be embedded (linked) into standalone  applications. Such applications can be used in isolation or in environments where no network is available.</p>
</blockquote>
<p>内部和可移植性</p>
<ul>
<li>用C和C++写的。</li>
<li>用多种不同的编译器测试</li>
<li>在多个不同的平台工作。</li>
<li>为了可移植性，使用CMake 在MySQL5.5及以上。之前的系列使用GNU automake，autoconf,和libtool.</li>
<li>使用 purify(一款商用内存泄露检测器) 测试 ，同时还有 Valgrind, 一个GPL工具。</li>
<li>使用具有独立模块的多层服务器设计。</li>
<li>设计成使用内核线程完全多线程的，方便使用多核CPU。</li>
<li>提供事务支持和非事务支持策略引擎。</li>
<li>使用非常快的索引压缩的B-树硬盘表(MyISAM)</li>
<li>设计成相对易于添加其他策略引擎。这很有用如果你想为一个内部数据库提供一个SQL接口。</li>
<li>使用一个非常快速的基于线程的内存分配系统。</li>
<li>使用乐观自旋锁执行非常快</li>
<li>实现基于内存的哈希表，被用来作为临时表</li>
<li>实现SQL方法用一个高度优化的尽可能快的类库。通常在查询初始化后根本没有内存分配。</li>
<li>用客户端/服务端网络环境提供作为一个隔离的程序服务，作为可以被单个应用连接的类库。这些应用可以用事务隔离或者无网可用。</li>
</ul>
<blockquote>
<p>Data Types</p>
</blockquote>
<blockquote>
<p>Many data types: signed/unsigned integers 1, 2, 3, 4, and 8 bytes long, FLOAT, DOUBLE, CHAR, VARCHAR, BINARY, VARBINARY, TEXT, BLOB, DATE, TIME, DATETIME, TIMESTAMP, YEAR, SET, ENUM, and OpenGIS spatial types. See Chapter 11, Data Types.</p>
</blockquote>
<p><strong>数据类型</strong></p>
<p>很多数据类型： 整型 1，2，3，4， 8字节long, FLOAT , DOUBLE, CHAR, VARCHAR,BINARY,VARBINARY,TEXT,BLOB,DATE,TIME,DATETIME,TIMESTAMP,YEAR,SET,ENUM,GIS特殊类型你给，看第11章节，数据类型。</p>
<blockquote>
<p>Fixed-length and variable-length string types.
定长和不定长 string类型</p>
</blockquote>
<blockquote>
<p>Statements and Functions</p>
</blockquote>
<blockquote>
<p>Full operator and function support in the SELECT list and WHERE clause of queries. For example:</p>
</blockquote>
<blockquote>
<p>mysql&gt; SELECT CONCAT(first_name, &rsquo; &lsquo;, last_name)
-&gt; FROM citizen
-&gt; WHERE income/dependents &gt; 10000 AND age &gt; 30;
语句与方法。</p>
</blockquote>
<p>全部操作和方法支持在 SELECT 列表和 WHERE 语句查询里，例如：
&hellip;</p>
<blockquote>
</blockquote>
<p>Full support for SQL GROUP BY and ORDER BY clauses. Support for group functions (COUNT(), AVG(), STD(), SUM(), MAX(), MIN(), and GROUP_CONCAT()).</p>
<blockquote>
<p>Support for LEFT OUTER JOIN and RIGHT OUTER JOIN with both standard SQL and ODBC syntax.</p>
</blockquote>
<blockquote>
<p>Support for aliases on tables and columns as required by standard SQL.</p>
</blockquote>
<blockquote>
<p>Support for DELETE, INSERT, REPLACE, and UPDATE to return the number of rows that were changed (affected), or to return the number of rows matched instead by setting a flag when connecting to the server.</p>
</blockquote>
<blockquote>
<p>Support for MySQL-specific SHOW statements that retrieve information about databases, storage engines, tables, and indexes. Support for the INFORMATION_SCHEMA database, implemented according to standard SQL.</p>
</blockquote>
<ul>
<li>完全支持SQL分组和排序。支持分组函数(COUNT(), AVG(), STD(), SUM(), MAX(), MIN(),和GROUP_CONCAT())</li>
<li>支持表、列别名，这是SQL标准必须的</li>
<li>支持 DELETE,INSERT,REPLACE, 和UPDATE返回改变（命中）的行数，或者连接服务器时候通过设置一个标志来返回匹配的行数。</li>
<li>支持MySQL特有的 SHOW 语句，返回数据库、存储引擎、表、索引信息。支持INFORMATION_SCHEMA数据库，根据标准SQL实现。</li>
</ul>
<blockquote>
<p>An EXPLAIN statement to show how the optimizer resolves a query.</p>
</blockquote>
<blockquote>
<p>Independence of function names from table or column names. For example, ABS is a valid column name. The only restriction is that for a function call, no spaces are permitted between the function name and the “(” that follows it. See Section 9.3, “Keywords and Reserved Words”.</p>
</blockquote>
<blockquote>
<p>You can refer to tables from different databases in the same statement.</p>
</blockquote>
<p>一个EXPLAIN语句显示一个查询的优化解决方案。</p>
<p>取决于表、列名中的方法名。例如，ABS 是一个验证的列名。仅有的限制是对于一次方法调用，在方法名和&quot;(&ldquo;之间不允许有空格的。</p>
<blockquote>
<p>Security</p>
</blockquote>
<blockquote>
<p>A privilege and password system that is very flexible and secure, and that enables host-based verification.</p>
</blockquote>
<blockquote>
<p>Password security by encryption of all password traffic when you connect to a server.</p>
</blockquote>
<p>安全</p>
<p>一个特权和密码系统是非常灵活安全，可以基于主机验证。</p>
<p>密码安全通过加密所有密码加护当连接到一个服务器。</p>
<blockquote>
<p>Scalability and Limits</p>
</blockquote>
<blockquote>
<p>Support for large databases. We use MySQL Server with databases that contain 50 million records. We also know of users who use MySQL Server with 200,000 tables and about 5,000,000,000 rows.</p>
</blockquote>
<blockquote>
<p>Support for up to 64 indexes per table. Each index may consist of 1 to 16 columns or parts of columns. The maximum index width for InnoDB tables is either 767 bytes or 3072 bytes. See Section 15.6.1.6, “Limits on InnoDB Tables”. The maximum index width for MyISAM tables is 1000 bytes. See Section 16.2, “The MyISAM Storage Engine”. An index may use a prefix of a column for CHAR, VARCHAR, BLOB, or TEXT column types.</p>
</blockquote>
<p>可扩展性和限制</p>
<p>支持大数据量。我们使用包含五千万记录的MySQL 服务器。我们也了解使用20万个表和大约50亿行数据的MySQL服务器用户。</p>
<p>支持每个表最高64个索引。每个索引可能由1到16列或部分列组成。InnoDB 表的最大索引是767字节或3072字节。MyISAM表的最大索引宽度是1000字节。一个索引可能使用一个列前缀，对于CHAR,VARCHAR,BLOB,或TEXT列类型。</p>
<blockquote>
<p><strong>Connectivity</strong></p>
</blockquote>
<blockquote>
<p>Clients can connect to MySQL Server using several protocols:</p>
</blockquote>
<blockquote>
<p>Clients can connect using TCP/IP sockets on any platform.</p>
</blockquote>
<p>连通性</p>
<p>客户端可以使用几种协议连接到MySQL 服务器。</p>
<p>客户端可以使用使用 TCP/IP 套接字在任何平台。</p>
<blockquote>
<p>On Windows systems, clients can connect using named pipes if the server is started with the &ndash;enable-named-pipe option. Windows servers also support shared-memory connections if started with the &ndash;shared-memory option. Clients can connect through shared memory by using the &ndash;protocol=memory option.</p>
</blockquote>
<blockquote>
<p>On Unix systems, clients can connect using Unix domain socket files.</p>
</blockquote>
<p>在windows系统，客户端可以使用名为管道来连接，使用 &ndash;enabled-named-pipe 选项。windows服务也支持共享内存连接，如果使用 &ndash;shared-memory 选项。客户端可以使用 &ndash;protocaol=memory选项来共享内存连接。</p>
<p>在Unix系统，客户端可以使用unix主机socket文件连接。</p>
<blockquote>
<p>MySQL client programs can be written in many languages. A client library written in C is available for clients written in C or C++, or for any language that provides C bindings.</p>
</blockquote>
<blockquote>
<p>APIs for C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, and Tcl are available, enabling MySQL clients to be written in many languages. See Chapter 28, Connectors and APIs.</p>
</blockquote>
<blockquote>
<p>The Connector/ODBC (MyODBC) interface provides MySQL support for client programs that use ODBC (Open Database Connectivity) connections. For example, you can use MS Access to connect to your MySQL server. Clients can be run on Windows or Unix. Connector/ODBC source is available. All ODBC 2.5 functions are supported, as are many others. See MySQL Connector/ODBC Developer Guide.</p>
</blockquote>
<blockquote>
<p>The Connector/J interface provides MySQL support for Java client programs that use JDBC connections. Clients can be run on Windows or Unix. Connector/J source is available. See MySQL Connector/J 5.1 Developer Guide.</p>
</blockquote>
<blockquote>
<p>MySQL Connector/NET enables developers to easily create .NET applications that require secure, high-performance data connectivity with MySQL. It implements the required ADO.NET interfaces and integrates into ADO.NET aware tools. Developers can build applications using their choice of .NET languages. MySQL Connector/NET is a fully managed ADO.NET driver written in 100% pure C#. See MySQL Connector/NET Developer Guide.</p>
</blockquote>
<p>Mysql 客户端编程可以使用很多语言。一个用C写的客户端库，对那些任何提供和C绑定的语言写的客户端都是可用的。</p>
<p>API对 C,C++,Eiffel&hellip; ，都是可用的。</p>
<p>连接器/ODBC 接口提供MySQL支持用ODBC连接程序的能力。例如，你可以使用MS Access 连接你的MySQL服务。客户端可以运行在windows或unix. 连接器/ODBC 资源是可用的。所有ODBC 2.5 方法和其他的一样，都被支持。</p>
<p>连接器/J 接口提供MySQL支持Java客户端程序使用JDBC连接的能力。客户段可以运行在windows或Unix.连接器/J 资源是可用的。</p>
<p>MySQL 连接器/NET 让程序员轻松创建 .NET 安全，高性能数据连接的MySQL应用程序。它实现了必要的AD0.NET 接口和集成进AD0.NET 软件工具里。开发者使用它们的.NET语言作为构建应用的选择。
MySQL 连接器/NET 是一个完全ADO.NET 驱动管理的100% C#写的。</p>
<blockquote>
<p>Localization</p>
</blockquote>
<blockquote>
<p>The server can provide error messages to clients in many languages. See Section 10.11, “Setting the Error Message Language”.</p>
</blockquote>
<blockquote>
<p>Full support for several different character sets, including latin1 (cp1252), german, big5, ujis, several Unicode character sets, and more. For example, the Scandinavian characters “å”, “ä” and “ö” are permitted in table and column names.</p>
</blockquote>
<blockquote>
<p>All data is saved in the chosen character set.</p>
</blockquote>
<blockquote>
<p>Sorting and comparisons are done according to the default character set and collation. is possible to change this when the MySQL server is started (see Section 10.3.2, “Server Character Set and Collation”). To see an example of very advanced sorting, look at the Czech sorting code. MySQL Server supports many different character sets that can be specified at compile time and runtime.</p>
</blockquote>
<blockquote>
<p>The server time zone can be changed dynamically, and individual clients can specify their own time zone. See Section 5.1.13, “MySQL Server Time Zone Support”.</p>
</blockquote>
<p>本地化</p>
<p>服务可以提供多重语言的错误信息。</p>
<p>对集中不同字符集全支持，包括 latin1, german, big5, ujis, 集中unicode字符集，和更多其他。例如， 斯堪的纳维亚语 在表、列名是允许的。</p>
<p>所有数据用选中的字符集保存。</p>
<p>排序和对比根据默认字符集和规则已经完成了，当启动服务器后也可以改变这些。看一个非常先进的排序案例，看捷克排序代码。MySQL支持多种字符集，可以在编译器和运行期规定。</p>
<p>服务器时区可以动态修改，初始化客户端可以对顶他们自己的时区。</p>
<blockquote>
<p>Clients and Tools</p>
</blockquote>
<blockquote>
<p>MySQL includes several client and utility programs. These include both command-line programs such as mysqldump and mysqladmin, and graphical programs such as MySQL Workbench.</p>
</blockquote>
<blockquote>
<p>MySQL Server has built-in support for SQL statements to check, optimize, and repair tables. These statements are available from the command line through the mysqlcheck client. MySQL also includes myisamchk, a very fast command-line utility for performing these operations on MyISAM tables. See Chapter 4, MySQL Programs.</p>
</blockquote>
<blockquote>
<p>MySQL programs can be invoked with the &ndash;help or -? option to obtain online assistance.</p>
</blockquote>
<p>客户端和工具</p>
<p>MySQL包含集中客户端段和工具编程。这些包括 命令行编程像 mysqldump 和mysqladmin,和图形化编程像 mysql workbench.</p>
<p>MySQL服务器被设计成支持SQL语句检查，优化修复表。这些语句通过mysqlcheck 客户端连接命令行。MySQL也包括myisamchk， 一个非常快速的命令行工具来操作MyISAM表。</p>
<p>MySQL程序可以用 &ndash;help 或 -? 选项来查阅。</p>
]]></content></item><item><title>Week1023_share</title><link>/posts/arts/week1023_share/</link><pubDate>Fri, 31 Mar 2023 15:45:40 +0000</pubDate><guid>/posts/arts/week1023_share/</guid><description>ARTS - Share 补12.10 创意实践思考 有才华的程序员 程序员圈子有才华的人很多，达成自己目标理想的人也有很多。因为创造一个程序、产品是一个虚拟数字产品，原材料仅仅是一个可以上网的电脑，可以根据需要找到各种各样的辅助工具，不需要像实体产品一样需要其他那么多人配合，自己在家中就可以实现。于是有些程序员就实现了自己的创业放到了网上，然后引起了一些投资人的兴趣，然后创业，项目做大。
互联网风投的起源就是一帮大佬资助有才华的程序员去把自己的想法变成产品，然后获取回报，不管市场好坏，行业冷暖，市场上是不缺钱的，缺的是好项目。所以，最怕的不是你缺钱，而是你缺创意，缺把创意落地的能力。
把创意落地 大多数人无法做到全职创业，拿着自己的想法去找投资人。那么可以利用业余时间做出第一版，让他跑起来再说，然后根据别人反馈、自己使用等方式，进行优化升级，如果引来一些人愿意尝试，那么可以一起讨论，然后推动它进步，项目就是这样一步步起来的。
所以，比较好的方式是，产生了想法，提出可行性方案，实现最小、最基本功能上线，然后推向市场，边接受检验边升级，然后打出名气。
不要只停留在想法 很多人为什么碌碌无为？很多时候不是缺乏创意，而是缺乏把创意落地，缺乏长久的坚持。我们都知道对于创新创意并不是需要大量资源投入的，很多都是小步快跑，小成本试错的结果，然后找对了方向开始深入挖掘。怕的是朝三暮四，怕的是只有想法。
去重复造轮子 工作中我们常常听到这样的建议，不要重复造轮子。因为和市场上已经久经考验、成熟的轮子相比，你自己造的可能安全性、稳定性、扩展性上不够好，而且还要花费时间，不如直接采用现成的，对于工作项目确实是对的，但是对于自己个人学习、进步、尝试是有害的，因为业界最佳实践已经说明它不够时髦了，它不是代表最新前沿技术了，我们的机会就是在优化、改进旧轮子、旧的方法轮上，然后提出了不同的思路，那么对原来的事物也是一种补充或颠覆，都是很有价值的，不要怕尝试，多尝试才会发现适合的路。</description><content type="html"><![CDATA[<h2 id="arts---share--补1210">ARTS - Share  补12.10</h2>
<h2 id="创意实践思考">创意实践思考</h2>
<h3 id="有才华的程序员">有才华的程序员</h3>
<p>程序员圈子有才华的人很多，达成自己目标理想的人也有很多。因为创造一个程序、产品是一个虚拟数字产品，原材料仅仅是一个可以上网的电脑，可以根据需要找到各种各样的辅助工具，不需要像实体产品一样需要其他那么多人配合，自己在家中就可以实现。于是有些程序员就实现了自己的创业放到了网上，然后引起了一些投资人的兴趣，然后创业，项目做大。</p>
<p>互联网风投的起源就是一帮大佬资助有才华的程序员去把自己的想法变成产品，然后获取回报，不管市场好坏，行业冷暖，市场上是不缺钱的，缺的是好项目。所以，最怕的不是你缺钱，而是你缺创意，缺把创意落地的能力。</p>
<h3 id="把创意落地">把创意落地</h3>
<p>大多数人无法做到全职创业，拿着自己的想法去找投资人。那么可以利用业余时间做出第一版，让他跑起来再说，然后根据别人反馈、自己使用等方式，进行优化升级，如果引来一些人愿意尝试，那么可以一起讨论，然后推动它进步，项目就是这样一步步起来的。</p>
<p>所以，比较好的方式是，产生了想法，提出可行性方案，实现最小、最基本功能上线，然后推向市场，边接受检验边升级，然后打出名气。</p>
<h3 id="不要只停留在想法">不要只停留在想法</h3>
<p>很多人为什么碌碌无为？很多时候不是缺乏创意，而是缺乏把创意落地，缺乏长久的坚持。我们都知道对于创新创意并不是需要大量资源投入的，很多都是小步快跑，小成本试错的结果，然后找对了方向开始深入挖掘。怕的是朝三暮四，怕的是只有想法。</p>
<h3 id="去重复造轮子">去重复造轮子</h3>
<p>工作中我们常常听到这样的建议，不要重复造轮子。因为和市场上已经久经考验、成熟的轮子相比，你自己造的可能安全性、稳定性、扩展性上不够好，而且还要花费时间，不如直接采用现成的，对于工作项目确实是对的，但是对于自己个人学习、进步、尝试是有害的，因为业界最佳实践已经说明它不够时髦了，它不是代表最新前沿技术了，我们的机会就是在优化、改进旧轮子、旧的方法轮上，然后提出了不同的思路，那么对原来的事物也是一种补充或颠覆，都是很有价值的，不要怕尝试，多尝试才会发现适合的路。</p>
]]></content></item><item><title>Week1023_tip</title><link>/posts/arts/week1023_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:40 +0000</pubDate><guid>/posts/arts/week1023_tip/</guid><description>ARTS - Tip 补12.10 一次MySQL时区问题引发的血案 事由 我们的系统是非洲人使用的，所以时区都改了，然后有一个功能是获取当前时间比较，但是页面显示不正常。
分析 然后就在浏览器debug获取时间戳，然后通过js转成日期时间格式，发现仍然会自动转化为当前时区，就把本地时间改成了非洲一样的时区，通过比较发现获取的当前时间比非洲时间慢，说明获取当前时间取得的不对，然后看了这个时间获取方式，是mysql now() 函数产生的，于是去数据库服务器上去看时区，发现数据库时区和数据库服务器时区不一致！
解决 修改MySQL时区和服务器一样，然后问题解决。
注意用 set global time_zone ，然后MySQL 查询可以，用系统查询就不行，需要重启MySQL， 在my.cnf设置时区，然后重启，或者重启服务。</description><content type="html"><![CDATA[<h2 id="arts---tip-补1210">ARTS - Tip 补12.10</h2>
<h2 id="一次mysql时区问题引发的血案">一次MySQL时区问题引发的血案</h2>
<h3 id="事由">事由</h3>
<p>我们的系统是非洲人使用的，所以时区都改了，然后有一个功能是获取当前时间比较，但是页面显示不正常。</p>
<h3 id="分析">分析</h3>
<p>然后就在浏览器debug获取时间戳，然后通过js转成日期时间格式，发现仍然会自动转化为当前时区，就把本地时间改成了非洲一样的时区，通过比较发现获取的当前时间比非洲时间慢，说明获取当前时间取得的不对，然后看了这个时间获取方式，是mysql now() 函数产生的，于是去数据库服务器上去看时区，发现数据库时区和数据库服务器时区不一致！</p>
<h3 id="解决">解决</h3>
<p>修改MySQL时区和服务器一样，然后问题解决。</p>
<p>注意用 set global time_zone  ，然后MySQL 查询可以，用系统查询就不行，需要重启MySQL， 在my.cnf设置时区，然后重启，或者重启服务。</p>
]]></content></item><item><title>Week1024_algorithm</title><link>/posts/arts/week1024_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:40 +0000</pubDate><guid>/posts/arts/week1024_algorithm/</guid><description>ARTS - Algorithm 补12.17 206. 反转链表 题目 反转一个单链表。
示例:
输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL
进阶: 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？
分析 翻转链表，就是让当前节点指向前面的节点，假设如下节点：
A-&amp;gt;B-&amp;gt;C
当前指针指向 B， 我们要把B指向A，也就是 B.next = A, 但是目前 B.next 是C，把当前指针curr向前推进时候，需要保存C，防止链表断裂。
于是就有了如下思路：
保存curr.next 将 curr.next 指向prev 将prev指向curr, curr指向 第1步保存的， 最后循环结束，记得将curr指向prev, 代码 public static ListNode reverse(ListNode head) { ListNode prev = null; ListNode curr = head; ListNode next = null; while (curr != null) { // 1.保存 curr.next, // 2.将curr.next 指向 prev // 3. curr 翻转到curr.</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补1217">ARTS - Algorithm 补12.17</h2>
<h2 id="206-反转链表httpsleetcode-cncomproblemsreverse-linked-listsubmissions"><a href="https://leetcode-cn.com/problems/reverse-linked-list/submissions/">206. 反转链表</a></h2>
<h3 id="题目">题目</h3>
<p>反转一个单链表。</p>
<p>示例:</p>
<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</p>
<p>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>
<p>进阶:
你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>
<h3 id="分析">分析</h3>
<p>翻转链表，就是让当前节点指向前面的节点，假设如下节点：</p>
<p>A-&gt;B-&gt;C</p>
<p>当前指针指向 B， 我们要把B指向A，也就是  B.next = A, 但是目前 B.next 是C，把当前指针curr向前推进时候，需要保存C，防止链表断裂。</p>
<p>于是就有了如下思路：</p>
<ol>
<li>保存curr.next</li>
<li>将 curr.next 指向prev</li>
<li>将prev指向curr, curr指向 第1步保存的，</li>
<li>最后循环结束，记得将curr指向prev,</li>
</ol>
<h3 id="代码">代码</h3>
<pre tabindex="0"><code>public static ListNode reverse(ListNode head) {

        ListNode prev = null;
        ListNode curr = head;
        ListNode next = null;


        while (curr != null) {
            // 1.保存 curr.next,
            // 2.将curr.next 指向 prev
            // 3. curr 翻转到curr.next,prev前进

            next = curr.next;
            curr.next = prev;

            prev = curr;
            curr = next;

        }
        // 循环结束
        curr = prev;

        return curr;

    }
    
    
    
    public ListNode reverseListRecursion(ListNode head) {
		if (head == null) {
			return head;
		}
		ListNode newHead = recursion(head);
		head.next = null;
		return newHead;
	}
	/**
	 * The recursive solution
	 */
	public ListNode recursion(ListNode p) {
		if (p.next == null) {
			return p;
		} else {
			ListNode next = p.next;
			ListNode newHead = recursion(next);
			next.next = p;
			return newHead;
		}
	}
</code></pre>]]></content></item><item><title>Week1024_tip</title><link>/posts/arts/week1024_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:40 +0000</pubDate><guid>/posts/arts/week1024_tip/</guid><description>ARTS-Tip 补12.17 Redis 的使用场景思考 问题引入 我们的现状是两个产品用一套代码，分开部署。
这种就要求两边的功能需求是一致的，现实中也确实是，不过里面的数据是不一样的，正好有一个需求，是每天初始化一个数据到保存的版本，这个数据对两个产品是不同的，于是在代码里判断了环境，初始化不同的数据。考虑后来写入db, 这样就不用判断环境了。然后别人提议写入 redis, 这样也不用区分环境了，然后就写入db还是redis 的问题，进行了思考。
Redis的定位是什么 缓存。
缓存的作用是什么？提高系统性能，提高吞吐量。缓存是怎么做的呢？把需要缓存的数据加载到内存，这样使用的时候就不用去数据库查，减少了磁盘IO，大大提高了性能。
高并发场景下临时数据库。
在高并发场景下，数据是来不及写入数据库的。这时候就发挥了内存数据库的作用，直接处理用户请求，异步写入持久化。这样大大提高系统可用。
分布式锁。
在分布式系统里，常常需要异步执行，但是为了保证执行一次，就需要像多线程一样获得锁，Redis的单线程设计天然适合做这个。
还有其他应用场景不再描述。
该如何选择 看自己业务场景。
如果是用来缓存数据。那么就不适合和db并驾齐驱。源数据应该存放在db里， 这样再做join查询时会很方便。而且，这时缓存只是一个辅助系统，把系统性能提高，就算没有缓存，系统也照样可用。很明显，本人面对的问题，需要放入db, 不适合把源数据存入缓存。</description><content type="html"><![CDATA[<h2 id="arts-tip-补1217">ARTS-Tip 补12.17</h2>
<h2 id="redis-的使用场景思考">Redis 的使用场景思考</h2>
<h3 id="问题引入">问题引入</h3>
<p>我们的现状是两个产品用一套代码，分开部署。</p>
<p>这种就要求两边的功能需求是一致的，现实中也确实是，不过里面的数据是不一样的，正好有一个需求，是每天初始化一个数据到保存的版本，这个数据对两个产品是不同的，于是在代码里判断了环境，初始化不同的数据。考虑后来写入db, 这样就不用判断环境了。然后别人提议写入 redis, 这样也不用区分环境了，然后就写入db还是redis 的问题，进行了思考。</p>
<h3 id="redis的定位是什么">Redis的定位是什么</h3>
<p>缓存。</p>
<p>缓存的作用是什么？提高系统性能，提高吞吐量。缓存是怎么做的呢？把需要缓存的数据加载到内存，这样使用的时候就不用去数据库查，减少了磁盘IO，大大提高了性能。</p>
<p>高并发场景下临时数据库。</p>
<p>在高并发场景下，数据是来不及写入数据库的。这时候就发挥了内存数据库的作用，直接处理用户请求，异步写入持久化。这样大大提高系统可用。</p>
<p>分布式锁。</p>
<p>在分布式系统里，常常需要异步执行，但是为了保证执行一次，就需要像多线程一样获得锁，Redis的单线程设计天然适合做这个。</p>
<p>还有其他应用场景不再描述。</p>
<h3 id="该如何选择">该如何选择</h3>
<p>看自己业务场景。</p>
<p>如果是用来缓存数据。那么就不适合和db并驾齐驱。源数据应该存放在db里， 这样再做join查询时会很方便。而且，这时缓存只是一个辅助系统，把系统性能提高，就算没有缓存，系统也照样可用。很明显，本人面对的问题，需要放入db, 不适合把源数据存入缓存。</p>
]]></content></item><item><title>Week1020_review</title><link>/posts/arts/week1020_review/</link><pubDate>Fri, 31 Mar 2023 15:45:39 +0000</pubDate><guid>/posts/arts/week1020_review/</guid><description>ARTS - Review 补11.19 Chapter 4 Processes 1. passive adj. 被动的 a passive entity 被动的实体
2. routine n 常规 routine parameters 常规参数
3. individual adj. 个人的，个别的 individual process 个别的进程
4. capable of 有&amp;hellip;能力 interacting 交流、合作 is not capable of interacting with another process 不能与另一个进程交互
5. mechanisms 机制 kernel managed mechanisms. 内核管理机制
6. monopolized v.独占的 one process monopolized most of the system&amp;rsquo;s physical memory 一个占用系统大部分物理内存的进程
7. appropriate 适当的 which is the most appropriate process to run next 哪个进程是接下来最适合运行的那个</description><content type="html"><![CDATA[<h2 id="arts---review--补1119">ARTS - Review  补11.19</h2>
<h3 id="chapter-4-processeshttpswwwtldporgldptlkkernelprocesseshtml"><a href="https://www.tldp.org/LDP/tlk/kernel/processes.html">Chapter 4 Processes</a></h3>
<h3 id="1-passive-adj-被动的">1. passive adj. 被动的</h3>
<p>a passive entity 被动的实体</p>
<h3 id="2-routine-n-常规">2. routine n 常规</h3>
<p>routine parameters 常规参数</p>
<h3 id="3-individual-adj-个人的个别的">3. individual adj. 个人的，个别的</h3>
<p>individual process 个别的进程</p>
<h3 id="4-capable-of-有能力--interacting-交流合作">4. capable of 有&hellip;能力  interacting 交流、合作</h3>
<p>is not capable of interacting with another process
不能与另一个进程交互</p>
<h3 id="5-mechanisms-机制">5. mechanisms 机制</h3>
<p>kernel managed mechanisms. 内核管理机制</p>
<h3 id="6-monopolized-v独占的">6. monopolized v.独占的</h3>
<p>one process monopolized most of the system&rsquo;s physical memory
一个占用系统大部分物理内存的进程</p>
<h3 id="7-appropriate-适当的">7. appropriate 适当的</h3>
<p>which is the most appropriate process to run next
哪个进程是接下来最适合运行的那个</p>
<h3 id="8-react-vi-n-反应-external-外部的">8. react vi. n. 反应 external 外部的</h3>
<p>have to react very quickly to external events
需要对外部事件快速反应</p>
<h3 id="9-circumstances-n情况">9. circumstances n.情况</h3>
<p>cannot be interrupted under any circumstances.
可能在任何情况下被中断</p>
]]></content></item><item><title>Week1020_share</title><link>/posts/arts/week1020_share/</link><pubDate>Fri, 31 Mar 2023 15:45:39 +0000</pubDate><guid>/posts/arts/week1020_share/</guid><description>ARTS - Share 补11.19 Linux 进程浅析 什么是进程 进程是在操作系统里开展工作。一个程序就是机器码命令和存储在硬盘可执行镜像上的数据的集合，就是一个被动实体；一个进程可以被看做一个运行中的计算机程序。
它是一个动态实体，随着机器码指令被处理器执行不断变化着。和程序的命令与数据一样，进程也包含程序计数器和所有的CPU 的机器村 也有进程栈包含像常规参数这样的临时数据，返回地址和保存变量。
Linux是多任务操作系统，进程之间互不影响，各自有各自的工作空间独立工作，除非安全问题和内核管理机制影响。
Linux 进程 Linux进程用 task_struct 的数据结构表示，使用task vector 集合来保存 task_struct 的指针。task vector 的最大长度就是系统支持的最大进程数，默认是512个。
Linux不仅支持普通类型的进程，还是支持实时进程。这些进程需要实时响应事件，所以被调度器区别对待。
Linux的 task_struct 的属性被分成几个方法区：
状态 运行态：进程要么是当前进程正在运行，要么是已经准备好等待获得CPU执行 等待： 进程等待获取某事件或资源。等待态的进程有两种类型： 可中断 和不可中断进程 停止： 进程停止。通常是接收到了一个停止信号。进程被 debug时也可以进入停止态。 僵尸态：暂停的进程，由于种种原因还存在于task vector中，就像死进程一样。 调度信息 调度器需要了解这些信息以便公正的作出决定下一个运行哪个进程。
标识符 每个进程在系统里都有标识符。进程标识符不是task vector的索引，他就是一个简单数字。每个进程也有用户和组的标识符，这被用来控制进程操作系统里的文件和设备。
进程间通信 Linux支持经典Unix IPC的信号、管道、信号量机制，也支持系统 V IPC的共享内存，信号量，消息队列机制。
关联 在Linux中没有进程是完全独立其他进程的。每个系统中的进程初始化后都有一个父进程。新进程不是被创建的，是被复制的，或者干脆克隆之前的进程。每个 task_struct 代表的进程都指向它的父进程、兄弟进程和子进程。
时间和定时器 内核持续追踪一个进程在其生命周期的创建时间和消费的CPU时间。
文件系统 进程可以打开关闭他们需要的文件、task_struct包含的指向的打开的文件，还有指向两个VFS inodes的文件。
虚拟内存 大多数进程有虚拟内存（内核线程和守护进程没有），Linux内核必须追踪虚拟内存是如何映射到系统物理内存上的。
进程独特上下文 一个进程可以看做系统当前状态的总和。当一个进程运行时它使用处理器的寄存器，栈等等。这就是的进程的上下文，当一个进程暂停，所有关于CPU的独特上下文必须保存进task_struct，这样被调度器重新启动时候能在这个点上恢复。
进程的标识符-进程号 系统启动的第一个进程是init, PID 是1，唯一一个由系统内核直接运行的进程。除了init之外每个进程都有父进程（PPID），使用pstree 看进程树：
$ pstree init─┬─acpid ├─atd ├─cron ├─dbus-daemon ├─dhclient ├─7*[getty] ├─irqbalance ├─2*[java───89*[{java}]] ├─java───65*[{java}] ├─java───76*[{java}] ├─java───80*[{java}] ├─java───90*[{java}] ├─2*[java───98*[{java}]] ├─java───37*[{java}] ├─java───115*[{java}] ├─mysqld_safe───mysqld───53*[{mysqld}] ├─nginx───4*[nginx] ├─ntpd ├─polkitd───2*[{polkitd}] ├─redis-server───2*[{redis-server}] ├─6*[redis-server───3*[{redis-server}]] ├─rpc.</description><content type="html"><![CDATA[<h2 id="arts---share-补1119">ARTS - Share 补11.19</h2>
<h2 id="linux-进程浅析">Linux 进程浅析</h2>
<h3 id="什么是进程">什么是进程</h3>
<p>进程是在操作系统里开展工作。一个程序就是机器码命令和存储在硬盘可执行镜像上的数据的集合，就是一个被动实体；一个进程可以被看做一个运行中的计算机程序。</p>
<p>它是一个动态实体，随着机器码指令被处理器执行不断变化着。和程序的命令与数据一样，进程也包含程序计数器和所有的CPU 的机器村 也有进程栈包含像常规参数这样的临时数据，返回地址和保存变量。</p>
<p>Linux是多任务操作系统，进程之间互不影响，各自有各自的工作空间独立工作，除非安全问题和内核管理机制影响。</p>
<h3 id="linux-进程">Linux 进程</h3>
<p>Linux进程用 task_struct 的数据结构表示，使用task vector 集合来保存 task_struct 的指针。task vector 的最大长度就是系统支持的最大进程数，默认是512个。</p>
<p>Linux不仅支持普通类型的进程，还是支持实时进程。这些进程需要实时响应事件，所以被调度器区别对待。</p>
<p>Linux的 task_struct 的属性被分成几个方法区：</p>
<h4 id="状态">状态</h4>
<ol>
<li>运行态：进程要么是当前进程正在运行，要么是已经准备好等待获得CPU执行</li>
<li>等待： 进程等待获取某事件或资源。等待态的进程有两种类型： 可中断 和不可中断进程</li>
<li>停止： 进程停止。通常是接收到了一个停止信号。进程被 debug时也可以进入停止态。</li>
<li>僵尸态：暂停的进程，由于种种原因还存在于task vector中，就像死进程一样。</li>
</ol>
<h4 id="调度信息">调度信息</h4>
<p>调度器需要了解这些信息以便公正的作出决定下一个运行哪个进程。</p>
<h4 id="标识符">标识符</h4>
<p>每个进程在系统里都有标识符。进程标识符不是task vector的索引，他就是一个简单数字。每个进程也有用户和组的标识符，这被用来控制进程操作系统里的文件和设备。</p>
<h4 id="进程间通信">进程间通信</h4>
<p>Linux支持经典Unix IPC的信号、管道、信号量机制，也支持系统 V IPC的共享内存，信号量，消息队列机制。</p>
<h4 id="关联">关联</h4>
<p>在Linux中没有进程是完全独立其他进程的。每个系统中的进程初始化后都有一个父进程。新进程不是被创建的，是被复制的，或者干脆克隆之前的进程。每个 task_struct 代表的进程都指向它的父进程、兄弟进程和子进程。</p>
<h4 id="时间和定时器">时间和定时器</h4>
<p>内核持续追踪一个进程在其生命周期的创建时间和消费的CPU时间。</p>
<h4 id="文件系统">文件系统</h4>
<p>进程可以打开关闭他们需要的文件、task_struct包含的指向的打开的文件，还有指向两个VFS inodes的文件。</p>
<h4 id="虚拟内存">虚拟内存</h4>
<p>大多数进程有虚拟内存（内核线程和守护进程没有），Linux内核必须追踪虚拟内存是如何映射到系统物理内存上的。</p>
<h4 id="进程独特上下文">进程独特上下文</h4>
<p>一个进程可以看做系统当前状态的总和。当一个进程运行时它使用处理器的寄存器，栈等等。这就是的进程的上下文，当一个进程暂停，所有关于CPU的独特上下文必须保存进task_struct，这样被调度器重新启动时候能在这个点上恢复。</p>
<h3 id="进程的标识符-进程号">进程的标识符-进程号</h3>
<p>系统启动的第一个进程是init, PID 是1，唯一一个由系统内核直接运行的进程。除了init之外每个进程都有父进程（PPID），使用pstree 看进程树：</p>
<pre tabindex="0"><code>$ pstree
init─┬─acpid
     ├─atd
     ├─cron
     ├─dbus-daemon
     ├─dhclient
     ├─7*[getty]
     ├─irqbalance
     ├─2*[java───89*[{java}]]
     ├─java───65*[{java}]
     ├─java───76*[{java}]
     ├─java───80*[{java}]
     ├─java───90*[{java}]
     ├─2*[java───98*[{java}]]
     ├─java───37*[{java}]
     ├─java───115*[{java}]
     ├─mysqld_safe───mysqld───53*[{mysqld}]
     ├─nginx───4*[nginx]
     ├─ntpd
     ├─polkitd───2*[{polkitd}]
     ├─redis-server───2*[{redis-server}]
     ├─6*[redis-server───3*[{redis-server}]]
     ├─rpc.idmapd
     ├─rpc.statd
     ├─rpcbind
     ├─rsyslogd───3*[{rsyslogd}]
     ├─sshd───sshd───sshd───bash───pstree
     ├─supervisord
     ├─systemd-logind
     ├─systemd-udevd
     ├─upstart-file-br
     ├─upstart-socket-
     ├─upstart-udev-br
     └─zabbix_agentd───5*[zabbix_agentd]
</code></pre><h3 id="进程类型">进程类型</h3>
<ul>
<li>交互进程
<ul>
<li>由一个Shell启动的进程</li>
<li>交互进程可以在前台运行，也可以在后台运行</li>
</ul>
</li>
<li>批处理进程
<ul>
<li>不与特定终端相关联，提交到等待队列顺序执行的进程</li>
</ul>
</li>
<li>守护进程
<ul>
<li>在Linux启动时初始化，需要时运行在后台的进程</li>
</ul>
</li>
</ul>
<h3 id="进程启动方式">进程启动方式</h3>
<ul>
<li>手工方式： 使用操作系统提供的用户接口
<ul>
<li>前台</li>
<li>后台 &amp;</li>
</ul>
</li>
<li>调度方式：按照预先指定的时间执行
<ul>
<li>at</li>
<li>batch</li>
<li>cron</li>
</ul>
</li>
</ul>
<h3 id="启动启动流程图">启动启动流程图</h3>
<p><img src="https://pic3.zhimg.com/v2-b22d52cf0f11e56548dbcdf820fc2d2a_b.jpg" alt=""></p>
<h3 id="进程管理常用命令">进程管理常用命令</h3>
<ol>
<li>top/htop 查看各个状态</li>
<li>ps 列出运行中的进程</li>
<li>pstree 打出进程树</li>
<li>kill 杀进程</li>
<li>pgrep 根据名字查找进程，返回PID</li>
<li>pkill / killall 根据名字杀进程</li>
<li>renice 调整运行中的进程的优先级</li>
<li>xkill 使用图形化工具杀进程</li>
</ol>
<p>参考</p>
<p>[1] Chapter 4 Processes. <a href="https://www.tldp.org/LDP/tlk/kernel/processes.html">https://www.tldp.org/LDP/tlk/kernel/processes.html</a></p>
<p>[2] 知乎: Linux进程管理 - Java3y的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/37997035">https://zhuanlan.zhihu.com/p/37997035</a></p>
<p>[3] How to Manage Processes from the Linux Terminal: 10 Commands You Need to Know  <a href="https://www.howtogeek.com/107217/how-to-manage-processes-from-the-linux-terminal-10-commands-you-need-to-know/">https://www.howtogeek.com/107217/how-to-manage-processes-from-the-linux-terminal-10-commands-you-need-to-know/</a></p>
]]></content></item><item><title>Week1020_tip</title><link>/posts/arts/week1020_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:39 +0000</pubDate><guid>/posts/arts/week1020_tip/</guid><description>ARTS - Tip 补11.19 Maven 构建的意外killed 问题场景 在linux环境构建java web项目时候，运行 mvn clean package 后，会意外killed，
[INFO] Packaging webapp [INFO] Processing war project [INFO] Webapp assembled in [1156 msecs] [INFO] Building war: /home/jack/git/xxx/zzz/target/x.war [1] + 25650 killed mvn clean package 问题定位 加上-X 开启debug模式
INFO] Copying xstream-1.4.7.jar to /home/jack/git/credit-c[1] 25909 killed mvn package -X 没有报错，还是被killed, 可能是被操作系统killed的，只好谷歌了。
在这里找到了一点描述 Maven compilation dies with “Killed”
说可能引起了OOM，所以系统把它kill 了，觉得这种可信度很大，于是就往调整内存那里处理。
尝试解决 然后查到资料说可以在编译插件设置编译最大最小内存
根据官网 Compile Using Memory Allocation Enhancements 于是设置如下：
&amp;lt;!-- 编译插件 --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.</description><content type="html"><![CDATA[<h2 id="arts---tip-补1119">ARTS - Tip 补11.19</h2>
<h2 id="maven-构建的意外killed">Maven 构建的意外killed</h2>
<h3 id="问题场景">问题场景</h3>
<p>在linux环境构建java web项目时候，运行 <code>mvn clean package</code> 后，会意外killed，</p>
<pre tabindex="0"><code>[INFO] Packaging webapp
[INFO] Processing war project
[INFO] Webapp assembled in [1156 msecs]
[INFO] Building war: /home/jack/git/xxx/zzz/target/x.war

[1]  + 25650 killed     mvn clean package
</code></pre><h3 id="问题定位">问题定位</h3>
<p>加上-X 开启debug模式</p>
<pre tabindex="0"><code>INFO] Copying xstream-1.4.7.jar to /home/jack/git/credit-c[1]    25909 killed     mvn package -X
</code></pre><p>没有报错，还是被killed, 可能是被操作系统killed的，只好谷歌了。</p>
<p>在这里找到了一点描述
<a href="https://stackoverflow.com/questions/7278514/maven-compilation-dies-with-killed">Maven compilation dies with “Killed”</a></p>
<p>说可能引起了OOM，所以系统把它kill 了，觉得这种可信度很大，于是就往调整内存那里处理。</p>
<h3 id="尝试解决">尝试解决</h3>
<p>然后查到资料说可以在编译插件设置编译最大最小内存</p>
<p>根据官网 <a href="https://maven.apache.org/plugins/maven-compiler-plugin/examples/compile-with-memory-enhancements.html">Compile Using Memory Allocation Enhancements
</a>
于是设置如下：</p>
<pre tabindex="0"><code>&lt;!-- 编译插件 --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.5.1&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.8&lt;/source&gt;
                    &lt;target&gt;1.8&lt;/target&gt;
                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;
                    &lt;fork&gt;true&lt;/fork&gt;
                    &lt;meminitial&gt;1024m&lt;/meminitial&gt;
                    &lt;maxmem&gt;2048m&lt;/maxmem&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
</code></pre><p>结果编译报错了</p>
<pre tabindex="0"><code>[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project credit-webapp: Compilation failure -&gt; [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project credit-webapp: Compilation failure
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
</code></pre><p>继续找资料，发现这个回答 <a href="https://stackoverflow.com/questions/12498738/maven-out-of-memory-build-failure">Maven Out of Memory Build Failure</a></p>
<blockquote>
<p>What kind of &lsquo;web&rsquo; module are you talking about? Is it a simple war and has &gt;packaging type war?</p>
</blockquote>
<blockquote>
<p>If you are not using Google&rsquo;s web toolkit (GWT) then you don&rsquo;t need to offer &gt;any gwt.extraJvmArgs</p>
</blockquote>
<blockquote>
<p>Forking the compile process might be not the best idea because then you start &gt;a second process which ignores the MAVEN_OPTS at all and makes analysis more &gt;difficult.</p>
</blockquote>
<blockquote>
<p>So I would try to increase the Xmx by setting the MAVEN_OPTS</p>
</blockquote>
<blockquote>
<p><code>export MAVEN_OPTS=&quot;-Xmx3000m&quot;</code></p>
<p>And don&rsquo;t fork the compiler to a different process</p>
</blockquote>
<p>说不用分开编译，因为会造成分析困难, 采用他的方式</p>
<p>于是就设置了</p>
<pre tabindex="0"><code>export MAVEN_OPTS=&#34;-Xmx1024m
</code></pre><p>问题解决。</p>
]]></content></item><item><title>Week1021_algorithm</title><link>/posts/arts/week1021_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:39 +0000</pubDate><guid>/posts/arts/week1021_algorithm/</guid><description>ARTS - Algorithm 补11.26 141. 环形链表 题目 给定一个链表，判断链表中是否有环。
为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。
示例 1：
输入：head = [3,2,0,-4], pos = 1 输出：true 解释：链表中有一个环，其尾部连接到第二个节点。 示例 2：
输入：head = [1,2], pos = 0 输出：true 解释：链表中有一个环，其尾部连接到第一个节点。 示例 3：
输入：head = [1], pos = -1 输出：false 解释：链表中没有环。 进阶：
你能用 O(1)（即，常量）内存解决此问题吗？
分析 这道题是要判断链表中有没有存在环。是否存在环，特点是有两个指针都指向同一个元素，就根据这个特点来判断，于是用最暴力的手段，把节点存到集合里，每取一个就去和集合中的比较，如果相同就代表存在环，于是代码如下：
public static boolean hasCycle(ListNode head) { if (head == null || head.next == null) { return false; } List&amp;lt;ListNode&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); while (head !</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补1126">ARTS - Algorithm 补11.26</h2>
<h3 id="141-环形链表httpsleetcode-cncomproblemslinked-list-cycle"><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h3>
<h3 id="题目">题目</h3>
<p>给定一个链表，判断链表中是否有环。</p>
<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>
<p>示例 1：</p>
<pre tabindex="0"><code>输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。
</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt=""></p>
<p>示例 2：</p>
<pre tabindex="0"><code>输入：head = [1,2], pos = 0
输出：true
解释：链表中有一个环，其尾部连接到第一个节点。
</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt=""></p>
<p>示例 3：</p>
<pre tabindex="0"><code>输入：head = [1], pos = -1
输出：false
解释：链表中没有环。
</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt=""></p>
<p>进阶：</p>
<p>你能用 O(1)（即，常量）内存解决此问题吗？</p>
<h3 id="分析">分析</h3>
<p>这道题是要判断链表中有没有存在环。是否存在环，特点是有两个指针都指向同一个元素，就根据这个特点来判断，于是用最暴力的手段，把节点存到集合里，每取一个就去和集合中的比较，如果相同就代表存在环，于是代码如下：</p>
<pre tabindex="0"><code>public static boolean hasCycle(ListNode head) {

        if (head == null || head.next == null) {
            return false;
        }

        List&lt;ListNode&gt; list = new ArrayList&lt;&gt;();

        while (head != null) {
            if (list.contains(head)) {
                return true;
            }
            list.add(head);
            head = head.next;
        }


        return false;
    }
    
    
</code></pre><p>或者考虑用Set集合来接收，判断是否添加成功来确定是否有环</p>
<pre tabindex="0"><code>		Set&lt;ListNode&gt; set = new HashSet&lt;&gt;();
        while (head != null) {
            boolean flag = set.add(head);
            if (!flag) {
                return true;
            }
            head = head.next;
        }


        return false;
</code></pre><h3 id="代码">代码</h3>
<p>如果不引入集合，即空间复杂度为O(1),那么该如何解决呢？</p>
<p>如果有环，那么一定会引起指针循环，根据这个特点，可以设计个快慢指针(双指针思想)，一个跳两步，一个跳一步，只要存在循环，那么一定会追上，如果不存在环，那么一定追不上。于是解答代码如下：</p>
<pre tabindex="0"><code>public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }

        ListNode fast = head;
        ListNode slow = head;

        do {
            fast = fast.next.next;
            slow = slow.next;

        } while (fast != null &amp;&amp; fast.next != null &amp;&amp; fast != slow);

        return fast == slow ? true : false;
        
    }
}
</code></pre>]]></content></item><item><title>Week1021_review</title><link>/posts/arts/week1021_review/</link><pubDate>Fri, 31 Mar 2023 15:45:39 +0000</pubDate><guid>/posts/arts/week1021_review/</guid><description>ARTS - Review 补12.3号 Linux进程那些事（2） briefly adv. 简单地 made up of 由&amp;hellip;组成 fundamentally adv. 根本上 Foreground 前景 interactive adj.互动的 spontaneously adv. 自然地 via prep. 通过 partially adv. 部分地 preempt vt. 先占，取代 relinquish 放弃 A process refers to a program in execution; it’s a running instance of a program. It is made up of the program instruction, data read from files, other programs or input from a system user.
一个进程代表一个程序执行过程；是一个程序运行实例。它由程序命令，从文件读取的数据或其他程序或系统用户输入读取数据组成。
There are fundamentally two types of processes in Linux:</description><content type="html"><![CDATA[<h2 id="arts---review-补123号">ARTS - Review 补12.3号</h2>
<h3 id="linux进程那些事2">Linux进程那些事（2）</h3>
<ul>
<li>briefly adv. 简单地</li>
<li>made up of  由&hellip;组成</li>
<li>fundamentally adv. 根本上</li>
<li>Foreground 前景</li>
<li>interactive adj.互动的</li>
<li>spontaneously adv. 自然地</li>
<li>via prep. 通过</li>
<li>partially adv. 部分地</li>
<li>preempt vt. 先占，取代</li>
<li>relinquish 放弃</li>
</ul>
<blockquote>
<p>A process refers to a program in execution; it’s a running instance of a
program. It is made up of the program instruction, data read from files, other
programs or input from a system user.</p>
</blockquote>
<p>一个进程代表一个程序执行过程；是一个程序运行实例。它由程序命令，从文件读取的数据或其他程序或系统用户输入读取数据组成。</p>
<blockquote>
<p>There are fundamentally two types of processes in Linux:</p>
</blockquote>
<p>基本上Linux有两种类型的进程</p>
<ul>
<li>前台进程 ，也叫交互进程，通过终端初始化控制。</li>
<li>后台进程，也叫非交互进程，不需要用户输入</li>
</ul>
<p>什么是守护进程</p>
<p>一种特殊的后台运行进程随着系统启动，作为一种服务持续运行，不会死亡。可以被用户通过初始化进程进行控制。</p>
<p><img src="https://www.tecmint.com/wp-content/uploads/2017/03/ProcessState.png" alt=""></p>
<blockquote>
<p>All processes run partially in user mode and partially in system mode</p>
</blockquote>
<p>所有的进程运行时部分使用用户模式部分部分使用系统模式。</p>
<blockquote>
<p>In Linux, processes do not preempt the current, running process, they cannot stop it from running so that they can run. Each process decides to relinquish the CPU that it is running on when it has to wait for some system event.</p>
</blockquote>
<p>在Linux中，进程不会抢占当前运行中的进程，他们不会阻止它运行以便自己运行。每个进程决定放弃正在运行着的CPU当它不得不等待一些系统事件的时候。</p>
]]></content></item><item><title>Week1021_share</title><link>/posts/arts/week1021_share/</link><pubDate>Fri, 31 Mar 2023 15:45:39 +0000</pubDate><guid>/posts/arts/week1021_share/</guid><description>ARTS - Share 补11.26 一个.java 文本文件是如何运行起来的 整体 我们知道，通常的说法是 .java被编译器编译成.class文件，也就是字节码文件，然后虚拟机加载执行。这是粗略的说法，具体实现是有些复杂的，如
编译器如何把.java 文件编译成.class字节码文件的？ 虚拟机是如何加载编译后的字节码文件的？ 为什么要用虚拟机来执行Java程序？ 1.编译Java Java编译使用javac命令，编译器输入java源码文件， 输出机器语言，具体过程如下：
java源代码（符合语言规范）-&amp;gt; javac -&amp;gt; .class字节码文件 -&amp;gt; jvm -&amp;gt; 机器语言（不同平台不同种类）
编译流程：
词法分析器：将源码转换为Token流 将源代码划分成一个个Token(找出java语言中的if，else，for等关键字) 语法分析器：将Token流转化为语法树 将上述的一个个Token组成一句句话（或者说成一句句代码块），检查这一句句话是不是符合Java语言规范(如if后面跟的是不是布尔判断表达式) 语义分析器：将语法树转化为注解语法树 将复杂的语法转化成简单的语法（eg.注解、foreach转化为for循环、去掉永不会用到的代码块）并做一些检查，添加一些代码(默认构造器) 代码生成器：将注解语法树转化为字节码(即将一个数据结构转化成另一个数据结构) 2.虚拟机加载 完成构造字节码文件后，虚拟机加载.class文件 3.为什么要用虚拟机 跨平台 因为不同的操作系统接口不同。
我们知道操作系统就是管理计算机硬件，提供操作接口。比如删除硬盘文件的接口，在window上可能叫deleteFile, 在linux可能叫removeFile, 那么我们写程序，不会去判断运行的操作系统，可能就是一句delete， 那么虚拟机就会根据不同的操作系统去选择对应的操作接口。
这样，就等于我们编写一次，导出执行。也就是虚拟机的跨平台自适应，让我们的程序也跟着实现了跨平台。
自动内存管理 虚拟机帮我们实现了内存管理。我们避免了申请、释放内存这个步骤，统一由虚拟机自行管理，这样我们只要专注于逻辑实现就行了，降低了代码难度，降低了低水平程序员的错误概率。
优化代码执行 执行最快的是机器语言，也就是0，1操作，然后就是汇编，之后就是各种语言。虚拟机会分析代码执行的频繁度，把高密度使用的代码翻译成机器语言，提高效率。</description><content type="html"><![CDATA[<h2 id="arts---share-补1126">ARTS - Share 补11.26</h2>
<h2 id="一个java-文本文件是如何运行起来的">一个.java 文本文件是如何运行起来的</h2>
<h3 id="整体">整体</h3>
<p>我们知道，通常的说法是 .java被编译器编译成.class文件，也就是字节码文件，然后虚拟机加载执行。这是粗略的说法，具体实现是有些复杂的，如</p>
<ol>
<li>编译器如何把.java 文件编译成.class字节码文件的？</li>
<li>虚拟机是如何加载编译后的字节码文件的？</li>
<li>为什么要用虚拟机来执行Java程序？</li>
</ol>
<h3 id="1编译java">1.编译Java</h3>
<p>Java编译使用javac命令，编译器输入java源码文件， 输出机器语言，具体过程如下：</p>
<p>java源代码（符合语言规范）-&gt; javac -&gt; .class字节码文件 -&gt; jvm -&gt; 机器语言（不同平台不同种类）</p>
<p>编译流程：</p>
<ul>
<li>词法分析器：将源码转换为Token流
<ul>
<li>将源代码划分成一个个Token(找出java语言中的if，else，for等关键字)</li>
</ul>
</li>
<li>语法分析器：将Token流转化为语法树
<ul>
<li>将上述的一个个Token组成一句句话（或者说成一句句代码块），检查这一句句话是不是符合Java语言规范(如if后面跟的是不是布尔判断表达式)</li>
</ul>
</li>
<li>语义分析器：将语法树转化为注解语法树
<ul>
<li>将复杂的语法转化成简单的语法（eg.注解、foreach转化为for循环、去掉永不会用到的代码块）并做一些检查，添加一些代码(默认构造器)</li>
</ul>
</li>
<li>代码生成器：将注解语法树转化为字节码(即将一个数据结构转化成另一个数据结构)</li>
</ul>
<h3 id="2虚拟机加载">2.虚拟机加载</h3>
<p>完成构造字节码文件后，虚拟机加载.class文件
<img src="http://dl.iteye.com/upload/attachment/0084/2346/aa51b456-7476-3d3b-a125-8b00eb19098c.png" alt=""></p>
<h3 id="3为什么要用虚拟机">3.为什么要用虚拟机</h3>
<h4 id="跨平台">跨平台</h4>
<p>因为不同的操作系统接口不同。</p>
<p>我们知道操作系统就是管理计算机硬件，提供操作接口。比如删除硬盘文件的接口，在window上可能叫deleteFile,  在linux可能叫removeFile, 那么我们写程序，不会去判断运行的操作系统，可能就是一句delete， 那么虚拟机就会根据不同的操作系统去选择对应的操作接口。</p>
<p>这样，就等于我们编写一次，导出执行。也就是虚拟机的跨平台自适应，让我们的程序也跟着实现了跨平台。</p>
<h4 id="自动内存管理">自动内存管理</h4>
<p>虚拟机帮我们实现了内存管理。我们避免了申请、释放内存这个步骤，统一由虚拟机自行管理，这样我们只要专注于逻辑实现就行了，降低了代码难度，降低了低水平程序员的错误概率。</p>
<h4 id="优化代码执行">优化代码执行</h4>
<p>执行最快的是机器语言，也就是0，1操作，然后就是汇编，之后就是各种语言。虚拟机会分析代码执行的频繁度，把高密度使用的代码翻译成机器语言，提高效率。</p>
]]></content></item><item><title>Week1021_tip</title><link>/posts/arts/week1021_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:39 +0000</pubDate><guid>/posts/arts/week1021_tip/</guid><description>ARTS - Tip 补 11.26 关于字符串类型和数值类型排序的bug 最近遇到了一个排序需求，于是就直接使用了 Collections.sort 方法来实现，但是没有注意元素类型，就导致排序有问题。
如下：
List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;#34;4.2, 3.3, 1, 17, 25&amp;#34;.split(&amp;#34;,&amp;#34;)); System.out.println(list); Collections.sort(list); System.out.println(list); // output [4.2, 3.3, 1, 17, 25] [ 1, 17, 25, 3.3, 4.2] 正确的做法是转成数字类型再排序
Collections.sort(list, Comparator.comparingDouble(o -&amp;gt; Double.parseDouble(o))); // output [ 1, 3.3, 4.2, 17, 25] 这是个非常基础的问题，能在这么小的问题上犯错，也是无地自容了。</description><content type="html"><![CDATA[<h2 id="arts---tip-补-1126">ARTS - Tip 补 11.26</h2>
<h3 id="关于字符串类型和数值类型排序的bug">关于字符串类型和数值类型排序的bug</h3>
<p>最近遇到了一个排序需求，于是就直接使用了 Collections.sort 方法来实现，但是没有注意元素类型，就导致排序有问题。</p>
<p>如下：</p>
<pre tabindex="0"><code>		
List&lt;String&gt; list = Arrays.asList(&#34;4.2, 3.3, 1, 17, 25&#34;.split(&#34;,&#34;));
System.out.println(list);
Collections.sort(list);
System.out.println(list);
    
// output
[4.2,  3.3,  1,  17,  25]
[ 1,  17,  25,  3.3, 4.2]
</code></pre><p>正确的做法是转成数字类型再排序</p>
<pre tabindex="0"><code>Collections.sort(list, Comparator.comparingDouble(o -&gt; Double.parseDouble(o)));
// output
[ 1,  3.3, 4.2,  17,  25]
</code></pre><p>这是个非常基础的问题，能在这么小的问题上犯错，也是无地自容了。</p>
]]></content></item><item><title>Week1022_algorithm</title><link>/posts/arts/week1022_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:39 +0000</pubDate><guid>/posts/arts/week1022_algorithm/</guid><description>ARTS - Algorithm 补12.3 142. 环形链表 II 题目 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。
为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。
说明：不允许修改给定的链表。
示例 1：
输入：head = [3,2,0,-4], pos = 1 输出：tail connects to node index 1 解释：链表中有一个环，其尾部连接到第二个节点。 示例 2：
输入：head = [1,2], pos = 0 输出：tail connects to node index 0 解释：链表中有一个环，其尾部连接到第一个节点 示例 3：
输入：head = [1], pos = -1 输出：no cycle 解释：链表中没有环。 进阶：
你是否可以不用额外空间解决此题？
分析 这道题是141.环形链表的进阶版，141只要判断是否存在环，这个要求找出进环位置。
首先考虑还是使用HashSet Key的唯一性来做判断，只要第一次存在重复的元素，就说明这个元素为进环位置，代码如下：
public ListNode detectCycle2(ListNode head) { if (head == null || head.</description><content type="html"><![CDATA[<h2 id="arts---algorithm-补123">ARTS - Algorithm 补12.3</h2>
<h3 id="142-环形链表-iihttpsleetcode-cncomproblemslinked-list-cycle-ii"><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h3>
<h3 id="题目">题目</h3>
<p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>
<p>说明：不允许修改给定的链表。</p>
<p>示例 1：</p>
<pre tabindex="0"><code>输入：head = [3,2,0,-4], pos = 1
输出：tail connects to node index 1
解释：链表中有一个环，其尾部连接到第二个节点。
</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt=""></p>
<p>示例 2：</p>
<pre tabindex="0"><code>输入：head = [1,2], pos = 0
输出：tail connects to node index 0
解释：链表中有一个环，其尾部连接到第一个节点
</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt=""></p>
<p>示例 3：</p>
<pre tabindex="0"><code>输入：head = [1], pos = -1
输出：no cycle
解释：链表中没有环。
</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt=""></p>
<p>进阶：</p>
<p>你是否可以不用额外空间解决此题？</p>
<h3 id="分析">分析</h3>
<p>这道题是<a href="https://leetcode-cn.com/problems/linked-list-cycle/">141.环形链表</a>的进阶版，141只要判断是否存在环，这个要求找出进环位置。</p>
<p>首先考虑还是使用HashSet Key的唯一性来做判断，只要第一次存在重复的元素，就说明这个元素为进环位置，代码如下：</p>
<pre tabindex="0"><code>public ListNode detectCycle2(ListNode head) {
        if (head == null || head.next == null) {
            return null;
        }

        Set&lt;ListNode&gt; set = new HashSet&lt;&gt;();

        while (head != null) {
            boolean flag = set.add(head);
            if (!flag) {
                return head;
            }

            head = head.next;
        }

        return null;

    }
</code></pre><p>我们需要考虑不增加额外空间来实现这个功能。也参照141环形链表的双指针方案。
思考这样一个链表：</p>
<p><img src="https://img-blog.csdn.net/20151009091556303" alt=""></p>
<p>我们假设这个链表 起点、环入口、第一次相遇点 分别是 X, Y, Z, 之间的距离分别是a,b,c</p>
<p>那么，在 Z 点第一次相遇，此时</p>
<ul>
<li>慢指针走的距离为 a+b,</li>
<li>快指针走的距离为  a+b+c+b ,</li>
</ul>
<p>由于快指针速度是慢指针的2倍，也就是说快指针走过的距离为慢指针的距离的2倍，于是就存在以下等式：</p>
<p>2* (a+b) = a+b+c+b</p>
<p>也就是
2a + ab = a+c + 2b,</p>
<p>也就是
<strong>a == c</strong></p>
<p>也就是，两个指针第一次相遇点到环入口的距离 和 起点到入口的距离相等，那么我们就可以利用这个特点来写代码。</p>
<h3 id="代码">代码</h3>
<pre tabindex="0"><code>public ListNode detectCycle(ListNode head) {

        if (head == null || head.next == null) {
            return null;
        }

        ListNode fast = head;
        ListNode slow = head;

        do {
            fast = fast.next.next;
            slow = slow.next;
        } while (fast != null &amp;&amp; fast.next  != null &amp;&amp; fast != slow);

        if (fast != slow) {
            return null;
        }

        ListNode p1 = head;
        ListNode p2 = slow;

        while (p1 != p2) {
            p1 = p1.next;
            p2 = p2.next;
        }
        return p1;



    }
</code></pre>]]></content></item><item><title>Week1018_algorithm</title><link>/posts/arts/week1018_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:38 +0000</pubDate><guid>/posts/arts/week1018_algorithm/</guid><description>ARTS - Algorithm 补 11.5 88. 合并两个有序数组 题目 给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。
说明:
初始化 nums1 和 nums2 的元素数量分别为 m 和 n。 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。 示例:
输入:
nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 输出: [1,2,2,3,5,6]
分析 首先想出解决方案，再优化解决方案。
这个问题可以先合并数组，再对数组排序，于是就有了如下代码：
public static void merge(int[] nums1, int m, int[] nums2, int n) { for (int i = m, j = 0; i &amp;lt; m + n; i++, j++) { nums1[i] = nums2[j]; } for (int i = 0; i &amp;lt; m + n; i++) { for (int j = i + 1; j &amp;lt; m + n; j++) { if (nums1[i] &amp;gt; nums1[j]) { int tmp = nums1[i]; nums1[i] = nums1[j]; nums1[j] = tmp; } } } } 这种解法虽说能解决问题，但是肯定存在更好的解法，主要是没有利用上数组的有序特性。考虑另一种解法，遍历两个数组，从前往后，小的放前面，大的放后面，感觉也不太好，因为牵涉到数组整体后移的情况。</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="补-115">补 11.5</h2>
<h2 id="88-合并两个有序数组httpsleetcode-cncomproblemsmerge-sorted-arraydescription"><a href="https://leetcode-cn.com/problems/merge-sorted-array/description/">88. 合并两个有序数组</a></h2>
<h3 id="题目">题目</h3>
<p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p>
<p>说明:</p>
<p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。
你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
示例:</p>
<p>输入:</p>
<ul>
<li>nums1 = [1,2,3,0,0,0], m = 3</li>
<li>nums2 = [2,5,6],       n = 3</li>
</ul>
<p>输出: [1,2,2,3,5,6]</p>
<h3 id="分析">分析</h3>
<p>首先想出解决方案，再优化解决方案。</p>
<p>这个问题可以先合并数组，再对数组排序，于是就有了如下代码：</p>
<pre tabindex="0"><code>
public static void merge(int[] nums1, int m, int[] nums2, int n) {

        

        for (int i = m, j = 0; i &lt; m + n; i++, j++) {
            nums1[i] = nums2[j];
        }

        for (int i = 0; i &lt; m + n; i++) {
            for (int j = i + 1; j &lt; m + n; j++) {
                if (nums1[i] &gt; nums1[j]) {
                    int tmp = nums1[i];
                    nums1[i] = nums1[j];
                    nums1[j] = tmp;
                }

            }
        }

}
</code></pre><p>这种解法虽说能解决问题，但是肯定存在更好的解法，主要是没有利用上数组的有序特性。考虑另一种解法，遍历两个数组，从前往后，小的放前面，大的放后面，感觉也不太好，因为牵涉到数组整体后移的情况。</p>
<p>看了答案之后豁然开朗， 要点是从后往前填数据，因为从后往前填数据，数据的位置已经是确定的了，不会再移动，所以代码如下</p>
<h3 id="代码">代码</h3>
<pre tabindex="0"><code>public static void merge3(int[] nums1, int m, int[] nums2, int n) {

        int ia = m - 1;
        int ib = n - 1;


        for (int i =  m + n - 1; i &gt;= 0 ; i--) {

            if (ia &gt;= 0 &amp;&amp; ib &lt; 0) {
                break;
            }

            if (ia &lt; 0 &amp;&amp; ib &gt;= 0) {

                nums1[i] = nums2[ib--];
                continue;
            }

            if (nums1[ia] &gt; nums2[ib]) {
                nums1[i] = nums1[ia--];
            } else {
                nums1[i] = nums2[ib--];
            }

        }


    }
</code></pre>]]></content></item><item><title>Week1018_review</title><link>/posts/arts/week1018_review/</link><pubDate>Fri, 31 Mar 2023 15:45:38 +0000</pubDate><guid>/posts/arts/week1018_review/</guid><description>ARTS - Review 补11.5 为什么游戏玩乐是21世纪通往成功的关键 After the death of Isaac Newton — a mythic figure even in his own lifetime — the poet Alexander Pope wrote the following epitaph for him:
爱克萨、牛顿 &amp;ndash; 一个甚至在有生之年都是神话的人物 去世后，诗人 Alexander Pope 为他写下了以下墓志铭：
自然和自然法则隐藏在黑夜里
上帝说，让牛顿出生，之后一切明亮。
当你读到这样的历史人物时，很难想象他们也是凡人。绝大多数我们在20世纪不会发明微积分或光学。我们当然也不会自出走走，就为自然研究奠定新的基础。
但是他们也是凡人。虽然神化他们很迷人，但是想象一下他们曾经像人类的样子也同样有趣。
我们知道牛顿既谦虚又自大。当面对自然法则时候，他谨慎对待自己的工作。当面对他的竞争对手，然而，他可能是卑鄙的，有报复性的，不完全是首先浮现在脑海中的完美主义形象。
我们知道，尽管他名声大噪，但他的生活大多是孤独的，不太注重发展人际关系，甚至至死还是处男。这让你想知道，如果他更被那些非常正常的人类利益所吸引，这个时间将会有多么不一样。
然而我认为，关于他的最能说明问题的，是他在临终前与一位朋友分享的一段关于他的生活的的反思：
我不知道我在世人面前是什么样子，但是对我来说就好像仅仅是个在海边玩耍的小男孩，偶尔让自己沉浸在比平常更光滑的鹅卵石或更漂亮的贝壳中，而真理的大海在我面前却一无所知。
我喜欢这个，因为它展示了他的童心，一个我们能在自己的反思中认出来的童心。但更多的是，我喜欢它，因为从这个人类形象中，我们可以为自己获取一些东西，一些让我认为在今天变得更相关的东西。
玩乐游戏进化的目的 一方面，牛顿过着如此孤单的生活，这种想法带来了一点点悲伤，我无法立刻触动。但是，当我从内部看他自己的描述时，它消失了。
游戏活动在所有被研究的人类文化中是很普遍的。我们可以用不同方式来定义它。当这个想法被提出时，我们每个人都会想象一些稍微不同的东西，但是在核心层面上，我们很明确在讨论大致相同的东西。
这是我们做的一项活动，至少表面上是这样。这很有趣，而且我们并不觉得压力太大，因为我们把它和将来的奖励联系在一起，这似乎使得它更自由，更诚实。
当然，科学家们对如何定义游戏以及游戏的进化目的存在很大的分歧，但不会被细节所困扰。我们简单的定义与任何事实都不太相脱离，而且就目的而言，人们似乎都同意游戏可以起到两种作用。训练我们的身体，社会，或认知。
从这个意义上说，游戏是一种学习行为。更具体地说，它是一种低成本的方式来探索世界，以获得高价值的优势。更进一步，它是一种对现实真相的探索，我们希望随着我们的生活和年龄的增长而有效地出现。
当你出生在一个特定的文化环境中，你还没有所有的工具去理解它。你必须弄清楚界限在哪里，接受什么规范，以及当你成为社会成员时需要掌握的不同技能。
像牛顿一样，小时候，你四处走动捡起不同的鹅卵石和贝壳，研究它们，确定它们与周围世界和其他人的关系，然后基于此，你开始存储与你的经验一致的信息，以指导未来的经验。
要注意的是关于游戏的关键点是，因为游戏并不完全是有目的的，所以边界是模糊的，这允许你重新定义它们，这样你就能看到一些新的东西，这些东西以一种你可能没有意识到的方式提供价值。
混合勘探开发 这种乐趣最明显的一点是，在孩子身上比在成年人身上更常见。这很有道理：当你成年时，你已经完成了大部分工作来弄清你的周围环境。
基于这种游戏关系，我们可以把生活大致分为两个存在境界：一个以探索为主导的时期，一个以剥削为主导的时期。你一生中的第一部分是探索、观察和理解，但一旦其中的一些已经沉没到令人满意的水平，你就开始利用你所奠定的基础上生长的果实。
用牛顿的比喻，经过一段时间后，你已经拾起了所有你可能要玩的鹅卵石和贝壳，然后你离开海洋，继续把那些相同的石头和贝壳放在手里。
对于从游戏中诞生的物理课程，这是有意义的。经过一段时间后，你已经学会了如何使用你的身体，并且你不需要在一生中用不同的方式来测试它。你知道如何跑步，你知道如何做你喜欢的运动，而且随着时间的推移，继续做这些事情是没有损失的，这是有意义的。
然而，当我们在社会生活和认知方面追求同样的探索-开发模式时，存在一个问题。今天，社会和认知方面比以前复杂得多。我们的文化正在以某种速度发展，这意味着如果你不能跟上它的步伐，那么当你生活在现实中时，你就不再理解它的真相。
在一个变化不太快的世界里，短暂的童年探索会给你提供所有你需要的信息，来处理你周围的各种规范和可能出现的决策模式。但是，在一个日益网络化的文化中，每隔几年产生的信息量就翻一番，勘探和开发阶段之间就不可能再有差别了。
牛顿一生对真理的探索使他从一个小石子变成了一个小石子，但这并不意味着他把旧的抛在脑后，换上了新的。他对剥削给予了应有的关注，同时也顽皮地留意着周边隐藏的真相。
在现代成人生活中，不为游戏腾出空间是一个战略劣势。勘探和开发不再是明显的。随着世界在我们周围迅速展开，它们不断地协同进化。
一个更大的地形处理 今天，文化更加复杂，信息更加丰富，我们的集体环境覆盖了更大的现实地形。
游戏是我们如何绘制这个地形。传统上，光是度过童年和青年时期的一些早期时光，不遵守常规，不被责任和例行公事所束缚，享受快乐就足够了。
这种情况已经不再是这样了。我们的环境不再是静止的。它们是动态的，也就是说，如果你不跟上，你基本上就不会像周围的人一样生活在相同的社会和认知现实中。
虽然过去的勘探与剥削是截然不同的阶段，但现在它们已经融合了。你再也不能逃避把生命最初的几十年用来玩耍，然后把最后几十年奉献给工作的烦恼了。游戏和工作必须占据相同的范围。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="补115">补11.5</h2>
<h2 id="为什么游戏玩乐是21世纪通往成功的关键httpsmediumcompersonal-growthwhy-playfulness-is-the-key-to-success-in-the-21st-century-201a626fe18"><a href="https://medium.com/personal-growth/why-playfulness-is-the-key-to-success-in-the-21st-century-201a626fe18">为什么游戏玩乐是21世纪通往成功的关键</a></h2>
<p>After the death of Isaac Newton — a mythic figure even in his own lifetime — the poet Alexander Pope wrote the following epitaph for him:</p>
<p>爱克萨、牛顿 &ndash; 一个甚至在有生之年都是神话的人物  去世后，诗人 Alexander Pope 为他写下了以下墓志铭：</p>
<blockquote>
<p>自然和自然法则隐藏在黑夜里</p>
<p>上帝说，让牛顿出生，之后一切明亮。</p>
</blockquote>
<p>当你读到这样的历史人物时，很难想象他们也是凡人。绝大多数我们在20世纪不会发明微积分或光学。我们当然也不会自出走走，就为自然研究奠定新的基础。</p>
<p>但是他们也是凡人。虽然神化他们很迷人，但是想象一下他们曾经像人类的样子也同样有趣。</p>
<p>我们知道牛顿既谦虚又自大。当面对自然法则时候，他谨慎对待自己的工作。当面对他的竞争对手，然而，他可能是卑鄙的，有报复性的，不完全是首先浮现在脑海中的完美主义形象。</p>
<p>我们知道，尽管他名声大噪，但他的生活大多是孤独的，不太注重发展人际关系，甚至至死还是处男。这让你想知道，如果他更被那些非常正常的人类利益所吸引，这个时间将会有多么不一样。</p>
<p>然而我认为，关于他的最能说明问题的，是他在临终前与一位朋友分享的一段关于他的生活的的反思：</p>
<blockquote>
<p>我不知道我在世人面前是什么样子，但是对我来说就好像仅仅是个在海边玩耍的小男孩，偶尔让自己沉浸在比平常更光滑的鹅卵石或更漂亮的贝壳中，而真理的大海在我面前却一无所知。</p>
</blockquote>
<p>我喜欢这个，因为它展示了他的童心，一个我们能在自己的反思中认出来的童心。但更多的是，我喜欢它，因为从这个人类形象中，我们可以为自己获取一些东西，一些让我认为在今天变得更相关的东西。</p>
<h3 id="玩乐游戏进化的目的">玩乐游戏进化的目的</h3>
<p>一方面，牛顿过着如此孤单的生活，这种想法带来了一点点悲伤，我无法立刻触动。但是，当我从内部看他自己的描述时，它消失了。</p>
<p>游戏活动在所有被研究的人类文化中是很普遍的。我们可以用不同方式来定义它。当这个想法被提出时，我们每个人都会想象一些稍微不同的东西，但是在核心层面上，我们很明确在讨论大致相同的东西。</p>
<p>这是我们做的一项活动，至少表面上是这样。这很有趣，而且我们并不觉得压力太大，因为我们把它和将来的奖励联系在一起，这似乎使得它更自由，更诚实。</p>
<p>当然，科学家们对如何定义游戏以及游戏的进化目的存在很大的分歧，但不会被细节所困扰。我们简单的定义与任何事实都不太相脱离，而且就目的而言，人们似乎都同意游戏可以起到两种作用。训练我们的身体，社会，或认知。</p>
<p>从这个意义上说，游戏是一种学习行为。更具体地说，它是一种低成本的方式来探索世界，以获得高价值的优势。更进一步，它是一种对现实真相的探索，我们希望随着我们的生活和年龄的增长而有效地出现。</p>
<p>当你出生在一个特定的文化环境中，你还没有所有的工具去理解它。你必须弄清楚界限在哪里，接受什么规范，以及当你成为社会成员时需要掌握的不同技能。</p>
<p>像牛顿一样，小时候，你四处走动捡起不同的鹅卵石和贝壳，研究它们，确定它们与周围世界和其他人的关系，然后基于此，你开始存储与你的经验一致的信息，以指导未来的经验。</p>
<p>要注意的是关于游戏的关键点是，因为游戏并不完全是有目的的，所以边界是模糊的，这允许你重新定义它们，这样你就能看到一些新的东西，这些东西以一种你可能没有意识到的方式提供价值。</p>
<h3 id="混合勘探开发">混合勘探开发</h3>
<p>这种乐趣最明显的一点是，在孩子身上比在成年人身上更常见。这很有道理：当你成年时，你已经完成了大部分工作来弄清你的周围环境。</p>
<p>基于这种游戏关系，我们可以把生活大致分为两个存在境界：一个以探索为主导的时期，一个以剥削为主导的时期。你一生中的第一部分是探索、观察和理解，但一旦其中的一些已经沉没到令人满意的水平，你就开始利用你所奠定的基础上生长的果实。</p>
<p>用牛顿的比喻，经过一段时间后，你已经拾起了所有你可能要玩的鹅卵石和贝壳，然后你离开海洋，继续把那些相同的石头和贝壳放在手里。</p>
<p>对于从游戏中诞生的物理课程，这是有意义的。经过一段时间后，你已经学会了如何使用你的身体，并且你不需要在一生中用不同的方式来测试它。你知道如何跑步，你知道如何做你喜欢的运动，而且随着时间的推移，继续做这些事情是没有损失的，这是有意义的。</p>
<p>然而，当我们在社会生活和认知方面追求同样的探索-开发模式时，存在一个问题。今天，社会和认知方面比以前复杂得多。我们的文化正在以某种速度发展，这意味着如果你不能跟上它的步伐，那么当你生活在现实中时，你就不再理解它的真相。</p>
<p>在一个变化不太快的世界里，短暂的童年探索会给你提供所有你需要的信息，来处理你周围的各种规范和可能出现的决策模式。但是，在一个日益网络化的文化中，每隔几年产生的信息量就翻一番，勘探和开发阶段之间就不可能再有差别了。</p>
<p>牛顿一生对真理的探索使他从一个小石子变成了一个小石子，但这并不意味着他把旧的抛在脑后，换上了新的。他对剥削给予了应有的关注，同时也顽皮地留意着周边隐藏的真相。</p>
<p>在现代成人生活中，不为游戏腾出空间是一个战略劣势。勘探和开发不再是明显的。随着世界在我们周围迅速展开，它们不断地协同进化。</p>
<h3 id="一个更大的地形处理">一个更大的地形处理</h3>
<p>今天，文化更加复杂，信息更加丰富，我们的集体环境覆盖了更大的现实地形。</p>
<p>游戏是我们如何绘制这个地形。传统上，光是度过童年和青年时期的一些早期时光，不遵守常规，不被责任和例行公事所束缚，享受快乐就足够了。</p>
<p>这种情况已经不再是这样了。我们的环境不再是静止的。它们是动态的，也就是说，如果你不跟上，你基本上就不会像周围的人一样生活在相同的社会和认知现实中。</p>
<p>虽然过去的勘探与剥削是截然不同的阶段，但现在它们已经融合了。你再也不能逃避把生命最初的几十年用来玩耍，然后把最后几十年奉献给工作的烦恼了。游戏和工作必须占据相同的范围。</p>
<p>对于我们中的许多人来说，以这种方式玩耍的想法是如此陌生，以至于即使所有这些都是有意义的，问题仍然存在：当你30岁、40岁或50岁的时候，玩耍是什么样子的？答案是，它看起来像是一个时间空间，仅仅被好奇心所支配，超出了你出于习惯所做的事情，这可能意味着从上即兴课到多读书。</p>
<p>牛顿捡到的鹅卵石和贝壳给了我们基本的自然法则，我们从那时起就建立了对现实的理解。他们引导我们去发现我们面前的知识，以便我们能够更好地掌握周围的环境。</p>
<p>在二十一世纪，玩耍不仅仅是童年的记忆。它将是我们用来构建和验证我们不断变化的现实的真理的基础。</p>
]]></content></item><item><title>Week1018_share</title><link>/posts/arts/week1018_share/</link><pubDate>Fri, 31 Mar 2023 15:45:38 +0000</pubDate><guid>/posts/arts/week1018_share/</guid><description>ARTS - Share 补 11.5 日 对ARTS - Review 的思考与改进 目的 加入了ARTS 学习组有一段时间了，对耗子叔设置的ARTS每周任务很是赞同，也在努力坚持中。ARTS是每周要做的四个任务
Algorithm 每周做一个算法题 Review 每周阅读一篇medium文章 Tip 每周学习总结一个技术技巧，最好是实际工作中遇到的 Share 每周分享一篇有观点有思考的技术文章 我觉得坚持这四项对成长很有好处。我对 Algorithm 和 Tip 很是赞同，对 Review 有点思考。
Review 目的是阅读英文文章，提高英文能力，这样方便接触第一手英文技术资料，对自己有很大好处。另外，medium很多文章内容也是高质量，很值得看，这样在学习英文中也学到了作者的思想观点。我目前的做法是尽量翻译整理下来。
但是，对我个人来说，做这个活还是比较吃力的，需要不断借助翻译工具解释单词，然后理解整句话的意思。整体下来，个人的阅读水平并没有多少提高，我在考虑有什么更好的办法。
寻找办法 既然是为了提高英语，方面阅读英文资料，那么如何才能更好的提高呢？我觉得是要做好三个，
认识字 读懂句子 试着翻译技术文档 参考上学时学英语的方法，一是词汇量，二是阅读做题量，现在工作中使用主要是为了能读懂英文文献，不那么注重口语，那么我依然可以把这种方法拾起来，所以我要尝试调整下我的Review策略。
新的Review尝试 奔着技术文档去， 每周阅读至少一个英文技术文档的技术点，并标注出不懂的单词，再专门学习。。如果凑效的话就这么做，技术文档术语相通，这样将来阅读会越来越顺。后期如果效果好，可以推广到阅读medium上。下周ARTS开始尝试。</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="补-115-日">补 11.5 日</h2>
<h2 id="对arts---review-的思考与改进">对ARTS - Review 的思考与改进</h2>
<h3 id="目的">目的</h3>
<p>加入了ARTS 学习组有一段时间了，对耗子叔设置的ARTS每周任务很是赞同，也在努力坚持中。ARTS是每周要做的四个任务</p>
<ol>
<li>Algorithm 每周做一个算法题</li>
<li>Review 每周阅读一篇medium文章</li>
<li>Tip 每周学习总结一个技术技巧，最好是实际工作中遇到的</li>
<li>Share 每周分享一篇有观点有思考的技术文章</li>
</ol>
<p>我觉得坚持这四项对成长很有好处。我对 Algorithm 和 Tip 很是赞同，对 Review 有点思考。</p>
<p>Review 目的是阅读英文文章，提高英文能力，这样方便接触第一手英文技术资料，对自己有很大好处。另外，medium很多文章内容也是高质量，很值得看，这样在学习英文中也学到了作者的思想观点。我目前的做法是尽量翻译整理下来。</p>
<p>但是，对我个人来说，做这个活还是比较吃力的，需要不断借助翻译工具解释单词，然后理解整句话的意思。整体下来，个人的阅读水平并没有多少提高，我在考虑有什么更好的办法。</p>
<h3 id="寻找办法">寻找办法</h3>
<p>既然是为了提高英语，方面阅读英文资料，那么如何才能更好的提高呢？我觉得是要做好三个，</p>
<ol>
<li>认识字</li>
<li>读懂句子</li>
<li>试着翻译技术文档</li>
</ol>
<p>参考上学时学英语的方法，一是词汇量，二是阅读做题量，现在工作中使用主要是为了能读懂英文文献，不那么注重口语，那么我依然可以把这种方法拾起来，所以我要尝试调整下我的Review策略。</p>
<h3 id="新的review尝试">新的Review尝试</h3>
<p>奔着技术文档去， <strong>每周阅读至少一个英文技术文档的技术点，并标注出不懂的单词，再专门学习。</strong>。如果凑效的话就这么做，技术文档术语相通，这样将来阅读会越来越顺。后期如果效果好，可以推广到阅读medium上。下周ARTS开始尝试。</p>
]]></content></item><item><title>Week1018_tip</title><link>/posts/arts/week1018_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:38 +0000</pubDate><guid>/posts/arts/week1018_tip/</guid><description>ARTS - Tip 补 11.5 就说下我在工作中主动推动的事吧 生产和测试库分离 之前好长一段时间，我们测试环境连接数据库是直接连接生产数据库的，这样做有方便之处，便于直接查看生产数据，对于不涉及修改类的新功能更能直观看到效果，但也存在很大的风险，就是对于修改性的操作，很可能会影响到生产，尽管我们默认不去操作修改。但是也无法保证有时候的误操作，或者某些批处理任务的误启动。
问组长为什么不分开，也没有特别的理由，只是强调这样做方便。我觉得是因为这么做习惯了，但是为了数据安全，还是要分开的。于是在就主动推动这件事，在他同意下，联系运维找到新的测试数据库，开始导一份生产备份到新测试库里，同时在构建工具里，增加了编译测试环境库的参数，这样以后修改可以发布测试库直接连测试库了，真正做到了分离，也避免了很多安全问题。
文档不全 我们的环境有很多，各种系统的生产、测试部署环境、缓存环境、数据库环境，刚开始接触只有一张大而全的表格，又很多是业务无关的内容，因为连接只需要知道 ip，于是就着手做了业务类型和IP对应表，简洁方便，扫一眼就能清楚自己要连接的地址。
还有数据库。这个很多数据库、字段解释都存在数据库里，只有一个不是最新版本的脚本文档有描述，无法清楚的知道每个数据库的表之间关系，和表字段的含义，于是就考虑着手做一个文档，专门存放数据库解释文档。这个不被领导重视，目前在自行归档中。
发挥主观能动性 虽然很多工作都存在这样那样的问题，但是个人还要发挥主观能动性，去做一点自己能做的，哪怕有一点改变，也是很好的，对自己也很有成就感。</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="补-115">补 11.5</h2>
<h2 id="就说下我在工作中主动推动的事吧">就说下我在工作中主动推动的事吧</h2>
<h3 id="生产和测试库分离">生产和测试库分离</h3>
<p>之前好长一段时间，我们测试环境连接数据库是直接连接生产数据库的，这样做有方便之处，便于直接查看生产数据，对于不涉及修改类的新功能更能直观看到效果，但也存在很大的风险，就是对于修改性的操作，很可能会影响到生产，尽管我们默认不去操作修改。但是也无法保证有时候的误操作，或者某些批处理任务的误启动。</p>
<p>问组长为什么不分开，也没有特别的理由，只是强调这样做方便。我觉得是因为这么做习惯了，但是为了数据安全，还是要分开的。于是在就主动推动这件事，在他同意下，联系运维找到新的测试数据库，开始导一份生产备份到新测试库里，同时在构建工具里，增加了编译测试环境库的参数，这样以后修改可以发布测试库直接连测试库了，真正做到了分离，也避免了很多安全问题。</p>
<h3 id="文档不全">文档不全</h3>
<p>我们的环境有很多，各种系统的生产、测试部署环境、缓存环境、数据库环境，刚开始接触只有一张大而全的表格，又很多是业务无关的内容，因为连接只需要知道 ip，于是就着手做了业务类型和IP对应表，简洁方便，扫一眼就能清楚自己要连接的地址。</p>
<p>还有数据库。这个很多数据库、字段解释都存在数据库里，只有一个不是最新版本的脚本文档有描述，无法清楚的知道每个数据库的表之间关系，和表字段的含义，于是就考虑着手做一个文档，专门存放数据库解释文档。这个不被领导重视，目前在自行归档中。</p>
<h3 id="发挥主观能动性">发挥主观能动性</h3>
<p>虽然很多工作都存在这样那样的问题，但是个人还要发挥主观能动性，去做一点自己能做的，哪怕有一点改变，也是很好的，对自己也很有成就感。</p>
]]></content></item><item><title>Week1019_algorithm</title><link>/posts/arts/week1019_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:38 +0000</pubDate><guid>/posts/arts/week1019_algorithm/</guid><description>ARTS - Algorithm 补 11.12 4.寻找两个有序数组的中位数 题目 给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。
示例 1:
nums1 = [1, 3] nums2 = [2]
则中位数是 2.0
示例 2:
nums1 = [1, 2] nums2 = [3, 4]
则中位数是 (2 + 3)/2 = 2.5
分析 由于和 88. 合并两个有序数组 有相似之处，可以直接借鉴下解法。
可以认为是合并有序数组，找中位数，那么可以倒着把两个数组放入新数组，不用全放，到中位数哪里就可以了，于是代码如下：
class Solution { public double findMedianSortedArrays(int[] nums1, int[] nums2) { int m = nums1.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="补-1112">补 11.12</h2>
<h2 id="4寻找两个有序数组的中位数httpsleetcode-cncomproblemsmedian-of-two-sorted-arraysdescription"><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/">4.寻找两个有序数组的中位数</a></h2>
<h3 id="题目">题目</h3>
<p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p>
<p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p>
<p>你可以假设 nums1 和 nums2 不会同时为空。</p>
<p>示例 1:</p>
<p>nums1 = [1, 3]
nums2 = [2]</p>
<p>则中位数是 2.0</p>
<p>示例 2:</p>
<p>nums1 = [1, 2]
nums2 = [3, 4]</p>
<p>则中位数是 (2 + 3)/2 = 2.5</p>
<h3 id="分析">分析</h3>
<p>由于和 <a href="https://leetcode-cn.com/problems/merge-sorted-array/description/">88. 合并两个有序数组</a> 有相似之处，可以直接借鉴下解法。</p>
<p>可以认为是合并有序数组，找中位数，那么可以倒着把两个数组放入新数组，不用全放，到中位数哪里就可以了，于是代码如下：</p>
<pre tabindex="0"><code>class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;


        int len = (m + n) / 2;

        int[] ints = new int[len + 1];
        int ia = m - 1;
        int ib = n - 1;

        for (int i = len; i &gt;= 0; i--) {

            if (ia &gt;= 0 &amp;&amp; ib &lt; 0) {
                ints[i] = nums1[ia--];
                continue;

            }

            if (ia &lt; 0 &amp;&amp; ib &gt;= 0) {
                ints[i] = nums2[ib--];
                continue;
            }

            if (ia &gt;= 0 &amp;&amp; ib &gt;= 0) {
                if (nums1[ia] &gt; nums2[ib]) {
                    ints[i] = nums1[ia--];

                } else {
                    ints[i] = nums2[ib--];
                }
            }

        }

        double res = 0;
        if ((m + n) % 2 == 0) {
            res = (ints[0] + ints[1]) * 1.0 /2;
        } else {
            res = ints[0];
        }
        return res;
    }
}
</code></pre><p>但是，<strong>要求算法的时间复杂度为 O(log(m + n))</strong>， 所以这种写法是不行的。 看了答案后，觉得这种道题还是挺有难度的，使用了复合的二分查找法，具体思路就是从寻找到 在 num1 和num2中都是中位数的元素，那么合并后也是中位数，具体代码如下：</p>
<h3 id="代码">代码</h3>
<pre tabindex="0"><code>public static double findMedianSortedArrays3(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        if (m == 0 &amp;&amp; n == 0) {
            return 0;
        }

        if (m == 0) {
            return n % 2 == 1 ? nums2[n / 2] : (nums2[n / 2 - 1] + nums2[n / 2]) / 2.0;
        }

        if (n == 0) {
            return m % 2 == 1 ? nums1[m / 2] : (nums1[m / 2 - 1] + nums1[m / 2]) / 2.0;
        }

        if (m &gt; n) {
            return findMedianSortedArrayHelper(nums1, nums2);
        }

        return findMedianSortedArrayHelper(nums2, nums1);

    }

    private static double findMedianSortedArrayHelper(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int low1 = 0;
        int high1 = m - 1;
        int low2 = 0;
        int high2 = n - 1;

        int mid = low1 + (high1 - low1) / 2;
        int pos = binarySearch(nums2, nums1[mid]);
        int num = mid + pos;
        // 如果 nums1[mid] 在 num2 中，
        if (num == (m + n) / 2) {
            if ((m + n) % 2 == 1) {
                return nums1[mid];
            }

            int next = 0;
            if ((mid &gt; 0 &amp;&amp; pos &gt; 0)) {
                next = nums1[mid - 1] &gt; nums2[pos - 1] ? nums1[mid - 1] : nums2[pos - 1];
            } else if (pos &gt; 0) {
                next = nums2[pos - 1];
            } else if (mid &gt; 0) {
                next = nums1[mid - 1];
            }
            return (nums1[mid] + next) / 2.0;

        }

        if (num &lt; (m + n) / 2) {
            low1 = mid + 1;
            low2 = pos;
            if (high1 - low1 &gt; high2 - low2) {
                return findMedianSortedArrayHelper(nums1, nums2);
            }
            return findMedianSortedArrayHelper(nums2, nums1);
        }

        if (num &gt; (m + n) / 2) {
            high1 = mid - 1;
            high2 = pos - 1;
            if (high1 - low1 &gt; high2 - low2) {
                return findMedianSortedArrayHelper(nums1, nums2);
            }
            return findMedianSortedArrayHelper(nums2, nums1);
        }


        return 0;
    }
</code></pre>]]></content></item><item><title>Week1019_review</title><link>/posts/arts/week1019_review/</link><pubDate>Fri, 31 Mar 2023 15:45:38 +0000</pubDate><guid>/posts/arts/week1019_review/</guid><description>ARTS - Review 补 11.12 MySQL8.0 参考手册 单词列表 Abstract 抽象的，还有摘要的意思 Cluster 群，簇， 集群 edition 版次 refer 提到，针对，送交，使求助于 representative 代表 Preface 序言 Forums 座谈会、论坛 revision 修订，校对 摘要 This is the MySQL™ Reference Manual.It documents MySQL 8.0 through 8.0.14. It may include documentation of features of MySQL versions that have not yet been released. For information about which versions have been released, see the MySQL 8.0 Release Notes.
这是MySQL参考手册. 它是MySQL8.0 的8.0.14 版文档.它可能包含MySQL至今没发布的版本的特性文档。关于已经发布的MySQL版本信息，看MySQL8.0 发布通知。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="补-1112">补 11.12</h2>
<h3 id="mysql80-参考手册">MySQL8.0 参考手册</h3>
<h4 id="单词列表">单词列表</h4>
<ul>
<li>Abstract 抽象的，还有摘要的意思</li>
<li>Cluster 群，簇，  集群</li>
<li>edition 版次</li>
<li>refer 提到，针对，送交，使求助于</li>
<li>representative 代表</li>
<li>Preface 序言</li>
<li>Forums 座谈会、论坛</li>
<li>revision 修订，校对</li>
</ul>
<h4 id="摘要">摘要</h4>
<blockquote>
<p>This is the MySQL™ Reference Manual.It documents MySQL 8.0 through 8.0.14. It may include documentation of features of MySQL versions that have not yet been released. For information about which
versions have been released, see the MySQL 8.0 Release Notes.</p>
</blockquote>
<p>这是MySQL参考手册. 它是MySQL8.0 的8.0.14 版文档.它可能包含MySQL至今没发布的版本的特性文档。关于已经发布的MySQL版本信息，看MySQL8.0 发布通知。</p>
<blockquote>
<p>MySQL Cluster is currently not supported in MySQL 8.0. For information about MySQL Cluster, please see MySQL NDB Cluster 7.5 and NDB Cluster 7.6.</p>
</blockquote>
<p>MySQL集群在MySQL8.0目前还不支持。关于MySQL集群更多的信息，请参考 MySQL NDB 集群 7.5 和 NDB 集群7.6.</p>
<blockquote>
<p>MySQL 8.0 features.  This manual describes features that are not included in every edition of MySQL 8.0; such features may not be included in the edition of MySQL 8.0 licensed to you. If you have any questions about the features included in your edition of MySQL 8.0, refer to your MySQL 8.0 license agreement or contact your Oracle sales representative.</p>
</blockquote>
<p>MySQL8.0 特性。这个手册描述那些不包含在每个MySQL8.0 版次的特性信息；例如可能包含那些不在MySQL8.0授权给你的那些特性信息。如果你有任何关于你的MySQL8.9版次的特性问题，求助于你的MySQL8.0 授权协议或者联系你的Oracle销售代表。</p>
<p>For notes detailing the changes in each release, see the MySQL 8.0 Release Notes.
了解每个发行版的细节，看MySQL8.0发布公告。</p>
<p>For legal information, including licensing information, see the Preface and Legal Notices.
对于法律信息，包括授权信息，看序言和法律公告。</p>
<p>For help with using MySQL, please visit either the MySQL Forums or MySQL Mailing Lists, where you can discuss your issues with other MySQL users.</p>
<p>使用MySQL中寻求帮助，请访问不论是MySQL论坛或邮件列表，那些你可以和其他MySQL使用者讨论你的问题的地方。</p>
<p>Document generated on: 2018-09-01 (revision: 58921)</p>
]]></content></item><item><title>Week1019_share</title><link>/posts/arts/week1019_share/</link><pubDate>Fri, 31 Mar 2023 15:45:38 +0000</pubDate><guid>/posts/arts/week1019_share/</guid><description>ARTS - Share 补11.12 又看了看左耳听风的《技术人员的发展之路》 链接 https://coolshell.cn/articles/17583.html
20-30岁的积累之路 这个阶段是积累。一定要摒弃速成、急富的心态，踏实的实践中学习，学习中实践。
最重要的素质是提升学习能力和解决问题的能力，形成领导力气质。怎么形成的？无非就是别人解决不了的你能解决了，在团队中处于被依赖的地位。这就要平时注重基础，注重实践，多解决难题，家中有粮，心中不慌。
职场路径的选择 刚开始阶段要努力去顶尖公司。因为顶尖公司的氛围和技术环境能给刚出道你奠定以后发展深厚的基础。那里有更前沿的技术和更好的方法论和更有挑战性的业务场景，正是年轻人需要汲取的养分。然后深造完成，大公司的成熟模式可能不适合你了，你就需要换到创业公司了，去在更自由的环境里充分发挥自己的才干。
带团队发展 技术成长到一定高度，需要学习技术之外的技能。你需要拥有带领产品业务团队发展的能力，需要在团队中推行自己喜欢的文化的能力，学会取舍，在时间紧任务重中做到平衡，带领团队征服一座座高山。
追求一种自由的生活 工作自由。你不惧怕公司裁员，拥有随时可以跳槽并找到好工作的本钱。拥有技能自由，在你的领域基本没有你解决不了的问题，已经成为领域专家。物质自由，也就是财务自由，不再需要为生活奔波，选择自己跟喜欢的方式生活。
感悟 知之为知之，不知为不知。
业精于勤荒于嬉，行成于思毁于随。
骐骥一跃不能十步，驽马十驾功在不舍。
知行合一。</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="补1112">补11.12</h2>
<h2 id="又看了看左耳听风的技术人员的发展之路">又看了看左耳听风的《技术人员的发展之路》</h2>
<p>链接 <a href="https://coolshell.cn/articles/17583.html">https://coolshell.cn/articles/17583.html</a></p>
<h3 id="20-30岁的积累之路">20-30岁的积累之路</h3>
<p>这个阶段是积累。一定要摒弃速成、急富的心态，踏实的实践中学习，学习中实践。</p>
<p>最重要的素质是提升学习能力和解决问题的能力，形成领导力气质。怎么形成的？无非就是别人解决不了的你能解决了，在团队中处于被依赖的地位。这就要平时注重基础，注重实践，多解决难题，家中有粮，心中不慌。</p>
<h3 id="职场路径的选择">职场路径的选择</h3>
<p>刚开始阶段要努力去顶尖公司。因为顶尖公司的氛围和技术环境能给刚出道你奠定以后发展深厚的基础。那里有更前沿的技术和更好的方法论和更有挑战性的业务场景，正是年轻人需要汲取的养分。然后深造完成，大公司的成熟模式可能不适合你了，你就需要换到创业公司了，去在更自由的环境里充分发挥自己的才干。</p>
<h3 id="带团队发展">带团队发展</h3>
<p>技术成长到一定高度，需要学习技术之外的技能。你需要拥有带领产品业务团队发展的能力，需要在团队中推行自己喜欢的文化的能力，学会取舍，在时间紧任务重中做到平衡，带领团队征服一座座高山。</p>
<h3 id="追求一种自由的生活">追求一种自由的生活</h3>
<p>工作自由。你不惧怕公司裁员，拥有随时可以跳槽并找到好工作的本钱。拥有技能自由，在你的领域基本没有你解决不了的问题，已经成为领域专家。物质自由，也就是财务自由，不再需要为生活奔波，选择自己跟喜欢的方式生活。</p>
<h3 id="感悟">感悟</h3>
<p>知之为知之，不知为不知。</p>
<p>业精于勤荒于嬉，行成于思毁于随。</p>
<p>骐骥一跃不能十步，驽马十驾功在不舍。</p>
<p>知行合一。</p>
]]></content></item><item><title>Week1019_tip</title><link>/posts/arts/week1019_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:38 +0000</pubDate><guid>/posts/arts/week1019_tip/</guid><description>ARTS - Tip 补11.12 ECharts 的使用简介 项目中使用了ECharts， 主要说下echarts的 dataset 和 dataZoom.
dataset 在option里设置dataset就是设置数据源
dataset: { // 这里指定了维度名的顺序，从而可以利用默认的维度到坐标轴的映射。 // 如果不指定 dimensions，也可以通过指定 series.encode 完成映射，参见后文。 dimensions: [&amp;#39;legendName&amp;#39;, &amp;#39;col2&amp;#39;, &amp;#39;col3&amp;#39;], source: result }, 这里result是数据数组，用来提供需要展示的数据，这样比以下直接分割写数据更紧凑些。
legend: { data:[&amp;#39;销量&amp;#39;] }, xAxis: { data: [&amp;#34;衬衫&amp;#34;,&amp;#34;羊毛衫&amp;#34;,&amp;#34;雪纺衫&amp;#34;,&amp;#34;裤子&amp;#34;,&amp;#34;高跟鞋&amp;#34;,&amp;#34;袜子&amp;#34;] }, yAxis: {}, series: [{ name: &amp;#39;销量&amp;#39;, type: &amp;#39;bar&amp;#39;, data: [5, 20, 36, 10, 10, 20] }] dataZoom 这个是底下下拉栏。数据很多时候，需要左右拖动来调整显示，就用到了dataZoom.
写法如下：
dataZoom: [ { type: &amp;#39;slider&amp;#39;, show: true, xAxisIndex: [0], left: &amp;#39;9%&amp;#39;, bottom: -5, startValue: 0, endValue: 10 } ], 注意这里的startValue和endValue, 这个控制图表显示的起始阶段和容量，如果需要搜索某一个特定数据时候，找到该数据在列表中的坐标，直接设置startValue 就可以把该数据放在第一位，比再请求数据更方便高效些。</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="补1112">补11.12</h2>
<h2 id="echarts-的使用简介">ECharts 的使用简介</h2>
<p>项目中使用了ECharts， 主要说下echarts的 dataset 和 dataZoom.</p>
<h3 id="dataset">dataset</h3>
<p>在option里设置dataset就是设置数据源</p>
<pre tabindex="0"><code>dataset: {
            // 这里指定了维度名的顺序，从而可以利用默认的维度到坐标轴的映射。
            // 如果不指定 dimensions，也可以通过指定 series.encode 完成映射，参见后文。
            dimensions: [&#39;legendName&#39;, &#39;col2&#39;, &#39;col3&#39;],
            source: result
        },
</code></pre><p>这里result是数据数组，用来提供需要展示的数据，这样比以下直接分割写数据更紧凑些。</p>
<pre tabindex="0"><code>legend: {
                data:[&#39;销量&#39;]
            },
            xAxis: {
                data: [&#34;衬衫&#34;,&#34;羊毛衫&#34;,&#34;雪纺衫&#34;,&#34;裤子&#34;,&#34;高跟鞋&#34;,&#34;袜子&#34;]
            },
            yAxis: {},
            series: [{
                name: &#39;销量&#39;,
                type: &#39;bar&#39;,
                data: [5, 20, 36, 10, 10, 20]
            }]
</code></pre><h3 id="datazoom">dataZoom</h3>
<p>这个是底下下拉栏。数据很多时候，需要左右拖动来调整显示，就用到了dataZoom.</p>
<p>写法如下：</p>
<pre tabindex="0"><code>dataZoom: [
            {
                type: &#39;slider&#39;,
                show: true,
                xAxisIndex: [0],
                left: &#39;9%&#39;,
                bottom: -5,
                startValue: 0,
                endValue: 10
            }
        ],
</code></pre><p>注意这里的startValue和endValue, 这个控制图表显示的起始阶段和容量，如果需要搜索某一个特定数据时候，找到该数据在列表中的坐标，直接设置startValue 就可以把该数据放在第一位，比再请求数据更方便高效些。</p>
]]></content></item><item><title>Week1020_algorithm</title><link>/posts/arts/week1020_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:38 +0000</pubDate><guid>/posts/arts/week1020_algorithm/</guid><description>ARTS - Alogirthm 补11.19 121. 买卖股票的最佳时机 题目 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。
注意你不能在买入股票前卖出股票。
示例 1:
输入: [7,1,5,3,6,4] 输出: 5 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。 示例 2:
输入: [7,6,4,3,1] 输出: 0 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。 分析 先解决，再优化。笨方法，先跑起来再说。 类似冒泡排序，对每个元素进行比较，找出最大差额。代码如下：
class Solution { public int maxProfit(int[] prices) { if (prices == null || prices.length &amp;lt; 2) { return 0; } int len = prices.</description><content type="html"><![CDATA[<h2 id="arts---alogirthm-补1119">ARTS - Alogirthm 补11.19</h2>
<h3 id="121-买卖股票的最佳时机httpsleetcode-cncomproblemsbest-time-to-buy-and-sell-stockdescription"><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/description/">121. 买卖股票的最佳时机</a></h3>
<h3 id="题目">题目</h3>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p>示例 1:</p>
<pre tabindex="0"><code>输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
</code></pre><p>示例 2:</p>
<pre tabindex="0"><code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
</code></pre><h3 id="分析">分析</h3>
<p>先解决，再优化。笨方法，先跑起来再说。
类似冒泡排序，对每个元素进行比较，找出最大差额。代码如下：</p>
<pre tabindex="0"><code>class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length &lt; 2) {
            return 0;
        }

        int len = prices.length;

        int max = prices[len - 1] - prices[0];
        for (int i = 0; i &lt; len - 1; i++) {
            for (int j = i + 1; j &lt; len; j++) {

                if (prices[j] - prices[i] &gt; max) {
                    max = prices[j] - prices[i];
                }
            }
        }


        return max &lt; 0 ? 0 : max;
    }
}
</code></pre><h3 id="代码">代码</h3>
<p>看了答案后，发现其实可以一次循环就能做到的，让左游标在值不符合时候，往右移动代码如下：</p>
<pre tabindex="0"><code>public int maxProfit(int[] prices) {
        int low = 0, high = 0, max = 0, tmp = 0;

        for (int i = 0; i &lt; prices.length; i++) {

            high = i;
            tmp = prices[high] - prices[low];
            if (tmp &lt;= 0) {
                low = i;
            }
            if (tmp &gt; max) {
                max = tmp;
            }

        }
        return max;

    }
</code></pre>]]></content></item><item><title>Week1015_share</title><link>/posts/arts/week1015_share/</link><pubDate>Fri, 31 Mar 2023 15:45:37 +0000</pubDate><guid>/posts/arts/week1015_share/</guid><description>ARTS - Share 关于日志那些事 日志有访问日志，行为日志……不同类型的日志有不同的格式，另外，还有日志的滚动归档，还有像systemd/syslog等这样的系统日志系统……
什么是日志 计算机中，用来记录操作系统或其他软件运行事件，或不同用户操作行为的文件。日志是储存在文件里的动作。在最简单的例子中，信息被写入一个单个文件中。
一个事务日志就是一个系统和系统用户之间交流记录的文件，或者一个数据采集方法，用于自动捕获具有该系统终端操作事务的人员的类型，内容或者时间。网页服务日志文件，但是任何日志文件都可以使用科学日志分析工具来进行分析。
很多操作系统，软件框架和程序都包含一个日志系统。一个广泛使用的日志标准是 syslog. IETF RFC规范的 .
syslog 规范 syslog 在计算机中是一个记录日志的规范，它根据软件类型和日志级别生成信息，使用一些助记代码。
计算机系统设计者可能会使用syslog来管理系统和安全验证，也会进行通用信息，分析，排查问题。
日志级别
值 级别 关键字 描述 0 Emergency emerg 系统不可用 1 Alert alert 需要尽快恢复的状态，例如系统数据库错误 2 Critical crit 硬件错误 &amp;hellip; 日志类型 日志文件记录着当前程序执行的情况，或者管理员的活动。日志对进行一次错误排查是有帮助的。
按日志产生的地方有三种类型的日志：
访问日志， 这里记录当前请求执行结果的日志，每次实际请求都会记录。 行为日志， 这里记录当前管理人员行为的日志，会列出这个人员的所有请求操作。 内部并发管理日志，记录内部并发系统的参数值。 操作系统的日志
sytemd 和 syslogd
linux日志系统是系统 daemon或syslogd. 当系统运行级别为1时候daemon随系统启动。一旦启动，几乎系统的任何部分，包括应用、驱动、和其他守护程序都会产生日志。
在现代Linux发行版syslogd被更新的syslog规范实现例如rsyslog、syslog-ng取代。 这三个不同点是，syslog工程是首个系统日志工程，1980年就建立了，它是syslog协议的基础。同时Syslog是非常简单的协议。开始只支持UDP传输，所以它不能保证可靠传输。
下一个日志系统是 syslog-ng 在1998年诞生。它继承了基础syslog协议并增加了新特性例如：
基于内容的过滤器 直接把日志存入数据库 TCP传输 TLS加密 下一个日志系统是RsysLog 在2004年。继承了syslog协议,增加了新特性比如：
RELP协议支持 缓冲操作支持 日志归档 滚动策略， 设置最多归档文件数 控制触发策略 根据最大文件数触发 maxHistory策略， 使用maxHistory保留天数设置，超过时间的删除。 [1]What is the difference between syslog, rsyslog and syslog-ng?</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="关于日志那些事">关于日志那些事</h2>
<p>日志有访问日志，行为日志……不同类型的日志有不同的格式，另外，还有日志的滚动归档，还有像systemd/syslog等这样的系统日志系统……</p>
<h3 id="什么是日志">什么是日志</h3>
<p>计算机中，用来记录操作系统或其他软件运行事件，或不同用户操作行为的文件。日志是储存在文件里的动作。在最简单的例子中，信息被写入一个单个文件中。</p>
<p>一个事务日志就是一个系统和系统用户之间交流记录的文件，或者一个数据采集方法，用于自动捕获具有该系统终端操作事务的人员的类型，内容或者时间。网页服务日志文件，但是任何日志文件都可以使用科学日志分析工具来进行分析。</p>
<p>很多操作系统，软件框架和程序都包含一个日志系统。一个广泛使用的日志标准是 syslog. IETF RFC规范的 .</p>
<h4 id="syslog-规范">syslog 规范</h4>
<p>syslog 在计算机中是一个记录日志的规范，它根据软件类型和日志级别生成信息，使用一些助记代码。</p>
<p>计算机系统设计者可能会使用syslog来管理系统和安全验证，也会进行通用信息，分析，排查问题。</p>
<p>日志级别</p>
<table>
<thead>
<tr>
<th>值</th>
<th>级别</th>
<th>关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Emergency</td>
<td>emerg</td>
<td>系统不可用</td>
</tr>
<tr>
<td>1</td>
<td>Alert</td>
<td>alert</td>
<td>需要尽快恢复的状态，例如系统数据库错误</td>
</tr>
<tr>
<td>2</td>
<td>Critical</td>
<td>crit</td>
<td>硬件错误</td>
</tr>
<tr>
<td>&hellip;</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="日志类型">日志类型</h3>
<p>日志文件记录着当前程序执行的情况，或者管理员的活动。日志对进行一次错误排查是有帮助的。</p>
<p>按日志产生的地方有三种类型的日志：</p>
<ol>
<li>访问日志， 这里记录当前请求执行结果的日志，每次实际请求都会记录。</li>
<li>行为日志， 这里记录当前管理人员行为的日志，会列出这个人员的所有请求操作。</li>
<li>内部并发管理日志，记录内部并发系统的参数值。</li>
</ol>
<p>操作系统的日志</p>
<p>sytemd 和 syslogd</p>
<p>linux日志系统是系统 daemon或syslogd. 当系统运行级别为1时候daemon随系统启动。一旦启动，几乎系统的任何部分，包括应用、驱动、和其他守护程序都会产生日志。</p>
<p>在现代Linux发行版syslogd被更新的syslog规范实现例如rsyslog、syslog-ng取代。
这三个不同点是，syslog工程是首个系统日志工程，1980年就建立了，它是syslog协议的基础。同时Syslog是非常简单的协议。开始只支持UDP传输，所以它不能保证可靠传输。</p>
<p>下一个日志系统是 syslog-ng 在1998年诞生。它继承了基础syslog协议并增加了新特性例如：</p>
<ul>
<li>基于内容的过滤器</li>
<li>直接把日志存入数据库</li>
<li>TCP传输</li>
<li>TLS加密</li>
</ul>
<p>下一个日志系统是RsysLog 在2004年。继承了syslog协议,增加了新特性比如：</p>
<ul>
<li>RELP协议支持</li>
<li>缓冲操作支持</li>
</ul>
<h3 id="日志归档">日志归档</h3>
<ul>
<li>滚动策略， 设置最多归档文件数</li>
<li>控制触发策略 根据最大文件数触发</li>
<li>maxHistory策略， 使用maxHistory保留天数设置，超过时间的删除。</li>
</ul>
<hr>
<p>[1]What is the difference between syslog, rsyslog and syslog-ng?  <a href="https://serverfault.com/questions/692309/what-is-the-difference-between-syslog-rsyslog-and-syslog-ng">https://serverfault.com/questions/692309/what-is-the-difference-between-syslog-rsyslog-and-syslog-ng</a></p>
<p>[2]syslog <a href="https://en.wikipedia.org/wiki/Syslog">https://en.wikipedia.org/wiki/Syslog</a>
[2]Log file <a href="https://en.wikipedia.org/wiki/Log_file">https://en.wikipedia.org/wiki/Log_file</a></p>
]]></content></item><item><title>Week1016_algorithm</title><link>/posts/arts/week1016_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:37 +0000</pubDate><guid>/posts/arts/week1016_algorithm/</guid><description>ARTS - Algorithm 补 10月22日 83. 删除排序链表中的重复元素 给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。
示例 1:
输入: 1-&amp;gt;1-&amp;gt;2 输出: 1-&amp;gt;2 示例 2:
输入: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;3 输出: 1-&amp;gt;2-&amp;gt;3
分析 这个就是数据结构的链表结构，相当于对删除链表上的某一个元素，把这个待删除的元素的前驱的后继指向该元素的后继，就行了。
代码1 我第一想到方法是笨方法，首先建立一个新链表，第一个元素是 head.val, 遍历链表，如果比head.val 大就把这个元素拼接到新链表上， 返回新链表的head。代码如下：
if (head == null) { return null; } ListNode node = new ListNode(head.val); ListNode x = node; while (head.next != null) { head = head.next; if (head.val &amp;gt; x.val) { x.next = new ListNode(head.val); x = x.next; } } return node; 代码2 然后就意识到不用新建链表就可以，于是写出了简化版：</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="补-10月22日">补 10月22日</h2>
<h2 id="83-删除排序链表中的重复元素httpsleetcode-cncomproblemsremove-duplicates-from-sorted-listdescription"><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/description/">83. 删除排序链表中的重复元素</a></h2>
<p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p>
<p>示例 1:</p>
<p>输入: 1-&gt;1-&gt;2
输出: 1-&gt;2
示例 2:</p>
<p>输入: 1-&gt;1-&gt;2-&gt;3-&gt;3
输出: 1-&gt;2-&gt;3</p>
<h3 id="分析">分析</h3>
<p>这个就是数据结构的链表结构，相当于对删除链表上的某一个元素，把这个待删除的元素的前驱的后继指向该元素的后继，就行了。</p>
<h3 id="代码1">代码1</h3>
<p>我第一想到方法是笨方法，首先建立一个新链表，第一个元素是 head.val, 遍历链表，如果比head.val 大就把这个元素拼接到新链表上， 返回新链表的head。代码如下：</p>
<pre tabindex="0"><code>if (head == null) {
            return null;
        }

        ListNode node = new ListNode(head.val);
        ListNode x = node;

        while (head.next != null) {

            head = head.next;
            if (head.val &gt; x.val) {
                x.next = new ListNode(head.val);
                x = x.next;
            }
        }

        return node;
</code></pre><h3 id="代码2">代码2</h3>
<p>然后就意识到不用新建链表就可以，于是写出了简化版：</p>
<pre tabindex="0"><code>public ListNode deleteDuplicates(ListNode head) {
        if (head == null) {
            return null;
        }

        ListNode flag = head;

        while (head.next != null) {

            int left = head.val;
            int right = head.next.val;

            if (right == left) {

                // 删除2
                if (head.next.next == null) {
                    head.next = null;
                } else {
                    head.next = head.next.next;
                }

            } else {
                // 往前推进，
                head = head.next;
            }

        }


        return flag;

    }
</code></pre><h3 id="代码3">代码3</h3>
<p>看了答案后，是在2 的基础上进一步简化：</p>
<pre tabindex="0"><code>public ListNode deleteDuplicates(ListNode head) {
        ListNode flag = head;

        while (head != null &amp;&amp; head.next != null) {

            if (head.val == head.next.val) {
                // 删除2
                head.next = head.next.next;

            } else {
                // 往前推进，
                head = head.next;
            }

        }


        return flag;

    }
</code></pre>]]></content></item><item><title>Week1016_review</title><link>/posts/arts/week1016_review/</link><pubDate>Fri, 31 Mar 2023 15:45:37 +0000</pubDate><guid>/posts/arts/week1016_review/</guid><description>Reivew SQL 存储过程和游标介绍 学习为一个关系型数据库写存储过程和游标。 如果你学习更多关于SQL特别是从数据科学的角度，你可以学习DataCamp的 &amp;ldquo;数据科学SQL介绍&amp;rdquo;课程。
SQL对每个现代软件工程师都是必备技能。因为几乎全部软件都依赖几种数据集成的RDBMS（关系型数据库管理系统）。无论是网页应用，无论是API或者内部应用，都会用到关系型数据库。SQL就是查询关系型数据库的语言。
作为一个数据科学家，了解SQL和它关联知识非常重要。为了能够查询一个数据库系统获得你想要的处理的特定问题返回，SQL是最低需求。
在这个最新DataCamp视频中， David Robinson (DataCamp首席数据科学家)为我们展示他这么在一个数据科学问题中使用SQL。请检出它，他的工作流程非常有趣。
在本篇指导中，你将会学到些存储过程和游标；SQL另一个重要面。你是否曾想要你的RDBMS 在某一个特定的时间发生时自动响应一个确定的动作？ 例如，我们说你创建了一个新的员工记录在你叫做Employees 的表中，你想要这个反射到另一个关联表 像 Departments 中。好了，你可以获得正确的教程。
在这个教程中，你将会学到：
存储过程在RDBMS里是什么 你怎么能写一个存储过程 存储过程的不同类型 什么是RDBMS的游标 怎么写不同类型的游标 不同类型的游标 听起来兴奋吧？让我们开始吧。
在一个RDBMS里什么是一个存储过程？ 在继续存储过程和游标之前，你将会需要知道一点关于PL/SQL ，它是一个块结构语言能够让像你一样的开发者用过程声明来拥有SQL的力量。但是你不会以传统方式学习，会随着你的需要学习它。
所以如果你拥有SQL查询并且你想要重复执行它。存储过程是其中的一个解决方案。存储过程通常在这个上下文中被调用，因为他们保持了存储并在特定操作或一系列动作时被触发。存储过程也被称为 Procs.
现在你将会看到怎么写一个存储过程。
书写存储过程： 书写存储过程通用的语法如下：
CREATE PROCEDURE procedure_name AS sql_statement GO; 请注意这些语法介乎适用于所有的RDBMS不管是Oracle， 还是PostgreSQL 还是MySQL。
创建存储过程之后，你要执行它。以下是语法。
EXEC procedure_name; 让我们写一个简单的存储过程。考虑如下快照，是从一个RDBMS 以一个叫Customers 表里取得。
+------------+--------------+-------------+---------------+--------+------------+---------+ | CustomerID | CustomerName | ContactName | Address | City | PostalCode | Country | +------------+--------------+-------------+---------------+--------+------------+---------+ | 1 | Jack | Rose | Obere Str.</description><content type="html"><![CDATA[<h2 id="reivew">Reivew</h2>
<h2 id="sql-存储过程和游标介绍httpstowardsdatasciencecomintroduction-to-procedures-and-cursors-in-sql-f9d9b9ea1fe7"><a href="https://towardsdatascience.com/introduction-to-procedures-and-cursors-in-sql-f9d9b9ea1fe7">SQL 存储过程和游标介绍</a></h2>
<h4 id="学习为一个关系型数据库写存储过程和游标">学习为一个关系型数据库写存储过程和游标。</h4>
<p>如果你学习更多关于SQL特别是从数据科学的角度，你可以学习DataCamp的 <a href="https://www.datacamp.com/courses/intro-to-sql-for-data-science">&ldquo;数据科学SQL介绍&rdquo;</a>课程。</p>
<p>SQL对每个现代软件工程师都是必备技能。因为几乎全部软件都依赖几种数据集成的RDBMS（关系型数据库管理系统）。无论是网页应用，无论是API或者内部应用，都会用到关系型数据库。SQL就是查询关系型数据库的语言。</p>
<p>作为一个数据科学家，了解SQL和它关联知识非常重要。为了能够查询一个数据库系统获得你想要的处理的特定问题返回，SQL是最低需求。</p>
<p>在这个最新DataCamp视频中， David Robinson (DataCamp首席数据科学家)为我们展示他这么在一个数据科学问题中使用SQL。请检出它，他的工作流程非常有趣。</p>
<p>在本篇指导中，你将会学到些存储过程和游标；SQL另一个重要面。你是否曾想要你的RDBMS 在某一个特定的时间发生时自动响应一个确定的动作？ 例如，我们说你创建了一个新的员工记录在你叫做Employees 的表中，你想要这个反射到另一个关联表 像 Departments 中。好了，你可以获得正确的教程。</p>
<p>在这个教程中，你将会学到：</p>
<ul>
<li>存储过程在RDBMS里是什么</li>
<li>你怎么能写一个存储过程</li>
<li>存储过程的不同类型</li>
<li>什么是RDBMS的游标</li>
<li>怎么写不同类型的游标</li>
<li>不同类型的游标</li>
</ul>
<p>听起来兴奋吧？让我们开始吧。</p>
<h3 id="在一个rdbms里什么是一个存储过程">在一个RDBMS里什么是一个存储过程？</h3>
<p>在继续存储过程和游标之前，你将会需要知道一点关于PL/SQL ，它是一个块结构语言能够让像你一样的开发者用过程声明来拥有SQL的力量。但是你不会以传统方式学习，会随着你的需要学习它。</p>
<p>所以如果你拥有SQL查询并且你想要重复执行它。存储过程是其中的一个解决方案。存储过程通常在这个上下文中被调用，因为他们保持了存储并在特定操作或一系列动作时被触发。存储过程也被称为 <code>Procs</code>.</p>
<p>现在你将会看到怎么写一个存储过程。</p>
<h3 id="书写存储过程">书写存储过程：</h3>
<p>书写存储过程通用的语法如下：</p>
<pre tabindex="0"><code>CREATE PROCEDURE procedure_name
AS 
sql_statement
GO;
</code></pre><p>请注意这些语法介乎适用于所有的RDBMS不管是Oracle， 还是PostgreSQL 还是MySQL。</p>
<p>创建存储过程之后，你要执行它。以下是语法。</p>
<pre tabindex="0"><code>EXEC procedure_name;
</code></pre><p>让我们写一个简单的存储过程。考虑如下快照，是从一个RDBMS 以一个叫Customers 表里取得。</p>
<pre tabindex="0"><code>
+------------+--------------+-------------+---------------+--------+------------+---------+
| CustomerID | CustomerName | ContactName | Address       | City   | PostalCode | Country |
+------------+--------------+-------------+---------------+--------+------------+---------+
|          1 | Jack         | Rose        | Obere Str. 57 | Berlin | 12209      | Germany |
|          2 | Anna         | Carols      | Avda 2222     | London | WA1 1DP    | UK      |
|          3 | Jim          | Mike        | Hemels 23     | Lule   | S-987 22   | Sweden  |
|          4 | Bob          | Allen       | Zhengzhou 123 | mexico | 05021      | Mexico  |
|          5 | Catalina     | Jerry       | Tomcat 786    | London | WA1 2XP    | UK      |
+------------+--------------+-------------+---------------+--------+------------+---------+
</code></pre><p>你将会写一个叫做 <code>SelectAllCustomers</code>的存储过程，将会从<code>Customers</code>表中查出所有的客户。</p>
<pre tabindex="0"><code>CREATE PROCEDURE SelectAllCustomers
AS 
SELECT * FROM Customers
GO;
</code></pre><p>(译者注) 注意：
如果使用的MySQL，声明是如下的：</p>
<pre tabindex="0"><code>CREATE PROCEDURE SelectAllCustomers()
  BEGIN
  SELECT * FROM Customers;
  END;
</code></pre><p>执行 <code>SelectAllCustomers</code> 通过：</p>
<pre tabindex="0"><code>Exec SelectAllCustomers;
</code></pre><p>(译者注) 注意：
如果是MySQL，执行是如下的：</p>
<pre tabindex="0"><code>CALL SelectAllCustomers;
</code></pre><p>存储过程能够被是独立的语句块，这使得他们能够独立于任何表，而不是像之前一个表。以下的例子是创建一个简单的存储过程展示 ‘Hello World!’作为输出当执行后。</p>
<pre tabindex="0"><code>CREATE PROCEDURE welcome
AS 
BEGIN
dbms_output.put_line(&#39;Hello World!&#39;);
END;
</code></pre><p>(译者注)注意：
在MySQL中写法是：</p>
<pre tabindex="0"><code>CREATE PROCEDURE welcome()
  BEGIN
  SELECT &#39;Hello World!&#39;;
  END;

CALL welcome;
</code></pre><p>有两种方法执行一个独立的过程。</p>
<ul>
<li>使用 EXEC关键字</li>
<li>从 PL/SQL 块里调用过程名</li>
</ul>
<p>以上过程叫做‘welcome’能被 EXEC关键字调用：</p>
<pre tabindex="0"><code>EXEC welcome;
</code></pre><p>你将会看到下个方法在一个PL/SQL块中调用另一个一个过程.</p>
<pre tabindex="0"><code>BEGIN
welcome;
END;
</code></pre><p>删除一个储存过的过程不是一个大问题：</p>
<pre tabindex="0"><code>DROP PROCEDURE procerure-name;
</code></pre><p>过程也能够基于参数。可以传单个参数也可以多个。现在你将会学这种。</p>
<p>你会使用同样的Customers表。</p>
<p>你将会写一个存储过程查询Customers 从一个特有的城市：</p>
<pre tabindex="0"><code>CREATE PROCEDURE SelectAllCustomers @City nvarchar(30)
AS
SELECT * FROM Customers WHERE City = @City
GO;
</code></pre><p>我们剖析共同的原则：</p>
<ul>
<li>你写了第一个 @City 定义了它的类型和长度作为将会在执行时传给过程的参数之一。</li>
<li>第二个 @City 被指定给局部变量 Customers表中的 City  列。</li>
</ul>
<p>过程执行：</p>
<pre tabindex="0"><code>EXEc SelectAllCustomers City = &#34;London&#34;;
</code></pre><p>(译者注) 注意，MySQL中写法是：</p>
<pre tabindex="0"><code>CREATE PROCEDURE SelectAllCustomers(zCity VARCHAR(30))
  BEGIN
    SELECT * FROM Customers WHERE City = zCity;
  END;


CALL SelectAllCustomers(&#39;London&#39;);

// 此处要注意的是，如果之前创建了SelectAllCustomers 过程，要先删除。 变量名不要和表列名同名。
</code></pre><p>我们再来看另外一种。</p>
<p>多个参数的存储过程和之前的很像。你只需要拼接他么就行。</p>
<pre tabindex="0"><code>CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10)
AS 
SELECt * FROM Customers Where City = @City AND PostalCode = @PostalCode
Go;
</code></pre><p>执行过程：</p>
<pre tabindex="0"><code>EXEC SelectAllCustomers City = &#34;London&#34;, PostalCode = &#34;WA1 1DP&#34;;
</code></pre><p>(译者注)注意：
MySQL中写法是：</p>
<pre tabindex="0"><code>CREATE PROCEDURE SelectAllCustomers2(zCity VARCHAR(30), zPostalCode VARCHAR(30))
  BEGIN
    SELECT * FROM Customers WHERE City = zCity AND PostalCode = zPostalCode;

  end;

CALL SelectAllCustomers2(&#39;London&#39;, &#39;WA1 1DP&#39;);
</code></pre><p>是不是上面的代码不是很易读吗？ 当代码可读，会有更多有趣的事。这就是过程的全部。你现在将要学游标。</p>
<h3 id="rdbms的游标是什么">RDBMS的游标是什么？</h3>
<p>数据库像Oracle 创建了一个内存区域，被称为 context area , 对于处理一个SQL语句，包含所有需要处理的语句信息，例如 &ndash; 行数。</p>
<p>一个游标是一个上下文区域的指针。PL/SQL 通过游标控制上下文区域。一个游标是一个SQL语句执行时系统内存创建的一个临时工作区域。一个游标包含一个查询语句的信息和它操作的数据行的信息。所以，游标被用来在一个大的数据库中加快处理查询速度。你需要用数据游标的理由是你需要个别行性能表现。</p>
<p>游标可以是两种类型：</p>
<ul>
<li>隐式游标</li>
<li>显式游标</li>
</ul>
<p>现在将看到这么写不同类型的游标。</p>
<h3 id="书写游标">书写游标</h3>
<p>你将会通过理解什么是隐式游标来开始这个章节。</p>
<p><strong>隐式游标</strong>是当一个SQL语句执行时没有显式游标定义时，ORACLE会自动创建一个隐式游标。程序员不能控制隐式游标和它里面的信息。当一个DML（Data Manipulation Language 数据操纵语言）语句(INSERT, UPDATE, DELETE)发出， 一个隐式游标就被关联到这条语句。对于 INSERT 操作，游标持有需要被插入的数据。对于UPDATE 和 DELETE操作，游标鉴定将被影响的行。</p>
<p>你可以将最新的隐式游标成为SQL游标，它始终具有以下属性：</p>
<ul>
<li>%FOUND</li>
<li>%ISOPEN</li>
<li>%NOTFOUND</li>
<li>%ROWCOUNT</li>
</ul>
<p>以下图片描述这几个属性的含义：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%FOUND</td>
<td>返回TRUE， 如果一个INSERT ，UPDATE或DELETE语句影响一个或多行， 后者一个SELECT INTO 语句返回一行或多行。其他的，返回FALSE</td>
</tr>
<tr>
<td>%NOTFOUND</td>
<td>和%FOUND逻辑相反。当一个INSERT ，UPDATE，或DELETE语句没有影响到行数据，或者SELECT INTO 语句无数据返回，返回TRUE。否则返回FALSE。</td>
</tr>
<tr>
<td>%ISOPEN</td>
<td>对隐式游标总是返回FALSE，因为ORACLE在执行完SQL语句后会自动关闭SQL游标。</td>
</tr>
<tr>
<td>%ROWCOUNT</td>
<td>返回被INSERT、UPDATE、DELETE影响的行数，或者被SELECT INTO 语句影响返回的行数。</td>
</tr>
</tbody>
</table>
<p>我们看一个来自于叫 Employee表的数据快照</p>
<pre tabindex="0"><code>+----+----------+------+---------+---------+
| ID | NAME     | AGE  | ADDRESS | SALARY  |
+----+----------+------+---------+---------+
|  1 | Michael  |   32 | US      | 6500.00 |
|  2 | John     |   26 | CANADA  | 8000.00 |
|  3 | David    |   33 | ITALY   | 9500.00 |
|  4 | Mitchell |   42 | GERMANY | 4500.00 |
|  5 | Robin    |   29 | US      | 6000.00 |
+----+----------+------+---------+---------+
</code></pre><p>现在你将会写一个游标对小于30岁的人没人增加1000元薪水。</p>
<pre tabindex="0"><code>DECLARE
total_rows number(2);
BEGIN
UPDATE Employee
SET salary = salary + 1000
where age &lt; 30;
IF sql%notfound THEN
    dbms_output.put_line(&#39;No employees found for under 30 age&#39;);
ELSIF sql%found THEN
    total_rows := sql%rowcount;
    dbms_output.put_line( total_rows || &#39; employees updated &#39;);
END IF;
END;
</code></pre><p>我们回顾下你写的：</p>
<ul>
<li>你定义了一个叫 <code>total_rows</code>的变量来存储 employees 被游标改变的的数量。</li>
<li>你用 BEGIN  启动了 游标块写了一个简单SQL查询更新年龄小于30的薪水。</li>
<li>你处理了输出年龄小于30的员工的数据直到没有数据。你使用 <code>%notfound</code>属性。注意隐式游标 sql 来存储的所有对应的信息。</li>
<li>最后，你用游标的 <code>%rowcount</code>属性打印出了受影响的行数。</li>
</ul>
<p>很棒！干的不错。
当以上代码执行在SQL里，他铲射是哪个如下结果：</p>
<blockquote>
<p>2 Employees updated (assume there are 2 records where age &lt; 30)</p>
</blockquote>
<p>现在学习显式游标。</p>
<p>显式游标给了在上下文区域更多的定义控制。创建在一个返回多行的SELECT查询语句之上。</p>
<p>创建一个显式游标的语法是：</p>
<pre tabindex="0"><code>CURSOR cursor_name IS  select_statement;
</code></pre><p>如果你工作中使用显式游标，你需要跟着一些列的步骤如下：</p>
<ul>
<li>在内存里声明游标初始化</li>
<li>打开游标分配一块内存区域</li>
<li>拉去游标回收数据</li>
<li>关闭游标释放内存</li>
</ul>
<p>一下图片表示一个典型的显式内存生命周期：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*rTDQzZNikWs2Eg-O" alt=""></p>
<p>你将会学习更多关于这些。</p>
<h3 id="声明游标">声明游标</h3>
<p>你声明一个游标用SELECT语句，例如：</p>
<pre tabindex="0"><code>CURSOR C IS SELECT id, name, address FROM Employee where age &gt; 30;

-- mysql 写法：
DECLARE cur1 CURSOR FOR SELECT NAME, AGE FROM Employee;
</code></pre><h3 id="打开一个游标">打开一个游标</h3>
<p>当你打开游标，CPU 为游标分配内存做好准备为获取SQL语句返回的行。例如，我们将会打开上面定义的游标如下：</p>
<pre tabindex="0"><code>OPEN  C;
</code></pre><h3 id="抓取游标">抓取游标</h3>
<p>抓取游标获取一次操作一行从关联的表中，在SQL中意味着游标。</p>
<pre tabindex="0"><code>FETCH C INTO C_id, C_name, C_address;
</code></pre><h3 id="关闭游标">关闭游标</h3>
<p>关闭游标意味着释放分配的内存。你将会关闭上面打开的游标：</p>
<pre tabindex="0"><code>CLOSE C;
</code></pre><p>现在你将会吧这些片用一个有意义的方式放在一起：</p>
<h3 id="合并这些步骤">合并这些步骤</h3>
<pre tabindex="0"><code>DECLARE
C_id Employee.ID%type;
C_name Employee.NAME%type;
C_address Employee.ADDRESS%type;
CURSOR C is
SELECT id, name, address FROM Employee where age &gt; 30;
BEGIN
OPEN C;
LOOP
FETCH C INTO C_id, C_name, C_address; 
dbms_output.put_line(ID || &#39; &#39; || NAME || &#39; &#39; || ADDRESS); 
EXIT WHEN C%notfound;
END LOOP;
CLOSE C;
END;
</code></pre><p>注意，在MySQL中是：</p>
<pre tabindex="0"><code>CREATE PROCEDURE curdemo()
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE a CHAR(16);
  DECLARE b, c INT;
  DECLARE cur1 CURSOR FOR SELECT id,data FROM test.t1;
  DECLARE cur2 CURSOR FOR SELECT i FROM test.t2;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  OPEN cur1;
  OPEN cur2;

  read_loop: LOOP
    FETCH cur1 INTO a, b;
    FETCH cur2 INTO c;
    IF done THEN
      LEAVE read_loop;
    END IF;
    IF b &lt; c THEN
      INSERT INTO test.t3 VALUES (a,b);
    ELSE
      INSERT INTO test.t3 VALUES (a,c);
    END IF;
  END LOOP;

  CLOSE cur1;
  CLOSE cur2;
END;
</code></pre><p>你也学到了声明游标变量 C_id, C_name, 和 C_address。 <code>C_id Employee.ID%type</code>； 这个确保C_id 创建时候和在Employee表中的ID是相同的数据类型。</p>
<p>通过使用 LOOP 你循环游标的获取记录展示它。你也可以处理游标没有找到记录的情况。</p>
<h3 id="总结">总结：</h3>
<p>恭喜，你学完了。你学到了数据库中两个最流行的主题&ndash;存储过程和游标。这在应用中处理巨量事务时候是非常普遍的。你猜对了。银行在太古时间都用上了这些。你学会了怎么写一个存储过程，他们是不同的类型，为什么会是这样。你也学到了游标和他的几个写法。</p>
<p>以下是是引用：</p>
]]></content></item><item><title>Week1016_share</title><link>/posts/arts/week1016_share/</link><pubDate>Fri, 31 Mar 2023 15:45:37 +0000</pubDate><guid>/posts/arts/week1016_share/</guid><description>ARTS - Share 关于SQL JOIN 的那些事 一张图 SQL中关联查询使用最多的是各种JOIN，这个图中简单明了的说明了各个JOIN 的含义：
测试数据 准备了两张表 t_user 和 t_info, 数据如下：
mysql&amp;gt; select * from t_user; +----+------+------+-------------+ | id | name | age | telephone | +----+------+------+-------------+ | 1 | jack | 20 | 18877771111 | | 2 | rose | 33 | 18977771111 | | 3 | tom | 21 | 13877761111 | | 4 | bob | 24 | 13356771111 | +----+------+------+-------------+ mysql&amp;gt; select * from t_info; +----+---------+-----------------+--------------+ | id | user_id | bank_no | company_name | +----+---------+-----------------+--------------+ | 1 | 1 | 110132011114578 | google | | 2 | 2 | 110119677118521 | facebook | | 3 | 3 | 110111842716547 | twitter | | 4 | 8 | 210111842716547 | baidu | | 5 | 9 | 410111842716547 | tencent | +----+---------+-----------------+--------------+ 1.</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="关于sql-join-的那些事">关于SQL JOIN 的那些事</h2>
<h3 id="一张图">一张图</h3>
<p>SQL中关联查询使用最多的是各种JOIN，这个图中简单明了的说明了各个JOIN 的含义：</p>
<p><img src="https://i.stack.imgur.com/1UKp7.png" alt=""></p>
<h3 id="测试数据">测试数据</h3>
<p>准备了两张表 <code> t_user 和 t_info</code>, 数据如下：</p>
<pre tabindex="0"><code>mysql&gt; select * from t_user;
+----+------+------+-------------+
| id | name | age  | telephone   |
+----+------+------+-------------+
|  1 | jack |   20 | 18877771111 |
|  2 | rose |   33 | 18977771111 |
|  3 | tom  |   21 | 13877761111 |
|  4 | bob  |   24 | 13356771111 |
+----+------+------+-------------+

mysql&gt; select * from t_info;
+----+---------+-----------------+--------------+
| id | user_id | bank_no         | company_name |
+----+---------+-----------------+--------------+
|  1 |       1 | 110132011114578 | google       |
|  2 |       2 | 110119677118521 | facebook     |
|  3 |       3 | 110111842716547 | twitter      |
|  4 |       8 | 210111842716547 | baidu        |
|  5 |       9 | 410111842716547 | tencent      |
+----+---------+-----------------+--------------+
</code></pre><h3 id="1-left-join">1. LEFT JOIN</h3>
<p>根据LEFT JOIN 图，我们知道，数据返回 A 表所有数据 + B表和A相交的部分, 空的部分为NULL。</p>
<pre tabindex="0"><code>
SELECT * FROM t_user a LEFT JOIN t_info b ON a.id = b.user_id;

mysql&gt; SELECT * FROM t_user a LEFT JOIN t_info b ON a.id = b.user_id;
+----+------+------+-------------+------+---------+-----------------+--------------+
| id | name | age  | telephone   | id   | user_id | bank_no         | company_name |
+----+------+------+-------------+------+---------+-----------------+--------------+
|  1 | jack |   20 | 18877771111 |    1 |       1 | 110132011114578 | google       |
|  2 | rose |   33 | 18977771111 |    2 |       2 | 110119677118521 | facebook     |
|  3 | tom  |   21 | 13877761111 |    3 |       3 | 110111842716547 | twitter      |
|  4 | bob  |   24 | 13356771111 | NULL |    NULL | NULL            | NULL         |
+----+------+------+-------------+------+---------+-----------------+--------------+
 
</code></pre><p>再多说一句 用 left join 之后的 and 和  where 过滤的问题， and会过滤 b表的数据，对整体结果不影响， where 会过滤整体，如下：</p>
<pre tabindex="0"><code>mysql&gt; SELECT * FROM t_user a LEFT JOIN t_info b ON a.id = b.user_id where b.id &lt;3;
+----+------+------+-------------+------+---------+-----------------+--------------+
| id | name | age  | telephone   | id   | user_id | bank_no         | company_name |
+----+------+------+-------------+------+---------+-----------------+--------------+
|  1 | jack |   20 | 18877771111 |    1 |       1 | 110132011114578 | google       |
|  2 | rose |   33 | 18977771111 |    2 |       2 | 110119677118521 | facebook     |
+----+------+------+-------------+------+---------+-----------------+--------------+


mysql&gt; SELECT * FROM t_user a LEFT JOIN t_info b ON a.id = b.user_id and  b.id &lt;3;
+----+------+------+-------------+------+---------+-----------------+--------------+
| id | name | age  | telephone   | id   | user_id | bank_no         | company_name |
+----+------+------+-------------+------+---------+-----------------+--------------+
|  1 | jack |   20 | 18877771111 |    1 |       1 | 110132011114578 | google       |
|  2 | rose |   33 | 18977771111 |    2 |       2 | 110119677118521 | facebook     |
|  3 | tom  |   21 | 13877761111 | NULL |    NULL | NULL            | NULL         |
|  4 | bob  |   24 | 13356771111 | NULL |    NULL | NULL            | NULL         |
+----+------+------+-------------+------+---------+-----------------+--------------+
</code></pre><p>这时候就能获取 A B相交， A中独有的部分， 用where 把 b 连接ID不为空的过滤掉，如下：</p>
<pre tabindex="0"><code>mysql&gt; SELECT * FROM t_user a LEFT JOIN t_info b ON a.id = b.user_id  where b.user_id is null;
+----+------+------+-------------+------+---------+---------+--------------+
| id | name | age  | telephone   | id   | user_id | bank_no | company_name |
+----+------+------+-------------+------+---------+---------+--------------+
|  4 | bob  |   24 | 13356771111 | NULL |    NULL | NULL    | NULL         |
+----+------+------+-------------+------+---------+---------+--------------+
</code></pre><h3 id="2-right-join">2. RIGHT JOIN</h3>
<p>又连接，正好反过来，直接看例子吧：</p>
<pre tabindex="0"><code>mysql&gt; select * from t_user u right join t_info i on i.user_id = u.id;
+------+------+------+-------------+----+---------+-----------------+--------------+
| id   | name | age  | telephone   | id | user_id | bank_no         | company_name |
+------+------+------+-------------+----+---------+-----------------+--------------+
|    1 | jack |   20 | 18877771111 |  1 |       1 | 110132011114578 | google       |
|    2 | rose |   33 | 18977771111 |  2 |       2 | 110119677118521 | facebook     |
|    3 | tom  |   21 | 13877761111 |  3 |       3 | 110111842716547 | twitter      |
| NULL | NULL | NULL | NULL        |  4 |       8 | 210111842716547 | baidu        |
| NULL | NULL | NULL | NULL        |  5 |       9 | 410111842716547 | tencent      |
+------+------+------+-------------+----+---------+-----------------+--------------+


-- 查 b 表独有的

mysql&gt; select * from t_user a right join t_info b on b.user_id = a.id where a.id is null;
+------+------+------+-----------+----+---------+-----------------+--------------+
| id   | name | age  | telephone | id | user_id | bank_no         | company_name |
+------+------+------+-----------+----+---------+-----------------+--------------+
| NULL | NULL | NULL | NULL      |  4 |       8 | 210111842716547 | baidu        |
| NULL | NULL | NULL | NULL      |  5 |       9 | 410111842716547 | tencent      |
+------+------+------+-----------+----+---------+-----------------+--------------+
</code></pre><h3 id="inner-join">INNER JOIN</h3>
<p>这个是查两个表的交集, 两边都匹配上</p>
<pre tabindex="0"><code>mysql&gt; select * from t_user a inner join t_info b on b.user_id = a.id ;
+----+------+------+-------------+----+---------+-----------------+--------------+
| id | name | age  | telephone   | id | user_id | bank_no         | company_name |
+----+------+------+-------------+----+---------+-----------------+--------------+
|  1 | jack |   20 | 18877771111 |  1 |       1 | 110132011114578 | google       |
|  2 | rose |   33 | 18977771111 |  2 |       2 | 110119677118521 | facebook     |
|  3 | tom  |   21 | 13877761111 |  3 |       3 | 110111842716547 | twitter      |
+----+------+------+-------------+----+---------+-----------------+--------------+
</code></pre><h3 id="3-full-outer-join">3. FULL OUTER JOIN</h3>
<p>要查 AB表的并集：</p>
<pre tabindex="0"><code>// mysql 不支持全连接，所以只能用 left join union right join 了

mysql&gt; select * from t_user u left join t_info i on i.user_id = u.id
    -&gt; union
    -&gt; select * from t_user u right join t_info i on i.user_id = u.id;
+------+------+------+-------------+------+---------+-----------------+--------------+
| id   | name | age  | telephone   | id   | user_id | bank_no         | company_name |
+------+------+------+-------------+------+---------+-----------------+--------------+
|    1 | jack |   20 | 18877771111 |    1 |       1 | 110132011114578 | google       |
|    2 | rose |   33 | 18977771111 |    2 |       2 | 110119677118521 | facebook     |
|    3 | tom  |   21 | 13877761111 |    3 |       3 | 110111842716547 | twitter      |
|    4 | bob  |   24 | 13356771111 | NULL |    NULL | NULL            | NULL         |
| NULL | NULL | NULL | NULL        |    4 |       8 | 210111842716547 | baidu        |
| NULL | NULL | NULL | NULL        |    5 |       9 | 410111842716547 | tencent      |
+------+------+------+-------------+------+---------+-----------------+--------------+
</code></pre><p>那么， AB交集在 AB并集的补集就是：</p>
<pre tabindex="0"><code>
mysql&gt; select * from t_user a left join t_info b on a.id = b.user_id where b.user_id is null
    -&gt; union
    -&gt; select * from t_user a right join t_info b on a.id = b.user_id where a.id is null;
+------+------+------+-------------+------+---------+-----------------+--------------+
| id   | name | age  | telephone   | id   | user_id | bank_no         | company_name |
+------+------+------+-------------+------+---------+-----------------+--------------+
|    4 | bob  |   24 | 13356771111 | NULL |    NULL | NULL            | NULL         |
| NULL | NULL | NULL | NULL        |    4 |       8 | 210111842716547 | baidu        |
| NULL | NULL | NULL | NULL        |    5 |       9 | 410111842716547 | tencent      |
+------+------+------+-------------+------+---------+-----------------+--------------+
</code></pre>]]></content></item><item><title>Week1016_tip</title><link>/posts/arts/week1016_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:37 +0000</pubDate><guid>/posts/arts/week1016_tip/</guid><description>ARTS - Tip 一个SQL JOIN问题 问题描述 工作中碰到了一个SQL JOIN 的bug。
典型的内部系统， 牵涉到的用户表，用户角色表，用户角色关联表，分别是： sys_user, sys_role, sys_user_role
需求是获得 角色类型为 xxx 的所有用户的id, 名字 和角色id.
我写的SQL是如下
SELECT u.id, u.name , ur.role_id FROM sys_user u LEFT JOIN sys_user_role ur on u.id = ur.user_id AND ur.role_id IN (SELECT id FROM sys_role r WHERE r.role_type = &amp;#39;xxx&amp;#39;) 问题分析 根据上面SQL，做的事情是
查找所有的用户表， 关联上 用户角色表， 这个用户角色表数据只有角色ID 是 role_type = xxx 的数据。连接用的是LEFT JOIN，这样的话，左边的数据是 &amp;gt;= 右边的数据，左边会出现一些无用数据。
出现使用LEFT JOIN 是对连接的范围理解的有误。 关于各种连接，下面一张图就能看明白：
问题解决 把上面的SQL 改成 INNER JOIN 即可解决。这样就是等于把左边的范围缩小到和右边数据对等的数量上。</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="一个sql-join问题">一个SQL JOIN问题</h2>
<h3 id="问题描述">问题描述</h3>
<p>工作中碰到了一个SQL JOIN 的bug。</p>
<p>典型的内部系统， 牵涉到的用户表，用户角色表，用户角色关联表，分别是： <code>sys_user, sys_role, sys_user_role</code></p>
<p>需求是获得 角色类型为 xxx 的所有用户的id, 名字 和角色id.</p>
<p>我写的SQL是如下</p>
<pre tabindex="0"><code>SELECT
      u.id,
      u.name ,
      ur.role_id 
FROM sys_user u
  LEFT JOIN sys_user_role ur on u.id = ur.user_id
                  AND ur.role_id IN 
                  (SELECT id FROM sys_role r WHERE r.role_type = &#39;xxx&#39;)
</code></pre><h3 id="问题分析">问题分析</h3>
<p>根据上面SQL，做的事情是</p>
<p>查找所有的用户表，  关联上 用户角色表， 这个用户角色表数据只有角色ID 是 role_type = xxx 的数据。连接用的是LEFT JOIN，这样的话，左边的数据是 &gt;= 右边的数据，左边会出现一些无用数据。</p>
<p>出现使用LEFT JOIN 是对连接的范围理解的有误。 关于各种连接，下面一张图就能看明白：</p>
<p><img src="https://i.stack.imgur.com/1UKp7.png" alt=""></p>
<h3 id="问题解决">问题解决</h3>
<p>把上面的SQL 改成 INNER JOIN 即可解决。这样就是等于把左边的范围缩小到和右边数据对等的数量上。</p>
<p>当然也有直接面对问题的写法， 按照逻辑， 先找出 <code>role_type=xxx</code>的角色id, 然后去关联表<code>sys_user_role</code>查找所有的 <code>role_id </code>等于刚才查出来的角色ID 的数据，取出用户ID，最后在用户表根据ID查出所有用户，SQL如下：</p>
<pre tabindex="0"><code>select
  u.id,
  u.name
from sys_user u
where u.id In (
  select user_id
  from sys_user_role
  where role_id In (
    select id
    from sys_role
    where role_type = &#39;xxx&#39;));
</code></pre>]]></content></item><item><title>Week1017_algorithm</title><link>/posts/arts/week1017_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:37 +0000</pubDate><guid>/posts/arts/week1017_algorithm/</guid><description>ARTS - Algorithm 补 10月29日 82. 删除排序链表中的重复元素 II 题目 给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。
示例 1:
输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5 输出: 1-&amp;gt;2-&amp;gt;5 示例 2:
输入: 1-&amp;gt;1-&amp;gt;1-&amp;gt;2-&amp;gt;3 输出: 2-&amp;gt;3
分析 此题和 [83. 删除排序链表中的重复元素](https://leetcode-cn.com/problems/remove- duplicates-from-sorted-list/description/) 相似，属于在这道题的基础上增加了一个难度，不仅是重复的变成不重复的，还要把重复过的元素都删掉。
初始的想法是，首先把遇到的和next相等的元素，把next 删掉，把当前的标记，第二次把标记过的删除，但是这样存在问题，
标记的方式，如果设置当前元素的值为某一个数，如果元素中存在这个，就造成不准确； 如果存在连续重复的，标记了一个就无法删除掉全部的重复数据。 所以这种方法是不可行的， 还有一个方法，是双向循环链表结构，这样的话可以让前驱直接指向后继的后继，就一次删除了当前的和当前的后继， 但是存在连续重复的问题，需要把重复元素保存起来。
代码如下：
public static ListNode deleteDuplicates(ListNode head) { // 1. 记录重复值， 2.删除重复值， 3.从第二个开始 ListNode node = head; ListNode prev = new ListNode(head.val - 1); ListNode first = prev; int duplicate = prev.val; prev.next = node; while (node !</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="补-10月29日">补 10月29日</h2>
<h2 id="82-删除排序链表中的重复元素-iihttpsleetcode-cncomproblemsremove-duplicates-from-sorted-list-iidescription"><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/description/">82. 删除排序链表中的重复元素 II</a></h2>
<h3 id="题目">题目</h3>
<p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p>
<p>示例 1:</p>
<p>输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5
输出: 1-&gt;2-&gt;5
示例 2:</p>
<p>输入: 1-&gt;1-&gt;1-&gt;2-&gt;3
输出: 2-&gt;3</p>
<h3 id="分析">分析</h3>
<p>此题和 [83. 删除排序链表中的重复元素](<a href="https://leetcode-cn.com/problems/remove-">https://leetcode-cn.com/problems/remove-</a>      duplicates-from-sorted-list/description/)  相似，属于在这道题的基础上增加了一个难度，不仅是重复的变成不重复的，还要把重复过的元素都删掉。</p>
<p>初始的想法是，首先把遇到的和next相等的元素，把next 删掉，把当前的标记，第二次把标记过的删除，但是这样存在问题，</p>
<ol>
<li>标记的方式，如果设置当前元素的值为某一个数，如果元素中存在这个，就造成不准确；</li>
<li>如果存在连续重复的，标记了一个就无法删除掉全部的重复数据。 所以这种方法是不可行的，</li>
</ol>
<p>还有一个方法，是双向循环链表结构，这样的话可以让前驱直接指向后继的后继，就一次删除了当前的和当前的后继， 但是存在连续重复的问题，需要把重复元素保存起来。</p>
<p>代码如下：</p>
<pre tabindex="0"><code>public static ListNode deleteDuplicates(ListNode head) {

        // 1. 记录重复值， 2.删除重复值， 3.从第二个开始
        ListNode node = head;
        ListNode prev = new ListNode(head.val - 1);
        ListNode first = prev;
        int duplicate = prev.val;
        prev.next = node;

        while (node != null &amp;&amp; node.next != null) {

            // 如果当前和重复的相等，就把当前删掉
            if (node.val == duplicate) {

                prev.next = node.next;

                node = node.next;

            } else {
                // 当前不重复，就判断和下一个重复
                if (node.val == node.next.val) {
                    duplicate = node.val;
                    // 向前推进两个
                    prev.next = node.next.next;
                    node = node.next.next;
                } else {
                    // 不重复

                    prev = node;
                    node = node.next;

                }

            }

        }


        return first.next;


    }
</code></pre><p>这个看似正确，但是如果head.val = Integer.MIN_VALUE d  的话，程序会报错的，所以不是正确答案。</p>
<h3 id="代码">代码</h3>
<p>参考了答案后，代码如下：</p>
<pre tabindex="0"><code>
public static ListNode deleteDuplicates(ListNode head) {

        ListNode tail = new ListNode(0);
        tail.next = head;

        head = tail;
        boolean flag = false;


        for (ListNode node = head.next; node != null &amp;&amp; node.next != null; node = node.next) {

            if (!flag &amp;&amp; node.val == node.next.val) {

                flag = true;
                continue;
            }
            if (flag &amp;&amp; node.val != node.next.val) {
                flag = false;
                tail.next = node.next;

                continue;
            }

            if (!flag) {
                tail = node;
            }
        }

        if (flag) {
            tail.next = null;
        }
        return head.next;


    }
</code></pre>]]></content></item><item><title>Week1017_review</title><link>/posts/arts/week1017_review/</link><pubDate>Fri, 31 Mar 2023 15:45:37 +0000</pubDate><guid>/posts/arts/week1017_review/</guid><description>ARTS - Review 补10.29 一个好的开发者说不 在我们的生活很早的时候，我们就学到 ‘不’这个词是消极的。但是在我们生活中学会说不以便专注于重要的事是非常积极的，尤其是当你做为一个程序员不得不和你的客户和队长日常讨论让你开发一个功能时候。
作为一个软件开发者，我们面对不仅语法和逻辑挑战，还要客户交流。（crucial 关键的） 这是关键的因为有时，你的客户将会让你加一些需要花费大量时间开发但是对最终产品应用目标没有价值的功能。
如果你面对和以上提到的类似的场景，你有两个选择。
开发功能 说不 为什么你需要说不？那不是我的客户想要的吗？这不是他的软件吗？
当然是的。但是这也要花费时间和金钱去完成的。
你的客户投资资源在你确定不会增加产品价值的事情上，甚至知道这一点，但是你还要去做。
所以，你多么该管理一下像这样的场景？我们将会说不，但是解释为什么。
作为一个在Pernix的软件学徒，我们不得不在6周内开发应用。这些应用叫做 MVP (最低可用产品)。就像名字表达的那样，这类应用意味着做的最小但是对最终产品有巨大价值的功能。
6周是非常短的一段时间，我们必须敏捷必须专注于什么是重要的事情上。有时客户想要一些将花费大量时间的功能但是并不会在周期结束时候增加实际价值。
这就是我们必须识别什么是我们应用的目的，然后在这样的功能上努力。
我之前做的一个项目中，一个客户让我们开发一个聊天机器人功能，如果我们同意开发将会占用整个6周。主要功能是开发一个用社交网络实现一个CRM系统。
所以我们表上就要两个选项。开发聊天机器人或CRM。
幸运的是，客户同意了我们意见，决定将来再实现聊天机器人，先努力开发CRM。
如果我们同意开发聊天机器人，情况会变得非常困难。我们不能开发完成聊天机器人也不能完成CRM。
最后，我们设法开发了CRM，客户对最终结果很满意。我们学到了要聚焦于开发两个主要功能又快又好的完成。
这个方法可能听起来熟悉的如果你把 Scrum（敏捷工具） 作为你的开发方法论。在Scrum 你需要设置短阶段任务并完成它。如果你指出你的任务将会比你认为的花费更多时间或者意识到你在开发一个完全不同的功能，常常在脑中思考，什么是任务？目标是什么。
简短来说，确定你的工程里什么是重要的，学会对那些需要花费大量时间开发但对最终产品不会增加价值的事说不。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="补1029">补10.29</h2>
<h2 id="一个好的开发者说不httpsmediumcomdatadriveninvestora-good-developer-says-no-f10a88c33553"><a href="https://medium.com/datadriveninvestor/a-good-developer-says-no-f10a88c33553">一个好的开发者说不</a></h2>
<p>在我们的生活很早的时候，我们就学到 ‘不’这个词是消极的。但是在我们生活中学会说不以便专注于重要的事是非常积极的，尤其是当你做为一个程序员不得不和你的客户和队长日常讨论让你开发一个功能时候。</p>
<p>作为一个软件开发者，我们面对不仅语法和逻辑挑战，还要客户交流。（crucial 关键的） 这是关键的因为有时，你的客户将会让你加一些需要花费大量时间开发但是对最终产品应用目标没有价值的功能。</p>
<p>如果你面对和以上提到的类似的场景，你有两个选择。</p>
<ol>
<li>开发功能</li>
<li>说不</li>
</ol>
<p>为什么你需要说不？那不是我的客户想要的吗？这不是他的软件吗？</p>
<p>当然是的。但是这也要花费时间和金钱去完成的。</p>
<p>你的客户投资资源在你确定不会增加产品价值的事情上，甚至知道这一点，但是你还要去做。</p>
<p>所以，你多么该管理一下像这样的场景？我们将会说不，但是解释为什么。</p>
<p>作为一个在Pernix的软件学徒，我们不得不在6周内开发应用。这些应用叫做 MVP (最低可用产品)。就像名字表达的那样，这类应用意味着做的最小但是对最终产品有巨大价值的功能。</p>
<p>6周是非常短的一段时间，我们必须敏捷必须专注于什么是重要的事情上。有时客户想要一些将花费大量时间的功能但是并不会在周期结束时候增加实际价值。</p>
<p>这就是我们必须识别什么是我们应用的目的，然后在这样的功能上努力。</p>
<p>我之前做的一个项目中，一个客户让我们开发一个聊天机器人功能，如果我们同意开发将会占用整个6周。主要功能是开发一个用社交网络实现一个CRM系统。</p>
<p>所以我们表上就要两个选项。开发聊天机器人或CRM。</p>
<p>幸运的是，客户同意了我们意见，决定将来再实现聊天机器人，先努力开发CRM。</p>
<p>如果我们同意开发聊天机器人，情况会变得非常困难。我们不能开发完成聊天机器人也不能完成CRM。</p>
<p>最后，我们设法开发了CRM，客户对最终结果很满意。我们学到了要聚焦于开发两个主要功能又快又好的完成。</p>
<p>这个方法可能听起来熟悉的如果你把 Scrum（敏捷工具） 作为你的开发方法论。在Scrum 你需要设置短阶段任务并完成它。如果你指出你的任务将会比你认为的花费更多时间或者意识到你在开发一个完全不同的功能，常常在脑中思考，什么是任务？目标是什么。</p>
<p>简短来说，确定你的工程里什么是重要的，学会对那些需要花费大量时间开发但对最终产品不会增加价值的事说不。</p>
]]></content></item><item><title>Week1017_share</title><link>/posts/arts/week1017_share/</link><pubDate>Fri, 31 Mar 2023 15:45:37 +0000</pubDate><guid>/posts/arts/week1017_share/</guid><description>ARTS - Share Java项目的 接口-实现 写法真有必要吗 习惯的日常 由于经常做内部系统，所以只讨论在开发内部系统的范围。
经典的MVC架构，经典的Spring、MyBatis 组合，开发内部系统已经是成熟的套路了，不需要思考：
Controller 接收用户请求 Service 接口处理用户逻辑 Service 实现真正处理逻辑，用各种Dao来操作数据库。 MyBatis 生成各种xml，或者根据需要特别写SQL 然而，这个过程使用久了，觉得就应该是这么写的，但是为什么非要这么写呢？
接口的本意和实际使用 软件工程，有很多思想确实很好，面向接口编程，接口和实现分离，开闭原则，高内聚，低耦合，我们使用接口，就是方便扩展、更换接口实现更方便，这样的话接口不需要变动，对客户端来说是无影响的。我承认在duboo这类框架里这么做是有必要的，但是对于开发内部系统， 我们面对最多的就是业务处理，Controller接收用户请求，然后在对应的Service里处理，如果我们因为业务变动或bug等，我们要么直接写一个方法，或者在原来方法上进行调整，当然如果使用了设计模式，有些确实需要接口，但是对于很多业务处理，不需要搞复杂的模式，既然接口在这里用处并不如期望的那样，那么为何不去掉，直接注入Service实现？
在Controller里做逻辑处理 更有甚者，在Controller 里做各种逻辑处理，直接使用dao操作数据，理由是写Servcie层没必要。刚开始听到这种说法觉得挺震惊，后来想想确实，只是简单的逻辑，没有事务处理，不需要更多的扩展性，直接在Controller处理又有何不可呢？ 虽然Controller也可以事务处理，虽然没那么优雅，但是却是最简洁高效的。
如果程序中有更多的复用，还是写Service比较好，另外和事务操作分开管理，更优雅，这里依然可以舍弃Service接口。
更进一步思考 我们知道，json已经成为了事实上的前后端交互的数据标准，后台做的事是，就是接收json,转为bean, 存数据库，取数据就是把数据封装为bean,在转为json返回前台，既然要这么转，为何后台不直接使用json 来做数据处理，省去了来回转，岂不是更好？
基于这样的思想，有人开发了一个框架，叫 Latke , 参考这篇文章看介绍 为什么又要造一个叫 Latke 的轮子.
一句流行的话说，既要埋头搬砖，也要抬头看路，多思考下自己的业务场景和应对手段，也是很有益处的。</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="java项目的-接口-实现-写法真有必要吗">Java项目的 接口-实现 写法真有必要吗</h2>
<h3 id="习惯的日常">习惯的日常</h3>
<p>由于经常做内部系统，所以只讨论在开发内部系统的范围。</p>
<p>经典的MVC架构，经典的Spring、MyBatis 组合，开发内部系统已经是成熟的套路了，不需要思考：</p>
<ul>
<li>Controller 接收用户请求</li>
<li>Service 接口处理用户逻辑</li>
<li>Service 实现真正处理逻辑，用各种Dao来操作数据库。</li>
<li>MyBatis 生成各种xml，或者根据需要特别写SQL</li>
</ul>
<p>然而，这个过程使用久了，觉得就应该是这么写的，但是为什么非要这么写呢？</p>
<h3 id="接口的本意和实际使用">接口的本意和实际使用</h3>
<p>软件工程，有很多思想确实很好，面向接口编程，接口和实现分离，开闭原则，高内聚，低耦合，我们使用接口，就是方便扩展、更换接口实现更方便，这样的话接口不需要变动，对客户端来说是无影响的。我承认在duboo这类框架里这么做是有必要的，但是对于开发内部系统， 我们面对最多的就是业务处理，Controller接收用户请求，然后在对应的Service里处理，如果我们因为业务变动或bug等，我们要么直接写一个方法，或者在原来方法上进行调整，当然如果使用了设计模式，有些确实需要接口，但是对于很多业务处理，不需要搞复杂的模式，既然接口在这里用处并不如期望的那样，那么为何不去掉，直接注入Service实现？</p>
<h3 id="在controller里做逻辑处理">在Controller里做逻辑处理</h3>
<p>更有甚者，在Controller 里做各种逻辑处理，直接使用dao操作数据，理由是写Servcie层没必要。刚开始听到这种说法觉得挺震惊，后来想想确实，只是简单的逻辑，没有事务处理，不需要更多的扩展性，直接在Controller处理又有何不可呢？ 虽然Controller也可以事务处理，虽然没那么优雅，但是却是最简洁高效的。</p>
<p>如果程序中有更多的复用，还是写Service比较好，另外和事务操作分开管理，更优雅，这里依然可以舍弃Service接口。</p>
<h3 id="更进一步思考">更进一步思考</h3>
<p>我们知道，json已经成为了事实上的前后端交互的数据标准，后台做的事是，就是接收json,转为bean, 存数据库，取数据就是把数据封装为bean,在转为json返回前台，既然要这么转，为何后台不直接使用json 来做数据处理，省去了来回转，岂不是更好？</p>
<p>基于这样的思想，有人开发了一个框架，叫 Latke , 参考这篇文章看介绍 <a href="https://hacpai.com/article/1403847528022"> 为什么又要造一个叫 Latke 的轮子</a>.</p>
<p>一句流行的话说，既要埋头搬砖，也要抬头看路，多思考下自己的业务场景和应对手段，也是很有益处的。</p>
]]></content></item><item><title>Week1017_tip</title><link>/posts/arts/week1017_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:37 +0000</pubDate><guid>/posts/arts/week1017_tip/</guid><description>ARTS - Tip 谈谈MySQL慢查询 什么是慢查询 MySQL的慢查询是MySQL提供的一种记录查询慢的SQL的工具。方便做系统优化。
开启慢查询日志 默认情况下是关闭的，
mysql&amp;gt; show variables like &amp;#39;slow_query%&amp;#39;; +---------------------+-------------------------------------+ | Variable_name | Value | +---------------------+-------------------------------------+ | slow_query_log | OFF | | slow_query_log_file | /usr/local/var/mysql/bogon-slow.log | +---------------------+-------------------------------------+ 2 rows in set (0.01 sec) ysql&amp;gt; show variables like &amp;#39;long_query_time&amp;#39;; +-----------------+-----------+ | Variable_name | Value | +-----------------+-----------+ | long_query_time | 10.000000 | +-----------------+-----------+ 1 row in set (0.00 sec) 设置方法
全局变量设置
#将 slow_query_log 全局变量设置为“ON”状态 mysql&amp;gt; set global slow_query_log=&amp;#39;ON&amp;#39;; #设置慢查询日志存放的位置 mysql&amp;gt; set global slow_query_log_file=&amp;#39;/usr/local/mysql/data/slow.</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="谈谈mysql慢查询">谈谈MySQL慢查询</h2>
<h3 id="什么是慢查询">什么是慢查询</h3>
<p>MySQL的慢查询是MySQL提供的一种记录查询慢的SQL的工具。方便做系统优化。</p>
<h3 id="开启慢查询日志">开启慢查询日志</h3>
<p>默认情况下是关闭的，</p>
<pre tabindex="0"><code>
mysql&gt; show variables like &#39;slow_query%&#39;;
+---------------------+-------------------------------------+
| Variable_name       | Value                               |
+---------------------+-------------------------------------+
| slow_query_log      | OFF                                 |
| slow_query_log_file | /usr/local/var/mysql/bogon-slow.log |
+---------------------+-------------------------------------+
2 rows in set (0.01 sec)


ysql&gt; show variables like &#39;long_query_time&#39;;
+-----------------+-----------+
| Variable_name   | Value     |
+-----------------+-----------+
| long_query_time | 10.000000 |
+-----------------+-----------+
1 row in set (0.00 sec)
</code></pre><p>设置方法</p>
<p>全局变量设置</p>
<pre tabindex="0"><code>#将 slow_query_log 全局变量设置为“ON”状态

mysql&gt; set global slow_query_log=&#39;ON&#39;; 

#设置慢查询日志存放的位置

mysql&gt; set global slow_query_log_file=&#39;/usr/local/mysql/data/slow.log&#39;;

#查询超过1秒就记录

mysql&gt; set global long_query_time=1;
</code></pre><h3 id="explain-分析">explain 分析</h3>
<p>设置慢查询日志后，就会在日志里记录慢查询SQL， 然后使用 explain 分析。</p>
<pre tabindex="0"><code>mysql&gt; explain select * from Employee where AGE &gt; 30;
+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+
| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |
+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | Employee | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |    33.33 | Using where |
+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+
</code></pre><table>
<thead>
<tr>
<th>列名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>执行编号，标识select所属的行。如果在语句中没子查询或关联查询，只有唯一的select，每行都将显示1。否则，内层的select语句一般会顺序编号，对应于其在原始语句中的位置</td>
</tr>
<tr>
<td>select_type</td>
<td>显示本行是简单或复杂select。如果查询有任何复杂的子查询，则最外层标记为PRIMARY（DERIVED、UNION、UNION RESUlT）</td>
</tr>
<tr>
<td>table</td>
<td>访问引用哪个表（引用某个查询，如“derived3”）</td>
</tr>
<tr>
<td>type</td>
<td>数据访问/读取操作类型（ALL、index、range、ref、eq_ref、const/system、NULL）</td>
</tr>
<tr>
<td>possible_keys</td>
<td>揭示哪一些索引可能有利于高效的查找</td>
</tr>
<tr>
<td>key</td>
<td>显示mysql决定采用哪个索引来优化查询</td>
</tr>
<tr>
<td>key_len</td>
<td>显示mysql在索引里使用的字节数</td>
</tr>
<tr>
<td>ref</td>
<td>显示了之前的表在key列记录的索引中查找值所用的列或常量</td>
</tr>
<tr>
<td>rows</td>
<td>为了找到所需的行而需要读取的行数，估算值，不精确。通过把所有rows列值相乘，可粗略估算整个查询会检查的行数</td>
</tr>
<tr>
<td>Extra</td>
<td>额外信息，如using index、filesort等</td>
</tr>
</tbody>
</table>
]]></content></item><item><title>Week1013_review</title><link>/posts/arts/week1013_review/</link><pubDate>Fri, 31 Mar 2023 15:45:36 +0000</pubDate><guid>/posts/arts/week1013_review/</guid><description>ARTS - Review 让困难事情变得看起来简单的艺术 如果存在我们钦佩的一类人，就是那种能够做成没尝试过的事的人。
你知道那个人。他甚至没有学习就进行期末考试的人。她是instagram的模特醒来头发就很完美。他们保持完美外形的共同点是通过”吃的正确“。
这些陈述可能困扰我们。但是同时，我们忍不住钦佩或嫉妒哪些很容就得到的人。
解释为什么我们会感觉如此是困难的。哲学家尼采注意到我们的虚荣和自恋促进了天才文化。”我如果我们认为天才是神奇的“， 他写道， ”我们就不会有动力去比较我们自己去发现自己缺乏的东西“。
这就是为什么我们享受观看最高等级的天才秀和运动比赛。这是保卫这些顶级表演者的秘密。我们惊奇于他们是怎么做到别人做不到的事。
真相是有点不同。但是首先，请看来自于15世纪的故事。
表演 在中世纪时候侍臣的工作是困难的。他们必须得到统治者的支持和宠信才能够活下去。为了做到这些，他们不得不具备胳膊、田径技能，同时也要有音乐和舞蹈才能。
很明显他们必须坚持不懈训练才能达到这么多领域的熟练度。但是在一个重视娱乐和吸引人的环境中，重要的是不要在侍臣们的表现中被发现刻意的努力。这增加了他们表现的价值，让他们保持被顾客喜爱。.
意大利侍臣Baldassare Castiglione 认为这种品质&amp;mdash;表现出一种冷漠的能力&amp;ndash;是卓越侍臣的标志。 这个想法是让每个动作和陈述看起来毫不费力和没有思想。他称呼这种为 潇洒。
Castiglione创造这个词几世纪后，我们仍然能看到这些，不仅在法庭和正式场合，而且在每个场合，这种欺骗依然有效。
受过训练的观察者将 sprezzatura 视作投入工作的标志。个人已经达到如此的高度以至于他能隐藏自己的动作让困难的事看起来如此容易。
但是对没训练过的眼睛来说，表演者才是的天才。他的行为是一种天才行为。他看到的告诉他自己，用尼采的话说，”这里没必要争论“。
所有人都是看到相同的展示，但是每个人都用一个不同的方式解释。
风光后的工作 演员和小丑Martin Short 被认为是最好的脱口秀嘉宾之一。他不仅有没理，还会随时讲故事。你认为那是天生的。
但是以下是他告诉我们的他的准备：
我对出场一次典型的脱口秀的准备，不夸张的说，在开始之前我会发送18页的讨论，我可能会和制片人通一个半小时电话来沟通想法。然后你在节目期间要平衡所有以至于呈现还算凑合的瞬间，不说太多，尝试和主持找到共同话题。
结果就是，Short 称为”模范自己放松“。
我亲眼目睹了这一点。你在法学院遇到最雄辩的最有魅力的人，你自然认为他们是天生会演讲受人拥护。但是我了解的却是一个艰难的故事。
他们中的每个人都有数年的练习。他们参与辩论会，公共场合演讲，模拟联合国会议。所以，演说对他们来说比其他人看着容易。毕竟，这是他们唯一的方式在这个年轻的年龄就获取到很多赞许。
然而，当你听到他们的经历后，你几乎不会认为这是靠天赋，还有很多很努力的工作。
我们只是没有看到。
隐藏的艺术 我不认为每个顶级的演员都会在做之前隐藏他们的努力。他们不会尝试搞阴谋或者故意让自己看的神秘。
这些举止的一个原因是我们看到的和别人看到的是不一样的。你和我可能认为某人如果每周六次去健身房并且每一餐避免碳水化合物，那么他是痴迷于腹肌的。但是对那人来说，他接受了这是他应该付出的代价。
他没有向我们解释这一点，因为这很困难，我们也没理解。
另个一原因是人们没有意识到自己作为实践做了什么。我的一个同辈在高中期间被训练成为卓越的演说家，但是他们并不知道这些。这不是他们想到的东西。
我学到的是天赋和技能之间的联系很弱。很难，&amp;ndash; 如果不是不可能的话，区分两者。
所以下次你看到有人表现如此优雅让你觉得这是天赋，考虑他可能投入大量工作来做好。
如果你也投入同样数量级的工作，你一样会做好。
呼吁行动 如果你活的富有成效有目的性，抓起 生产力宣言 ，这里我提取了变得卓有成效的原则。完全免费。
点击这里立即获取</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="让困难事情变得看起来简单的艺术httpsmediumcompersonal-growthsprezzatura-the-art-of-making-difficult-things-look-simple-55d0441c5cd"><a href="https://medium.com/personal-growth/sprezzatura-the-art-of-making-difficult-things-look-simple-55d0441c5cd">让困难事情变得看起来简单的艺术</a></h2>
<p>如果存在我们钦佩的一类人，就是那种能够做成没尝试过的事的人。</p>
<p>你知道那个人。他甚至没有学习就进行期末考试的人。她是instagram的模特醒来头发就很完美。他们保持完美外形的共同点是通过”吃的正确“。</p>
<p>这些陈述可能困扰我们。但是同时，我们忍不住钦佩或嫉妒哪些很容就得到的人。</p>
<p>解释为什么我们会感觉如此是困难的。哲学家尼采注意到我们的虚荣和自恋促进了天才文化。”我如果我们认为天才是神奇的“， 他写道， ”我们就不会有动力去比较我们自己去发现自己缺乏的东西“。</p>
<p>这就是为什么我们享受观看最高等级的天才秀和运动比赛。这是保卫这些顶级表演者的秘密。我们惊奇于他们是怎么做到别人做不到的事。</p>
<p>真相是有点不同。但是首先，请看来自于15世纪的故事。</p>
<h3 id="表演">表演</h3>
<p>在中世纪时候侍臣的工作是困难的。他们必须得到统治者的支持和宠信才能够活下去。为了做到这些，他们不得不具备胳膊、田径技能，同时也要有音乐和舞蹈才能。</p>
<p>很明显他们必须坚持不懈训练才能达到这么多领域的熟练度。但是在一个重视娱乐和吸引人的环境中，重要的是不要在侍臣们的表现中被发现刻意的努力。这增加了他们表现的价值，让他们保持被顾客喜爱。.</p>
<p>意大利侍臣Baldassare Castiglione 认为这种品质&mdash;表现出一种冷漠的能力&ndash;是卓越侍臣的标志。
这个想法是让每个动作和陈述看起来毫不费力和没有思想。他称呼这种为 潇洒。</p>
<p>Castiglione创造这个词几世纪后，我们仍然能看到这些，不仅在法庭和正式场合，而且在每个场合，这种欺骗依然有效。</p>
<p>受过训练的观察者将 sprezzatura 视作投入工作的标志。个人已经达到如此的高度以至于他能隐藏自己的动作让困难的事看起来如此容易。</p>
<p>但是对没训练过的眼睛来说，表演者才是的天才。他的行为是一种天才行为。他看到的告诉他自己，用尼采的话说，”这里没必要争论“。</p>
<p>所有人都是看到相同的展示，但是每个人都用一个不同的方式解释。</p>
<h3 id="风光后的工作">风光后的工作</h3>
<p>演员和小丑Martin Short 被认为是最好的脱口秀嘉宾之一。他不仅有没理，还会随时讲故事。你认为那是天生的。</p>
<p>但是以下是他告诉我们的他的准备：</p>
<blockquote>
<p>我对出场一次典型的脱口秀的准备，不夸张的说，在开始之前我会发送18页的讨论，我可能会和制片人通一个半小时电话来沟通想法。然后你在节目期间要平衡所有以至于呈现还算凑合的瞬间，不说太多，尝试和主持找到共同话题。</p>
</blockquote>
<p>结果就是，Short 称为”模范自己放松“。</p>
<p>我亲眼目睹了这一点。你在法学院遇到最雄辩的最有魅力的人，你自然认为他们是天生会演讲受人拥护。但是我了解的却是一个艰难的故事。</p>
<p>他们中的每个人都有数年的练习。他们参与辩论会，公共场合演讲，模拟联合国会议。所以，演说对他们来说比其他人看着容易。毕竟，这是他们唯一的方式在这个年轻的年龄就获取到很多赞许。</p>
<p>然而，当你听到他们的经历后，你几乎不会认为这是靠天赋，还有很多很努力的工作。</p>
<p>我们只是没有看到。</p>
<h3 id="隐藏的艺术">隐藏的艺术</h3>
<p>我不认为每个顶级的演员都会在做之前隐藏他们的努力。他们不会尝试搞阴谋或者故意让自己看的神秘。</p>
<p>这些举止的一个原因是我们看到的和别人看到的是不一样的。你和我可能认为某人如果每周六次去健身房并且每一餐避免碳水化合物，那么他是痴迷于腹肌的。但是对那人来说，他接受了这是他应该付出的代价。</p>
<p>他没有向我们解释这一点，因为这很困难，我们也没理解。</p>
<p>另个一原因是人们没有意识到自己作为实践做了什么。我的一个同辈在高中期间被训练成为卓越的演说家，但是他们并不知道这些。这不是他们想到的东西。</p>
<p>我学到的是天赋和技能之间的联系很弱。很难，&ndash; 如果不是不可能的话，区分两者。</p>
<p>所以下次你看到有人表现如此优雅让你觉得这是天赋，考虑他可能投入大量工作来做好。</p>
<p>如果你也投入同样数量级的工作，你一样会做好。</p>
<h3 id="呼吁行动">呼吁行动</h3>
<p>如果你活的富有成效有目的性，抓起 <em>生产力宣言</em> ，这里我提取了变得卓有成效的原则。完全免费。</p>
<p><a href="http://subscribe.constantrenewal.com/">点击这里立即获取</a></p>
]]></content></item><item><title>Week1013_share</title><link>/posts/arts/week1013_share/</link><pubDate>Fri, 31 Mar 2023 15:45:36 +0000</pubDate><guid>/posts/arts/week1013_share/</guid><description>ARTS - Share 前端发展的逻辑 java servlet 输出html, jsp 抽离生成html, html 的跳转 和获取数据，json, java后台的router功能， 和获取数据功能， js 的自行route和获取数据，前后端分离
技术发展方向 一项技术出现首先是为了解决某类问题，然后向着更好的解决这类问题方向发展，然后优化到极致，再然后就是这类问题被颠覆，这项技术也就走到了尽头。
前端的出现 pc机的时代就是操作系统的时代，每台计算机都要安装操作系统，之后迎来了互联网时代，用的最多的就是浏览器，浏览器解析HTML语言来展示内容，所以浏览器向服务器发送请求，服务器会返回拼装好的带内容的HTML，然后用户就看到了网页内容。那么这个过程中，服务器需要做的是提取数据，封装成HTML，Java在这个过程中提供的技术是Servlet
Servlet的不便 Servlet是向前端动态展示的一个处理类。用户在servlet里取得服务器数据，然后拼装成HTML交给Servlet，然后返回给前端。但是在拼装HTML的过程过于不方便，于是就提出了MVC的思想，使用了jsp作为模板。
MVC分层 MVC就是展示、控制、数据模型分离的思想。这样做的好处就是各司其职，互不影响的专注于自己的事情，提高了开发效率。jsp用来生成视图， Controller 用来获取数据、处理转发，Java Bean来封装数据模型。这样基本成型了互联网的架构模式。再往后就是各种优化了，随着使用ajax请求处理数据和json数据格式的流行，于是就MVC继续向前。
前后端分离的到来 我们分析服务端，发现服务端做了两件事，一是路由功能，二是提供数据和各种转换，路由的功能是是浏览器方执行的，放在浏览器端更合适，服务端只要提供好数据就可以了，这时候就出现前后端分离了，后端不再控制页面的路由，和展示，由js前端来处理，就好像是浏览器端的单页应用一样，被称为SPA.
Vue和React 这里面的代表是Vue和React还有Angular。 他们将js和浏览器的结合发挥到极致，后端只需要提供数据，前端框架来控制数据交互、展示和逻辑控制，前端走到这个地步，基本算是优化到了极限。因为对后来来说删无可删，只留下了提供数据的功能。那么前端的方向将是解决除了数据等必须由服务器提供之外的所有问题。
未来已来 前端的方向基本确定了，那么未来服务端的呢？请看下回分析。</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="前端发展的逻辑">前端发展的逻辑</h2>
<p>java servlet 输出html, jsp 抽离生成html, html 的跳转 和获取数据，json, java后台的router功能， 和获取数据功能， js 的自行route和获取数据，前后端分离</p>
<h3 id="技术发展方向">技术发展方向</h3>
<p>一项技术出现首先是为了解决某类问题，然后向着更好的解决这类问题方向发展，然后优化到极致，再然后就是这类问题被颠覆，这项技术也就走到了尽头。</p>
<h3 id="前端的出现">前端的出现</h3>
<p>pc机的时代就是操作系统的时代，每台计算机都要安装操作系统，之后迎来了互联网时代，用的最多的就是浏览器，浏览器解析HTML语言来展示内容，所以浏览器向服务器发送请求，服务器会返回拼装好的带内容的HTML，然后用户就看到了网页内容。那么这个过程中，服务器需要做的是提取数据，封装成HTML，Java在这个过程中提供的技术是Servlet</p>
<h3 id="servlet的不便">Servlet的不便</h3>
<p>Servlet是向前端动态展示的一个处理类。用户在servlet里取得服务器数据，然后拼装成HTML交给Servlet，然后返回给前端。但是在拼装HTML的过程过于不方便，于是就提出了MVC的思想，使用了jsp作为模板。</p>
<h3 id="mvc分层">MVC分层</h3>
<p>MVC就是展示、控制、数据模型分离的思想。这样做的好处就是各司其职，互不影响的专注于自己的事情，提高了开发效率。jsp用来生成视图， Controller 用来获取数据、处理转发，Java Bean来封装数据模型。这样基本成型了互联网的架构模式。再往后就是各种优化了，随着使用ajax请求处理数据和json数据格式的流行，于是就MVC继续向前。</p>
<h3 id="前后端分离的到来">前后端分离的到来</h3>
<p>我们分析服务端，发现服务端做了两件事，一是路由功能，二是提供数据和各种转换，路由的功能是是浏览器方执行的，放在浏览器端更合适，服务端只要提供好数据就可以了，这时候就出现前后端分离了，后端不再控制页面的路由，和展示，由js前端来处理，就好像是浏览器端的单页应用一样，被称为SPA.</p>
<h3 id="vue和react">Vue和React</h3>
<p>这里面的代表是Vue和React还有Angular。 他们将js和浏览器的结合发挥到极致，后端只需要提供数据，前端框架来控制数据交互、展示和逻辑控制，前端走到这个地步，基本算是优化到了极限。因为对后来来说删无可删，只留下了提供数据的功能。那么前端的方向将是解决除了数据等必须由服务器提供之外的所有问题。</p>
<h3 id="未来已来">未来已来</h3>
<p>前端的方向基本确定了，那么未来服务端的呢？请看下回分析。</p>
]]></content></item><item><title>Week1014_algorithm</title><link>/posts/arts/week1014_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:36 +0000</pubDate><guid>/posts/arts/week1014_algorithm/</guid><description>ARTS - Algorithm 70. 爬楼梯 题目 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
注意：给定 n 是一个正整数。
示例 1： 输入： 2 输出： 2 解释： 有两种方法可以爬到楼顶。 1 阶 + 1 阶 2 阶 ####示例 2：
#####输入： 3 #####输出： 3 #####解释： 有三种方法可以爬到楼顶。
1 阶 + 1 阶 + 1 阶 1 阶 + 2 阶 2 阶 + 1 阶 分析 说实话这题确实没想到是斐波那契数列，感觉没有头绪，看了答案才明白这个，希望在下次碰到同类型的题多列举几次，去发现规律。
比如
n = 1 1. 1 + 1 n = 2 1.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="70-爬楼梯httpsleetcode-cncomproblemsclimbing-stairsdescription"><a href="https://leetcode-cn.com/problems/climbing-stairs/description/">70. 爬楼梯</a></h2>
<h3 id="题目">题目</h3>
<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。</p>
<h4 id="示例-1">示例 1：</h4>
<h5 id="输入-2">输入： 2</h5>
<h5 id="输出-2">输出： 2</h5>
<h5 id="解释-有两种方法可以爬到楼顶">解释： 有两种方法可以爬到楼顶。</h5>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶</li>
</ol>
<p>####示例 2：</p>
<p>#####输入： 3
#####输出： 3
#####解释： 有三种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶 + 1 阶</li>
<li>1 阶 + 2 阶</li>
<li>2 阶 + 1 阶</li>
</ol>
<h3 id="分析">分析</h3>
<p>说实话这题确实没想到是斐波那契数列，感觉没有头绪，看了答案才明白这个，希望在下次碰到同类型的题多列举几次，去发现规律。</p>
<p>比如</p>
<pre tabindex="0"><code>n = 1
1. 1 + 1

n = 2
1. 1 + 1
2. 2

n = 3
1. 1 + 1 + 1
2. 1 + 2
3. 2 + 1

n = 4
1. 1, 1, 1, 1
2. 2, 1, 1
3. 1, 2, 1
4. 1, 1, 2
5. 2, 2
</code></pre><p>这样就能容易些看出规律&hellip;</p>
<h3 id="算法">算法</h3>
<pre tabindex="0"><code>
public int climbStairs(int n) {

        if (n &lt;= 2) {
            return n;
        }
        return climbStairs(n - 1) + climbStairs(n - 2);
    }
    
    
    
     public int climbStairs2(int n) {
        if (n &lt;= 1) {
            return 1;
        }
        int oneStep = 1;
        int twoStep = 1;
        int res = 0;
        for (int i = 2; i &lt;= n; i++) {
            res = oneStep + twoStep;
            twoStep = oneStep;
            oneStep = res;

        }
        return res;

    }
</code></pre>]]></content></item><item><title>Week1014_review</title><link>/posts/arts/week1014_review/</link><pubDate>Fri, 31 Mar 2023 15:45:36 +0000</pubDate><guid>/posts/arts/week1014_review/</guid><description>ARTS - Review 你应该避免使用的3个JavaScript性能错误 作者：Yotam Kadishay 全栈软件工程师
来自：https://hackernoon.com/3-javascript-performance-mistakes-you-should-stop-doing-ebf84b9de951
如果我告诉你你知道的一切都是谎言，如果你了解到这些年发布的一些我们热爱的ECMAScript的关键特性确实存在危险的性能陷阱，糖衣包裹在华丽的一行回调代码之上，那么事情会变得怎么样？
这个故事开始于一些年前，回到ES5的天真年代&amp;hellip;
我仍然生动的记得这一天，ES5发布了，伟大的新的数组方法被介绍给我们亲爱的JavaScript. 他们是forEach, reduce, map, filter &amp;ndash; 他们让我们觉得语言在成长，有更多功能，写代码变得更有趣平滑，更能方便的阅读和理解。
同时，一个新的环境生长了&amp;mdash;Node.js， 它重新定义了全栈开发，给我们赋能从前端平滑过渡到后端。
如今，Node.js 在V8上使用最新的ECMAScript， 正试图被视作服务端开发语言大联盟的一部分，因此，它需要证明在性能上是有价值的。是的，有太多的参数需要考虑，是的，不存在能在所有方便都表现优异的银弹语言。但是，是否正在使用的开箱即用的功能编写JavaScript，如上面提到的数组函数对你的应用性能是有帮助的，还是有害的？
此外，客户端javascript声称去做一个不仅仅是视图的合理的解决方案，随着终端电脑用户增长的更强，网络更快，还要在我们的应用程序需要更快性能时候可以作为一个非常大的复合的一个依靠。
为了测试这个问题，我尝试比较一些脚本，深入了解我得到的结果。我在Chrome浏览器 v10.11.0 的Node.js执行以下测试,都是在macOS系统。
1. 数组循环 想到的第一个脚本是计算一个10K个项目的数组的和，这是一个有效的现实生活中的解决方案，我曾在尝试获取数据库中长表项目时候偶然发现，并使用总和来增强它，而不需要对数据库进行额外的查询。
我比较了对随机 10K个项目进行for , for-of, while, forEach, 和 reduce 求和. 运行测试 10000次，返回了以下结果：
For Loop, average loop time: ~10 microseconds For-Of, average loop time: ~110 microseconds ForEach, average loop time: ~77 microseconds While, average loop time: ~11 microseconds Reduce, average loop time: ~113 microseconds 当谷歌搜索怎么计算一个数组时候，reduce 是最先被提供的解决方案，但是却是最慢的。我的forEach没有特别好。甚至最新的for-of (ES6) 性能表现差劲。这说明，老的for 循环（和while） 提供了最好的性能 - 10倍不止。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="你应该避免使用的3个javascript性能错误httpshackernooncom3-javascript-performance-mistakes-you-should-stop-doing-ebf84b9de951"><a href="https://hackernoon.com/3-javascript-performance-mistakes-you-should-stop-doing-ebf84b9de951">你应该避免使用的3个JavaScript性能错误</a></h2>
<p>作者：Yotam Kadishay
全栈软件工程师</p>
<p>来自：https://hackernoon.com/3-javascript-performance-mistakes-you-should-stop-doing-ebf84b9de951</p>
<p>如果我告诉你你知道的一切都是谎言，如果你了解到这些年发布的一些我们热爱的ECMAScript的关键特性确实存在危险的性能陷阱，糖衣包裹在华丽的一行回调代码之上，那么事情会变得怎么样？</p>
<p>这个故事开始于一些年前，回到ES5的天真年代&hellip;</p>
<p>我仍然生动的记得这一天，ES5发布了，伟大的新的数组方法被介绍给我们亲爱的JavaScript. 他们是forEach, reduce, map, filter &ndash; 他们让我们觉得语言在成长，有更多功能，写代码变得更有趣平滑，更能方便的阅读和理解。</p>
<p>同时，一个新的环境生长了&mdash;Node.js， 它重新定义了全栈开发，给我们赋能从前端平滑过渡到后端。</p>
<p>如今，Node.js 在V8上使用最新的ECMAScript， 正试图被视作服务端开发语言大联盟的一部分，因此，它需要证明在性能上是有价值的。是的，有太多的参数需要考虑，是的，不存在能在所有方便都表现优异的银弹语言。但是，是否正在使用的开箱即用的功能编写JavaScript，如上面提到的数组函数对你的应用性能是有帮助的，还是有害的？</p>
<p>此外，客户端javascript声称去做一个不仅仅是视图的合理的解决方案，随着终端电脑用户增长的更强，网络更快，还要在我们的应用程序需要更快性能时候可以作为一个非常大的复合的一个依靠。</p>
<p>为了测试这个问题，我尝试比较一些脚本，深入了解我得到的结果。我在Chrome浏览器 v10.11.0 的Node.js执行以下测试,都是在macOS系统。</p>
<h3 id="1-数组循环">1. 数组循环</h3>
<p>想到的第一个脚本是计算一个10K个项目的数组的和，这是一个有效的现实生活中的解决方案，我曾在尝试获取数据库中长表项目时候偶然发现，并使用总和来增强它，而不需要对数据库进行额外的查询。</p>
<p>我比较了对随机 10K个项目进行for , for-of, while, forEach, 和 reduce 求和. 运行测试 10000次，返回了以下结果：</p>
<pre tabindex="0"><code>For Loop, average loop time: ~10 microseconds
For-Of, average loop time: ~110 microseconds
ForEach, average loop time: ~77 microseconds
While, average loop time: ~11 microseconds
Reduce, average loop time: ~113 microseconds
</code></pre><p>当谷歌搜索怎么计算一个数组时候，reduce 是最先被提供的解决方案，但是却是最慢的。我的forEach没有特别好。甚至最新的for-of (ES6) 性能表现差劲。这说明，老的for 循环（和while） 提供了最好的性能 - 10倍不止。</p>
<p>为什么最新的和最推荐的解决方案让JavaScript 这么慢？造成这种痛苦来自于两个主要原因，reduce和forEach需要执行一个回调函数，这个函数被递归调用，使得堆栈膨胀，以及对执行代码进行额外的操作和验证。</p>
<h3 id="2-复制一个数组">2. 复制一个数组</h3>
<p>虽然听起来像一个不太有趣的场景，这是不可变函数的支柱，当输出时候不会修改输入。</p>
<p>此处性能测试结果再次显示了同样有趣的倾向&ndash;当复制10K个10K数组的随机项目，用老的解决方案更快。同样最时髦的ES6 传播操作 <code>[...arr]</code> 和 Array from <code>Array.from(arr)</code> 加上 ES5 的map <code>arr.map(x=&gt;x)</code> 都不如老将 slice <code>arr.slice()</code> 和 连接 <code>[].concat(arr)</code></p>
<pre tabindex="0"><code>Duplicate using Slice, average: ~367 microseconds
Duplicate using Map, average: ~469 microseconds
Duplicate using Spread, average: ~512 microseconds
Duplicate using Conct, average: ~366 microseconds
Duplicate using Array From, average: ~1,436 microseconds
Duplicate manually, average: ~412 microseconds
</code></pre><h3 id="3-遍历对象">3. 遍历对象</h3>
<p>另一个频繁的场景是遍历对象，这是当我们尝试遍历JSON和对象时候的主要方式，而不是寻找特定的键值时候。同样老的解决方案像 for-in <code>for(let key in obj)</code>，或者比较新的 <code>Object.keys(obj)</code>(es6发布的) 还有<code>Object.entries(obj)</code>(来自ES8)都同样返回key和value.</p>
<p>对10K个项目的遍历性能分析，每个都包含1000个随机key和value, 用上面的方法表现如下：</p>
<pre tabindex="0"><code>Object iterate For-In, average: ~240 microseconds
Object iterate Keys For Each, average: ~294 microseconds
Object iterate Entries For-Of, average: ~535 microseconds
</code></pre><p>造成这样的原因是在后面的两个解决方案中是对数组值创建了枚举，而不是直接遍历对象不用key数组。但是最下面的结果仍然造成困扰。</p>
<h3 id="结论">结论</h3>
<p>我的结论是清晰的&mdash; 如果追求快速的性能表现是你的应用关键，或者如果你你的服务需要处理一些加载 &mdash; 用最酷的，更可读的，清晰的选项将对你的应用性能产生重大影响&mdash; 速度可以提高十倍！</p>
<p>下次，在闭眼采用华而不实的最新特性之前，确认他们也符合你的要求 &mdash; 针对一个小的应用，写的更快更可读的代码是完美的&ndash;但是对与压力大的服务器和巨大的客户端应用，或许不是最好的实践。</p>
]]></content></item><item><title>Week1014_share</title><link>/posts/arts/week1014_share/</link><pubDate>Fri, 31 Mar 2023 15:45:36 +0000</pubDate><guid>/posts/arts/week1014_share/</guid><description>ARTS - Share 后端发展的逻辑 之前我们说了前端发展的逻辑, 今天我们探讨下后端发展的逻辑。
根据前端的发展路径，后端Servlet引擎-&amp;gt;后端Jsp等模板引擎&amp;ndash;&amp;gt; 后端MVC &amp;ndash;&amp;gt; 前后端分离 &amp;ndash;&amp;gt; React Vue
根据这个路径很容易看出，其实关于页面展示的部分慢慢脱离了服务端，最终形成前端框架和浏览器绑定，只从后端拿数据的局面， 看似服务端退化为只为前端提供数据的一部分了。
我们从前端发展历程找出了一个规律，技术会一步步往最适合它的领域发展，直到极致。前端和浏览器深度结合，那么后端会围绕着更好的提供数据发展。
如何更好的提高数据？我觉得是向更多功能、更快性能上发展。
后端天然存储大量的数据，各种结构的数据，需要做到的是当前端需要，又快又好的取出数据。所以各类大量计算的、定时任务类非实时性，都放在后台异步完成。最近学到一个“边缘计算”的概念，就是数据越来越多越来越大，后端会越来越重，实时性可能不是十分好，就可能出现在数据源头的一侧，就近提供最近的服务。 这样能提高系统的性能和缩短反应时间。
就像左耳听风描述的一样，未来可能是Java这种做业务处理，Go这种语言做各种中间层交互、调度类应用。</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="后端发展的逻辑">后端发展的逻辑</h2>
<p>之前我们说了<a href="https://github.com/wangweiomg/arts/blob/master/week13/share.md">前端发展的逻辑</a>, 今天我们探讨下后端发展的逻辑。</p>
<p>根据前端的发展路径，后端Servlet引擎-&gt;后端Jsp等模板引擎&ndash;&gt; 后端MVC &ndash;&gt; 前后端分离 &ndash;&gt; React Vue</p>
<p>根据这个路径很容易看出，其实关于页面展示的部分慢慢脱离了服务端，最终形成前端框架和浏览器绑定，只从后端拿数据的局面， 看似服务端退化为只为前端提供数据的一部分了。</p>
<p>我们从前端发展历程找出了一个规律，技术会一步步往最适合它的领域发展，直到极致。前端和浏览器深度结合，那么后端会围绕着更好的提供数据发展。</p>
<p>如何更好的提高数据？我觉得是向更多功能、更快性能上发展。</p>
<p>后端天然存储大量的数据，各种结构的数据，需要做到的是当前端需要，又快又好的取出数据。所以各类大量计算的、定时任务类非实时性，都放在后台异步完成。最近学到一个“边缘计算”的概念，就是数据越来越多越来越大，后端会越来越重，实时性可能不是十分好，就可能出现在数据源头的一侧，就近提供最近的服务。
这样能提高系统的性能和缩短反应时间。</p>
<p>就像左耳听风描述的一样，未来可能是Java这种做业务处理，Go这种语言做各种中间层交互、调度类应用。</p>
]]></content></item><item><title>Week1014_tip</title><link>/posts/arts/week1014_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:36 +0000</pubDate><guid>/posts/arts/week1014_tip/</guid><description>ARTS - Tip Java和JavaScript 中的split 我们都知道split是字符串分割的函数，平时使用频率并不低，本人在使用时候碰到一个情况：
事例 现在有一个字符串 “31+” ，需要获得前面的数字&amp;quot;31&amp;quot;，本人就想到了使用split(str)[0] 的方法，于是在javascript的写法就是：
let s = &amp;#34;31+&amp;#34;; let result = s.split(&amp;#39;+&amp;#39;)[0]; console.log(result); // output 31 这样写是没问题的， 然后在Java中这么写，情况如下：
String s = &amp;#34;31+&amp;#34;; String result = s.split(&amp;#34;+&amp;#34;)[0]; System.out.println(result); 原本以为会输出 “31”， 但是结果是编译错误：
java.util.regex.PatternSyntaxException: Dangling meta character &amp;#39;+&amp;#39; near index 0 + ^ 分析 String 的split 方法接受的是一个正则表达式，&amp;quot;+&amp;quot; 正好是正则的一个关键词，所以如果使用需要转义， 改成 “\+” 就没问题了。
但是，既然会有编译提示，本人为什么还是碰到了报错呢？因为我吧 “+” 写在了一个常量里，
private static String s = &amp;#34;+&amp;#34;; @org.junit.Test public void test5() { String s = &amp;#34;31+&amp;#34;; System.</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="java和javascript-中的split">Java和JavaScript 中的split</h2>
<p>我们都知道split是字符串分割的函数，平时使用频率并不低，本人在使用时候碰到一个情况：</p>
<h3 id="事例">事例</h3>
<p>现在有一个字符串 “31+” ，需要获得前面的数字&quot;31&quot;，本人就想到了使用split(str)[0] 的方法，于是在javascript的写法就是：</p>
<pre tabindex="0"><code>let s = &#34;31+&#34;;
let result = s.split(&#39;+&#39;)[0];
console.log(result); // output 31
</code></pre><p>这样写是没问题的， 然后在Java中这么写，情况如下：</p>
<pre tabindex="0"><code>String s = &#34;31+&#34;;
String result = s.split(&#34;+&#34;)[0];
System.out.println(result);
</code></pre><p>原本以为会输出 “31”， 但是结果是编译错误：</p>
<pre tabindex="0"><code>java.util.regex.PatternSyntaxException: Dangling meta character &#39;+&#39; near index 0
+
^
</code></pre><h3 id="分析">分析</h3>
<p>String 的split 方法接受的是一个正则表达式，&quot;+&quot; 正好是正则的一个关键词，所以如果使用需要转义， 改成 “\+” 就没问题了。</p>
<p>但是，既然会有编译提示，本人为什么还是碰到了报错呢？因为我吧 “+” 写在了一个常量里，</p>
<pre tabindex="0"><code>private static String s = &#34;+&#34;;
    
    @org.junit.Test
    public void test5() {

        String s = &#34;31+&#34;;
        System.out.println(s.split(s));
       

    }
</code></pre><p>这样是会骗过编译器， 在实际运行时就会报错了。 谨记。</p>
]]></content></item><item><title>Week1015_algorithm</title><link>/posts/arts/week1015_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:36 +0000</pubDate><guid>/posts/arts/week1015_algorithm/</guid><description>ARTS - Algorithm 补10.15号 746. 使用最小花费爬楼梯 数组的每个索引做为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 costi。
每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。
您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。
示例 1:
输入: cost = [10, 15, 20] 输出: 15 解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。 示例 2:
输入: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] 输出: 6 解释: 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6
分析 这道题和70. 爬楼梯 更进一步，是要选出最小花费的那条走法。
我的思考是，首先选择走一步，还是走两步，每次选择时候就找出最小花费的那个，也是就有了如下代码：
public static int minCostClimbingStairs(int[] cost) { int len = cost.length; if (len == 2) { return cost[0] &amp;lt;= cost[1] ?</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="补1015号">补10.15号</h2>
<h2 id="746-使用最小花费爬楼梯">746. 使用最小花费爬楼梯</h2>
<p>数组的每个索引做为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 cost<a href="%E7%B4%A2%E5%BC%95%E4%BB%8E0%E5%BC%80%E5%A7%8B">i</a>。</p>
<p>每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。</p>
<p>您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。</p>
<p>示例 1:</p>
<p>输入: cost = [10, 15, 20]
输出: 15
解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。
示例 2:</p>
<p>输入: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
输出: 6
解释: 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6</p>
<h3 id="分析">分析</h3>
<p>这道题和<a href="https://leetcode-cn.com/problems/climbing-stairs/description/">70. 爬楼梯</a> 更进一步，是要选出最小花费的那条走法。</p>
<p>我的思考是，首先选择走一步，还是走两步，每次选择时候就找出最小花费的那个，也是就有了如下代码：</p>
<pre tabindex="0"><code>
public static int minCostClimbingStairs(int[] cost) {

        int len = cost.length;

        if (len == 2) {
            return cost[0] &lt;= cost[1] ? cost[0] : cost[1];
        }

        return getResult(cost);


    }
    
    
    public static int getResult(int[] cost) {
            int res = 0;
            int len = cost.length;
            int idx = -1;

            while (idx + 2 &lt; len) {
                int r1 = cost[idx + 1];
                int r2 = cost[idx + 2];
                if (r1 &lt; r2) {
                    res += r1;
                    idx += 1;
                } else {
                    res += r2;
                    idx += 2;
                }

            }

            return res;

        }
</code></pre><p>这个代码相当于从 -1 位置出发，每次取出走一步或者走两步对应的花费，然后选择花费最小的，然后在此基础上决策下一步，贪心算法的思维。很明显这个解答是错误的，</p>
<p>比如对： 10, 15, 20， 这个算法首先选择是 10， 然后在15，20 中选择了15， 这样总花费是25， 其实我们知道最小花费是15.</p>
<p>为了解决这个问题，考虑到从后往前也算一遍，这样取得两次最小的那个，就是最小花费路径了。比如对 10，15，20， 就会选择15，然后结束。</p>
<p>于是代码就又变成了：</p>
<pre tabindex="0"><code>public static int minCostClimbingStairs(int[] cost) {

        int len = cost.length;

        if (len == 2) {
            return cost[0] &lt;= cost[1] ? cost[0] : cost[1];
        }

        int r1 = getResult1(cost);

        int r2 = getResult2(cost);

        return r1 &lt;= r2 ? r1 : r2;

    }

        public static int getResult2(int[] cost) {
            int res = 0;
            int idx = cost.length;


            while (idx - 2 &gt; -1) {
                int r1 = cost[idx - 1];
                int r2 = cost[idx - 2];
                if (r1 &lt; r2) {
                    res += r1;
                    idx -= 1;
                } else {
                    res += r2;
                    idx -= 2;
                }

            }

            return res;

        }

        public static int getResult1(int[] cost) {
            int res = 0;
            int len = cost.length;
            int idx = -1;

            while (idx + 2 &lt; len) {
                int r1 = cost[idx + 1];
                int r2 = cost[idx + 2];
                if (r1 &lt; r2) {
                    res += r1;
                    idx += 1;
                } else {
                    res += r2;
                    idx += 2;
                }

            }

            return res;

        }
</code></pre><p>在提交后，又没有通过，因为存在如下情况：</p>
<p>{0, 2, 3, 2}</p>
<p>从前往后， 会选择 0，2，2  花费 4
从后往前， 会选择 2， 2  花费 4
， 结果返回4。但是我们知道正确路径是 0， 3 ， 最小花费是3。</p>
<p>为什么这样的算法会出错？因为它只做到了针对当前路径的最小花费，没有考虑到全部路径的最小花费，所以算法是错的。再看了答案后，学到了正确的算法， 使用递归，直到找到最小花费。</p>
<h3 id="代码">代码</h3>
<p>代码如下：</p>
<pre tabindex="0"><code>public static int minCostClimbingStairs2(int[] cost) {

        int[] m = new int[cost.length + 1];
        return dp(cost, m, cost.length);

    }

    private static int dp(int[] cost, int[] m, int i) {
        if (i &lt;= 1) {
            return 0;
        }

        if (m[i] &gt; 0) {
            return m[i];
        }
        return m[i] = Math.min(dp(cost, m, i - 1) + cost[i - 1], dp(cost, m, i - 2) + cost[i - 2]);

    }
</code></pre><p>这个算法每步都会有两个选择，每步都去找到这步选择的最优解，当前的最优解又依赖于下一个的最优解，这样直到走完才能找到整体最优解，于是就得出了答案。</p>
]]></content></item><item><title>Week1015_review</title><link>/posts/arts/week1015_review/</link><pubDate>Fri, 31 Mar 2023 15:45:36 +0000</pubDate><guid>/posts/arts/week1015_review/</guid><description>ARTS - Review mysql性能优化 数据库性能优化最重要的事是选择正确的方式。你应该决定你的应用需要关系型或非关系型数据库。甚至里面的一个类型，你都会有好几个选择。在关系型数据库里，你可以选择Oracle， MySQL, SQL Server,和PostgreSQL. 另一方面，非关系型数据库例如MongoDB, Cassandra和CouchDB. 你可能希望我建议用读写性能快的非关系型数据库。然而，通过一些改进和调整，你可以把关系型数据推到超过它已知的限制。所以，在本文中，我将会介绍给你一些技巧来让你的MySQL数据库更快。如果你想知道为什么特别是MySQL, 那么答案是简单的，因为它免费，开源在PHP社区很流行Oracle 并没有广泛使用因为它很昂贵。其他的选择并没有像MySQL这么受欢迎。
MySQL服务配置 首先你应该知道根据你的操作系统配置文件是在哪里。在Linux系统，它在 “/etc/mysql/my.cnf”. 是时候拿上你的引擎对比InnoDB和MyISAM了。为了让选择更简单，你应该知道InnoDB成为默认引擎始于MySQL5.5 因为它支持“行级锁， 外键和事务” ，MyISAM不支持这里提到的任何在现实应用中很少使用的特性。
选择正确的引擎后，是时候设置一些在my.cnf 文件里的配置变量。
max_connection 变量: max_connection 变量代表你的应用允许的连接数量。默认是151个连接，然而你可以轻松增加这个数量如果你获得这样一个错误：“MySQL ERROR , Too many connections&amp;hellip;”
max_connections = 170
innodb_buffer_pool_size 变量： 为了加速，MySQL 将会缓存数据在你的服务器内存，这个变量告诉MySQL能用多少GB。这个变量在你的数据库里存储大的blobs时候非常有用。你可以设置为你服务器80%，90%内存大小。所以你的服务器内存是16GB， 你可以设置它为14GB.
innodb_buffer_pool_size = 14GB
innodb_io_capacity 变量： 这个变量告诉MySQL它可以用多少操作系统IO，它受制于你的硬盘。例如，一个单个7200 RPM 驱动限制200 I/O 一个企业级SSD硬盘是 50000 I/O. 你可以通过你操作系统的命令行轻松发现IO值和设置变量为可用IO的90% ， 这样mysql将会使用太多的IO操作。
innodb_io_capccity=21000
query_cache_limit 和 query_cache_size 变量 MySQL的缓存也在内存里，然而我们不能把它当做一个缓存系统，每次你的应用写入一个数据库表，MySQL将会重置查询缓存为全部表。所以，如果你的应用有一个高比例负载，MySQL 缓存将会完全无用，在那种情况下，最好把这两个参数设置为0来节省管理MySQL缓存的开销，另外你可以用一些像Redis这样的管理缓存。
query_cache_limit = 0 query_cache_size = 0 慢查询日志 慢查询日志将会展示哪个个查询花费比设置更长的时间，不需要猜测哪个查询慢。首先，你需要启用慢查询日志在你的配置文件。在Linux上，打开/etc/mysql/my.cnf 或者同样的在你系统里加入： </description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="mysql性能优化httpscodeburstiodatabase-performance-optimization-8d8407808b5b"><a href="https://codeburst.io/database-performance-optimization-8d8407808b5b">mysql性能优化</a></h2>
<p>数据库性能优化最重要的事是选择正确的方式。你应该决定你的应用需要关系型或非关系型数据库。甚至里面的一个类型，你都会有好几个选择。在关系型数据库里，你可以选择Oracle， MySQL, SQL Server,和PostgreSQL. 另一方面，非关系型数据库例如MongoDB, Cassandra和CouchDB. 你可能希望我建议用读写性能快的非关系型数据库。然而，通过一些改进和调整，你可以把关系型数据推到超过它已知的限制。所以，在本文中，我将会介绍给你一些技巧来让你的MySQL数据库更快。如果你想知道为什么特别是MySQL, 那么答案是简单的，因为它免费，开源在PHP社区很流行Oracle 并没有广泛使用因为它很昂贵。其他的选择并没有像MySQL这么受欢迎。</p>
<h3 id="mysql服务配置">MySQL服务配置</h3>
<p>首先你应该知道根据你的操作系统配置文件是在哪里。在Linux系统，它在 “/etc/mysql/my.cnf”.
是时候拿上你的引擎对比InnoDB和MyISAM了。为了让选择更简单，你应该知道InnoDB成为默认引擎始于MySQL5.5 因为它支持“行级锁， 外键和事务” ，MyISAM不支持这里提到的任何在现实应用中很少使用的特性。</p>
<p>选择正确的引擎后，是时候设置一些在my.cnf 文件里的配置变量。</p>
<h4 id="max_connection-变量"><code>max_connection</code> 变量:</h4>
<p><code>max_connection</code> 变量代表你的应用允许的连接数量。默认是151个连接，然而你可以轻松增加这个数量如果你获得这样一个错误：“MySQL ERROR , Too many connections&hellip;”</p>
<p><code>max_connections</code> = 170</p>
<h4 id="innodb_buffer_pool_size-变量"><code>innodb_buffer_pool_size</code> 变量：</h4>
<p>为了加速，MySQL 将会缓存数据在你的服务器内存，这个变量告诉MySQL能用多少GB。这个变量在你的数据库里存储大的blobs时候非常有用。你可以设置为你服务器80%，90%内存大小。所以你的服务器内存是16GB， 你可以设置它为14GB.</p>
<p><code>innodb_buffer_pool_size</code> = 14GB</p>
<h4 id="innodb_io_capacity-变量"><code>innodb_io_capacity</code> 变量：</h4>
<p>这个变量告诉MySQL它可以用多少操作系统IO，它受制于你的硬盘。例如，一个单个7200 RPM 驱动限制200 I/O 一个企业级SSD硬盘是 50000 I/O. 你可以通过你操作系统的命令行轻松发现IO值和设置变量为可用IO的90% ， 这样mysql将会使用太多的IO操作。</p>
<p><code>innodb_io_capccity=21000</code></p>
<h4 id="query_cache_limit-和-query_cache_size-变量"><code>query_cache_limit 和 query_cache_size </code>变量</h4>
<p>MySQL的缓存也在内存里，然而我们不能把它当做一个缓存系统，每次你的应用写入一个数据库表，MySQL将会重置查询缓存为全部表。所以，如果你的应用有一个高比例负载，MySQL 缓存将会完全无用，在那种情况下，最好把这两个参数设置为0来节省管理MySQL缓存的开销，另外你可以用一些像Redis这样的管理缓存。</p>
<pre tabindex="0"><code>query_cache_limit = 0
query_cache_size = 0
</code></pre><h4 id="慢查询日志">慢查询日志</h4>
<p>慢查询日志将会展示哪个个查询花费比设置更长的时间，不需要猜测哪个查询慢。首先，你需要启用慢查询日志在你的配置文件。在Linux上，打开/etc/mysql/my.cnf 或者同样的在你系统里加入：
</p>
<pre tabindex="0"><code>slow_query_log = 1
long_query_time = 1
</code></pre><p>好了，这两个选项将会开启慢查询日志将会记录任何超过1秒的查询。如果你更喜欢在表里查看日志而不是在文件里，你可以添加：</p>
<pre tabindex="0"><code>log_output = ‘TABLE’
</code></pre><p>然后你就可以在一个叫 “slow_log” 的表中查看日志，你将会看到所有关于花费超过1秒的执行查询的信息。信息包括执行查询的时间有多少行命中哪个用户执行的它。</p>
<h4 id="查询优化">查询优化</h4>
<p>你获得所有慢查询之后，你需要寻找一种方法优化他们让他们变得更快。所以你可以使用&quot;explain&quot;在查询之前来获得查询的详细信息。例如： “explain select * from users where active=1;”</p>
<p>explain 关键字能帮你定位哪个索引被你的查询命中和你想要查询的数据的行数。这个信息能告诉你是否需要创建更多的索引或者重新组织你的数据库表。</p>
<h4 id="非规范化和约束">非规范化和约束</h4>
<p>非规范化是通过添加冗余数据和分组来提高读性能的处理方式。例如，如果你有“product” 表和”category“表，每次查询你都需要获得每个商品的 category_name 。这个例子中，你可能会使用”join“ 来取得 ”category_name“。 然而这意味着一个用户每次都会打开一个商品页面，一个复杂的连接查询将会被执行。所以你可以考虑将”category_name“ 添加到product表。尽管有冗余数据，但是提升了读性能，还是值得的。</p>
<p>非规范方法可能导致 product表中的 category_name 过时，所以你需要定义一个外键”foreign key“ 约束，但是你需要了解一个 外键将会让写性能慢了一点，因为MySQL需要在写数据之前检查约束。所以它也常常是你的工作来决定怎样才是提高数据性能的最好选择。</p>
]]></content></item><item><title>Week1015_tip</title><link>/posts/arts/week1015_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:36 +0000</pubDate><guid>/posts/arts/week1015_tip/</guid><description>ARTS - Tip MySQL 大分页问题 问题 我们知道在进行MySQL分页时候最常用 limit offset, size, 但是当数据量很大，达到千万级别，直接分页会很慢，所以需要进行优化。
验证 我们进行测试：
mysql&amp;gt; select count(*) from table ; +----------+ | count(*) | +----------+ | 16079918 | +----------+ 1 row in set (2.38 sec) 表里有一千六百万挑数据， 我们分别进行 千、十万、百万、千万 级别进行 测试
mysql&amp;gt; select id, user_name, mobile from table limit 1000, 10; --- 10 rows in set (0.00 sec) mysql&amp;gt; select id, user_name, mobile from table limit 100000, 10; --- 10 rows in set (0.</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="mysql-大分页问题">MySQL 大分页问题</h2>
<h3 id="问题">问题</h3>
<p>我们知道在进行MySQL分页时候最常用 limit offset, size, 但是当数据量很大，达到千万级别，直接分页会很慢，所以需要进行优化。</p>
<h3 id="验证">验证</h3>
<p>我们进行测试：</p>
<pre tabindex="0"><code>mysql&gt; select count(*) from table ;
+----------+
| count(*) |
+----------+
| 16079918 |
+----------+
1 row in set (2.38 sec)
</code></pre><p>表里有一千六百万挑数据， 我们分别进行 千、十万、百万、千万 级别进行 测试</p>
<pre tabindex="0"><code>mysql&gt; select id, user_name, mobile from table limit 1000, 10;
---
10 rows in set (0.00 sec)


mysql&gt; select id, user_name, mobile from table limit 100000, 10;
---
10 rows in set (0.08 sec)


mysql&gt; select id, user_name, mobile from table limit 1000000, 10;
---
10 rows in set (0.67 sec)


mysql&gt; select id, user_name, mobile from table limit 10000000, 10;
---
10 rows in set (7.04 sec)
</code></pre><p>发现在百万以下，反应速度还可以忍受，上了千万，耗时7秒多，这已经很影响性能了，所以我们要进行优化。</p>
<h3 id="优化方案">优化方案</h3>
<p>尽量在大数量查询时候使用索引，先用覆盖索引查出ID，在进行下一步查找。</p>
<p>于是SQL改进为：</p>
<pre tabindex="0"><code>mysql&gt; select  user_name, mobile from table where id &gt;= (select id from table limit 10000000, 1) limit 10;
---
10 rows in set (1.53 sec)
</code></pre><p>也可以用内连接</p>
<pre tabindex="0"><code>mysql&gt; select  user_name, mobile from table a  join (select id from table limit 10000000, 10) b on a.id = b.id;
---
10 rows in set (1.64 sec)
</code></pre><p>这样把7秒的查询下降到2秒内，还是可以接受的。</p>
]]></content></item><item><title>Week1011_review</title><link>/posts/arts/week1011_review/</link><pubDate>Fri, 31 Mar 2023 15:45:35 +0000</pubDate><guid>/posts/arts/week1011_review/</guid><description>ARTS - Review 用python和beautifulSoup来抓取网站 因特网上的信息多到任何一个人穷尽一生都无法全部吸收的地步。你需要的不是操作这些信息，而是一个额外的方法来存储，组织、分析它。
你需要网页爬虫。
网页爬虫自动提取数据并且用一个你能轻松理解的格式展现。在本教程中，我们将聚焦它在金融市场的应用，但是网页爬虫可以用在很多场景下。
如果你是一个狂热的投资者，每天都接触很多价格会非常痛苦，尤其当你需要的信息需要通过好几个网页来查找。我们通过建立一个网页爬虫来自动从网上获取股票指数来让数据抽取变得简单。
起步 我们准备用Python作为我们的爬虫语言，附带使用一些简单强大的库， BeautifulSoup.
对于Mac 用户，Python已经在OS X 系统预装过了。打开终端 输入 python --version.你会看到你的python版本是 2.7.x 对于Windows用户，请安装python通过 Python 下一步就是用 pip 获取 BeautifulSoup 库，pip是一个Python的包管理工具.
在终端输入：
easy_install pip pip install BeautifulSoup4 注意 如果在命令行执行失败，尝试加 sudo在每行前面
基础 在我们调到代码之前，先理解下HTML的基础和一些爬虫规则。
HTML 标签 如果你早已理解HTML标签，感到无压力请跳过这段。
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt; First Scraping &amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt; Hello World &amp;lt;/p&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/html&amp;gt; 这是基础的HTML网页句式。每个&amp;lt;tag&amp;gt;提供一个网页里的块。
&amp;lt;!DOCTYPE html&amp;gt;: HTML文档必须以类型声明开始。 HTML文档包含在&amp;lt;html&amp;gt;和&amp;lt;/html&amp;gt;之间。 HTML的 meta 和 script 声明在&amp;lt;head&amp;gt;和&amp;lt;/head&amp;gt;之间 HTML文档显示的内容在&amp;lt;body&amp;gt;和 &amp;lt;/body&amp;gt;之间。 标题用 &amp;lt;h1&amp;gt;到&amp;lt;h6&amp;gt;标签定义。 段落用&amp;lt;p&amp;gt;标签定义。 其他有用的标签包括 &amp;lt;a&amp;gt; 用来做超链接， &amp;lt;table&amp;gt; 列表，&amp;lt;tr&amp;gt;列表行 &amp;lt;td&amp;gt;列表列。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="用python和beautifulsoup来抓取网站httpsmediumfreecodecamporghow-to-scrape-websites-with-python-and-beautifulsoup-5946935d93fe"><a href="https://medium.freecodecamp.org/how-to-scrape-websites-with-python-and-beautifulsoup-5946935d93fe">用python和beautifulSoup来抓取网站</a></h2>
<p>因特网上的信息多到任何一个人穷尽一生都无法全部吸收的地步。你需要的不是操作这些信息，而是一个额外的方法来存储，组织、分析它。</p>
<p>你需要网页爬虫。</p>
<p>网页爬虫自动提取数据并且用一个你能轻松理解的格式展现。在本教程中，我们将聚焦它在金融市场的应用，但是网页爬虫可以用在很多场景下。</p>
<p>如果你是一个狂热的投资者，每天都接触很多价格会非常痛苦，尤其当你需要的信息需要通过好几个网页来查找。我们通过建立一个网页爬虫来自动从网上获取股票指数来让数据抽取变得简单。</p>
<h3 id="起步">起步</h3>
<p>我们准备用Python作为我们的爬虫语言，附带使用一些简单强大的库， BeautifulSoup.</p>
<ul>
<li>对于Mac 用户，Python已经在OS X 系统预装过了。打开终端 输入 <code> python --version</code>.你会看到你的python版本是 2.7.x</li>
<li>对于Windows用户，请安装python通过 <a href="https://www.python.org/downloads/">Python</a></li>
</ul>
<p>下一步就是用 pip 获取 BeautifulSoup 库，pip是一个Python的包管理工具.</p>
<p>在终端输入：</p>
<pre tabindex="0"><code>
easy_install pip  
pip install BeautifulSoup4
</code></pre><p><strong>注意</strong> 如果在命令行执行失败，尝试加 <code>sudo</code>在每行前面</p>
<h3 id="基础">基础</h3>
<p>在我们调到代码之前，先理解下HTML的基础和一些爬虫规则。</p>
<h4 id="html-标签">HTML 标签</h4>
<p>如果你早已理解HTML标签，感到无压力请跳过这段。</p>
<pre tabindex="0"><code>

&lt;!DOCTYPE html&gt;  
&lt;html&gt;  
    &lt;head&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt; First Scraping &lt;/h1&gt;
        &lt;p&gt; Hello World &lt;/p&gt;
    &lt;body&gt;
&lt;/html&gt;
</code></pre><p>这是基础的HTML网页句式。每个<code>&lt;tag&gt;</code>提供一个网页里的块。</p>
<ol>
<li><code>&lt;!DOCTYPE html&gt;</code>: HTML文档必须以类型声明开始。</li>
<li>HTML文档包含在<code>&lt;html&gt;</code>和<code>&lt;/html&gt;</code>之间。</li>
<li>HTML的 meta 和 script 声明在<code>&lt;head&gt;</code>和<code>&lt;/head&gt;</code>之间</li>
<li>HTML文档显示的内容在<code>&lt;body&gt;</code>和 <code>&lt;/body&gt;</code>之间。</li>
<li>标题用 <code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>标签定义。</li>
<li>段落用<code>&lt;p&gt;</code>标签定义。</li>
</ol>
<p>其他有用的标签包括 <code>&lt;a&gt;</code> 用来做超链接， <code>&lt;table&gt;</code> 列表，<code>&lt;tr&gt;</code>列表行 <code>&lt;td&gt;</code>列表列。</p>
<p>HTML标签通常伴随id class 属性。id属性表示HTML标签的一个唯一id，它的值必须在HTML文档中唯一。
class 属性通常定义相同风格的HTML标签。我们可以利用这些id 和class 帮助我们定位我们想要的数据。</p>
<p>对于更多HTML 标签的信息，请关注 W3CSchools .</p>
<h4 id="爬虫规则">爬虫规则</h4>
<ol>
<li>你应该在爬虫前检查目标网站的术语和条件信息。注意阅读数据使用的法律声明。通常你抓取的数据不应该用来做商业应用。</li>
<li>不要太有侵略性的请求网站数据(也被称为垃圾邮件)， 这可能导致网站崩溃。确定你的程序行为合理(像一个人一样)。每秒请求一个网页是一个好的方式。</li>
<li>网站布局可能不时变化，所以确定再次访问网站，如有必要重写你的代码。</li>
</ol>
<h3 id="检索页面">检索页面</h3>
<p>我们从<a href="http://www.bloomberg.com/quote/SPX:IND">Bloomberg Quote</a>网站获取一个页面作为例子。
就像一些人跟随的股票市场，我们想从这个页面获得索引名称为(S&amp;P 500) 和他的价格。首先，右键点击打开你的浏览器检查网页。</p>
<p>用你的鼠标覆盖到价格上，你将会看到一个蓝块围绕它。如果你点击它，关联的HTML将会在浏览器控制台被选中。</p>
<p>我们能从结果中看到价格包含在几个HTML标签里，<code>&lt;div class=&quot;basic-quote&quot;&gt;</code> → <code>&lt;div class=&quot;price-container up&quot;&gt;</code> → <code>&lt;div class=&quot;price&quot;&gt;.</code></p>
<p>同样的，你可以覆盖点击名字“S&amp;P 500Index”， 他被包含在<code>&lt;div class=&quot;basic-quote&quot;&gt;</code> 和<code> &lt;h1 class=&quot;name&quot;&gt;.</code></p>
<p>现在我们在class标签的帮助下知道了我们数据的唯一位置。</p>
<h3 id="跳进代码里">跳进代码里</h3>
<p>现在我们知道我们需要的数据在哪，我们可以开始编码我们的网页爬虫。打开你的文本编辑器。</p>
<p>首先，导入我们将要使用的所有的库。</p>
<pre tabindex="0"><code>
# import libraries
import urllib2
from bs4 import BeautifulSoup
</code></pre><p>下一步，声明网页地址：</p>
<pre tabindex="0"><code>
# specify the url
quote_page = &#39;https://www.bloomberg.com/quote/SPX:IND&#39;
</code></pre><p>然后使用 python urllib2 获得声明的url的HTML页面。</p>
<pre tabindex="0"><code># query website
page = urllib2.urlopen(quote_page)
</code></pre><p>最后，解析页面到BeautifulSoup 格式，所一我们可以用BeautifulSoup.</p>
<pre tabindex="0"><code># parse html 
soup = BeautifulSoup(page, &#39;html.parser&#39;)
</code></pre><p>现在我们有一个 soup变量，包含页面的HTML。这里就是我们开始编程提取数据的起点。</p>
<p>记着我们唯一那层数据吗？BeautifulSoup可以帮助我们进入这一层用 find() 抽出。在这个样例，HTML 类 <code>name</code>是这个页面唯一的，我们可以简单的查找<code>&lt;div class=&quot;name&quot;&gt;</code></p>
<pre tabindex="0"><code>
# take out div of name and get its value
name_box = soup.find(&#39;h1&#39;, attrs={&#39;class&#39;: &#39;name&#39;})
</code></pre><p>我们获得标签后，可以通过text 来获内容</p>
<pre tabindex="0"><code>name = name_box.text.strip() # strip() is used to remove starting and trailing
print name
</code></pre><p>同样我们可以获取价格：</p>
<pre tabindex="0"><code># get the index price
price_box = soup.find(‘div’, attrs={‘class’:’price’})
price = price_box.text
print price
</code></pre><p>你运行程序，会获得当前页面的价格和 S&amp;P 500 索引。</p>
<h3 id="导出到excel-csv">导出到Excel CSV</h3>
<p>现在我们有了数据，是时候去保存他们了。表格的逗号分隔格式(CSV)是一个好选择。能够在Excel打开所以你能够非常容易查看和操作它。</p>
<p>但是首先，我们不得不导入Python csv模块和datetime模块来获得记录时间。在导入模块插入这些。</p>
<pre tabindex="0"><code>import csv
from datetime import datetime
</code></pre><p>你的代码底部，添加代码把数据写入csv文件</p>
<pre tabindex="0"><code>
# open a csv file with append, so old data will not be erased
with open(‘index.csv’, ‘a’) as csv_file:
 writer = csv.writer(csv_file)
 writer.writerow([name, price, datetime.now()])
</code></pre><p>如果你运行你的程序，你会输出一个 index.csv 的文件，你可以用Excel打开，看到一行数据。</p>
<p>所以如果你每天运行这程序，你将会轻松获得 S&amp;P 500 Index 的价格，不必再通过网站。</p>
<h3 id="深入高级用法">深入（高级用法）</h3>
<h4 id="多索引">多索引</h4>
<p>抓取一个索引对你来说是不够的，对吧？我们可以尝试同事抓取多个索引。</p>
<p>首先修改 quote_page 为一个url 数组。</p>
<pre tabindex="0"><code>quote_page = [‘http://www.bloomberg.com/quote/SPX:IND&#39;, ‘http://www.bloomberg.com/quote/CCMP:IND&#39;]
</code></pre><p>我们改变数据抽取代码为一个 for 循环， 依次处理URL储存到 data 元组中。</p>
<pre tabindex="0"><code># for loop
data = []
for pg in quote_page:
 # query the website and return the html to the variable ‘page’
 page = urllib2.urlopen(pg)
# parse the html using beautiful soap and store in variable `soup`
 soup = BeautifulSoup(page, ‘html.parser’)
# Take out the &lt;div&gt; of name and get its value
 name_box = soup.find(‘h1’, attrs={‘class’: ‘name’})
 name = name_box.text.strip() # strip() is used to remove starting and trailing
# get the index price
 price_box = soup.find(‘div’, attrs={‘class’:’price’})
 price = price_box.text
# save the data in tuple
 data.append((name, price))
</code></pre><p>也可以一行行的存：</p>
<pre tabindex="0"><code># open a csv file with append, so old data will not be erased
with open(‘index.csv’, ‘a’) as csv_file:
 writer = csv.writer(csv_file)
 # The for loop
 for name, price in data:
 writer.writerow([name, price, datetime.now()])
</code></pre><p>返回程序你可以同时获取两个索引。</p>
<h3 id="高级爬虫技术">高级爬虫技术</h3>
<p>BeautifulSoup 简单，适合小规模爬虫。但是如果你对大规模爬虫感兴趣，你可以考虑使用其他：</p>
<ol>
<li>Scrapy ,一个强大的python 爬虫框架</li>
<li>尝试集成你的代码用一些公共API 数据抓取效率比抓取网页高太多。例如，看看 <a href="https://developers.facebook.com/docs/graph-api">Facebook Graph API</a>, 能帮你获取facebook页面不展示的隐藏数据。</li>
<li>考虑使用MySQL的后端数据库来存储你的巨量数据。</li>
</ol>
<h3 id="采用dry方法">采用DRY方法</h3>
<p>DRY代表“Don&rsquo;t Repeat Yourself”(不要重复), 像<a href="https://www.businessinsider.com/programmer-automates-his-job-2015-11">这个人</a>一样让每天任务自动化。
一些有趣的其他项目如跟踪你的Facebook好友的在线时间(在他们许可下)， 或者抓取一个论坛的主题列表然后进行自然语言处理(是当前人工智能的一个火热主题)。</p>
<p>如果你有任何问题，请在下面自由评论。</p>
<hr>
<h3 id="参考">参考</h3>
<p><a href="http://www.gregreda.com/2013/03/03/web-scraping-101-with-python/">http://www.gregreda.com/2013/03/03/web-scraping-101-with-python/</a>
<a href="http://www.analyticsvidhya.com/blog/2015/10/beginner-guide-web-scraping-beautiful-soup-python/">http://www.analyticsvidhya.com/blog/2015/10/beginner-guide-web-scraping-beautiful-soup-python/</a></p>
]]></content></item><item><title>Week1011_share</title><link>/posts/arts/week1011_share/</link><pubDate>Fri, 31 Mar 2023 15:45:35 +0000</pubDate><guid>/posts/arts/week1011_share/</guid><description>ARTS - Share 关于 ThreadPoolExecutor 方式创建线程 我们知道在使用多线程时候，使用线程池技术能够减少系统在创建、销毁线程时的开销，提高性能. 一般用Executors的四个方法：
newCachedThreadPool newFixedThreadPool newScheduledThreadPool newSingleThreadExecutor Executors 方式 在创建固定数量的线程池时候是：
1. newFixedThreadPool() ExecutorService exec = Executors.newFixedThreadPool() 我们查看源码就是：
public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;()); } 返回创建了ThreadPoolExecutor
public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&amp;lt;Runnable&amp;gt; workQueue) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(), defaultHandler); } /** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters.</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="关于-threadpoolexecutor-方式创建线程">关于 ThreadPoolExecutor 方式创建线程</h2>
<p>我们知道在使用多线程时候，使用线程池技术能够减少系统在创建、销毁线程时的开销，提高性能.
一般用Executors的四个方法：</p>
<ul>
<li>newCachedThreadPool</li>
<li>newFixedThreadPool</li>
<li>newScheduledThreadPool</li>
<li>newSingleThreadExecutor</li>
</ul>
<h3 id="executors-方式">Executors 方式</h3>
<p>在创建固定数量的线程池时候是：</p>
<h4 id="1-newfixedthreadpool">1. newFixedThreadPool()</h4>
<pre tabindex="0"><code>ExecutorService exec = Executors.newFixedThreadPool()
</code></pre><p>我们查看源码就是：</p>
<pre tabindex="0"><code>public static ExecutorService newFixedThreadPool(int nThreads) {
        return new ThreadPoolExecutor(nThreads, nThreads,
                                      0L, TimeUnit.MILLISECONDS,
                                      new LinkedBlockingQueue&lt;Runnable&gt;());
    }
</code></pre><p>返回创建了ThreadPoolExecutor</p>
<pre tabindex="0"><code>public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue&lt;Runnable&gt; workQueue) {
        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
             Executors.defaultThreadFactory(), defaultHandler);
    }
    
    
     /**
     * Creates a new {@code ThreadPoolExecutor} with the given initial
     * parameters.
     *
     * @param corePoolSize the number of threads to keep in the pool, even
     *        if they are idle, unless {@code allowCoreThreadTimeOut} is set
     * @param maximumPoolSize the maximum number of threads to allow in the
     *        pool
     * @param keepAliveTime when the number of threads is greater than
     *        the core, this is the maximum time that excess idle threads
     *        will wait for new tasks before terminating.
     * @param unit the time unit for the {@code keepAliveTime} argument
     * @param workQueue the queue to use for holding tasks before they are
     *        executed.  This queue will hold only the {@code Runnable}
     *        tasks submitted by the {@code execute} method.
     * @param threadFactory the factory to use when the executor
     *        creates a new thread
     * @param handler the handler to use when execution is blocked
     *        because the thread bounds and queue capacities are reached
     * @throws IllegalArgumentException if one of the following holds:&lt;br&gt;
     *         {@code corePoolSize &lt; 0}&lt;br&gt;
     *         {@code keepAliveTime &lt; 0}&lt;br&gt;
     *         {@code maximumPoolSize &lt;= 0}&lt;br&gt;
     *         {@code maximumPoolSize &lt; corePoolSize}
     * @throws NullPointerException if {@code workQueue}
     *         or {@code threadFactory} or {@code handler} is null
     */
    public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue&lt;Runnable&gt; workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler) {
        if (corePoolSize &lt; 0 ||
            maximumPoolSize &lt;= 0 ||
            maximumPoolSize &lt; corePoolSize ||
            keepAliveTime &lt; 0)
            throw new IllegalArgumentException();
        if (workQueue == null || threadFactory == null || handler == null)
            throw new NullPointerException();
        this.acc = System.getSecurityManager() == null ?
                null :
                AccessController.getContext();
        this.corePoolSize = corePoolSize;
        this.maximumPoolSize = maximumPoolSize;
        this.workQueue = workQueue;
        this.keepAliveTime = unit.toNanos(keepAliveTime);
        this.threadFactory = threadFactory;
        this.handler = handler;
    }
</code></pre><p><strong>各个参数的意义：（面试经常问）</strong></p>
<ul>
<li>corePoolSize 核心线程数大小，线程池中保持存活的线程个数，当线程数 &lt; corePoolSize 时候会创建线程执行runnable</li>
<li>maximumPoolSize 线程池中允许的最大线程数，当线程数 &gt;= corePoolSize 时候，会把runnable放入workQueue中</li>
<li>keepAliveTime 保持存活时间，当线程数 &gt; 核心线程数时，空闲线程在被执行前保持最大的存活时间</li>
<li>unit  时间单位</li>
<li>workQueue 保存未执行任务的阻塞工作队列</li>
<li>threadFactory 线程创建工厂</li>
<li>handler 线程被阻塞的拒绝策略</li>
</ul>
<p>然后我们继续看其他的线程池</p>
<h4 id="2-newsinglethreadexecutor">2. newSingleThreadExecutor</h4>
<pre tabindex="0"><code>public static ExecutorService newSingleThreadExecutor() {
        return new FinalizableDelegatedExecutorService
            (new ThreadPoolExecutor(1, 1,
                                    0L, TimeUnit.MILLISECONDS,
                                    new LinkedBlockingQueue&lt;Runnable&gt;()));
    }
    
public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) {
        return new FinalizableDelegatedExecutorService
            (new ThreadPoolExecutor(1, 1,
                                    0L, TimeUnit.MILLISECONDS,
                                    new LinkedBlockingQueue&lt;Runnable&gt;(),
                                    threadFactory));
    }
</code></pre><p>也是使用了ThreadPoolExecutor 来构造, corePoolSize和maximusPoolSize 都是1， workQueue是LinkedBlockingQueue。 说明他是相当于newFixedThreadPool(1)</p>
<h4 id="3-newcachedtreadpool">3. newCachedTreadPool</h4>
<pre tabindex="0"><code>public static ExecutorService newCachedThreadPool() {
        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                      60L, TimeUnit.SECONDS,
                                      new SynchronousQueue&lt;Runnable&gt;());
    }
    
 public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue&lt;Runnable&gt; workQueue) {
        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
             Executors.defaultThreadFactory(), defaultHandler);
    }
</code></pre><p>这个也是用ThreadPoolExecutor 构造的， 核心线程是0， 最大线程数是Integer.MAX_VALUE， 保持存活60秒， 用的SynchronousQueue 队列。</p>
<h3 id="任务执行顺序">任务执行顺序</h3>
<ol>
<li>当线程数小于corePoolSize时，创建线程执行任务</li>
<li>当线程数大于等于corePoolSize并且workQueue没有满，放入workQueuq</li>
<li>线程数大于等于 corePoolSize并且 workQueue满了，新任务新建线程运行，线程总数要小于maximumPoolSize</li>
<li>当线程数总数等于maximumPoolSize	并且workQueue满了的时候执行handler的rejectedException.拒绝策略</li>
</ol>
<p>JDK提供的阻塞队列：</p>
<ol>
<li>ArrayBlockingQueue: 数组结构的有界阻塞队列</li>
<li>LinkedBlockingQueue: 链表结构的有界阻塞队列</li>
<li>PriorityBlockingQueue 支持优先级排序的无界阻塞队列</li>
<li>DelayQueue 使用优先级队列实现的无界阻塞队列</li>
<li>SynchronousQueue 一个不存储元素的阻塞队列</li>
<li>LinkedTransferQueue: 链表结构无界阻塞队列</li>
<li>LinkedBlockingDeque 链表结构双向阻塞队列</li>
</ol>
<h4 id="阻塞队列">阻塞队列</h4>
<p>阻塞队列是一个在队列基础上支持两个附加操作的队列</p>
<p>2个附加操作</p>
<ul>
<li>插入： 队列满时，队列会阻塞插入元素的线程，直到队列不满</li>
<li>移除： 队列空时，获取元素的线程会等待队列变为非空</li>
</ul>
<h4 id="阻塞队列应用场景">阻塞队列应用场景</h4>
<p>阻塞队列常用于生产者和消费者的场景，生产者是向队列里添加元素的线程，消费者是从队列里取元素的线程。简而言之，阻塞队列是生产者用来存放元素、消费者获取元素的容器。</p>
]]></content></item><item><title>Week1012_algorithm</title><link>/posts/arts/week1012_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:35 +0000</pubDate><guid>/posts/arts/week1012_algorithm/</guid><description>ARTS - Algorithm 67. 二进制求和 题目 给定两个二进制字符串，返回他们的和（用二进制表示）。
输入为非空字符串且只包含数字 1 和 0。
示例 1:
输入: a = &amp;ldquo;11&amp;rdquo;, b = &amp;ldquo;1&amp;rdquo; 输出: &amp;ldquo;100&amp;rdquo; 示例 2:
输入: a = &amp;ldquo;1010&amp;rdquo;, b = &amp;ldquo;1011&amp;rdquo; 输出: &amp;ldquo;10101&amp;rdquo;
分析 很容易想到，倒序遍历，取得两个数字相加，取得和后放入栈结构，最后取出，注意进位和最最高位进位问题
代码如下：
public static String addBinary(String a, String b) { if (a == null || a.length() == 0) { return b; } if (b == null || b.length() == 0) { return a; } int i = a.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="67-二进制求和httpsleetcode-cncomproblemsadd-binarydescription"><a href="https://leetcode-cn.com/problems/add-binary/description/">67. 二进制求和</a></h2>
<h3 id="题目">题目</h3>
<p>给定两个二进制字符串，返回他们的和（用二进制表示）。</p>
<p>输入为非空字符串且只包含数字 1 和 0。</p>
<p>示例 1:</p>
<p>输入: a = &ldquo;11&rdquo;, b = &ldquo;1&rdquo;
输出: &ldquo;100&rdquo;
示例 2:</p>
<p>输入: a = &ldquo;1010&rdquo;, b = &ldquo;1011&rdquo;
输出: &ldquo;10101&rdquo;</p>
<h3 id="分析">分析</h3>
<p>很容易想到，倒序遍历，取得两个数字相加，取得和后放入栈结构，最后取出，注意进位和最最高位进位问题</p>
<p>代码如下：</p>
<pre tabindex="0"><code>public static String addBinary(String a, String b) {

        if (a == null || a.length() == 0) {
            return b;
        }
        if (b == null || b.length() == 0) {
            return a;
        }

        int i = a.length() - 1;
        int j = b.length() - 1;


        Stack&lt;Integer&gt; stack = new Stack();
        int max = Math.max(i, j);


        boolean add = false;
        int x, y = 0;
        for (int k = max; k &gt;= 0; k--, i--, j--) {

            if (i &lt; 0) {
                x = 0;
            } else {

                x = Integer.parseInt(String.valueOf(a.charAt(i)));
            }

            if (j &lt; 0) {

                y = 0;
            } else {
                y = Integer.parseInt(String.valueOf(b.charAt(j)));

            }


            int r = x + y;

            if (add) {
                r++;
            }
            if (r &gt; 1) {
                add = true;
            } else {
                add = false;
            }
            stack.push(r % 2);

        }


        if (add) {
            stack.push(1);
        }

        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }

        return sb.toString();

    }
</code></pre>]]></content></item><item><title>Week1012_review</title><link>/posts/arts/week1012_review/</link><pubDate>Fri, 31 Mar 2023 15:45:35 +0000</pubDate><guid>/posts/arts/week1012_review/</guid><description>ARTS - Review 为什么当你觉得你像开发人员一样苦苦挣扎时候觉得学到的最多 我的开发技能突飞猛进的时候就是我在挣扎着学一些新东西并没有放弃的时候。这对我来说并不总是容易。我遇到了一些帮助我突破个人障碍的一些想法。
可能也适用你。
当你面对难的软件工程问题时候太容易陷入沮丧了。我时常会产生一种想放弃的感觉。在这种情境下我察觉到我的理性意识开始提出为什么我应该花费时间在熟悉的事情上或者抱怨问题超出我的能力的原因。
我知道我并不孤单。
我在Reddit看到人们讨论他们在他们的课程上遇到的一些挑战我也曾和很多专业工程师进行探讨他们遇到的让他们对自己掌握复杂概念的能力产生怀疑的情景，这些情景他们同事看起来“轻易掌握”。
虽然并不容易，能够持续面对这些挑战是非常有价值的。
经过一些年我开发了一些精神上的方法帮我度过那些艰难时刻。
这些就是一些帮到我的要点。
1. 一个人通过辛勤工作和努力能成为一个更好的开发者 天赋或辛勤工作成就一个伟大开发者？
你是怎么考虑的？一些人生来就是伟大开发者或者人们只要通过努力就一定能成为伟大开发者？
我相信得到这些问题的确切答案是不可能的。所以我开始选择相信，一个人通过自己努力成为一个好的开发者。
这是一个更有用的观念。它意味着如果我与学某些东西做斗争，如果我努力就会掌握。
它也意味着我不得不接受事情并不会经常容易或有趣。 努力工作是必须的。
2. 当你第一次尝试做某些事情，可能会困难，你不该期望瞬间转好 作为程序员，我有时候感到沮丧因为我跑进了我不懂的一些事但是我感觉我又应该理解它。
当我加入一家用git并有很多git专家的公司的时候。当我最终面对现实我的sql技能不好的时候。
在每个这些实例中，我都感到我应该掌握这些技能。毕竟，我不是一个拥有多年经验的高级全栈工程师吗？
现实情况是，尽管我是一个拥有很多经验的工程师，没有很多经验能改变我的现状 &amp;mdash; 我也是第一次了解到这些技能的细节， 并且最初我对它们一个都不在行。
尽管有时新事物简单，有时却并不简单。我发现了一个有用的观点当我第一次做某事时我不会期待我擅长它。
它就像这样&amp;hellip;
“我之前从没用过Java 编程， &amp;ndash; 我不期望我擅长它。这是我上这门课的原因。”
“我之前从没提交代码到git仓库里，我不期望我知道怎么做。这是我向同事求助的原因。”
这类想法拆除了我脑海中我不够好或我将走向失败的声音。我非常可能失败我至今可能做的都不够好。我不期望变好&amp;ndash; 这是我尝试的原因&amp;ndash;变得更好。
3. 在代码上工作并不总是有趣，尽管一项工作不有趣，但它让然被完成 有时我陷入软件开发工作并不有趣。
有时我Spark集群中一小片数据处理代码造成节点随机失败，或一些本应该工作良好的库并没工作不管我这怎么做。
这些瞬间是不有趣的，有时我真诚希望做些其他事而不是花费时间尝试找出问题。
问题是，我意识到编码并不是总是期望应该有趣有时我不得不卷起袖子干工作。
尽管这些情况是困难的 ，我发现它们通常有一线希望 &amp;ndash; 事实证明我们在困难中学到的是最多的。
4. 当你面对超级挑战你学到最多&amp;ndash;有时这样的失败是正常的 当我尝试做对我来说很难的事，我发现那是我真的学到东西的瞬间。
对来来说有数十个例子都能举出。
我第一次拿起一本编程书 &amp;mdash; 我一直在努力知道我突然学会了编程。
我尝试架构大型应用时候。我一直努力直到我学会架构框架和设计模式&amp;mdash;在那时我们抛出几个月时间在之前的代码上，开始用几个短周一周期用新的设计模式重构我们的 APP。
在我真正啃下来真正掌握SQL的时候。在那之后我拥有了在我们计算机数据科学组工作的技能。
我尝试用web-app技术搭建我们公司的数据处理基础设施时候。我持续努力知道我学会数据湖， ETL 传输，分布式计算解决方案。
清单持续中。
每个这些经历都有痛苦的时候。我走入死胡同丢掉很多代码。我尝试了很多，失败了很多。
但是那些压力教会我新的技能让我成为更好的开发者。如果没有那些压力我就不会学会很多。
这些天我选择相信当我感到压力，挑战和一些紧张，这是一件好事。我正在努力，所以我正在学习。
和&amp;hellip;
我学到欢迎这些紧张的感觉。这并不舒服但是我认为学习它是值得的。
思想是一个强大的工具 你可以选择你相信的你的信念能带给你磨砺通过挑战你必将面对自己成为一个更好的程序员的道路。
我希望这些思想框架(有些是你自己的)能帮你通过通过你的挑战。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="为什么当你觉得你像开发人员一样苦苦挣扎时候觉得学到的最多httpsmediumfreecodecamporgwhy-you-learn-the-most-when-you-feel-like-youre-struggling-as-a-developer-7513327c8ee4"><a href="https://medium.freecodecamp.org/why-you-learn-the-most-when-you-feel-like-youre-struggling-as-a-developer-7513327c8ee4">为什么当你觉得你像开发人员一样苦苦挣扎时候觉得学到的最多</a></h2>
<p>我的开发技能突飞猛进的时候就是我在挣扎着学一些新东西并没有放弃的时候。这对我来说并不总是容易。我遇到了一些帮助我突破个人障碍的一些想法。</p>
<p>可能也适用你。</p>
<p>当你面对难的软件工程问题时候太容易陷入沮丧了。我时常会产生一种想放弃的感觉。在这种情境下我察觉到我的理性意识开始提出为什么我应该花费时间在熟悉的事情上或者抱怨问题超出我的能力的原因。</p>
<p>我知道我并不孤单。</p>
<p>我在Reddit看到人们讨论他们在他们的课程上遇到的一些挑战我也曾和很多专业工程师进行探讨他们遇到的让他们对自己掌握复杂概念的能力产生怀疑的情景，这些情景他们同事看起来“轻易掌握”。</p>
<p>虽然并不容易，能够持续面对这些挑战是非常有价值的。</p>
<p>经过一些年我开发了一些精神上的方法帮我度过那些艰难时刻。</p>
<p>这些就是一些帮到我的要点。</p>
<h3 id="1-一个人通过辛勤工作和努力能成为一个更好的开发者">1. 一个人通过辛勤工作和努力能成为一个更好的开发者</h3>
<p>天赋或辛勤工作成就一个伟大开发者？</p>
<p>你是怎么考虑的？一些人生来就是伟大开发者或者人们只要通过努力就一定能成为伟大开发者？</p>
<p>我相信得到这些问题的确切答案是不可能的。所以我开始选择相信，一个人通过自己努力成为一个好的开发者。</p>
<p>这是一个更有用的观念。它意味着如果我与学某些东西做斗争，如果我努力就会掌握。</p>
<p>它也意味着我不得不接受事情并不会经常容易或有趣。 努力工作是必须的。</p>
<h3 id="2-当你第一次尝试做某些事情可能会困难你不该期望瞬间转好">2. 当你第一次尝试做某些事情，可能会困难，你不该期望瞬间转好</h3>
<p>作为程序员，我有时候感到沮丧因为我跑进了我不懂的一些事但是我感觉我又应该理解它。</p>
<p>当我加入一家用git并有很多git专家的公司的时候。当我最终面对现实我的sql技能不好的时候。</p>
<p>在每个这些实例中，我都感到我应该掌握这些技能。毕竟，我不是一个拥有多年经验的高级全栈工程师吗？</p>
<p>现实情况是，尽管我是一个拥有很多经验的工程师，没有很多经验能改变我的现状 &mdash; 我也是第一次了解到这些技能的细节， 并且最初我对它们一个都不在行。</p>
<p>尽管有时新事物简单，有时却并不简单。我发现了一个有用的观点当我第一次做某事时我不会期待我擅长它。</p>
<p>它就像这样&hellip;</p>
<p>“我之前从没用过Java 编程， &ndash; 我不期望我擅长它。这是我上这门课的原因。”</p>
<p>“我之前从没提交代码到git仓库里，我不期望我知道怎么做。这是我向同事求助的原因。”</p>
<p>这类想法拆除了我脑海中我不够好或我将走向失败的声音。我非常可能失败我至今可能做的都不够好。我不期望变好&ndash; 这是我尝试的原因&ndash;变得更好。</p>
<h3 id="3-在代码上工作并不总是有趣尽管一项工作不有趣但它让然被完成">3. 在代码上工作并不总是有趣，尽管一项工作不有趣，但它让然被完成</h3>
<p>有时我陷入软件开发工作并不有趣。</p>
<p>有时我Spark集群中一小片数据处理代码造成节点随机失败，或一些本应该工作良好的库并没工作不管我这怎么做。</p>
<p>这些瞬间是不有趣的，有时我真诚希望做些其他事而不是花费时间尝试找出问题。</p>
<p>问题是，我意识到编码并不是总是期望应该有趣有时我不得不卷起袖子干工作。</p>
<p>尽管这些情况是困难的 ，我发现它们通常有一线希望 &ndash; 事实证明我们在困难中学到的是最多的。</p>
<h3 id="4-当你面对超级挑战你学到最多--有时这样的失败是正常的">4. 当你面对超级挑战你学到最多&ndash;有时这样的失败是正常的</h3>
<p>当我尝试做对我来说很难的事，我发现那是我真的学到东西的瞬间。</p>
<p>对来来说有数十个例子都能举出。</p>
<p>我第一次拿起一本编程书 &mdash; 我一直在努力知道我突然学会了编程。</p>
<p>我尝试架构大型应用时候。我一直努力直到我学会架构框架和设计模式&mdash;在那时我们抛出几个月时间在之前的代码上，开始用几个短周一周期用新的设计模式重构我们的 APP。</p>
<p>在我真正啃下来真正掌握SQL的时候。在那之后我拥有了在我们计算机数据科学组工作的技能。</p>
<p>我尝试用web-app技术搭建我们公司的数据处理基础设施时候。我持续努力知道我学会数据湖， ETL 传输，分布式计算解决方案。</p>
<p>清单持续中。</p>
<p>每个这些经历都有痛苦的时候。我走入死胡同丢掉很多代码。我尝试了很多，失败了很多。</p>
<p>但是那些压力教会我新的技能让我成为更好的开发者。如果没有那些压力我就不会学会很多。</p>
<p>这些天我选择相信当我感到压力，挑战和一些紧张，这是一件好事。我正在努力，所以我正在学习。</p>
<p>和&hellip;</p>
<p>我学到欢迎这些紧张的感觉。这并不舒服但是我认为学习它是值得的。</p>
<h3 id="思想是一个强大的工具">思想是一个强大的工具</h3>
<p>你可以选择你相信的你的信念能带给你磨砺通过挑战你必将面对自己成为一个更好的程序员的道路。</p>
<p>我希望这些思想框架(有些是你自己的)能帮你通过通过你的挑战。</p>
<p>不要放弃，持续努力。</p>
<p>当你不懂某件事时，持续努力工作，持续尝试理解它。你将会惊讶于你的能力如果你尝试的话。</p>
<p>&hellip;</p>
<p>感谢花费时间阅读文章。</p>
]]></content></item><item><title>Week1012_share</title><link>/posts/arts/week1012_share/</link><pubDate>Fri, 31 Mar 2023 15:45:35 +0000</pubDate><guid>/posts/arts/week1012_share/</guid><description>ARTS - Share 由传统销货进货流程想到的 现状 一家代理商公司，为经销商提供各种商品货物，这种货物类目繁多，价格还时长变动，经销商来购货，大量的时间花在了解货物品相和价格上，同时代理商公司需要提供对接销售人员介绍，然后代理商对购货单进行结账开始发货。
设想 如果存在这样一个小程序，代理商把商品类目、价格、库存维护在系统里，购货单位可以自行挑选商品并下单结算，然后经销商直接发货，省去了中间对接的过程，对于争议部分可以再另行沟通，这样的话就节省了中间对接的时间和结算时间，还提高了准确性，整个过程变得简洁迅速还正确率高，历史订单清楚记录交易过程，那么对于整体来说是提高了效率，所以盈利应该是提高的。
分析 这就是一个商城系统，这也就是技术带来的效率提升和优势所在。
这基本解决了购货方和订货方的很大的不方便之处。对于购货方来说不需要等到销售方业务员来介绍产品和价格，自己浏览一目了然，对于销货方来说自己减少了营业员的投入，产品展示清晰结算方便，整个过程运行效率大大提升，只需要提供货物沟通等问题，节省了大量资源。
优化 然后可以继续优化这个系统，对于销货方第一可以优化库存，根据后台管理可以清晰的知道库存情况，然后以此来备货销货，还可以根据客户的历史进货情况，可以掌握客户的销售情况和卡准时间精准供应，这就产生了进销存系统和BI系统。对于购货方来说，可以查看自己的历史购货情况，自己这类产品的销售统计，也可以有针对的调整自己进货策略。
思考 这整个过程就是用互联网来改造传统经营的例子。企业上马互联网，可以提高企业效率、降低运营成本，然后根据精准分析统计，调正最优策略。这样的一个整体结构互联网扮演的是一个改造者，能根据互联网的优势：传播快、准确度高、互动互联性高， 来提高自己的生产力，在经济活动中建立更好的优势，总体造福人们。</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="由传统销货进货流程想到的">由传统销货进货流程想到的</h2>
<h3 id="现状">现状</h3>
<p>一家代理商公司，为经销商提供各种商品货物，这种货物类目繁多，价格还时长变动，经销商来购货，大量的时间花在了解货物品相和价格上，同时代理商公司需要提供对接销售人员介绍，然后代理商对购货单进行结账开始发货。</p>
<h3 id="设想">设想</h3>
<p>如果存在这样一个小程序，代理商把商品类目、价格、库存维护在系统里，购货单位可以自行挑选商品并下单结算，然后经销商直接发货，省去了中间对接的过程，对于争议部分可以再另行沟通，这样的话就节省了中间对接的时间和结算时间，还提高了准确性，整个过程变得简洁迅速还正确率高，历史订单清楚记录交易过程，那么对于整体来说是提高了效率，所以盈利应该是提高的。</p>
<h3 id="分析">分析</h3>
<p>这就是一个商城系统，这也就是技术带来的效率提升和优势所在。</p>
<p>这基本解决了购货方和订货方的很大的不方便之处。对于购货方来说不需要等到销售方业务员来介绍产品和价格，自己浏览一目了然，对于销货方来说自己减少了营业员的投入，产品展示清晰结算方便，整个过程运行效率大大提升，只需要提供货物沟通等问题，节省了大量资源。</p>
<h3 id="优化">优化</h3>
<p>然后可以继续优化这个系统，对于销货方第一可以优化库存，根据后台管理可以清晰的知道库存情况，然后以此来备货销货，还可以根据客户的历史进货情况，可以掌握客户的销售情况和卡准时间精准供应，这就产生了进销存系统和BI系统。对于购货方来说，可以查看自己的历史购货情况，自己这类产品的销售统计，也可以有针对的调整自己进货策略。</p>
<h3 id="思考">思考</h3>
<p>这整个过程就是用互联网来改造传统经营的例子。企业上马互联网，可以提高企业效率、降低运营成本，然后根据精准分析统计，调正最优策略。这样的一个整体结构互联网扮演的是一个改造者，能根据互联网的优势：传播快、准确度高、互动互联性高， 来提高自己的生产力，在经济活动中建立更好的优势，总体造福人们。</p>
]]></content></item><item><title>Week1012_tip</title><link>/posts/arts/week1012_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:35 +0000</pubDate><guid>/posts/arts/week1012_tip/</guid><description>ARTS - Tip 关于linux tomcat启动war工程的一个log4j报错 背景 在进行linux centos6.5部署war工程时候，报了一个错导致启动不起来，但是在开发时候在idea里完全没问题。
问题现象 启动时候catalina.out报错，如下：
09-Oct-2018 15:04:39.725 INFO [Abandoned connection cleanup thread] org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading Illegal access: this web application instance has been stopped already. Could not load []. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access. java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load []. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="关于linux-tomcat启动war工程的一个log4j报错">关于linux tomcat启动war工程的一个log4j报错</h2>
<h3 id="背景">背景</h3>
<p>在进行linux centos6.5部署war工程时候，报了一个错导致启动不起来，但是在开发时候在idea里完全没问题。</p>
<h3 id="问题现象">问题现象</h3>
<p>启动时候catalina.out报错，如下：</p>
<pre tabindex="0"><code>09-Oct-2018 15:04:39.725 INFO [Abandoned connection cleanup thread] org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading Illegal access: this web application instance has been stopped already. Could not load []. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
 java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load []. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
	at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading(WebappClassLoaderBase.java:1329)
	at org.apache.catalina.loader.WebappClassLoaderBase.getResource(WebappClassLoaderBase.java:1004)
	at com.mysql.jdbc.AbandonedConnectionCleanupThread.checkContextClassLoaders(AbandonedConnectionCleanupThread.java:90)
	at com.mysql.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:63)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
</code></pre><p>这里报错描述比较粗略，具体看localhost.xxxx.log 信息如下：</p>
<pre tabindex="0"><code>9-Oct-2018 15:04:31.958 SEVERE [localhost-startStop-1] org.apache.catalina.core.StandardContext.listenerStart Exception sending context initialized event to listener instance of class [ch.qos.logback.ext.spring.web.LogbackConfigListener]
 java.lang.ClassCastException: org.slf4j.impl.Log4jLoggerFactory cannot be cast to ch.qos.logback.classic.LoggerContext
        at ch.qos.logback.ext.spring.LogbackConfigurer.initLogging(LogbackConfigurer.java:72)
        at ch.qos.logback.ext.spring.web.WebLogbackConfigurer.initLogging(WebLogbackConfigurer.java:142)
        at ch.qos.logback.ext.spring.web.LogbackConfigListener.contextInitialized(LogbackConfigListener.java:54)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4792)
        
        
        
       
09-Oct-2018 15:04:36.021 SEVERE [localhost-startStop-1] org.apache.catalina.core.StandardContext.listenerStop Exception sending context destroyed event to listener instance of class [ch.qos.logback.ext.spring.web.LogbackConfigListener]
 java.lang.NullPointerException
        at ch.qos.logback.ext.spring.LogbackConfigurer.shutdownLogging(LogbackConfigurer.java:104)
        at ch.qos.logback.ext.spring.web.WebLogbackConfigurer.shutdownLogging(WebLogbackConfigurer.java:187)
        at ch.qos.logback.ext.spring.web.LogbackConfigListener.contextDestroyed(LogbackConfigListener.java:49
</code></pre><h3 id="分析">分析</h3>
<p>根据报错，初步定为是logback 初始化的问题，检查了配置和jar包后没法现问题，就直接看本地的idea里启动日志，里面有警告日志如下：</p>
<pre tabindex="0"><code>09-Oct-2018 15:10:12.019 信息 [RMI TCP Connection(2)-127.0.0.1] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/Users/wangwei/Workspace/credit-center/credit-webapp/target/credit/WEB-INF/lib/logback-classic-1.1.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/Users/wangwei/Workspace/credit-center/credit-webapp/target/credit/WEB-INF/lib/slf4j-log4j12-1.6.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]
</code></pre><p>注意是 multiple SLF4j bindings ， 说明slf4j 的实现有log4j 还有logback两者冲突了，怀疑是这个问题，就使用maven-war-plugin打包插件，排除掉log4j的jar文件，配置如下：</p>
<pre tabindex="0"><code>&lt;plugins&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.2.2&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;packagingExcludes&gt;WEB-INF/lib/*log4j*.jar&lt;/packagingExcludes&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
</code></pre><p>编译打包重新启动，发现问题结局，</p>
<p>猜测这个问题可能是Linux校验严格。</p>
]]></content></item><item><title>Week1013_algorithm</title><link>/posts/arts/week1013_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:35 +0000</pubDate><guid>/posts/arts/week1013_algorithm/</guid><description>ARTS - Algorithm 69. x 的平方根 题目 实现 int sqrt(int x) 函数。
计算并返回 x 的平方根，其中 x 是非负整数。
由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。
示例 1:
输入: 4 输出: 2 示例 2:
输入: 8 输出: 2 说明: 8 的平方根是 2.82842&amp;hellip;, 由于返回类型是整数，小数部分将被舍去。
分析 这个是求开方的结果，很容易想到按顺序i找，如果存在 i 就去找 i*i &amp;lt;= x &amp;amp;&amp;amp; （i+1）*(i+1)&amp;gt;x的情况，这个i就是要的结果，于是代码就如下了；
public int mySqrt(int x) { if (x &amp;lt;= 0) { return 0; } for (int i = 0; i &amp;lt; x; i++) { boolean flag = i*i &amp;lt;= x &amp;amp;&amp;amp; (i + 1) * (i + 1) &amp;gt; x; if (flag) { return i; } } return 0; } 然后提交后就失败了，因为存在 int 越界的情况，如果 i*i 大于 int最大值，那么就得不到正确的答案了，于是就把 int转为long型来处理：</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="69-x-的平方根httpsleetcode-cncomproblemssqrtxdescription"><a href="https://leetcode-cn.com/problems/sqrtx/description/">69. x 的平方根</a></h2>
<h3 id="题目">题目</h3>
<p>实现 int sqrt(int x) 函数。</p>
<p>计算并返回 x 的平方根，其中 x 是非负整数。</p>
<p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p>
<p>示例 1:</p>
<p>输入: 4
输出: 2
示例 2:</p>
<p>输入: 8
输出: 2
说明: 8 的平方根是 2.82842&hellip;,
由于返回类型是整数，小数部分将被舍去。</p>
<h3 id="分析">分析</h3>
<p>这个是求开方的结果，很容易想到按顺序i找，如果存在 i 就去找 <code>i*i &lt;= x &amp;&amp; （i+1）*(i+1)&gt;x</code>的情况，这个i就是要的结果，于是代码就如下了；</p>
<pre tabindex="0"><code>public int mySqrt(int x) {
        if (x &lt;= 0) {
            return 0;
        }

        for (int i = 0; i &lt; x; i++) {
            boolean flag = i*i &lt;= x &amp;&amp; (i + 1) * (i + 1) &gt; x;
            if (flag) {
                return i;
            }
        }

        return 0;

    }
</code></pre><p>然后提交后就失败了，因为存在 int 越界的情况，如果 i*i 大于 int最大值，那么就得不到正确的答案了，于是就把 int转为long型来处理：</p>
<pre tabindex="0"><code>boolean flag = (long) i * (long) i &lt;= x &amp;&amp; (long) (i + 1) * (long) (i + 1) &gt; x;
</code></pre><p>结果通过。</p>
<h3 id="优化">优化</h3>
<p>首先找出解决问题的方法，然后再考虑优化解决方法。我们发现，按顺序i +1 一个个试是比较低效的，应该优化下查找方法，使用二分查找， 而且最大值显然不可能是x, 连 x/2+1 都超不过，  所以我们可以在 0 和 x/2+1 间进行二分查找， 修改成如下方法：</p>
<pre tabindex="0"><code>public static int mySqrt(int x) {

        if (x &lt;= 0) {
            return 0;
        }
        int max = x / 2 + 1;
        int min = 0;
        while (min &lt;= max) {
            int mid = min + (max - min) / 2;
            long rs = (long) mid * (long) mid;
            if (rs == x) {
                return mid;
            }

            if (rs &lt; x) {
                min = mid + 1;
            } else {
                max = mid - 1;
            }
        }

        return max;

    }
</code></pre>]]></content></item><item><title>Week1013_tip</title><link>/posts/arts/week1013_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:35 +0000</pubDate><guid>/posts/arts/week1013_tip/</guid><description>ARTS - Tip MyBatis 的 if test=&amp;ldquo;param == &amp;lsquo;1&amp;rsquo;&amp;rdquo; 的问题 在项目开发中，发现了mybatis的一个问题，如下：
&amp;lt;if test=&amp;#34;first == 1&amp;#34;&amp;gt; limit 1 &amp;lt;/if&amp;gt; &amp;lt;if test=&amp;#34;second == &amp;#39;2&amp;#39;&amp;#34;&amp;gt; limit 2 &amp;lt;/if&amp;gt; 如果第一个没问题，第二个 ==&amp;lsquo;2&amp;rsquo; 就不会执行，不管参数是integer,int,还是String, 第二个都不会执行，程序也不会报错，查了资料，mybatis 使用了ognl表达式，&amp;lsquo;2&amp;rsquo;会被解析成char， 在Java中char 和String 相比较就会不等。
改进方法： 1. 增加toString &amp;lt;if test=&amp;#34;second == &amp;#39;2&amp;#39;.toString()&amp;#34;&amp;gt; limit 2 &amp;lt;/if&amp;gt; 2. 双引号 &amp;lt;if test=&amp;#39;second == &amp;#34;2&amp;#34;&amp;#39;&amp;gt; limit 2 &amp;lt;/if&amp;gt;</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="mybatis-的-if-testparam--1-的问题">MyBatis 的 if test=&ldquo;param == &lsquo;1&rsquo;&rdquo; 的问题</h2>
<p>在项目开发中，发现了mybatis的一个问题，如下：</p>
<pre tabindex="0"><code>		&lt;if test=&#34;first == 1&#34;&gt;
            limit 1
        &lt;/if&gt;
        &lt;if test=&#34;second == &#39;2&#39;&#34;&gt;
            limit 2
        &lt;/if&gt;
</code></pre><p>如果第一个没问题，第二个 ==&lsquo;2&rsquo; 就不会执行，不管参数是integer,int,还是String, 第二个都不会执行，程序也不会报错，查了资料，mybatis 使用了ognl表达式，&lsquo;2&rsquo;会被解析成char， 在Java中char 和String 相比较就会不等。</p>
<h3 id="改进方法">改进方法：</h3>
<h4 id="1-增加tostring">1. 增加toString</h4>
<pre tabindex="0"><code>	&lt;if test=&#34;second == &#39;2&#39;.toString()&#34;&gt;
            limit 2
        &lt;/if&gt;
</code></pre><h4 id="2-双引号">2. 双引号</h4>
<pre tabindex="0"><code>	&lt;if test=&#39;second == &#34;2&#34;&#39;&gt;
            limit 2
        &lt;/if&gt;
</code></pre>]]></content></item><item><title>Week1009_review</title><link>/posts/arts/week1009_review/</link><pubDate>Fri, 31 Mar 2023 15:45:34 +0000</pubDate><guid>/posts/arts/week1009_review/</guid><description>ARTS - Review 为什么Java小伙对Node.js和JavaScript如此兴奋？（下）
这是个循环。但不是用循环的写法，它不使用普通的循环结构。此外，错误和结果不会落入普通写法的循环里，但是会落入这种回调函数中。在ES2015/2016 特性加入Node.js之前，这是我们能做的极致了。
在Node.js 10.x 中等价于：
const fs = require(&amp;#39;fs&amp;#39;).promises; async function cat(filenmz) { for (var filenm of filenmz) { let data = await fs.readFile(filenm, &amp;#39;utf8&amp;#39;)l await new Promise((resolve, reject) =&amp;gt; { process.stdout.write(data, &amp;#39;utf8&amp;#39;, (err) =&amp;gt; { if (err) reject(err); else resolve(); }); }); } } cat(process.argv.slice(2)).catch(err =&amp;gt; { console.error(err.stack); }); 这个重写之前的例子，使用了async/await 方法。和异步结构相同，但是是用普通循环结构写的。错误和结果用自然方式报告。很容易读，容易编写，容易了解程序员的意图。
唯一的缺点是 process.stdout.write 不提供 承诺接口 所以不能在没有包装承诺时候不能清晰的使用异步方法。
回调大坑问题并没有通过复杂书写解决。相反，语言范式的改变既解决了问题，也解决了临时方案造成的过度冗长。用 async 方法我们代码变得更优美。
虽然开始是针对Node.js 的一个点，但是优秀的解决方案将他转回为Node.js和JavaScript的一个点。
通过明确定义的类型和接口来确定清晰性 我在作为Java布道者时候的一个观点是严格类型检查能书写大的应用程序。那时的标准是开发整体系统（没有微服务，没有Docker等）。因为Java 有严格类型检查，Java编译器通过编译过程帮你避免很多bug。相比下，JavaScript 松散类型。结论很明显，程序员不知道自己得到什么样的对象，所以怎么知道该怎么做。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<p><a href="https://blog.sourcerer.io/why-is-a-java-guy-so-excited-about-node-js-and-javascript-7cfc423efb44">为什么Java小伙对Node.js和JavaScript如此兴奋？（下）</a></p>
<p>这是个循环。但不是用循环的写法，它不使用普通的循环结构。此外，错误和结果不会落入普通写法的循环里，但是会落入这种回调函数中。在ES2015/2016 特性加入Node.js之前，这是我们能做的极致了。</p>
<p>在Node.js 10.x 中等价于：</p>
<pre tabindex="0"><code>
const fs = require(&#39;fs&#39;).promises;

async function cat(filenmz) {
	for (var filenm of filenmz) {
		let data = await fs.readFile(filenm, &#39;utf8&#39;)l
		await new Promise((resolve, reject) =&gt; {
			process.stdout.write(data, &#39;utf8&#39;, (err) =&gt; {
				if (err) reject(err);
				else resolve();
			});
		});
	}
}


cat(process.argv.slice(2)).catch(err =&gt; {
	console.error(err.stack);
});
</code></pre><p>这个重写之前的例子，使用了async/await 方法。和异步结构相同，但是是用普通循环结构写的。错误和结果用自然方式报告。很容易读，容易编写，容易了解程序员的意图。</p>
<p>唯一的缺点是 <code>process.stdout.write</code> 不提供 承诺接口 所以不能在没有包装承诺时候不能清晰的使用异步方法。</p>
<p>回调大坑问题并没有通过复杂书写解决。相反，语言范式的改变既解决了问题，也解决了临时方案造成的过度冗长。用 async 方法我们代码变得更优美。</p>
<p>虽然开始是针对Node.js 的一个点，但是优秀的解决方案将他转回为Node.js和JavaScript的一个点。</p>
<h3 id="通过明确定义的类型和接口来确定清晰性">通过明确定义的类型和接口来确定清晰性</h3>
<p>我在作为Java布道者时候的一个观点是严格类型检查能书写大的应用程序。那时的标准是开发整体系统（没有微服务，没有Docker等）。因为Java 有严格类型检查，Java编译器通过编译过程帮你避免很多bug。相比下，JavaScript 松散类型。结论很明显，程序员不知道自己得到什么样的对象，所以怎么知道该怎么做。</p>
<p>Java 的严格类型另一面更模板化。程序员不是在不断的类型转化就是在努力确定每步骤正确。编码者花费时间编码，及其精确，使用模板，希望早发现捕捉修复错误来节省时间。</p>
<p>问题如此庞大必须使用一个大型的复杂IDE。一个简单的程序员编辑器是不够的。唯一的方式让Java程序员保持理智的是下拉显示一个对象的可用属性，描述出方法的参数，帮助构造类，帮助重构，所有这些在开发工具Eclipse， NetBean， Intellij 都提供。</p>
<p>别人我从maven开始，多么可怕的工具。</p>
<p>JavaScript, 变量类型没有声明，类型转换通常不用。因此代码干净阅读，但是有未捕获的错误风险。</p>
<p>无论这点同意Java或者反对他， 取决于你看待的角度。我的观点十年前是这些限制对获得更多精确性是有价值的。我今天的观点是这让产生大量工作，用JavaScript方法来处理会很简单。</p>
<h3 id="通过小的简单的测试模块来排除bug">通过小的简单的测试模块来排除bug</h3>
<p>Node.js 鼓励程序员把程序分成小单元模块。看起来是个小事，但是一定程度上让问题定位方便。</p>
<p>一个模块是：</p>
<ul>
<li>自包含 &ndash; 意味着，它的包让代码在一个单元里</li>
<li>强范围 &ndash; 模块中代码很安全不会被其他地方的代码侵入</li>
<li>明确的导出 &ndash; 默认情况模块中的代码和数据不是被导出的，需要选择需要导出方法和数据给别的使用</li>
<li>明确的导入 &ndash; 模块声明他们依赖于哪些模块</li>
<li>潜在的独立 &ndash; 很容易就公开发布到npm仓库，或者私有发布模块在其他地方，让应用分享很简单</li>
<li>容易阅读 &ndash; 读少量的代码就能容易理解意图。</li>
<li>容易测试 &ndash; 如果实现正确，小模块很容易被单元测试</li>
</ul>
<p>所有这些特点共同让Node.js模块容易测试有一个好的定义范围。</p>
<p>忧虑的是JavaScript缺乏严格类型检查代码可能容易导致错误。在一个小的有清晰边界模块中，受影响的代码范围很可能限制在那个模块中。这模块的边界保证了大部分的关注点很小，安全隐蔽。</p>
<p>另一个弱类型解决方案是增加测试。</p>
<p>你必须花费一些生产力去增加测试。你的测试方案必须覆盖可能编译出错的地方。你肯定要测试你的代码不是吗？</p>
<p>对于那些想要JavaScript静态类型检查的人，可以看TypeScript。 我们用过这门语言，但是听说过它的大名。它和JavaScript兼容，增加了有用的类型检查和其他特性。</p>
<p>以下是转向Node.js和JavaScript的有点：</p>
<h3 id="包管理">包管理</h3>
<p>我愤怒与Maven的包管理，几乎不能直接写出你要的。可能别人也不喜欢Maven， 或者轻视它，没有中间状态。</p>
<p>Java生态系统一个问题是没有一个有凝聚力的包管理系统。Maven包管理系统存在工作的很好，可能用Gradle也不错。但是并没有像Node.js一样的有用、好用、强大的包管理系统。</p>
<p>在Node.js世界有两个天才的包管理系统一起工作。第一个npm,和npm仓库，这类工具的独家。</p>
<p>用npm我们用很好的概要来表述包依赖。一个依赖可以被详细描述通过几个松散的分级方式，如&quot;*&ldquo;代表最近的版本。Node.js社区发布成千上万个包到npm仓库。使用外部包和npm仓库包是一样简单的。</p>
<p>npm包仓库如此好用不仅服务Node.js，也服务前端工程师。之前的工具像Bower包管理工具过时了。Bower已经淘汰了，现在很多人通过npm 仓库来找到他们需要的所有JavaScrpt库。很多前端工程师工具链，像Vue.js CLI 和 Webpack, 都是用Node.js写的。</p>
<p>另一个Node.js包管理系统是 yarn, 和npm仓库比较，他使用相同的配置文件，主要的又是是yarn工具比较快。</p>
<p>npm仓库，无论用npm或者yarn, 都是使得Node.js更简单有趣易用的重要组成部分。</p>
<h3 id="表现">表现</h3>
<p>一段时间后Java和JavaScript都被指责变得慢了。</p>
<p>两个都是从国一个虚拟机把源代码转成字节码执行。虚拟机将经常深度编译字节码为本地代码，通过使用一些列优化技术。</p>
<p>Java和JavaScript有巨大激励去运行更快。在Java和Node.js激励快速的服务端代码。在浏览器JavaScript激励是比客户端程序员表现好 &ndash; 看下一章富网络应用的。</p>
<p>Sun/Oracle Jdk使用的HotSpot, 是一个有多个字节码编译策略的超级虚拟机。名字来自于识别出频繁执行的代码优化更多的代码执行。HotSpot 高优化生产出非常快速的代码。</p>
<p>在JavaScript，我们过去常想象，我们怎么样才能让运行在浏览器的JavaScript实现各类复杂的应用？一个办公文档处理套件在浏览器基于JavaScript处理是不可能的？今天，当然，在蛋糕证明了能吃。我用Google Docs 来编写这个文章，表现很不错。 浏览器端JavaScript 每年进展神速。</p>
<p>Node.js直接受益于刚开始使用谷歌的V8引擎。</p>
<p>一个例子是PeterMarshall，V8增强主工程师， 特别分配一些使用Node.js平台的工作。他描述为什么V8选择从衢州虚拟机到涡轮发动机虚拟机。</p>
<p>机器学习是一个涉及大量使用R、Python进行数据科学计算的数学计算领域。一些领域包括机器学习都基于快速数字计算机。很多原因，JavaScript 弱于此，但是开发一个JavaScript数值计算标准库正在进行中。</p>
<p>另一个视频演示在JavaScript里使用TensorFlow， 使用一个新库：TensorFlow.js。 有和python相同的TensorFlow API， 能够导入预先训练的模型。能够用来分析视频识别训练的对象，同时完全运行在浏览器。</p>
<p>另一场讨论中，IBM的Chris Bailey 讨论了Node.js的性能和可伸缩性问题，特别是在Docker和Kubernetes部署方面。他用一些指标显示Node.js比SpringBoot在吞吐量上有更注目的表现，在应用启动时间和内存占用上。更深的，Node.js 随着V8的改进，性能释放更显著改善。</p>
<p>在那个视频里，Bailey说不应该用Node.js跑计算代码。理解理由是很重要的。因为单线程模型长时间跑计算将会阻塞事件执行。在我的Node.js Web开发书里，我讲了这个问题，并展示了三个处理方法：</p>
<ul>
<li>算法重构 &mdash;  识别出算法的慢的部分，重构变得更快速</li>
<li>通过事件分发分割大块的计算，所以Node.js 就会定期返回执行线程</li>
<li>把计算移到后台计算</li>
</ul>
<p>如果JavaScript提高不够显著，仍有两种方法直接集成本地方法到Node.js。最直接的方法是一个本地方法的Node.js模块。Node.js工具链包含  node-gyp 用来处理连接到本地代码模块。这个视频展示一个Rust 库集成到Node.js</p>
<!-- raw HTML omitted -->
<p>WebAssembly 提供了把其他语言编译到JavaScript子集合的能力让运行更快。
WebAssembly是一个便携式规范对那些运行在JavaScript引擎的代码。这个视频是一个很好的例子，示范了使用WebAssembly 在Node.js运行代码。</p>
<h3 id="富网络引用ria">富网络引用（RIA）</h3>
<p>十年前软件工业忙于用JavaScript快速引擎实现富网络应用，但是桌面应用觉得无关痛痒。</p>
<p>故事真正开始于超过20年前。Sun和网景公司发布Java Applet 在Netscapte导航条。JavaScript那时作为Java Applets的脚本语言。期望Java Servlet在服务端，Java Applet统治客户端，让我们两端都使用相同的编程语言。但是因为各种原因没有实现。</p>
<p>十年前 JavaScript 开始变得很强大足以自行实现复杂应用。此后RIA 被期望取代Java作为客户端平台。</p>
<p>今天我们看RIA理念的实现。在服务器上用Node.js，JavaScript在客户端，我们进入了天堂。</p>
<p>一些例子：</p>
<ul>
<li>Google Docs （用来写本篇文章的地方）像一个典型的办公软件套件，但是运行在浏览器。</li>
<li>强大的框架像 React,Angular, Vue.js，使用Html/CSS作为样式，快速开发基于浏览器的应用。</li>
<li>Electron 是Node.js和Chromium Web浏览器支持的跨平台桌面应用开发的混合物。它非常优秀，几个受欢迎的应用像Visual Studio Code ， Atom， GitKraken 和Postman都是用Electron开发的，他们都是非常优秀。</li>
<li>因为Electron/NW.js 使用浏览器引擎，框架类像React/Angular/Vue 被用来做桌面应用。例子看这里 <a href="https://blog.sourcerer.io/creating-a-markdown-editor-previewer-in-electron-and-vue-js-32a084e7b8fe">https://blog.sourcerer.io/creating-a-markdown-editor-previewer-in-electron-and-vue-js-32a084e7b8fe</a></li>
</ul>
<p>Java 作为桌面应用平台并没有因为JavaScript的RIA而消亡。它可能因为Sun 微系统对客户端技术的轻视而消亡。Sun 聚焦于企业客户要求更快的服务端表现。我在哪里看到了第一现场。真正杀死Applets 是一个发现于很多年前的在Java插件和WEb启动时的一个糟糕的安全问题。那个Bug造成世界范围的警告，使用Java applets 和Web启动的应用能轻易停止。</p>
<p>其他类型的Java桌面应用仍然被开发中，在NetBeans和Eclipse IDE的竞赛中仍在活跃。但是在这一领域工作是不景气的，外部的很多开发者工具很少基于Java开发应用。</p>
<p>JavaFX 是例外。</p>
<p>JavaFX 是10年前，作为Sun对IPhone的解决方案。被用来支持开发基于Java 的在手机端的富图形界面应用，能够单独支持开发业务外的Flash IOS应用。但是没有实现。JavaFX仍在使用，但没大火。</p>
<p>随着React， Vue.js 和相似框架出现，越来越令人兴奋。</p>
<p>在这个方面，JavaScript 和Node.js 赢了。</p>
<h3 id="总结">总结</h3>
<p>今天服务端代码有很多选择。不再限制在 “ P 语言” （Perl, PHP, Python）和Java， 因为还有Node.js， Ruby, Haskell, Go, Rust, 等等。所以享受选择困难症吧。</p>
<p>所以在这里为什么Java小伙转向Node.js, 就很清楚了，我用Node.js 写代码感到更自由。Java变得笨重，但是Node.js并没有这类问题。如果我被雇佣再次写Java，我也会做，因为是我需要付出的代价。</p>
<p>每个应用都有自己真正的需求。所以因为一个人喜欢Node.js就一直使用它也不对。必须有专门的理由选择一门语言或框架而不是另一个。例如，我最近做的工作涉及XBRL文档。XBRL库最好的实现是用Python，所以需要学习Python来继续进行那个项目。诚实的评估你的需要然后做出对应选择。</p>
]]></content></item><item><title>Week1009_share</title><link>/posts/arts/week1009_share/</link><pubDate>Fri, 31 Mar 2023 15:45:34 +0000</pubDate><guid>/posts/arts/week1009_share/</guid><description>ARTS - Share 关于ES6箭头函数的this 源于忽然兴起尝试微信小程序开发，在一个文本预上加了一个点击事件，尝试获取微信收货地址， 首先是在模板文件文本域加点击事件：
&amp;lt;view class=&amp;#34;usermotto&amp;#34; bindtap=&amp;#39;clickMe&amp;#39;&amp;gt; &amp;lt;text class=&amp;#34;user-motto&amp;#34;&amp;gt;{{motto}}&amp;lt;/text&amp;gt; &amp;lt;/view&amp;gt; 然后在index.js里实现 clickMe 方法：
clickMe: function () { wx.chooseAddress({ success: function(res) { this.setData({ motto: res.detailInfo }) } }) }, 发现控制台报错：
thirdScriptError Cannot read property &amp;#39;setData&amp;#39; of null;at pages/index/index clickMe function;at api openAddress success callback function TypeError: Cannot read property &amp;#39;setData&amp;#39; of null at success (http://127.0.0.1:28587/appservice/pages/index/index.js:17:13) 、 根据报错说明，```&amp;lsquo;setData&amp;rsquo; of null````， 调用 setData方法是null? this 是null？ 为了验证，就打出this
clickMe: function () { console.log(1, this) wx.</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="关于es6箭头函数的this">关于ES6箭头函数的this</h2>
<p>源于忽然兴起尝试微信小程序开发，在一个文本预上加了一个点击事件，尝试获取微信收货地址，
首先是在模板文件文本域加点击事件：</p>
<pre tabindex="0"><code>
&lt;view class=&#34;usermotto&#34; bindtap=&#39;clickMe&#39;&gt;
    &lt;text class=&#34;user-motto&#34;&gt;{{motto}}&lt;/text&gt;
  &lt;/view&gt;
</code></pre><p>然后在index.js里实现 clickMe 方法：</p>
<pre tabindex="0"><code>clickMe: function () {
    wx.chooseAddress({
      success: function(res) {
        this.setData({
          motto: res.detailInfo
        })
      }
    })
   
  },
</code></pre><p>发现控制台报错：</p>
<pre tabindex="0"><code>
thirdScriptError
Cannot read property &#39;setData&#39; of null;at pages/index/index clickMe function;at api openAddress success callback function
TypeError: Cannot read property &#39;setData&#39; of null
    at success (http://127.0.0.1:28587/appservice/pages/index/index.js:17:13)
    、    
</code></pre><p>根据报错说明，```&lsquo;setData&rsquo; of null````， 调用 setData方法是null? this 是null？ 为了验证，就打出this</p>
<pre tabindex="0"><code>
clickMe: function () {
    console.log(1, this)
    wx.chooseAddress({
      success: function(res) {
        console.log(2, this)
        this.setData({
          motto: res.detailInfo
        })
      }
    })
   
  },
  
  
1 e {data: {…}, __viewData__: {…}, __displayReporter: e, …}
index.js? [sm]:16 

2 null
</code></pre><p>可以看出第一个this不是空，第二个是空，于是就修改了代码, 在clickMe方法定义常量self = this, 然后在回调方法使用， 结果是正常的：</p>
<pre tabindex="0"><code>
clickMe: function () {
    console.log(1, this)
    const self = this
    wx.chooseAddress({
      success: function(res) {
        console.log(2, this)
        self.setData({
          motto: res.detailInfo
        })
      }
    })
   
  },
</code></pre><p>之后参考其他实现，发现是用箭头函数实现这一块，结果居然与上面一样，于是就猜测可能箭头函数实现this和匿名函数实现的this不一样：</p>
<pre tabindex="0"><code>
clickMe: function () {
    
    wx.chooseAddress({
      success: res =&gt; {
        this.setData({
          motto: res.detailInfo
        })
      }
    })
   
  },
</code></pre><p>于是查资料：
<a href="https://kekek.cc/post/arrow-this.html">https://kekek.cc/post/arrow-this.html</a> [1]</p>
<h3 id="es6箭头函数中的this">ES6箭头函数中的this</h3>
<p>ES6 开始引入了箭头函数，让代码看起来更简洁了。但是箭头函数传统函数不仅仅是写法上的不同，在this和arguments的处理方式也有着很大的区别。</p>
<h3 id="this是局部的">this是局部的</h3>
<p>在箭头函数中this是局部的，它跟其它局部变量的常规处理是一致的。看下面的例子：</p>
<pre tabindex="0"><code>
function outer (age) {
    (() =&gt; {
        (() =&gt; {
            console.log(this.name, age);
        })();
    })();
}

outer.bind({name: &#39;小明&#39;})(10);

// =&gt; 小明 10
</code></pre><p>这例子中我们函数共有三层嵌套，里面是两层箭头函数，这里我们在最里层箭头函数内部引用了this和一个局部变量age。对局局部变量age的查找规则我们很清楚，先在当前作用域查找，如果没有就去父作用域查找，一直到最顶层（window、global）。在箭头函数中对this的查找规则和age是一样的，箭头函数本身并没有一个自己的this，它要一直往上层找，直到找到this为止。</p>
<p>同样，对于arguments的处理也是一样的。需要注意的一点是箭头函数本身是没有arguments变量的。[2]</p>
<hr>
<p>[1] ES6箭头函数中的this <a href="https://kekek.cc/post/arrow-this.html">https://kekek.cc/post/arrow-this.html</a></p>
<p>[2] ES6 箭头函数中的 this？你可能想多了（翻译）
<a href="https://www.cnblogs.com/vajoy/p/4902935.html">https://www.cnblogs.com/vajoy/p/4902935.html</a></p>
]]></content></item><item><title>Week1009_tip</title><link>/posts/arts/week1009_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:34 +0000</pubDate><guid>/posts/arts/week1009_tip/</guid><description>ARTS - Tip 关于MyBatis 报错的一个反思 今天开发一个功能，和别的系统功能重复，就直接复制了别的系统的Mapper，写好业务逻辑后测试，发现系统报异常：
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named &amp;#39;id&amp;#39; in &amp;#39;class java.lang.String&amp;#39; 意思是，String类里没有 名字为 id 的属性的get 方法。我有点奇怪，我调用Mapper的是一个 insert 方法，传的是业务对象，为什么会报String的id问题？有点奇怪，于是就进行了谷歌、百度大法，几乎所有的帖子都是如下：
传入的参数是String， parameterType=&amp;ldquo;String&amp;rdquo;，解决方法是：
解决方法一:把#{xxx}修改为 #{_parameter} 即可
解决方法二:可以在方法中提前定义:@Param(value=&amp;ldquo;xxx&amp;rdquo;) String xxx
虽然报错和我的一样，但是明显不是我这样的问题情形。于是又检查了一遍代码，发现了问题所在：
INSERT INTO sys_log( id, type, title, create_by, create_date ) VALUES ( #{id}, #{type}, #{title}, #{createBy.id}, #{createDate} ) 居然是 #{createBy.id} 。 检查了下原来代码并没有CreateBy 对象且有属性是id, 所以觉得是原系统本来就有误。 处理就很简单了，删了id即可，代码正常运行。
教训 参考别的系统可以，最好不要直接复制。 就算复制也需要批判的使用，毕竟不是久经考验的公共库 不要偷懒，多自己实现</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h3 id="关于mybatis-报错的一个反思">关于MyBatis 报错的一个反思</h3>
<p>今天开发一个功能，和别的系统功能重复，就直接复制了别的系统的Mapper，写好业务逻辑后测试，发现系统报异常：</p>
<pre tabindex="0"><code>
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named &#39;id&#39; in &#39;class java.lang.String&#39;
</code></pre><p>意思是，String类里没有 名字为 id 的属性的get 方法。我有点奇怪，我调用Mapper的是一个 insert 方法，传的是业务对象，为什么会报String的id问题？有点奇怪，于是就进行了谷歌、百度大法，几乎所有的帖子都是如下：</p>
<blockquote>
<p>传入的参数是String， parameterType=&ldquo;String&rdquo;，解决方法是：</p>
</blockquote>
<blockquote>
<p>解决方法一:把#{xxx}修改为 #{_parameter} 即可</p>
</blockquote>
<blockquote>
<p>解决方法二:可以在方法中提前定义:@Param(value=&ldquo;xxx&rdquo;) String xxx</p>
</blockquote>
<p>虽然报错和我的一样，但是明显不是我这样的问题情形。于是又检查了一遍代码，发现了问题所在：</p>
<pre tabindex="0"><code>INSERT INTO sys_log(
			id,
			type,
			title,
			create_by, 
			create_date
			
		) VALUES (
			#{id},
			#{type},
			#{title}, 
			#{createBy.id},
			#{createDate}
		)
</code></pre><p>居然是 <strong>#{createBy.id}</strong> 。 检查了下原来代码并没有CreateBy 对象且有属性是id, 所以觉得是原系统本来就有误。 处理就很简单了，删了id即可，代码正常运行。</p>
<h3 id="教训">教训</h3>
<ol>
<li>参考别的系统可以，最好不要直接复制。</li>
<li>就算复制也需要批判的使用，毕竟不是久经考验的公共库</li>
<li>不要偷懒，多自己实现</li>
</ol>
]]></content></item><item><title>Week1010_algorithm</title><link>/posts/arts/week1010_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:34 +0000</pubDate><guid>/posts/arts/week1010_algorithm/</guid><description>ARTS - Algorithm 35. 搜索插入位置
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
你可以假设数组中无重复元素。
示例 1:
输入: [1,3,5,6], 5 输出: 2 示例 2:
输入: [1,3,5,6], 2 输出: 1
分析 这个题很容易想到遍历数组，找出最后一个比target小的元素，返回这个位置。代码如下：
class Solution { public int searchInsert(int[] nums, int target) { if (nums == null) return 0; for (int i = 0; i &amp;lt; nums.length; i++) { if (nums[i] &amp;gt;= target) { return i; } } return nums.length; } } 改进 参考了答案后，知道查找这个位置时间复杂度是O(n), 我们可以优化查找过程，使用二分查找实现：
public static int searchInsert2(int[] nums, int target) { if (nums == null || nums.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<p><a href="https://leetcode-cn.com/problems/search-insert-position/description/">35. 搜索插入位置</a></p>
<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>你可以假设数组中无重复元素。</p>
<p>示例 1:</p>
<p>输入: [1,3,5,6], 5
输出: 2
示例 2:</p>
<p>输入: [1,3,5,6], 2
输出: 1</p>
<h3 id="分析">分析</h3>
<p>这个题很容易想到遍历数组，找出最后一个比target小的元素，返回这个位置。代码如下：</p>
<pre tabindex="0"><code>
class Solution {
    public int searchInsert(int[] nums, int target) {
    	if (nums == null) return 0;
    	
        for (int i = 0; i &lt; nums.length; i++) {

            if (nums[i] &gt;= target) {
                return i;
            }

        }

        return nums.length;

    }
}
</code></pre><h3 id="改进">改进</h3>
<p>参考了答案后，知道查找这个位置时间复杂度是O(n), 我们可以优化查找过程，使用二分查找实现：</p>
<pre tabindex="0"><code>
public static int searchInsert2(int[] nums, int target) {

        if (nums == null || nums.length == 0) {
            return 0;
        }

        int start = 0;
        int end = nums.length - 1;

		// 如果target 在nums 数组中，那么在循环里就能找到位置
        while (start + 1 &lt; end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] &lt; target){
                start = mid;
            } else {
                end = mid;
            }
        }


		// target 不在nums数组中，比较获得位置
        if (nums[start] &gt;= target) {
            return start;
        }

        if (nums[end] &gt;= target) {
            return end;
        }

        return end + 1;


    }
</code></pre>]]></content></item><item><title>Week1010_review</title><link>/posts/arts/week1010_review/</link><pubDate>Fri, 31 Mar 2023 15:45:34 +0000</pubDate><guid>/posts/arts/week1010_review/</guid><description>ARTS - Review How to Make Money Online: 38 Remote Jobs in 2018 通过你笔记本来工作每年都变得更容易。
如果你还没想过通过线上赚钱，你或许是： A. 90岁了，你的孙辈刚刚给你第一台电脑， 或者 B. 坦诚说，我不知道你在做啥。
2017年，每在线30秒仅仅电子商务就产生1.2百万美元。
但是如果你在读这篇文章我不需要告诉你所有的统计信息。你早就知道大学不会教你，你只想要了解怎么通过线上赚钱。
我们都看到无数的情节、噱头、文章和建议，关于你能做什么赚钱 &amp;mdash; 但是我不会把所有这些工作都列在这。没有调查访谈，或者视频观看&amp;ndash;仅仅是合法的且你能通过电脑完成的一些工作。
这有38个工作你可以通过电脑在线完成 38. 网络市场（MLM） 我必须这么做吗？是的，网上有很多用多级营销计划(MLM)的方法赚钱。事情是这样的， 视图卖给朋友和家人，然后他们卖给他们的朋友和家人，这似乎是个骗人的计划。然而，由于一些事业可以变得非常大，因此有机会挣到一些现金的。
37. 医疗记账 医疗记账是沟通与解释第三方支付团体与对病人提供服务的团体的存在。虽然不是最性感的自由职业 &amp;ndash; 处理账单支付。不要求拥有医疗记账的专业教育，但是必须接受特定医学编码的培训。
36. 客户经理 最近世界上每个有实力的公司都需要客户经理作为用户和公司的沟通媒介。虽然这个职位可能需要你重返朝九晚五，但至少如果你为一家公司远程工作你有喜欢选择任何你想要的地方来朝九晚五。
35. 创作电子书 虽然电子书可能不会创造更多的收入 &amp;ndash; 和实体书的门槛是相当的低。 为了在网上用电子书赚钱，你只需要在某一个特定领域用不专业知识并且高输出到某个网站就行了。如果某个电子书成为超级畅销，你可以在这个话题上加一些其他产品和服务。
34. 税务员/会计师 自然的，当你想到会计师你就会想到坐在格子里，办公桌旁，口袋计算器，朝九晚五，等等。当今会计的形象已经转变了。如果你又固定关系的客户，你可以用你的会计技能远程工作。
33. 买卖域名 1990年代买卖域名，是网上挣钱排行前十的工作。但是今天变得困难了。很多大的关键域名已经被买进了而且不少数量的结尾为（.com, .co, .us &amp;hellip;）的域名补充进来，有了更多选择。
32. 虚拟助手 从 Tim Ferris 的四小时工作周 开始虚拟助手职位一直在增长。内容是，雇佣一个人一个月去处理你的所有的日常普通任务，调度，研究，邮件，通讯，数据录入 等。如果你遇到一个好的客户你可以在线赚到不错的钱。但是，做好准备应付你的老板的突发安排。
31. 翻译 翻译可能在工作场所比你意识到的更重要。法律文件，药物文档，在线班级等。如果你能高水平的说超过一门语言， 那么当个翻译是个简单的方法在网上赚钱。
30. 品牌大使 通常品牌大使在一个城市或大学，但是有些品牌开始允许品牌大使聚焦在网络上。不管怎样，如果你善于使用社交媒体并真正与某个品牌建立联系，这对你来说是个不错的选择。
29. 博客 臭名昭著的博客职位。当RSS订阅兴起 自然写博客就进入了网上挣钱列表。然而，很多全职博主仍然年收入少于$19k.</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="how-to-make-money-online-38-remote-jobs-in-2018">How to Make Money Online: 38 Remote Jobs in 2018</h2>
<p>通过你笔记本来工作每年都变得更容易。</p>
<p>如果你还没想过通过线上赚钱，你或许是：
A. 90岁了，你的孙辈刚刚给你第一台电脑， 或者
B. 坦诚说，我不知道你在做啥。</p>
<p>2017年，每在线30秒仅仅电子商务就产生1.2百万美元。</p>
<p>但是如果你在读这篇文章我不需要告诉你所有的统计信息。你早就知道大学不会教你，你只想要了解怎么通过线上赚钱。</p>
<p>我们都看到无数的情节、噱头、文章和建议，关于你能做什么赚钱 &mdash; 但是我不会把所有这些工作都列在这。没有调查访谈，或者视频观看&ndash;仅仅是合法的且你能通过电脑完成的一些工作。</p>
<h3 id="这有38个工作你可以通过电脑在线完成">这有38个工作你可以通过电脑在线完成</h3>
<h3 id="38-网络市场mlm">38. 网络市场（MLM）</h3>
<p>我必须这么做吗？是的，网上有很多用多级营销计划(MLM)的方法赚钱。事情是这样的， 视图卖给朋友和家人，然后他们卖给他们的朋友和家人，这似乎是个骗人的计划。然而，由于一些事业可以变得非常大，因此有机会挣到一些现金的。</p>
<h3 id="37-医疗记账">37. 医疗记账</h3>
<p>医疗记账是沟通与解释第三方支付团体与对病人提供服务的团体的存在。虽然不是最性感的自由职业 &ndash; 处理账单支付。不要求拥有医疗记账的专业教育，但是必须接受特定医学编码的培训。</p>
<h3 id="36-客户经理">36. 客户经理</h3>
<p>最近世界上每个有实力的公司都需要客户经理作为用户和公司的沟通媒介。虽然这个职位可能需要你重返朝九晚五，但至少如果你为一家公司远程工作你有喜欢选择任何你想要的地方来朝九晚五。</p>
<h3 id="35-创作电子书">35. 创作电子书</h3>
<p>虽然电子书可能不会创造更多的收入 &ndash; 和实体书的门槛是相当的低。 为了在网上用电子书赚钱，你只需要在某一个特定领域用不专业知识并且高输出到某个网站就行了。如果某个电子书成为超级畅销，你可以在这个话题上加一些其他产品和服务。</p>
<h3 id="34-税务员会计师">34. 税务员/会计师</h3>
<p>自然的，当你想到会计师你就会想到坐在格子里，办公桌旁，口袋计算器，朝九晚五，等等。当今会计的形象已经转变了。如果你又固定关系的客户，你可以用你的会计技能远程工作。</p>
<h3 id="33-买卖域名">33. 买卖域名</h3>
<p>1990年代买卖域名，是网上挣钱排行前十的工作。但是今天变得困难了。很多大的关键域名已经被买进了而且不少数量的结尾为（.com, .co, .us &hellip;）的域名补充进来，有了更多选择。</p>
<h3 id="32-虚拟助手">32. 虚拟助手</h3>
<p>从 Tim Ferris 的四小时工作周 开始虚拟助手职位一直在增长。内容是，雇佣一个人一个月去处理你的所有的日常普通任务，调度，研究，邮件，通讯，数据录入 等。如果你遇到一个好的客户你可以在线赚到不错的钱。但是，做好准备应付你的老板的突发安排。</p>
<h3 id="31-翻译">31. 翻译</h3>
<p>翻译可能在工作场所比你意识到的更重要。法律文件，药物文档，在线班级等。如果你能高水平的说超过一门语言， 那么当个翻译是个简单的方法在网上赚钱。</p>
<h3 id="30-品牌大使">30. 品牌大使</h3>
<p>通常品牌大使在一个城市或大学，但是有些品牌开始允许品牌大使聚焦在网络上。不管怎样，如果你善于使用社交媒体并真正与某个品牌建立联系，这对你来说是个不错的选择。</p>
<h3 id="29-博客">29. 博客</h3>
<p>臭名昭著的博客职位。当RSS订阅兴起 自然写博客就进入了网上挣钱列表。然而，很多全职博主仍然年收入少于$19k. 不太好的统计数字。但是如果你真的热衷于某个话题， 去做吧。我就是这样。</p>
<h3 id="28-主播">28. 主播</h3>
<p>新兴起的博客是有声音有录像的博客。通常主播在网上挣钱方式是通过粉丝打赏。我不确定主播的话是否诚实。获得足够的听众你可以从粉丝中获得不菲的收入。</p>
<h3 id="27-客服管理员支持">27. 客服/管理员支持</h3>
<p>很多公司开始意识到客服和管理员工作可以外包来节省一大笔钱。当你在办公室工作不能挣到同样数量的金钱时候，客服就是一个稳定的在线挣钱方式。</p>
<h3 id="26-打字员">26. 打字员</h3>
<p>如果你没听过打字员的工作， 别担心，我也没听过。基本来说就是就是把音频文件转录成文字的工作。实际上是网上赚钱的好方法。</p>
<h3 id="25-在线导师">25. 在线导师</h3>
<p>网上授课常常是一个在线挣钱的好方法。如果你会双语 &ndash; 我建议使用的一个服务是 Verbling. 非常简单建立账号，然后迅速开始赚钱。</p>
<h3 id="24-潜在客户挖掘">24. 潜在客户挖掘</h3>
<p>潜在客户挖掘是世界上相当新的在线赚钱的工作。你需要一些基础的网页开发技巧来开始和引入网上线索&ndash; 然后你可以把这些线索卖给本地企业。你可以网上赚钱，企业赚钱，客户获得他们的服务，多赢。</p>
<h3 id="23-出租你的东西">23. 出租你的东西</h3>
<p>有一辆车，房子、衣服，运动用品等等。你可以出租它们在线赚钱。注意Airbnb, rentNotBuy, Loanables, Turo, Spinlister 这些网站。</p>
<h3 id="22-分销">22. 分销</h3>
<p>如果你可以获得足够的渠道，无论来自于一个博客或某个特定话题的主页，分销都是一个网上赚钱的很好的选项。你只需要利用特殊的链接发给公众提供特定的产品或服务从中获取分成。亚马逊是最大的分销组织。</p>
<h3 id="21-创造一个市场">21. 创造一个市场</h3>
<p>如果你认为你是一个好的市场趋势评判员，你可以在一个特定的商机里开创一个市场。将会需要一些启动资金，像建立一个网站，但是你可以迅速在两周内建立一个 便宜的wordpress的市场。</p>
<h3 id="20-众筹顾问">20. 众筹顾问</h3>
<p>众筹成为过去十年最热门的趋势之一。最近每个人都想去开始他们的事业用Kickstarter 或者 Indiegogo 运动，但是不知道从哪开始。这时候众筹来了。证明自己可以为企业提供一定数额的资金，然后你可以开始收取巨额账单。</p>
<h3 id="19-图形设计师">19. 图形设计师</h3>
<p>我最喜欢的一个网站服务是 99designs. 一些最好的独立设计师就在 99designs。 你注册一个免费账号创造一个工程设计赢取公司的项目。UI那个设计不需要花费很多时间，但是如果是你喜欢做的事情，你不介意用额外时间花费在你感兴趣的事上。</p>
<h3 id="17-内容创造">17. 内容创造</h3>
<p>21世界的流行语是“内容为王”。 公司会为了最好的内容创造者支付费用。如果你有创造信息图表或短视频的窍门，做一个内容创造者是一个在网上赚钱不可思议的事。</p>
<h3 id="16-日间交易">16. 日间交易</h3>
<p>无论通过股票市场还是加密货币，日间交易都可以成为一项非常有利可图的工作。然而这个职位不适合胆小的人。准备好失去一大笔钱，盯着财经新闻，每周7天24小时感到压力，好吧，除非你赢得大奖。</p>
<h3 id="15-录像生产者">15. 录像生产者</h3>
<p>录像产品是很少人知道怎么做很多人想要付费的东西。视频生产人员每小时 $150元并不罕见。对视频生产来说最大的障碍是找客户。一些好的保持业务不断的方式是做一些小的工作在兼职网站如Fiverr 和upwork。</p>
<h3 id="14-facebookgoogle-广告联盟">14. Facebook/Google 广告联盟</h3>
<p>Facebook 和 Google 是排名数一数二的最大访问大量的网站。这就是他们是世界上最大的两个广告商。
很多企业现实是，他们没有主意在两个平台有效推销自己。为你的客户在线赚钱，你将学会一些如何自己做。</p>
<h3 id="13-摄影师">13. 摄影师</h3>
<p>石英石学怎么在线赚钱是不容易的 &mdash; 如果你能搞清楚， 你肯定会享受一种令人难以置信的生活方式。使用像 SmugMug 的服务轻松销售你的照片在线赚钱。</p>
<h3 id="12-研究员">12. 研究员</h3>
<p>如果内容为王 &ndash; 研究就是皇后。 很多信息图表，博客发送，和商业决策都基于幕后研究员的研究。成为一个研究员不是最有利可图的事业，但是会非常稳定，低压力，的稳定网上挣钱方式。</p>
<h3 id="11-社交媒体影响">11. 社交媒体影响</h3>
<p>你对最新的社交媒体有窍门吗？如果你认为你有像病毒传播的东西在 Instagram ，youtube， Snapchat ，Musical.ly ，等等，然后你就知道怎么在网上赚钱了。然而，赚钱最难的部分就是变得有影响力。</p>
<h3 id="10-创造一个产品">10. 创造一个产品</h3>
<p>每30秒，电子商务就创造1.2百万美金。如果你想去参与美国增长最快的游戏，你可以创造自己的产品。然后就可以在像 amazonFBA 市场上销售你的产品 或者在Shopify 或Etsy 创建一个商店。</p>
<h3 id="9-商业顾问">9. 商业顾问</h3>
<p>长大后你经常思考每个公司老板在做什么。我告诉你个秘密 &ndash; 很多老板没有主意运行一家公司。通过销售他们的产品或服务就能简单了解到这些。老板意识到他们对企业一无所知就寻找那些能帮他创造巨大利润的商业顾问。因为越来越多的企业在线运营，那就意味着你又越来越多的在线挣钱机会。</p>
<h3 id="8-自由作家">8. 自由作家</h3>
<p>这些需要一些时间达成。很多的时间。这就是为什么自由撰稿人需求极高的原因。博客需要内容 &ndash; 每一天。企业主没有时间做研究，计划和每天发布一篇文章。如果你文字技能，你可以轻松作为每小时$15美元的自由撰稿人。大公司的标准可能上升到 100美元一小时。</p>
<h3 id="7-出售在线课程">7. 出售在线课程</h3>
<p>我曾经个人通过网上售卖课程赚钱 &ndash; The Complete Travel Developer Course. 初始投资包括辛苦的数小时，当你完成课程之后最需要做的是有效的市场化。这可能比你想的困难，但是想 Teachable 和 ConvertKit 这种服务不会让在线课程赚钱变得容易。</p>
<h3 id="6-ux设计师">6. UX设计师</h3>
<p>在过去一些年， 对UX设计师的需求暴涨。 随着人们对在线内容的关注越来越短，企业开始意识到设计对于黏住客户而不是失去用户的重要性。你可以快速学 UX 设计，它是很好的网上赚钱方式。</p>
<h3 id="5-app开发">5. APP开发</h3>
<p>如果你是一个夜猫子并且喜欢书呆子 &ndash; 那么成为一个应用程序开发者可能是你在网上赚钱的途径。很多应用开发者起价约 75美元一小时，并且每小时150美元的范围内并不罕见。由于优秀开发者的供应量很小，企业在努力寻找 高质量的开发者。</p>
<h3 id="4-seo顾问">4. SEO顾问</h3>
<p>如果2010 你意识到你需要一个网站，2020年会确定成为你需要SEO(搜索引擎优化)服务的年份。随着越来越容易创建网站， 唯一的途径让你的网站冒出大众就是理解搜索引擎优化。我发现的一个最好的关于从0到60的SEO课程是  ClickMinded SEO Course &mdash; 由来自于PayPay和Airbnb的一名SEO经理教授。</p>
<h3 id="3-社交媒体营销">3. 社交媒体营销</h3>
<p>如果你是一个企业主 &ndash; 这有两个选项来广告你的业务。 1. 创建一个网站用SEO在Google有高的排名， 或者 2 &ndash; 创建一个介绍在社交媒体来扩大你的品牌。 很多情形下你两个都想用。但是作为一个如此多事情需要做的企业主，你真想找哪些用自己账号在社交媒体上花费时间的人。企业主在等待&ndash; 手握现金 &ndash; 支付给管理他们社交媒体渠道的人。这意味着你听着音乐就收到了按月费用的网上收入。</p>
<h3 id="2-网页开发者">2. 网页开发者</h3>
<p>当今做一个小的业务如果没有网站很容易就没有选择。这也是成为在线赚钱的网页开发者最简单的理由。</p>
<h3 id="1-全栈自由职业者">1. 全栈自由职业者</h3>
<p>很多在网上选择工作仅有一个技能集。作为一个全栈自由职业者，你将会和客户保持一生的服务。这就是为什么我建议学设计、开发，SEO， 社交媒体市场，和商业咨询。你不需要成为一个哪些分类中职业的人，你只需要了解足够把工作做完的东西就行了。在这些所有技能中仅仅花费一个月就能达到中级水平！</p>
<p>而不是为了价值1000美元的简单设计获取一个客户，你应该很容易通过每个工程超过5000美元收入获得每月稳定收入。这是成百上千企业需要这些技能，如果你能提供给他们你将会获得一个非常成功的在线赚钱机器。</p>
<h3 id="行动吧">行动吧</h3>
<p>如果你想学怎么变成一个远程工作者逃离和老鼠赛跑，看看我的免费指南：“7步开启一个远程自由工作”。它将会教你怎么成为一个数字游民在世界任何地方工作。</p>
<p><a href="https://www.traveldeveloper.com/">点击立即获得指导！</a></p>
]]></content></item><item><title>Week1010_share</title><link>/posts/arts/week1010_share/</link><pubDate>Fri, 31 Mar 2023 15:45:34 +0000</pubDate><guid>/posts/arts/week1010_share/</guid><description>ARTS - Share 关于reduce 函数 举例 我们知道reduce() 方法是对数组中的每个元素(从左到右)应用一个函数，将其减少为单个值。 例子：
const array1 = [1, 2, 4, 6]; const reducer = (acc, curr) =&amp;gt; acc + curr; console.log(array1.reduce(reducer)) // output 13 reduce ####语法：
arr.reduce(callback[, initialValue])
####参数： callback: 执行数组中每个值的函数，包含四个参数
accumulator 累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（如下所示）。
currentValue 数组中正在处理的元素。
currentIndex可选 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。
array可选 调用reduce()的数组
initialValue可选 用作第一个调用 callback的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。
####返回值 函数累计处理的结果
注意：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。
对象的 reduce 假如我们有这样一个对象：
const data = [{x:22}, {x:33}] 要对它的属性求和，那么写法如下：
data.reduce((pre, cur) =&amp;gt; pre.</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h3 id="关于reduce-函数">关于reduce 函数</h3>
<h3 id="举例">举例</h3>
<p>我们知道reduce() 方法是对数组中的每个元素(从左到右)应用一个函数，将其减少为单个值。
例子：</p>
<pre tabindex="0"><code>
	const array1 = [1, 2, 4, 6];
	const reducer = (acc, curr) =&gt;  acc + curr;

	console.log(array1.reduce(reducer))
	
	// output
	13
	
	
</code></pre><h3 id="reduce">reduce</h3>
<p>####语法：</p>
<blockquote>
<p>arr.reduce(callback[, initialValue])</p>
</blockquote>
<p>####参数：
callback: 执行数组中每个值的函数，包含四个参数</p>
<ul>
<li>
<p><code>accumulator</code>
累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（如下所示）。</p>
</li>
<li>
<p><code>currentValue</code>
数组中正在处理的元素。</p>
</li>
<li>
<p><code>currentIndex</code>可选
数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。</p>
</li>
<li>
<p><code>array</code>可选
调用reduce()的数组</p>
</li>
</ul>
<p>initialValue可选
用作第一个调用 callback的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p>
<p>####返回值
函数累计处理的结果</p>
<p><strong>注意：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。</strong></p>
<h3 id="对象的-reduce">对象的 reduce</h3>
<p>假如我们有这样一个对象：</p>
<pre tabindex="0"><code>const data = [{x:22}, {x:33}]
</code></pre><p>要对它的属性求和，那么写法如下：</p>
<pre tabindex="0"><code>
data.reduce((pre, cur) =&gt; pre.x + cur.x)
data.map(e =&gt; e.x).reduce((a,b)=&gt;a+b)

// 结果是 55
</code></pre><p>map就是对每个元素调用一下函数。</p>
<hr>
<p>[1]Reduce <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce</a></p>
]]></content></item><item><title>Week1010_tip</title><link>/posts/arts/week1010_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:34 +0000</pubDate><guid>/posts/arts/week1010_tip/</guid><description>ARTS - Tip 关于 js 接收前端有序map 变无序的问题 在实际开发中，本人遇到了一个后台排序map，传给前端变无序的问题。于是开始测试这个问题。
继续使用之前的一个例子 week6 share: Java8的分组与排序实践
造数据 建一个 课程类Course, 分组获得map,再排序，写一个控制类方法：
@RequestMapping(&amp;#34;/map&amp;#34;) @ResponseBody public Map&amp;lt;Integer, List&amp;lt;Course&amp;gt;&amp;gt; listMap() { Course eng = new Course(1001, &amp;#34;eng&amp;#34;, 80); Course chi = new Course(1001, &amp;#34;chi&amp;#34;, 75); Course chi2 = new Course(1002, &amp;#34;chi&amp;#34;, 77); Course eng3 = new Course(1003, &amp;#34;eng&amp;#34;, 105); Course chi3 = new Course(1003, &amp;#34;chi&amp;#34;, 110); List&amp;lt;Course&amp;gt; courseList = Lists.newArrayList(eng, chi, chi2, eng3, chi3); Map&amp;lt;Integer, List&amp;lt;Course&amp;gt;&amp;gt; map = courseList.</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h3 id="关于-js-接收前端有序map-变无序的问题">关于 js 接收前端有序map 变无序的问题</h3>
<p>在实际开发中，本人遇到了一个后台排序map，传给前端变无序的问题。于是开始测试这个问题。</p>
<p>继续使用之前的一个例子 <a href="https://github.com/wangweiomg/arts/blob/master/week6/share.md">week6 share: Java8的分组与排序实践</a></p>
<h3 id="造数据">造数据</h3>
<p>建一个 课程类Course, 分组获得map,再排序，写一个控制类方法：</p>
<pre tabindex="0"><code>
@RequestMapping(&#34;/map&#34;)
    @ResponseBody
    public Map&lt;Integer, List&lt;Course&gt;&gt; listMap() {

        Course eng = new Course(1001, &#34;eng&#34;, 80);
        Course chi = new Course(1001, &#34;chi&#34;, 75);

        Course chi2 = new Course(1002, &#34;chi&#34;, 77);

        Course eng3 = new Course(1003, &#34;eng&#34;, 105);
        Course chi3 = new Course(1003, &#34;chi&#34;, 110);

        List&lt;Course&gt; courseList = Lists.newArrayList(eng, chi, chi2, eng3, chi3);
        Map&lt;Integer, List&lt;Course&gt;&gt; map = courseList.stream().collect(Collectors.groupingBy(Course::getUserId));

        System.out.println(map);

        List&lt;Integer&gt; gradeList = map.values().stream().map(i -&gt; i.stream().map(Course::getGrade).reduce(0, Integer::sum)).collect(Collectors.toList());
        System.out.println(gradeList);

        Map&lt;Integer, List&lt;Course&gt;&gt; sortedMap = map.entrySet().stream().sorted(Comparator.comparing(i -&gt; i.getValue().stream().map(Course::getGrade).reduce(0, Integer::sum)))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1, LinkedHashMap::new));


        System.out.println(sortedMap);

        return sortedMap;


    }
</code></pre><p>根据总分进行排序，结果就是 1002， 1001， 1003</p>
<pre tabindex="0"><code>{1002=[Course(userId=1002, name=chi, grade=77)], 1001=[Course(userId=1001, name=eng, grade=80), Course(userId=1001, name=chi, grade=75)], 1003=[Course(userId=1003, name=eng, grade=105), Course(userId=1003, name=chi, grade=110)]}
</code></pre><p>我们用浏览器调试，js代码ajax请求来测试：</p>
<pre tabindex="0"><code>
$(function () {
        var url = &#39;/hello/map&#39;;

        $.get(url, data =&gt;{
            console.log(data);
        });
    });
    
    
 // output
 
 {1001: Array(2), 1002: Array(1), 1003: Array(2)}
1001: (2) [{…}, {…}]
1002: [{…}]
1003: (2) [{…}, {…}]
__proto__: Object
</code></pre><p>根据输出发现顺序明显变了，说明转成js对象后小再调整下。
我们了解到js 的一个Object.entries方法：</p>
<blockquote>
<p>The Object.entries() method returns an array of a given object&rsquo;s own enumerable property [key, value] pairs, in the same order as that provided by a for&hellip;in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).</p>
</blockquote>
<pre tabindex="0"><code>
console.log(Object.entries(data));
// output
(3) [Array(2), Array(2), Array(2)]
0: (2) [&#34;1001&#34;, Array(2)]
1: (2) [&#34;1002&#34;, Array(1)]
2: (2) [&#34;1003&#34;, Array(2)]
</code></pre><p>这样的话就可以使用sort方法了</p>
<pre tabindex="0"><code>$.get(url, data =&gt;{
            const r = Object.entries(data).sort(
                ([x1, x2], [y1, y2])=&gt;
                    x2.reduce((x, {grade}) =&gt; x + grade, 0)
                    -
                    y2.reduce((x, {grade}) =&gt; x + grade, 0)
            );

            console.log(r);


        });
        
        
//output
(3) [Array(2), Array(2), Array(2)]
0: (2) [&#34;1002&#34;, Array(1)]
1: (2) [&#34;1001&#34;, Array(2)]
2: (2) [&#34;1003&#34;, Array(2)]
</code></pre><p>结果输出正常。</p>
<p>接下来可以顺便看看 share 之 reduce 方法总结。</p>
]]></content></item><item><title>Week1011_algorithm</title><link>/posts/arts/week1011_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:34 +0000</pubDate><guid>/posts/arts/week1011_algorithm/</guid><description>ARTS - Algorithm 66. 加一 描述 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。
示例 1:
输入: [1,2,3] 输出: [1,2,4] 解释: 输入数组表示数字 123。
示例 2:
输入: [4,3,2,1] 输出: [4,3,2,2] 解释: 输入数组表示数字 4321。
分析 这其实就是考虑数字加1，高位进位的问题，代码如下：
public int[] plusOne(int[] digits) { // 需要加1 int plus = 1; for (int i = digits.length - 1; i &amp;gt;= 0; i--) { int tmp = digits[i] + plus; if (tmp &amp;gt;= 10) { digits[i] = tmp % 10; plus = 1; } else { digits[i] = tmp; plus = 0; } } if (plus == 1) { // 需要处理 digits[0] = digits[0] % 10; int[] arr = new int[digits.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="66-加一httpsleetcode-cncomproblemsplus-onedescription"><a href="https://leetcode-cn.com/problems/plus-one/description/">66. 加一</a></h2>
<h3 id="描述">描述</h3>
<p>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。</p>
<p>最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。</p>
<p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>
<p>示例 1:</p>
<blockquote>
<p>输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。</p>
</blockquote>
<p>示例 2:</p>
<blockquote>
<p>输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。</p>
</blockquote>
<h3 id="分析">分析</h3>
<p>这其实就是考虑数字加1，高位进位的问题，代码如下：</p>
<pre tabindex="0"><code>
public int[] plusOne(int[] digits) {

        // 需要加1
        int plus = 1;
        for (int i = digits.length - 1; i &gt;= 0; i--) {


            int tmp = digits[i] + plus;
            if (tmp &gt;= 10) {

                digits[i] = tmp % 10;
                plus = 1;
            } else {
                digits[i] = tmp;
                plus = 0;
            }

        }
        if (plus == 1) {
            // 需要处理
            digits[0] = digits[0] % 10;
            int[] arr = new int[digits.length + 1];
            System.arraycopy(digits, 0, arr, 1, digits.length);
            arr[0] = 1;
            return arr;
        }


        return digits;


    }
    
</code></pre>]]></content></item><item><title>Week1011_tip</title><link>/posts/arts/week1011_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:34 +0000</pubDate><guid>/posts/arts/week1011_tip/</guid><description>ARTS - Tip 关于Moment.js 一个好用的处理日期时间的插件: moment.js, 中文地址： http://momentjs.cn/
在项目中引用，主要使用了两个功能，时间格式话和时区转换。
当前时间 var now = moment(); // 和 moment(new Date()) 是等价的 解析字符串 var date = moment(&amp;#34;09-30-2018&amp;#34;, &amp;#34;MM-DD-YYYY&amp;#34;); 输入 例子 描述 YYYY 2018 4位年 YY 18 2位年 M MM 12 月份 D DD 1..31 日期 时区 这里要用到moment-timezone.js
moment.tz(new Date(), &amp;#39;America/Los_Angeles&amp;#39;).format(&amp;#39;YYYY-MM-DD HH:mm:ss&amp;#39;) 显示的是美国洛杉矶时间</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="关于momentjs">关于Moment.js</h2>
<p>一个好用的处理日期时间的插件: moment.js, 中文地址： <a href="http://momentjs.cn/">http://momentjs.cn/</a></p>
<p>在项目中引用，主要使用了两个功能，时间格式话和时区转换。</p>
<h3 id="当前时间">当前时间</h3>
<pre tabindex="0"><code>var now = moment();  // 和 moment(new Date()) 是等价的
</code></pre><h3 id="解析字符串">解析字符串</h3>
<pre tabindex="0"><code>var date = moment(&#34;09-30-2018&#34;, &#34;MM-DD-YYYY&#34;);
</code></pre><table>
<thead>
<tr>
<th>输入</th>
<th>例子</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>YYYY</td>
<td>2018</td>
<td>4位年</td>
</tr>
<tr>
<td>YY</td>
<td>18</td>
<td>2位年</td>
</tr>
<tr>
<td>M MM</td>
<td>12</td>
<td>月份</td>
</tr>
<tr>
<td>D DD</td>
<td>1..31</td>
<td>日期</td>
</tr>
</tbody>
</table>
<h3 id="时区">时区</h3>
<p>这里要用到moment-timezone.js</p>
<pre tabindex="0"><code>moment.tz(new Date(), &#39;America/Los_Angeles&#39;).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)
</code></pre><p>显示的是美国洛杉矶时间</p>
]]></content></item><item><title>Week1007_algorithm</title><link>/posts/arts/week1007_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:33 +0000</pubDate><guid>/posts/arts/week1007_algorithm/</guid><description>ARTS - Algorithm 26. 删除排序数组中的重复项 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
示例 1: 给定数组 nums = [1,1,2],
函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
你不需要考虑数组中超出新长度后面的元素。
示例 2: 给定 nums = [0,0,1,1,1,2,2,3,3,4],
函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
你不需要考虑数组中超出新长度后面的元素。
分析 考虑用两个指示器， i,j ， 分别初始化为 0, 1， 如果 i,j 相等，就把 j 之后的元素都往前挪一位，最后一位 设置为数组第一位元素 -1 ，实现如下：
public int removeDuplicates(int[] nums) { int i = 0, j = 1; int len = nums.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="26-删除排序数组中的重复项httpsleetcode-cncomproblemsremove-duplicates-from-sorted-arraydescription"><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/">26. 删除排序数组中的重复项</a></h2>
<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<h3 id="示例-1">示例 1:</h3>
<p>给定数组 nums = [1,1,2],</p>
<p>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。</p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<h3 id="示例-2">示例 2:</h3>
<p>给定 nums = [0,0,1,1,1,2,2,3,3,4],</p>
<p>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<h3 id="分析">分析</h3>
<p>考虑用两个指示器， i,j ， 分别初始化为 0, 1， 如果 i,j 相等，就把 j 之后的元素都往前挪一位，最后一位 设置为数组第一位元素 -1  ，实现如下：</p>
<pre tabindex="0"><code>public int removeDuplicates(int[] nums) {

        int i = 0, j = 1;
        int len = nums.length;

        while (j &lt; nums.length ) {

            int a = nums[i];
            int b = nums[j];

            if (a &gt; b) {
                // 到头了
                len = j;
                break;
            }


            if (a == b) {
                // 把 b 挪到最后
                for (int k = j + 1; k &lt; nums.length; k++) {
                    nums[k - 1] = nums[k];
                }

                // 最后一位是b
                nums[nums.length - 1] = nums[0] - 1;

            } else {
                i++;
                j++;
            }

        }
       
        return len;
    }
</code></pre><h3 id="优化">优化</h3>
<p>在参考了别人实现后，发现可以继续优化， 只需要遍历一次，同样是设置一个 指示器，该指示器从0开始，
遍历从 1 开始，碰到和指示器位置不同的元素，就把该元素放到指示器位置后边， 指示器向前移动一位，直到遍历结束, 返回指示器+1。代码如下：</p>
<pre tabindex="0"><code>public int removeDuplicates2(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int len = 0;
        for (int i = 1; i &lt; nums.length; i++) {

            if (nums[i] != nums[len]) {
                nums[len + 1] = nums[i];
                len++;
            }

        }


               
        return len + 1;
    }
</code></pre>]]></content></item><item><title>Week1007_review</title><link>/posts/arts/week1007_review/</link><pubDate>Fri, 31 Mar 2023 15:45:33 +0000</pubDate><guid>/posts/arts/week1007_review/</guid><description>ARTS - Review 聚光灯效应：为什么没有人记得你做过什么 想象一下你走进一个房间。
你穿着印着恐怖小丑的的T恤。因为是整块印刷的，所以没有人会忽视。颜色不搭配，明显使人尴尬。
预期会有两种反映。
你不禁注意到你的同龄人在向你的方向扫视。角落里也有人窃窃私语。你通过时候一切人还在小声议论。好像每个人都注意到你的社交失礼。
几分钟后，你肯定不会从失礼中恢复过来，没有人会忘记这一刻。
所有眼睛都在看我 那时一个及其难忘的场景。 我们大多数人从小到现在都经历过尴尬的瞬间。我们问愚蠢的问题做愚蠢的事，之后我们会意识到错误。事后我们无法忘记这些。十四岁被石头绊倒的场景一直停留在记忆里。
但是研究人员发现，我们很难评估我们的过失被其他人注意到的数量。在上面我们让学生穿着尴尬T恤的场景中，实际注意到他们失礼的人数是他们预估的一半。这种现象被称为聚光灯效应，人们估计注视到他的人比实际的要少。这是一个恰当的名称。我们认为我们在聚光灯下， 吸引所有的目光，实际上没人关心。
如果你不确信有人记得你高中时候读错了单词，试着回忆下你同学犯得类似的错误，你会发现这比记住你自己的错误困难的多。
聚光灯的影响 不难理解为什么聚光灯效应会出现在我们生活中。
首先，我们对自己外表行为的评价与别人的是有偏差的。我们是自我世界的中心，就夸大了我们的重要性。对我们周边人来说，我们做了什么他们是无视的。这就让人很容易陷入自我聚光灯下。
这也是有道理的，因为没人会昼夜跟踪我们，所以看不到我们的所有事情。但我们习惯从自我角度看实物，我们陷入同别人的准确的看法斗争里。
第二，心里学家称之为透明度幻觉，这是他们提供的一个例子：
特别的，紧急事件的目击者通常以漠不关心的方式行事，掩盖他的担忧，以免看起来像是危言耸听。 然而这些人愿意从其他人平静中得出结论，好像真的没有紧急情况。为什么每个人看待别人表面的平静，不像看待自己表面的平静一样 &amp;mdash; 把自己真正关心的问题伪装成一个幌子呢？我们发现，部分原因是人们产生了一种透明的错觉。
换句话说，我们错误的认为我们完全表达出了我们看到的。我们认为其他人也能和我们感同身受。但是除了脸红和紧张的手发抖，没人知道我们怕社交失误后钻进一个洞里。
你需要知道的 像许多其他的心理现象，聚光灯效应不是缺陷导致的，因为它是过时的生物路线。
当我们的祖先生活在部落中时，他们需要确保得到他人的认可。如果犯了错，会导致驱逐出部落，就意味着死亡。想想一下在周围人注视下生活，肯定会保持敏感。
今天情况有些不同。一方面，我们有网络和社交媒体放大每一个行为和事件，无论是积极还是消极的。另一方面，我们不再需要在严苛的团体中花费时间社交。如果犯了一个简单的错误，我们不再害怕死亡。
这意味着什么？
第一，你可能需要更能努力工作，因为没人监控你的贡献和影响。噪音足够多就很难识别出信号。不要指望每个人都能听到你。
更重要的是，不必痴迷于别人对我们的看法。事实上每个人都顾虑自己。所以说出自己的想法，承担一些风险，做一个斗士。
无论人们是否关注，你都会做的更好。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="聚光灯效应为什么没有人记得你做过什么httpsmediumcompersonal-growththe-spotlight-effect-why-no-one-else-remembers-what-you-did-feb3ba8dbfc0"><a href="https://medium.com/personal-growth/the-spotlight-effect-why-no-one-else-remembers-what-you-did-feb3ba8dbfc0">聚光灯效应：为什么没有人记得你做过什么</a></h2>
<p>想象一下你走进一个房间。</p>
<p>你穿着印着恐怖小丑的的T恤。因为是整块印刷的，所以没有人会忽视。颜色不搭配，明显使人尴尬。</p>
<p>预期会有两种反映。</p>
<p>你不禁注意到你的同龄人在向你的方向扫视。角落里也有人窃窃私语。你通过时候一切人还在小声议论。好像每个人都注意到你的社交失礼。</p>
<p>几分钟后，你肯定不会从失礼中恢复过来，没有人会忘记这一刻。</p>
<h3 id="所有眼睛都在看我">所有眼睛都在看我</h3>
<p>那时一个及其难忘的场景。
我们大多数人从小到现在都经历过尴尬的瞬间。我们问愚蠢的问题做愚蠢的事，之后我们会意识到错误。事后我们无法忘记这些。十四岁被石头绊倒的场景一直停留在记忆里。</p>
<p>但是研究人员发现，我们很难评估我们的过失被其他人注意到的数量。在上面我们让学生穿着尴尬T恤的场景中，实际注意到他们失礼的人数是他们预估的一半。这种现象被称为聚光灯效应，人们估计注视到他的人比实际的要少。这是一个恰当的名称。我们认为我们在聚光灯下， 吸引所有的目光，实际上没人关心。</p>
<p>如果你不确信有人记得你高中时候读错了单词，试着回忆下你同学犯得类似的错误，你会发现这比记住你自己的错误困难的多。</p>
<h3 id="聚光灯的影响">聚光灯的影响</h3>
<p>不难理解为什么聚光灯效应会出现在我们生活中。</p>
<p>首先，我们对自己外表行为的评价与别人的是有偏差的。我们是自我世界的中心，就夸大了我们的重要性。对我们周边人来说，我们做了什么他们是无视的。这就让人很容易陷入自我聚光灯下。</p>
<p>这也是有道理的，因为没人会昼夜跟踪我们，所以看不到我们的所有事情。但我们习惯从自我角度看实物，我们陷入同别人的准确的看法斗争里。</p>
<p>第二，心里学家称之为透明度幻觉，这是他们提供的一个例子：</p>
<blockquote>
<p>特别的，紧急事件的目击者通常以漠不关心的方式行事，掩盖他的担忧，以免看起来像是危言耸听。
然而这些人愿意从其他人平静中得出结论，好像真的没有紧急情况。为什么每个人看待别人表面的平静，不像看待自己表面的平静一样 &mdash; 把自己真正关心的问题伪装成一个幌子呢？我们发现，部分原因是人们产生了一种透明的错觉。</p>
</blockquote>
<p>换句话说，我们错误的认为我们完全表达出了我们看到的。我们认为其他人也能和我们感同身受。但是除了脸红和紧张的手发抖，没人知道我们怕社交失误后钻进一个洞里。</p>
<h3 id="你需要知道的">你需要知道的</h3>
<p>像许多其他的心理现象，聚光灯效应不是缺陷导致的，因为它是过时的生物路线。</p>
<p>当我们的祖先生活在部落中时，他们需要确保得到他人的认可。如果犯了错，会导致驱逐出部落，就意味着死亡。想想一下在周围人注视下生活，肯定会保持敏感。</p>
<p>今天情况有些不同。一方面，我们有网络和社交媒体放大每一个行为和事件，无论是积极还是消极的。另一方面，我们不再需要在严苛的团体中花费时间社交。如果犯了一个简单的错误，我们不再害怕死亡。</p>
<p>这意味着什么？</p>
<p>第一，你可能需要更能努力工作，因为没人监控你的贡献和影响。噪音足够多就很难识别出信号。不要指望每个人都能听到你。</p>
<p>更重要的是，不必痴迷于别人对我们的看法。事实上每个人都顾虑自己。所以说出自己的想法，承担一些风险，做一个斗士。</p>
<p>无论人们是否关注，你都会做的更好。</p>
]]></content></item><item><title>Week1007_share</title><link>/posts/arts/week1007_share/</link><pubDate>Fri, 31 Mar 2023 15:45:33 +0000</pubDate><guid>/posts/arts/week1007_share/</guid><description>ARTS - Share 说说一次sql优化过程 很容易在网上找到sql优化要点，在这里记录一次本人经历的一个优化过程。
在工作中需要统计一个信息形成报表，最开始的sql 是这样的：
SELECT SUM(a + b - c) amount, CASE WHEN day &amp;gt;= 2 AND day &amp;lt;= 8 THEN &amp;#39;m1_1&amp;#39; WHEN day &amp;gt;= 9 AND day &amp;lt;= 20 THEN &amp;#39;m1_2&amp;#39; WHEN day &amp;gt;= 21 THEN &amp;#39;m1_3&amp;#39; ELSE &amp;#39;m1_0&amp;#39; END &amp;#39;day_type&amp;#39;, create_date FROM table a GROUP BY day_type, create_date HAVING create_date &amp;gt;= ? and create_date&amp;lt;= ? and day_type != &amp;#39;m1_0&amp;#39; 这个sql在我们库里执行了10秒，于是就需要优化。
首先这是个单表查询的分组函数，在进行全表扫描分组后，再对结果进行了过滤。很明显这个过程不对，应该对过滤后的结果再进行分组，这样大大减少了无用数据的查询。
修改后是这样的：
SELECT SUM(a + b - c) amount, CASE WHEN day &amp;gt;= 2 AND day &amp;lt;= 8 THEN &amp;#39;m1_1&amp;#39; WHEN day &amp;gt;= 9 AND day &amp;lt;= 20 THEN &amp;#39;m1_2&amp;#39; WHEN day &amp;gt;= 21 THEN &amp;#39;m1_3&amp;#39; ELSE &amp;#39;m1_0&amp;#39; END &amp;#39;day_type&amp;#39;, create_date FROM table a WHERE create_date &amp;gt;= ?</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h3 id="说说一次sql优化过程">说说一次sql优化过程</h3>
<p>很容易在网上找到sql优化要点，在这里记录一次本人经历的一个优化过程。</p>
<p>在工作中需要统计一个信息形成报表，最开始的sql 是这样的：</p>
<pre tabindex="0"><code>SELECT 
	SUM(a + b - c) amount,
    CASE
	    WHEN day &gt;= 2 AND day &lt;= 8 THEN &#39;m1_1&#39;
	    WHEN day &gt;= 9 AND day &lt;= 20 THEN &#39;m1_2&#39;
	    WHEN day &gt;= 21 THEN &#39;m1_3&#39;
    ELSE &#39;m1_0&#39;
    END  &#39;day_type&#39;, create_date

FROM table a
    GROUP BY day_type, create_date
    
    HAVING
    create_date &gt;= ?
    and create_date&lt;= ?
    and day_type != &#39;m1_0&#39;
</code></pre><p>这个sql在我们库里执行了10秒，于是就需要优化。</p>
<p>首先这是个单表查询的分组函数，在进行全表扫描分组后，再对结果进行了过滤。很明显这个过程不对，应该对过滤后的结果再进行分组，这样大大减少了无用数据的查询。</p>
<p>修改后是这样的：</p>
<pre tabindex="0"><code>SELECT 
	SUM(a + b - c) amount,
    CASE
	    WHEN day &gt;= 2 AND day &lt;= 8 THEN &#39;m1_1&#39;
	    WHEN day &gt;= 9 AND day &lt;= 20 THEN &#39;m1_2&#39;
	    WHEN day &gt;= 21 THEN &#39;m1_3&#39;
    ELSE &#39;m1_0&#39;
    END  &#39;day_type&#39;, create_date

FROM table a
WHERE 
	 create_date &gt;= ?
    and create_date&lt;= ?
    
    GROUP BY day_type, create_date
    HAVING
    day_type != &#39;m1_0&#39;
</code></pre><p>这样就大大提高了响应速度，在2秒内。</p>
<p>继续优化，看到我们的 <strong>HAVING day_type != &lsquo;m1_0&rsquo;</strong> ，这个在sql 里就是 不需要 day&lt;2 的数据，直接在where 里过滤就够了。于是修改后是这样的。</p>
<pre tabindex="0"><code>SELECT 
	SUM(a + b - c) amount,
    CASE
	    WHEN day &gt;= 2 AND day &lt;= 8 THEN &#39;m1_1&#39;
	    WHEN day &gt;= 9 AND day &lt;= 20 THEN &#39;m1_2&#39;
	    WHEN day &gt;= 21 THEN &#39;m1_3&#39;
    ELSE &#39;m1_0&#39;
    END  &#39;day_type&#39;, create_date

FROM table a
WHERE 
	 create_date &gt;= ?
    and create_date&lt;= ?
    and day &gt;=2
    
    GROUP BY day_type, create_date
    
</code></pre><p>再之后，使用 explain 执行，发现没有建立索引于是就对 create_date 和 day建立索引，最终的结果响应在 1秒左右。</p>
]]></content></item><item><title>Week1007_tip</title><link>/posts/arts/week1007_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:33 +0000</pubDate><guid>/posts/arts/week1007_tip/</guid><description>ARTS - Tip 在启动项目时候，由于本地安装了mysql8, 所以有报错：
Caused by: java.sql.SQLException: Unknown system variable &amp;#39;tx_isolation&amp;#39; 看数据库版本：
Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 124 Server version: 8.0.11 Homebrew 看是否有tx_isolotion
mysql&amp;gt; show variables like &amp;#39;tx_isolation&amp;#39;; Empty set (0.00 sec) 因为在mysql8里把这个变量改成了 &amp;rsquo;transaction_isolation'
mysql&amp;gt; show variables like &amp;#39;transaction_isolation&amp;#39;; +-----------------------+-----------------+ | Variable_name | Value | +-----------------------+-----------------+ | transaction_isolation | REPEATABLE-READ | +-----------------------+-----------------+ 1 row in set (0.01 sec) 我们再看下mysql7的变量</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<p>在启动项目时候，由于本地安装了mysql8, 所以有报错：</p>
<pre tabindex="0"><code>Caused by: java.sql.SQLException: Unknown system variable &#39;tx_isolation&#39;
</code></pre><p>看数据库版本：</p>
<pre tabindex="0"><code>Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 124
Server version: 8.0.11 Homebrew
</code></pre><p>看是否有tx_isolotion</p>
<pre tabindex="0"><code>mysql&gt; show variables like &#39;tx_isolation&#39;;
Empty set (0.00 sec)
</code></pre><p>因为在mysql8里把这个变量改成了 &rsquo;transaction_isolation'</p>
<pre tabindex="0"><code>mysql&gt; show variables like &#39;transaction_isolation&#39;;
+-----------------------+-----------------+
| Variable_name         | Value           |
+-----------------------+-----------------+
| transaction_isolation | REPEATABLE-READ |
+-----------------------+-----------------+
1 row in set (0.01 sec)
</code></pre><p>我们再看下mysql7的变量</p>
<pre tabindex="0"><code>Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1185395
Server version: 5.7.20 MySQL Community Server (GPL)



mysql&gt; show variables like &#39;tx_isolation&#39;
    -&gt; ;
+---------------+-----------------+
| Variable_name | Value           |
+---------------+-----------------+
| tx_isolation  | REPEATABLE-READ |
+---------------+-----------------+
1 row in set (0.00 sec)


mysql&gt; show variables like &#39;transaction_isolation&#39;;
+-----------------------+-----------------+
| Variable_name         | Value           |
+-----------------------+-----------------+
| transaction_isolation | REPEATABLE-READ |
+-----------------------+-----------------+
1 row in set (0.00 sec)
</code></pre><p>居然两个都有，但是在mysql8里就只有一个了，所以要想使用mysql8， 就需要把驱动更新到mysql8,</p>
<p>官方文档提提到了这个变动：
<a href="https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-3.html">https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-3.html</a></p>
<blockquote>
<p>The deprecated tx_isolation and tx_read_only system variables have been
removed. Use <strong>transaction_isolation</strong> and <strong>transaction_read_only</strong> instead.</p>
</blockquote>
]]></content></item><item><title>Week1008_algorithm</title><link>/posts/arts/week1008_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:33 +0000</pubDate><guid>/posts/arts/week1008_algorithm/</guid><description>ARTS - Algorithm 27. 移除元素 给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
示例 1:
给定 nums = [3,2,2,3], val = 3,
函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。
你不需要考虑数组中超出新长度后面的元素。 示例 2:
给定 nums = [0,1,2,2,3,0,4,2], val = 2,
函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。
注意这五个元素可为任意顺序。
你不需要考虑数组中超出新长度后面的元素。
分析 本题和 26. 删除排序数组中的重复项
是类似的，只需要稍微修改就可以了， 指示器从0 开始，遍历从0开始，把不相等的挪到指示器位置，然后指示器加一。代码如下：
public int removeElement(int[] nums, int val) { if (nums == null || nums.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<h2 id="27-移除元素httpsleetcode-cncomproblemsremove-elementdescription"><a href="https://leetcode-cn.com/problems/remove-element/description/">27. 移除元素</a></h2>
<p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p>示例 1:</p>
<p>给定 nums = [3,2,2,3], val = 3,</p>
<p>函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</p>
<p>你不需要考虑数组中超出新长度后面的元素。
示例 2:</p>
<p>给定 nums = [0,1,2,2,3,0,4,2], val = 2,</p>
<p>函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p>
<p>注意这五个元素可为任意顺序。</p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<h3 id="分析">分析</h3>
<p>本题和 <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/">26. 删除排序数组中的重复项</a></p>
<p>是类似的，只需要稍微修改就可以了， 指示器从0 开始，遍历从0开始，把不相等的挪到指示器位置，然后指示器加一。代码如下：</p>
<pre tabindex="0"><code>
public int removeElement(int[] nums, int val) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        int len = 0;
        for (int i = 0; i &lt; nums.length; i++) {
            if (nums[i] != val) {
                nums[len] = nums[i];
                len++;
            }

        }


       
        return len;

    }
</code></pre>]]></content></item><item><title>Week1008_review</title><link>/posts/arts/week1008_review/</link><pubDate>Fri, 31 Mar 2023 15:45:33 +0000</pubDate><guid>/posts/arts/week1008_review/</guid><description>ARTS - Review 为什么Java小伙对Node.js和JavaScript 如此兴奋？ &amp;ndash; David Herron , 软件工程师和作家，热衷于Node.js 以及清洁能源技术。Node.js WEB 开发网站的作者。https://sourcerer.io/robogeek
在Sun Microsystems 公司JavaSE 组工作超十年的人不应该牺牲Java字节码，并将抽象接口实例化进行到底吗？对这个前JavaSE组成员，在2011年学习Node.js平台就像呼吸了新空气。在被Sun公司在2009年一月份被解雇(仅仅被甲骨文收购前)后，我学习并迷上了Node.js
有多着迷？从2010年，我写了大量的Node.js编程的文章。即，Node.js Web开发四个版本，再加上Node.js编程的其他书籍和众多博客教程帖子。用大量的时间阐述Node.js和JavaScript语言的先进性。
在Sun microsystems 工作时，我信任Java里的一切。我在JavaONE 大会提出了会话，共同开发了 java.awt.Robot 类，运行了Mustang Regressions 竞赛（Java 1.6 发行版的Bug追踪竞赛），帮助启动了“Java发行许可证”，这是linux发行版 预先的Jdk的方案，之后在发行正式openjdk扮演了个小角色。一路上我在 java.net(现在已废弃) 博客上，一周写两篇文章，坚持了6年讨论Java生态。 一个很大的主题就是捍卫Java语言和预言Java要死的言论斗争。
和Java字节码共同生活会是怎样？我在这里的解释就是，怎么作为Java倡导者直到死去，就怎么作为Node.js/JavaScript 倡导者直到死去。
这并不是说我完全脱离Java。过去3年我写了一堆重要的 Java/Spring/Hibernate代码。当我全情投入工作&amp;ndash; 我在 Solar Industry 做精神满足的事情像写kiloWatt-hours的数据库查询 &amp;ndash; Java编码失去了热情。
两年的 Spring 编码教会了一个清晰的道理，复杂的书写不会产生简单，只会产生复杂。
Java 充满公式化的代码，掩盖了程序员的意图。 Spring 和 SpringBoot 教会了， 复杂产生更多的复杂 JavaEE 是一个 设计委员会设计的工程，覆盖了企业应用开发的一切，因此很复杂 Spring的编程体验是很好的，直到有一天一个难以理解的没听过的异常在子系统里爆出来，定位问题就需要3天以上 框架允许编码器编写0代码的开销是多少？ 当IDE 像Eclipse越来越强大，就是Java复杂的一个征兆。 Node.js 就是一个轻量级事件驱动框架的结晶。 JavaScript社区就像乐于移除模板，让程序员可以表达自己的意图。 回调地狱的解决方案，就是异步/等待 函数，就是移除样板的例子，让程序更能展示意图。 用Node.js 编码就是乐趣。 JavaScript 缺乏Java的严格类型检查。这是双刃剑，代码更易于编写，但需要更多测试确保正确。 npm /yarn 包管理系统 用着很有趣， 对应Java是Maven Java和Node.</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="为什么java小伙对nodejs和javascript-如此兴奋httpsblogsourcereriowhy-is-a-java-guy-so-excited-about-node-js-and-javascript-7cfc423efb44"><a href="https://blog.sourcerer.io/why-is-a-java-guy-so-excited-about-node-js-and-javascript-7cfc423efb44">为什么Java小伙对Node.js和JavaScript 如此兴奋？</a></h2>
<p>&ndash; David Herron , 软件工程师和作家，热衷于Node.js 以及清洁能源技术。Node.js WEB 开发网站的作者。https://sourcerer.io/robogeek</p>
<p>在Sun Microsystems 公司JavaSE 组工作超十年的人不应该牺牲Java字节码，并将抽象接口实例化进行到底吗？对这个前JavaSE组成员，在2011年学习Node.js平台就像呼吸了新空气。在被Sun公司在2009年一月份被解雇(仅仅被甲骨文收购前)后，我学习并迷上了Node.js</p>
<p>有多着迷？从2010年，我写了大量的Node.js编程的文章。即，Node.js Web开发四个版本，再加上Node.js编程的其他书籍和众多博客教程帖子。用大量的时间阐述Node.js和JavaScript语言的先进性。</p>
<p>在Sun microsystems 工作时，我信任Java里的一切。我在JavaONE 大会提出了会话，共同开发了 java.awt.Robot 类，运行了Mustang Regressions 竞赛（Java 1.6 发行版的Bug追踪竞赛），帮助启动了“Java发行许可证”，这是linux发行版 预先的Jdk的方案，之后在发行正式openjdk扮演了个小角色。一路上我在 java.net(现在已废弃) 博客上，一周写两篇文章，坚持了6年讨论Java生态。
一个很大的主题就是捍卫Java语言和预言Java要死的言论斗争。</p>
<p>和Java字节码共同生活会是怎样？我在这里的解释就是，怎么作为Java倡导者直到死去，就怎么作为Node.js/JavaScript 倡导者直到死去。</p>
<p>这并不是说我完全脱离Java。过去3年我写了一堆重要的 Java/Spring/Hibernate代码。当我全情投入工作&ndash; 我在 Solar Industry 做精神满足的事情像写kiloWatt-hours的数据库查询 &ndash; Java编码失去了热情。</p>
<p>两年的 Spring 编码教会了一个清晰的道理，复杂的书写不会产生简单，只会产生复杂。</p>
<ul>
<li>Java 充满公式化的代码，掩盖了程序员的意图。</li>
<li>Spring 和 SpringBoot 教会了， 复杂产生更多的复杂</li>
<li>JavaEE 是一个 设计委员会设计的工程，覆盖了企业应用开发的一切，因此很复杂</li>
<li>Spring的编程体验是很好的，直到有一天一个难以理解的没听过的异常在子系统里爆出来，定位问题就需要3天以上</li>
<li>框架允许编码器编写0代码的开销是多少？</li>
<li>当IDE 像Eclipse越来越强大，就是Java复杂的一个征兆。</li>
<li>Node.js 就是一个轻量级事件驱动框架的结晶。</li>
<li>JavaScript社区就像乐于移除模板，让程序员可以表达自己的意图。</li>
<li>回调地狱的解决方案，就是异步/等待 函数，就是移除样板的例子，让程序更能展示意图。</li>
<li>用Node.js 编码就是乐趣。</li>
<li>JavaScript 缺乏Java的严格类型检查。这是双刃剑，代码更易于编写，但需要更多测试确保正确。</li>
<li>npm /yarn 包管理系统 用着很有趣， 对应Java是Maven</li>
<li>Java和Node.js 都提供了卓越性能。与JavaScript慢所以Node.js就慢的观念背道而驰。</li>
<li>Node.js的性能是搭载着 用来提高Chrome浏览器性能的谷歌开发的V8引擎上。</li>
<li>浏览器之间的竞争使得JavaScript越来强大，利于Node.js</li>
</ul>
<h3 id="java成为了负担nodejs编码充满乐趣">Java成为了负担，Node.js编码充满乐趣</h3>
<p>一些工具或对象是设计师多年设计的精华。他们尝试不同想法，删除非必要的属性，最后只剩下必须的。常常这些对象很强大且简单令人激动，但Java不是这个路子。</p>
<p>Spring 是Java web开发的流行框架。Spring，尤其Spring Boot 的核心期望是更易于使用预先配置的JavaEE栈。Spring 程序员不必要处理所有的 Servlets ，数据持久化，应用服务器，谁知道还有其他啥东西，就可以得到一个完整的系统。Spring替你关心这些所有的细节，你只需要关注编码。例如， JPA Repository 类就能通过类似方法“findUserByFirstName” 来合成数据库查询。 &mdash;你不需要写任何代码，简简单单的用Repository 格式的方法命名，然后Spring处理剩下的一切。</p>
<p>这是一个伟大的故事，优美的体验，直到破灭。</p>
<p>当你发现一个Hibernate 持久对象异常“detached entity passed to persist” 时候，代表什么意思呢？ 花费几天来排错 &ndash; 过度简化的风险 &ndash; 它意味着 REST端点的JSON ID属性包含值。Hibernate，过度简化，想要控制ID 的值，抛出这个令人困惑的异常。有上千个类似的令人困惑不清的异常信息。当子系统用Spring 栈之后，就像一个复仇者等着你犯错，然后用应用程序突然崩溃的意外来袭击你。</p>
<p>然后大量追踪堆栈。然后好几屏的全是抽象方法。Spring显然解决了实现代码所需的配置。这种级别的抽象明显很多逻辑去寻找一切执行请求。一个长的堆栈追踪并不一定是坏的。反而指出一个内存/性能 开销的大小。</p>
<p>当程序员写0代码时候 findUserByFirstName 会如何执行呢？ 框架不得不解析方法名， 猜测程序员的意图，构造像语法树一样的东西，生成SQL等。这一切的开销是多少?这样编码人就不用编码了吗？</p>
<p>经过几十次这样的学习后，花上几星期时间成本学习你不本不该学的奥秘，你可能会得出和我一样的结论：把复杂写出来并不会产生简单，只会产生更多复杂。</p>
<p>转向Node.js 的点。</p>
<h3 id="另一方面说nodejs">另一方面说Node.js</h3>
<p>Spring 和JavaEE 及其复杂的地方， Node.js 就像呼吸新空气。首先是Ryan Dahl 在开发Node.js核心平台式使用了设计美学。Dahl过去经验是用多个线程制作了一个重量级的复杂系统。他认为有些不一样的地方，花费两年在Node.js 添加很多精品。结果就是一个轻量级系统，一个单个执行线程，一个精巧的JavaScript 匿名异步回调函数， 一个巧妙的实现异步的运行库。最初的定位是用是用事件传递给回调函数实现高吞吐量事件处理。</p>
<p>然后就是JavaScript 语言本身。JavaScript程序员似乎有取出样公式化的美感，所以程序员的意图可以清晰显示出来。</p>
<p>对比Java和JavaScript 实现监听者方法的实现例子是， 在Java Listeners 需要创建一个抽象接口类的实体。这需要大量的语法掩盖正在发生的事。程序员如何在看到模板的面纱后面？</p>
<p>在JavaScript 用简单的匿名函数 - 闭包。 不需要寻找正确的抽象接口。相反，你只需要编写所需代码，没有多余冗长。</p>
<p>另外的：很多编程语言模糊了程序猿的意图，让代码难懂。</p>
<p>这一点在Node.js 上，我们必须指出：回调地狱。</p>
<h3 id="解决方案有时会出现自己的问题">解决方案有时会出现自己的问题</h3>
<p>JavaScript 异步编程我们长期有两个困扰问题。一个在JavaScript是什么时候回变成 回调地狱。 很容易就陷入回调函数深层嵌套， 每个级别的复杂嵌套代码，都可能产生错误影响全局。一个相关的问题是JavaSCript语言不能帮助程序员正确的表达异步执行。</p>
<p>几个库涌现出来，希望简化异步执行。另一个关于复杂性的例子，创造了更多复杂性。</p>
<p>给个例子：</p>
<pre tabindex="0"><code>
const async = require(‘async’);
const fs = require(‘fs’);
const cat = function(filez, fini) {
  async.eachSeries(filez, function(filenm, next) {
    fs.readFile(filenm, ‘utf8’, function(err, data) {
      if (err) return next(err);
      process.stdout.write(data, ‘utf8’, function(err) {
        if (err) next(err);
        else next();
      });
    });
  },
  function(err) {
    if (err) fini(err);
    else fini();
  });
};
cat(process.argv.slice(2), function(err) {
  if (err) console.error(err.stack);
});
</code></pre><p>这个简单的应用就是对UNIX 程序Cat 命令的简单模仿。
async 库天才的简化异步执行序列。但是它使用需要一堆样板代码掩盖程序员的意图。</p>
]]></content></item><item><title>Week1008_share</title><link>/posts/arts/week1008_share/</link><pubDate>Fri, 31 Mar 2023 15:45:33 +0000</pubDate><guid>/posts/arts/week1008_share/</guid><description>ARTS - Share 说说 super-csv 官网地址是 http://super-csv.github.io/
有些系统需要csv格式的文件，所以就发现了这样一个框架.其实直接使用逗号分隔，数据换行也是可以的，框架带来了一定的便利性。
我们先看Writer, 一般是Jdbc 数据库读数据转化成JavaBean ，然后生成csv文件。
先定义一个客户bean
public @Data @AllArgsConstructor @NoArgsConstructor class CustomerBean { private String no; private String name; private Date birthDate; private Boolean deleteFlag; private Integer age; private String email; } 然后使用 CsvBeanWriter 来写文件：
private static void writeWithCsvBeanWriter() throws IOException { CustomerBean jack = new CustomerBean(&amp;#34;1&amp;#34;, &amp;#34;jack&amp;#34;, new Date(), true, 20, null); CustomerBean bob = new CustomerBean(&amp;#34;2&amp;#34;, &amp;#34;bob&amp;#34;, new Date(), false, 12, &amp;#34;123@gmail.</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="说说-super-csv">说说 super-csv</h2>
<p>官网地址是 <a href="http://super-csv.github.io/">http://super-csv.github.io/</a></p>
<p>有些系统需要csv格式的文件，所以就发现了这样一个框架.其实直接使用逗号分隔，数据换行也是可以的，框架带来了一定的便利性。</p>
<p>我们先看Writer, 一般是Jdbc 数据库读数据转化成JavaBean ，然后生成csv文件。</p>
<p>先定义一个客户bean</p>
<pre tabindex="0"><code>public @Data @AllArgsConstructor @NoArgsConstructor class CustomerBean {

    private String no;
    private String name;
    private Date birthDate;
    private Boolean deleteFlag;
    private Integer age;
    private String email;
    
}
</code></pre><p>然后使用 CsvBeanWriter 来写文件：</p>
<pre tabindex="0"><code>private static void writeWithCsvBeanWriter() throws IOException {

        CustomerBean jack = new CustomerBean(&#34;1&#34;, &#34;jack&#34;, new Date(), true, 20, null);
        CustomerBean bob = new CustomerBean(&#34;2&#34;, &#34;bob&#34;, new Date(), false, 12, &#34;123@gmail.com&#34;);

        List&lt;CustomerBean&gt; list = Arrays.asList(jack, bob);
        ICsvBeanWriter writer = null;
        try {
            writer = new CsvBeanWriter(new FileWriter(&#34;target/cust.csv&#34;), CsvPreference.STANDARD_PREFERENCE);
            
            // 这里注意要和 bean里面名字一样
            String[] header = {&#34;no&#34;, &#34;name&#34;, &#34;BirthDate&#34;, &#34;deleteFlag&#34;, &#34;Age&#34;, &#34;Email&#34;};

            writer.writeHeader(header);

            for (CustomerBean bean : list) {
                writer.write(bean, header);

            }
        } finally {

            if (writer != null) {
                writer.close();
            }
        }

    }
</code></pre><p>结果就是：</p>
<pre tabindex="0"><code>
no,name,BirthDate,deleteFlag,Age,Email
1,jack,Thu Aug 30 18:15:28 CST 2018,true,20,
2,bob,Thu Aug 30 18:15:28 CST 2018,false,12,123@gmail.com
</code></pre><p>有时我们需要对结果约束，就使用到了CellProcessor， 提前构造好</p>
<pre tabindex="0"><code>
private static CellProcessor[] getProcessors() {
        final CellProcessor[] processors = new CellProcessor[] {

                new UniqueHashCode(), 
                new NotNull(), // 非空
                new FmtDate(&#34;yyyy-MM-dd&#34;), // 日期格式化
                new Optional(new FmtBool(&#34;已删除&#34;, &#34;正常&#34;)), // 转义布尔类型
                new LMinMax(18L, 150L), // 限定数据范围
                new Optional()
        };

        return processors;
    }
</code></pre><p>我们设置了一些Customer的参数，如年龄 18-150岁</p>
<pre tabindex="0"><code>writer.write(bean, header, getProcessors());
</code></pre><p>运行报异常</p>
<pre tabindex="0"><code>
Exception in thread &#34;main&#34; org.supercsv.exception.SuperCsvConstraintViolationException: 12 does not lie between the min (18) and max (150) values (inclusive)
processor=org.supercsv.cellprocessor.constraint.LMinMax
context={lineNo=3, rowNo=3, columnNo=5, rowSource=[2, bob, Thu Aug 30 18:20:22 CST 2018, false, 12, 123@gmail.com]}
	at org.supercsv.cellprocessor.constraint.LMinMax.execute(LMinMax.java:156)
	
</code></pre><p>根据异常信息知道 age 12不符合定义。</p>
<p>CsvListWriter类似，只是把Bean换成list</p>
<pre tabindex="0"><code>List&lt;CustomerBean&gt; list = Arrays.asList(jack, bob);
        ICsvListWriter writer = null;
        try {
            writer = new CsvListWriter(new FileWriter(&#34;target/cust.csv&#34;), CsvPreference.STANDARD_PREFERENCE);
            String[] header = {&#34;no&#34;, &#34;name&#34;, &#34;BirthDate&#34;, &#34;deleteFlag&#34;, &#34;Age&#34;, &#34;Email&#34;};

            writer.writeHeader(header);

            writer.write(list);
            
            // 或者加上校验
            //writer.write(list, getProcessors());
        } finally {

            if (writer != null) {
                writer.close();
            }
        }
</code></pre>]]></content></item><item><title>Week1008_tip</title><link>/posts/arts/week1008_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:33 +0000</pubDate><guid>/posts/arts/week1008_tip/</guid><description>ARTS - Tip 数字的格式化 工作中有个需求，要把货币数字，改成逢千逗号分隔的格式，于是就总结下实现方式。
1. DecimalFormat BigDecimal b1 = BigDecimal.valueOf(100543000.12672); DecimalFormat df = new DecimalFormat(&amp;#34;###,##0&amp;#34;); // 100,543,000 DecimalFormat df2 = new DecimalFormat(&amp;#34;###,##0.&amp;#34;); // 100,543,000. DecimalFormat df3 = new DecimalFormat(&amp;#34;###,##0.0&amp;#34;); //100,543,000.1 DecimalFormat df4 = new DecimalFormat(&amp;#34;###,##0.00&amp;#34;); // 100,543,000.13 DecimalFormat df5 = new DecimalFormat(&amp;#34;###,##0.000&amp;#34;); //100,543,000.127 DecimalFormat df6 = new DecimalFormat(&amp;#34;###,##0.0000&amp;#34;); //100,543,000.1267 由此可知，在小数规定位数后，会做四舍五入操作。
2. NumberFormat NumberFormat f1 = NumberFormat.getCurrencyInstance(); // 货币格式化 System.out.println(f1.format(b1)); //￥100,543,000.13 NumberFormat f2 = NumberFormat.getNumberInstance(); System.out.println(f2.format(b1)); //100,543,000.127 System.out.println(f2.format(1123)); //1,123 System.out.println(f2.format(1123.1)); //1,123.</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="数字的格式化">数字的格式化</h2>
<p>工作中有个需求，要把货币数字，改成逢千逗号分隔的格式，于是就总结下实现方式。</p>
<h3 id="1--decimalformat">1.  DecimalFormat</h3>
<pre tabindex="0"><code>
		BigDecimal b1 = BigDecimal.valueOf(100543000.12672);

        DecimalFormat df = new DecimalFormat(&#34;###,##0&#34;);  // 100,543,000
        DecimalFormat df2 = new DecimalFormat(&#34;###,##0.&#34;); // 100,543,000.
        DecimalFormat df3 = new DecimalFormat(&#34;###,##0.0&#34;); //100,543,000.1
        DecimalFormat df4 = new DecimalFormat(&#34;###,##0.00&#34;); // 100,543,000.13
        DecimalFormat df5 = new DecimalFormat(&#34;###,##0.000&#34;); //100,543,000.127
        DecimalFormat df6 = new DecimalFormat(&#34;###,##0.0000&#34;); //100,543,000.1267
        
 
</code></pre><p>由此可知，在小数规定位数后，会做四舍五入操作。</p>
<h3 id="2-numberformat">2. NumberFormat</h3>
<pre tabindex="0"><code>
	NumberFormat f1 = NumberFormat.getCurrencyInstance();  // 货币格式化
	System.out.println(f1.format(b1)); //￥100,543,000.13
	
	NumberFormat f2 = NumberFormat.getNumberInstance();
	System.out.println(f2.format(b1)); //100,543,000.127
	
	System.out.println(f2.format(1123)); //1,123
	System.out.println(f2.format(1123.1)); //1,123.1
	System.out.println(f2.format(1123.14)); //1,123.14
	System.out.println(f2.format(1123.145)); //1,123.145
	System.out.println(f2.format(1123.1458)); //1,123.146
	System.out.println(f2.format(1123.14581)); //1,123.146
</code></pre><p>由此可知，如果小数位数超过3位，就会保留3位小数，四舍五入。</p>
<p>如果设置了不用千分位形式：</p>
<pre tabindex="0"><code>		f2.setGroupingUsed(false);

        System.out.println(f2.format(1123));
        System.out.println(f2.format(1123.1));
        System.out.println(f2.format(1123.14));
        System.out.println(f2.format(1123.145));
        System.out.println(f2.format(1123.1458));
        System.out.println(f2.format(1123.14581));
        
        	
        	
        	// output
        
      		1123
			1123.1
			1123.14
			1123.145
			1123.146
			1123.146
</code></pre><h3 id="3-javascript-方式实现千分位">3. JavaScript 方式实现千分位</h3>
<pre tabindex="0"><code>
function number_format(number, decimals, dec_point, thousands_sep) {
    /*
    * 参数说明：
    * number：要格式化的数字
    * decimals：保留几位小数
    * dec_point：小数点符号
    * thousands_sep：千分位符号
    * */
    number = (number + &#39;&#39;).replace(/[^0-9+-Ee.]/g, &#39;&#39;);
    var n = !isFinite(+number) ? 0 : +number,
        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
        sep = (typeof thousands_sep === &#39;undefined&#39;) ? &#39;,&#39; : thousands_sep,
        dec = (typeof dec_point === &#39;undefined&#39;) ? &#39;.&#39; : dec_point,
        s = &#39;&#39;,
        toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec);
            return &#39;&#39; + Math.ceil(n * k) / k;
        };

    s = (prec ? toFixedFix(n, prec) : &#39;&#39; + Math.round(n)).split(&#39;.&#39;);
    var re = /(-?\d+)(\d{3})/;
    while (re.test(s[0])) {
        s[0] = s[0].replace(re, &#34;$1&#34; + sep + &#34;$2&#34;);
    }

    if ((s[1] || &#39;&#39;).length &lt; prec) {
        s[1] = s[1] || &#39;&#39;;
        s[1] += new Array(prec - s[1].length + 1).join(&#39;0&#39;);
    }
    return s.join(dec);
}
</code></pre>]]></content></item><item><title>Week1009_algorithm</title><link>/posts/arts/week1009_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:33 +0000</pubDate><guid>/posts/arts/week1009_algorithm/</guid><description>ARTS - Algorithm 28. 实现strStr()
实现 strStr() 函数。
给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。
思路 本人用Java 实现， 直接使用 indexOf 函数就可实现，但是这道题考察的就是indexOf实现，所以写了一下实现过程. 我的思路是
遍历haystack, 如果碰到和 needle 第一位的字符相等，就进入子循环，遍历needle字符串，看剩下的haystack 是否和needle相等。代码如下：
public int strStr(String haystack, String needle) { if (haystack == null || needle == null) { return -1; } if (needle.length() == 0) { return 0; } int len1 = haystack.length(); int len2 = needle.length(); for (int i = 0; i &amp;lt; len1; i++) { if (haystack.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<p><a href="https://leetcode-cn.com/problems/implement-strstr/description/">28. 实现strStr()</a></p>
<p>实现 strStr() 函数。</p>
<p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p>
<h3 id="思路">思路</h3>
<p>本人用Java 实现， 直接使用 indexOf 函数就可实现，但是这道题考察的就是indexOf实现，所以写了一下实现过程. 我的思路是</p>
<p>遍历haystack, 如果碰到和 needle 第一位的字符相等，就进入子循环，遍历needle字符串，看剩下的haystack 是否和needle相等。代码如下：</p>
<pre tabindex="0"><code>public int strStr(String haystack, String needle) {

        if (haystack == null || needle == null) {
            return  -1;
        }

        if (needle.length() == 0) {
            return 0;
        }


        int len1 = haystack.length();
        int len2 = needle.length();

        for (int i = 0; i &lt; len1; i++) {

            if (haystack.charAt(i) == needle.charAt(0)) {

                // 如果needle 就1位
                if (len2 == 1) {
                    return i;
                }

                // 如果haystack剩余没有needle长，返回 -1
                if (len1 - i &lt; len2) {
                    return -1;
                }

					// 记录 两个串相等的个数
                int j = 1;
                for (int k = 1; k &lt; needle.length(); k++) {

                    if (needle.charAt(k) != haystack.charAt(i + k)) {
                        break;
                    }

                    j++;

                }

                if (j == len2) {
                    return i;
                }

            }

        }



        return -1;
    }
</code></pre><h3 id="github-实现">github 实现</h3>
<p>我们来看下github 的实现：
<a href="https://github.com/haoel/leetcode/blob/master/algorithms/java/src/strStr/strStr.java">https://github.com/haoel/leetcode/blob/master/algorithms/java/src/strStr/strStr.java</a></p>
<pre tabindex="0"><code>
public int strStr(String haystack, String needle) {
        if (haystack == null || needle == null) {
            return -1;
        }
        int i, j = 0;
        for (i = 0; i &lt; haystack.length() - needle.length() + 1; i++) {
            for (j = 0; j &lt; needle.length(); j++) {
                if (haystack.charAt(i + j) != needle.charAt(j)) {
                    break;
                }
            }
            if (j == needle.length()) {
                return i;
            }
        }
        return -1;
    }
</code></pre><p>这样实现就简练一些， 避开了多余一步的 needle 和 haystack剩余长度的检查。</p>
<h3 id="jdk-实现">JDK 实现</h3>
<p>我们再来看看JDK 实现, 就是String的 indexOf方法</p>
<pre tabindex="0"><code>
	public int indexOf(String str) {
	        return indexOf(str, 0);
	}

	public int indexOf(String str, int fromIndex) {
        return indexOf(value, 0, value.length,
                str.value, 0, str.value.length, fromIndex);
    }
    
    static int indexOf(char[] source, int sourceOffset, int sourceCount,
            char[] target, int targetOffset, int targetCount,
            int fromIndex) {
        if (fromIndex &gt;= sourceCount) {
            return (targetCount == 0 ? sourceCount : -1);
        }
        if (fromIndex &lt; 0) {
            fromIndex = 0;
        }
        if (targetCount == 0) {
            return fromIndex;
        }

        char first = target[targetOffset];
        int max = sourceOffset + (sourceCount - targetCount);

        for (int i = sourceOffset + fromIndex; i &lt;= max; i++) {
            /* Look for first character. */
            if (source[i] != first) {
                while (++i &lt;= max &amp;&amp; source[i] != first);
            }

            /* Found first character, now look at the rest of v2 */
            if (i &lt;= max) {
                int j = i + 1;
                int end = j + targetCount - 1;
                for (int k = targetOffset + 1; j &lt; end &amp;&amp; source[j]
                        == target[k]; j++, k++);

                if (j == end) {
                    /* Found whole string. */
                    return i - sourceOffset;
                }
            }
        }
        return -1;
    }
</code></pre><h3 id="jdk-实现strstr">JDK 实现strStr</h3>
<p>JDK实现，使用了</p>
<pre tabindex="0"><code>if (haystack.charAt(i) != first) {
                while(++i &lt;= max &amp;&amp; haystack.charAt(i) != first);
            }
</code></pre><p>这个样就不用每次取元素对比，直到元素相等再比。</p>
<pre tabindex="0"><code>
public int strStr4(String haystack, String needle) {

        if (haystack == null || needle == null) {
            return -1;
        }

        if (needle.length() == 0) {
            return 0;
        }

        int max = haystack.length() - needle.length();

        char first = needle.charAt(0);
        for (int i = 0; i &lt;= max; i++) {

            if (haystack.charAt(i) != first) {
                while(++i &lt;= max &amp;&amp; haystack.charAt(i) != first);
            }

            /* Found first character, now look at the rest of v2 */
            if (i &lt;= max) {
                int j = i + 1;
                int end = j + needle.length() - 1;
                for (int k = 1; j &lt; end &amp;&amp; haystack.charAt(j)
                        == needle.charAt(k); j++, k++);

                if (j == end) {
                    /* Found whole string. */
                    return i;
                }
            }

        }



        return -1;
    }
</code></pre>]]></content></item><item><title>Week1005_algorithm</title><link>/posts/arts/week1005_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:32 +0000</pubDate><guid>/posts/arts/week1005_algorithm/</guid><description>ARTS - Algorithm 20. 有效的括号
给定一个只包括 &amp;lsquo;(&amp;rsquo;，&amp;rsquo;)&amp;rsquo;，&amp;rsquo;{&amp;rsquo;，&amp;rsquo;}&amp;rsquo;，&amp;rsquo;[&amp;rsquo;，&amp;rsquo;]&amp;rsquo; 的字符串，判断字符串是否有效。
有效字符串需满足：
左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。
思考 如果是程序代码中，很容易想到， 该字符是成对出现，排成一行后，就是偶数个， 对称的，可以用这个特性来比较。但是还有一种情况，是这样的： &amp;ldquo;()[]{}&amp;rdquo; ，这样的组合也是正确的，这时候就要有不同的判断逻辑，可以将事情分为这两类，参考答案后发现作者巧妙的使用栈这个数据结构，左边的负号入栈，右边的符号就出栈对比，完美的解决这个问题。以下是代码：
public boolean isValid(String s) { if (s == null || s.length() == 0) { return true; } Stack&amp;lt;Character&amp;gt; stack = new Stack&amp;lt;&amp;gt;(); char[] chars = s.toCharArray(); for (char ch : chars) { if (ch == &amp;#39;(&amp;#39; || ch == &amp;#39;[&amp;#39; || ch == &amp;#39;{&amp;#39;) { stack.push(ch); } else if (ch == &amp;#39;)&amp;#39; || ch == &amp;#39;]&amp;#39; || ch == &amp;#39;}&amp;#39;) { if (stack.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<p><a href="https://leetcode-cn.com/problems/valid-parentheses/description/">20. 有效的括号</a></p>
<p>给定一个只包括 &lsquo;(&rsquo;，&rsquo;)&rsquo;，&rsquo;{&rsquo;，&rsquo;}&rsquo;，&rsquo;[&rsquo;，&rsquo;]&rsquo; 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。</p>
<h3 id="思考">思考</h3>
<p>如果是程序代码中，很容易想到， 该字符是成对出现，排成一行后，就是偶数个， 对称的，可以用这个特性来比较。但是还有一种情况，是这样的： &ldquo;()[]{}&rdquo; ，这样的组合也是正确的，这时候就要有不同的判断逻辑，可以将事情分为这两类，参考答案后发现作者巧妙的使用栈这个数据结构，左边的负号入栈，右边的符号就出栈对比，完美的解决这个问题。以下是代码：</p>
<pre tabindex="0"><code>
public boolean isValid(String s) {

        if (s == null || s.length() == 0) {
            return true;
        }
        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();

        char[] chars = s.toCharArray();
        for (char ch : chars) {
            if (ch == &#39;(&#39; || ch == &#39;[&#39; || ch == &#39;{&#39;) {
                stack.push(ch);
            } else if (ch == &#39;)&#39; || ch == &#39;]&#39; || ch == &#39;}&#39;) {
                if (stack.isEmpty()) {
                    return false;
                }
                char top = stack.peek();
                if ((top == &#39;(&#39; &amp;&amp; ch == &#39;)&#39;) || (top == &#39;[&#39; &amp;&amp; ch == &#39;]&#39;) || (top == &#39;{&#39; &amp;&amp; ch == &#39;}&#39;)) {
                    stack.pop();
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }

        return stack.isEmpty();


    }
    
</code></pre>]]></content></item><item><title>Week1005_review</title><link>/posts/arts/week1005_review/</link><pubDate>Fri, 31 Mar 2023 15:45:32 +0000</pubDate><guid>/posts/arts/week1005_review/</guid><description>ARTS - Review 软件的特点就是没有代码 早期的数码计算机不是十分有用。当然，他们比取代的穿孔打点机强大的多，但是对于编程来说是非常难的。需要用汇编语言写指令，非常耗时且困难。
当John Backus 在1950年代初开发了FORTRAN 语言后事情发生改变，该语言使用类似英语的逻辑控制命令，编译成低级机器语言来执行，使得编程更简单来取代了汇编语言。
如今，像 Quick Base , Mendix , Zudy 这样的公司正在尝试类似的动作，视图将代码转化成可视化界面。非常类似从汇编到FORTRAN 的转换，底层代码依然不变，但使得表示更简单。这些低级代码、无代码平台开始扰乱软件如何为企业提供动力。
可视化界面是无代码平台力量的关键 云中断与应用程序编程接口经济 传统上，技术有利于大企业。开发系统需要很多附带投资如硬件，昂贵的设计软件咨询费。一旦被立项，也通常很难去修改或更新升级，所以系统将会运行数年，甚至几十年，没有显著的升级。
“态度是，‘我们创建它， 你们应该喜欢它’” , Quick Base 公司的战略与产品高级副总裁 Jay Jamison 说。所以遗留系统盛行，入门只是学会了用它工作，并在清单和电子表格中自行处理，效率不高，但基本有效。
云端破坏了许多遗留系统，使强大的系统可以对联网的人都可用。而不是必须先支付，甚至最小的启动可以访问不逊于大公司的技术。或许一样重要，这系统可以通过程序api 接入其他系统。
云计算 和 api 很大程度上为小型敏捷公司提供了优势。如果没有遗留系统阻碍他们，他们可以比更大的竞争对手更快的部署云技术，为客户提供更好的服务。但是，无代码平台正在帮助大公司像初创公司的速度和敏捷性进行移动。
克服遗留系统 作为设施管理行业的高级行政人员，Bruce Squibb 熟知遗留系统的局限性。在设施管理中，每个项目本质上是独一无二的，系统需要适应不同类型的建模、客户需求、维护进度等。
例如， Squibb的公司 Able Services, 最近签了一份合同，管理一个大型大学的几个校区的家政服务。为了很有效的启动业务，你需要管理很多松散的终端，同时也要把经理、一线员工、客户放在一个页面上，这个是一个很大的工作。
早些年，大多数这样的业务都是用电子表格处理，然后汇总到中心办公室，在一个主报表里更新。然而 Squibb的团队设计了一款使用 QuickBase 产品设计的一个应用使得他们的工作很大部分的自动化完成，使得团队操作更快，更透明，也更少的出错。
或许更重要的是，因为 Quick Base 是一个无代码平台，应用可以根据需要轻松自定义或增强功能。例如，如果客户机构更新设备规则或者买新的设备，可以更改应用程序，以便在短短几小时内适应这些变化。
翻转模型 非常真实的意识，无码平台翻转了传统的IT模型。而不是开发者驱动应用将会怎样，一线管理者成为了过程中积极的一部分。很多业务建立在电子表格或清单剪切板的人或公司，现在确实可以基于云计算来开展。
“一个很大的优势对无码或少码平台来说，是让你虚拟的操作元素而不是真的去写代码。这同时加快了开发和提高了质量。” Marshal Worster ， Mendix 公司高级架构解决方案主管如是说。
可视化是无码平台的关键力量。因为如此易于使用，一线管理者和其他非技术人员可以自行做前端和基本功能，如建立自己的视图，设计和功能。而不是解释给开发者需要什么，可以直接展示给他们。
当今世界，每台桌子每个口袋都有电脑 根本上，无码平台搞好了敏捷在十年前的承诺。然而 ，与其让软件集成到剩下的公司里， 不如让剩下的公司集成进软件开发里。
创建一个敏捷企业 我们从早期计算机走了很长一段路，那时计算机是隐藏在后室的巨大机器，只能由精通神秘语言的神职人员来操作。今天，计算机走向千家万户。
无码平台帮助匹配分布式功能和分布式控制。无码对任何人说基本都是敏捷的， Quick Base 公司的Jay Jamison 告诉我，当敏捷软件使得开发人员向业务决策靠近时，无码平台使得一线管理人员在开发过程中也提供了价值，并且越来越多的建立自己的东西。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h3 id="软件的特点就是没有代码httpsmediumcomsstorythe-future-of-software-is-no-code-7140bd0c30e3"><a href="https://medium.com/s/story/the-future-of-software-is-no-code-7140bd0c30e3">软件的特点就是没有代码</a></h3>
<p>早期的数码计算机不是十分有用。当然，他们比取代的穿孔打点机强大的多，但是对于编程来说是非常难的。需要用汇编语言写指令，非常耗时且困难。</p>
<p>当John Backus 在1950年代初开发了FORTRAN 语言后事情发生改变，该语言使用类似英语的逻辑控制命令，编译成低级机器语言来执行，使得编程更简单来取代了汇编语言。</p>
<p>如今，像 Quick Base , Mendix ,  Zudy 这样的公司正在尝试类似的动作，视图将代码转化成可视化界面。非常类似从汇编到FORTRAN 的转换，底层代码依然不变，但使得表示更简单。这些低级代码、无代码平台开始扰乱软件如何为企业提供动力。</p>
<h3 id="可视化界面是无代码平台力量的关键"><em>可视化界面是无代码平台力量的关键</em></h3>
<h3 id="云中断与应用程序编程接口经济">云中断与应用程序编程接口经济</h3>
<p>传统上，技术有利于大企业。开发系统需要很多附带投资如硬件，昂贵的设计软件咨询费。一旦被立项，也通常很难去修改或更新升级，所以系统将会运行数年，甚至几十年，没有显著的升级。</p>
<p>“态度是，‘我们创建它， 你们应该喜欢它’” , Quick Base 公司的战略与产品高级副总裁 Jay Jamison 说。所以遗留系统盛行，入门只是学会了用它工作，并在清单和电子表格中自行处理，效率不高，但基本有效。</p>
<p>云端破坏了许多遗留系统，使强大的系统可以对联网的人都可用。而不是必须先支付，甚至最小的启动可以访问不逊于大公司的技术。或许一样重要，这系统可以通过程序api 接入其他系统。</p>
<p>云计算 和 api 很大程度上为小型敏捷公司提供了优势。如果没有遗留系统阻碍他们，他们可以比更大的竞争对手更快的部署云技术，为客户提供更好的服务。但是，无代码平台正在帮助大公司像初创公司的速度和敏捷性进行移动。</p>
<h3 id="克服遗留系统">克服遗留系统</h3>
<p>作为设施管理行业的高级行政人员，Bruce Squibb 熟知遗留系统的局限性。在设施管理中，每个项目本质上是独一无二的，系统需要适应不同类型的建模、客户需求、维护进度等。</p>
<p>例如， Squibb的公司 Able Services, 最近签了一份合同，管理一个大型大学的几个校区的家政服务。为了很有效的启动业务，你需要管理很多松散的终端，同时也要把经理、一线员工、客户放在一个页面上，这个是一个很大的工作。</p>
<p>早些年，大多数这样的业务都是用电子表格处理，然后汇总到中心办公室，在一个主报表里更新。然而 Squibb的团队设计了一款使用 QuickBase 产品设计的一个应用使得他们的工作很大部分的自动化完成，使得团队操作更快，更透明，也更少的出错。</p>
<p>或许更重要的是，因为 Quick Base 是一个无代码平台，应用可以根据需要轻松自定义或增强功能。例如，如果客户机构更新设备规则或者买新的设备，可以更改应用程序，以便在短短几小时内适应这些变化。</p>
<h3 id="翻转模型">翻转模型</h3>
<p>非常真实的意识，无码平台翻转了传统的IT模型。而不是开发者驱动应用将会怎样，一线管理者成为了过程中积极的一部分。很多业务建立在电子表格或清单剪切板的人或公司，现在确实可以基于云计算来开展。</p>
<p>“一个很大的优势对无码或少码平台来说，是让你虚拟的操作元素而不是真的去写代码。这同时加快了开发和提高了质量。” Marshal Worster ，	Mendix 公司高级架构解决方案主管如是说。</p>
<p>可视化是无码平台的关键力量。因为如此易于使用，一线管理者和其他非技术人员可以自行做前端和基本功能，如建立自己的视图，设计和功能。而不是解释给开发者需要什么，可以直接展示给他们。</p>
<h3 id="当今世界每台桌子每个口袋都有电脑"><em>当今世界，每台桌子每个口袋都有电脑</em></h3>
<p>根本上，无码平台搞好了敏捷在十年前的承诺。然而 ，与其让软件集成到剩下的公司里， 不如让剩下的公司集成进软件开发里。</p>
<h3 id="创建一个敏捷企业">创建一个敏捷企业</h3>
<p>我们从早期计算机走了很长一段路，那时计算机是隐藏在后室的巨大机器，只能由精通神秘语言的神职人员来操作。今天，计算机走向千家万户。</p>
<p>无码平台帮助匹配分布式功能和分布式控制。无码对任何人说基本都是敏捷的， Quick Base 公司的Jay Jamison 告诉我，当敏捷软件使得开发人员向业务决策靠近时，无码平台使得一线管理人员在开发过程中也提供了价值，并且越来越多的建立自己的东西。</p>
<p>他也指出，当一线管理人员能够影响开发过程时，策略和实现可以更好的契合。你在讨论的事情可以在几天几周内影响到业务策略，而不是几个月甚至几年。</p>
<p>当今，计算机作为基本的业务工具，越来越少“高科技”成分，我们可以放在手边每天使用它，让我们变更好。技术的未来总是更人性化。</p>
]]></content></item><item><title>Week1005_share</title><link>/posts/arts/week1005_share/</link><pubDate>Fri, 31 Mar 2023 15:45:32 +0000</pubDate><guid>/posts/arts/week1005_share/</guid><description>ARTS - Share 怎样写简历 - 左耳听风阅读 原文链接
作者有丰富的面试和被面试经验，提到的一些注意点也很有价值。
我们知道真正的好简历是要用自己的经历去写的，比如，有人的简历就是一句话： 我发明了 Unix.
这当然是极少数牛人的简历，对于绝大多数并非超级牛人来说，还是要好好写内容。
1. 用好模板 比如，首先要找一个专业点的模板， 微软的Office模板。简历最好pdf 而不是 word. 这里是方便打开避免格式错误吧。 然后内容整体上就是要突出重点了，内容不要太多，多了就无法突出重点了。
2. 个人简介与信息 这里简介主要突出自己擅长的方面，比如很长时间的行业背景，XX平台的负责人或主力。擅长XX技术等。
作为技术人员，最好要有自己的个人网站，网站的内容要有一定深度，反映了自己的技术观。当然github若不是洁白一片，也可以罗列上去。
对于个人技能，要从小到大展开，技术栈 、 技术领域 、业务领域、经验和软技能 等。
3. 技术知识准备 一般来说，简历写了什么面试就会问什么，对于知识掌握程度要诚实写，精通是精通、熟悉是熟悉、了解是了解。正规的面试都会抓住知识点一直问到底，考察你的掌握程度。
对于算法题，要平时多积累，在leetcode 上刷题，提前准备一些经典算法，详细了解并掌握。
工作项目上，要突出重点，主要写那些你做了重大贡献的。
4. 思考 功夫花在平时，实力才是王牌。</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="怎样写简历---左耳听风阅读">怎样写简历 - 左耳听风阅读</h2>
<p><a href="https://time.geekbang.org/column/article/13067">原文链接</a></p>
<p>作者有丰富的面试和被面试经验，提到的一些注意点也很有价值。</p>
<blockquote>
<p>我们知道真正的好简历是要用自己的经历去写的，比如，有人的简历就是一句话： 我发明了 Unix.</p>
</blockquote>
<p>这当然是极少数牛人的简历，对于绝大多数并非超级牛人来说，还是要好好写内容。</p>
<h3 id="1--用好模板">1.  用好模板</h3>
<p>比如，首先要找一个专业点的模板， <a href="https://templates.office.com/en-us/Resumes-and-Cover-Letters">微软的Office模板</a>。简历最好pdf 而不是 word. 这里是方便打开避免格式错误吧。
然后内容整体上就是要突出重点了，内容不要太多，多了就无法突出重点了。</p>
<h3 id="2-个人简介与信息">2. 个人简介与信息</h3>
<p>这里简介主要突出自己擅长的方面，比如很长时间的行业背景，XX平台的负责人或主力。擅长XX技术等。</p>
<p>作为技术人员，最好要有自己的个人网站，网站的内容要有一定深度，反映了自己的技术观。当然github若不是洁白一片，也可以罗列上去。</p>
<p>对于个人技能，要从小到大展开，技术栈 、 技术领域 、业务领域、经验和软技能 等。</p>
<h3 id="3-技术知识准备">3. 技术知识准备</h3>
<p>一般来说，简历写了什么面试就会问什么，对于知识掌握程度要诚实写，精通是精通、熟悉是熟悉、了解是了解。正规的面试都会抓住知识点一直问到底，考察你的掌握程度。</p>
<p>对于算法题，要平时多积累，在leetcode 上刷题，提前准备一些经典算法，详细了解并掌握。</p>
<p>工作项目上，要突出重点，主要写那些你做了重大贡献的。</p>
<h3 id="4-思考">4. 思考</h3>
<p>功夫花在平时，实力才是王牌。</p>
]]></content></item><item><title>Week1005_tip</title><link>/posts/arts/week1005_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:32 +0000</pubDate><guid>/posts/arts/week1005_tip/</guid><description>ARTS - Tip JavaScript Date对象与时区 GMT 和 UTC 我们先来解释下两个概念： GMT 时间就是格林尼治时间，
格林尼治平时（英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台当地的平太阳时，因为本初子午线被定义为通过那里的经线。
自1924年2月5日开始，格林尼治天文台负责每隔一小时向全世界发放调时信息。
格林尼治平时的正午是指当平太阳横穿格林尼治子午线时（也就是在格林尼治上空最高点时）的时间。由于地球每天的自转是有些不规则的，而且正在缓慢减速，因此格林尼治平时基于天文观测本身的缺陷，已经被原子钟报时的协调世界时（UTC）所取代。
以下是UTC时间：
协调世界时（英语：Coordinated Universal Time，法语：Temps Universel Coordonné，简称UTC）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林尼治标准时间。中华民国采用CNS 7648的《资料元及交换格式–资讯交换–日期及时间的表示法》（与ISO 8601类似）称之为世界协调时间。中华人民共和国采用ISO 8601:2000的国家标准GB/T 7408-2005《数据元和交换格式 信息交换 日期和时间表示法》中亦称之为协调世界时。
我们要获取时间：
var now = new Date(); now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST) now.getFullYear(); // 2015, 年份 now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月 now.getDate(); // 24, 表示24号 now.getDay(); // 3, 表示星期三 now.getHours(); // 19, 24小时制 now.getMinutes(); // 49, 分钟 now.getSeconds(); // 22, 秒 now.</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="javascript-date对象与时区">JavaScript Date对象与时区</h2>
<h3 id="gmt-和-utc">GMT 和 UTC</h3>
<p>我们先来解释下两个概念：
GMT 时间就是格林尼治时间，</p>
<blockquote>
<p>格林尼治平时（英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台当地的平太阳时，因为本初子午线被定义为通过那里的经线。</p>
</blockquote>
<blockquote>
<p>自1924年2月5日开始，格林尼治天文台负责每隔一小时向全世界发放调时信息。</p>
</blockquote>
<blockquote>
<p>格林尼治平时的正午是指当平太阳横穿格林尼治子午线时（也就是在格林尼治上空最高点时）的时间。由于地球每天的自转是有些不规则的，而且正在缓慢减速，<strong>因此格林尼治平时基于天文观测本身的缺陷，已经被原子钟报时的协调世界时（UTC）所取代。</strong></p>
</blockquote>
<p>以下是UTC时间：</p>
<blockquote>
<p>协调世界时（英语：Coordinated Universal Time，法语：Temps Universel Coordonné，简称UTC）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林尼治标准时间。中华民国采用CNS 7648的《资料元及交换格式–资讯交换–日期及时间的表示法》（与ISO 8601类似）称之为世界协调时间。中华人民共和国采用ISO 8601:2000的国家标准GB/T 7408-2005《数据元和交换格式 信息交换 日期和时间表示法》中亦称之为协调世界时。</p>
</blockquote>
<p>我们要获取时间：</p>
<pre tabindex="0"><code>var now = new Date();
now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
now.getFullYear(); // 2015, 年份
now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月
now.getDate(); // 24, 表示24号
now.getDay(); // 3, 表示星期三
now.getHours(); // 19, 24小时制
now.getMinutes(); // 49, 分钟
now.getSeconds(); // 22, 秒
now.getMilliseconds(); // 875, 毫秒数
now.getTime(); // 1435146562875, 以number形式表示的时间戳
</code></pre><p>注意，这里 new Date() 浏览器会解析成当地时间。</p>
<p>new Date(value);
这里 value 可以是字符串，但该字符串必须能被 Date.parse(value) 解析，
也可以是 时间戳。</p>
<p>时间戳是各个时区都固定的</p>
<blockquote>
<p>时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。</p>
</blockquote>
<p>还有注意点：
比如 getDate() 方法 返回月份的某一天</p>
<blockquote>
<p>所指的月份中的某一天，使用本地时间。返回值是 1 ~ 31 之间的一个整数。</p>
</blockquote>
<p>也就是说， getDate / getMonth / getFullYear  都是跟当地时区有关的，我们用到时区转化时候，就要先转化成 utc 时间，使用 getUTCDate() &hellip; 再加偏移量。</p>
<p>使用：</p>
<pre tabindex="0"><code>var d = new Date(&#39;2018/08/07 12:33:45&#39;); // 本地时间

// 把本地时间戳 转化成 UTC时间戳； d.getTimezoneOffset 返回时区偏移分钟数
var utctime = d.getTime() + d.getTimezoneOffset() * 60000;   

// 转化成 GMT+3 区时间是

var d = new Date(utctime + 3 * 3600 * 1000);
</code></pre>]]></content></item><item><title>Week1006_algorithm</title><link>/posts/arts/week1006_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:32 +0000</pubDate><guid>/posts/arts/week1006_algorithm/</guid><description>ARTS - Algorithm 21. 合并两个有序链表
将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
示例：
输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4
分析 两个ListNode ， 根据l1 、 l2 的val，小的给拼的ListNode.
public ListNode mergeTwoLists(ListNode l1, ListNode l2) { ListNode head = null, tail = null; while (l1 != null &amp;amp;&amp;amp; l2 != null) { ListNode node = null; if (l1.val &amp;lt; l2.val) { node = l1; l1 = l1.next; } else { node = l2; l2 = l2.next; } if (head == null) { head = tail = node; } else { tail.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/description/">21. 合并两个有序链表</a></p>
<p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>
<p>示例：</p>
<p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4
输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
<h3 id="分析">分析</h3>
<p>两个ListNode ， 根据l1 、 l2 的val，小的给拼的ListNode.</p>
<pre tabindex="0"><code>
public ListNode mergeTwoLists(ListNode l1, ListNode l2) {

        ListNode head = null, tail = null;

        while (l1 != null &amp;&amp; l2 != null) {

            ListNode node = null;
            if (l1.val &lt; l2.val) {
                node = l1;
                l1 = l1.next;
            } else {
                node = l2;
                l2 = l2.next;
            }

            if (head == null) {

                head = tail = node;

            } else {

                tail.next = node;
                tail = tail.next;

            }

        }

        ListNode rest = l1 == null ? l2 : l1;

        if (rest != null) {
            if (head != null &amp;&amp; tail != null) {
                tail.next = rest;
            } else {
                head = rest;
            }
        }
        return head;

    }
</code></pre>]]></content></item><item><title>Week1006_review</title><link>/posts/arts/week1006_review/</link><pubDate>Fri, 31 Mar 2023 15:45:32 +0000</pubDate><guid>/posts/arts/week1006_review/</guid><description>ARTS - Review 计算机程序设计艺术
一些在书架上的书看着如此美丽，不仅仅是因为装帧美，而且书脊上表达了关于主人的话。Donald Knuth 的四精装卷的“计算机程序设计艺术” - 四个很贴切的深紫色， 传达了一个明确的信息：站一边，地球人，你站在一个真正的程序员面前。一个计算机科学的严谨实践者。
比尔盖茨曾经说过，如果你认为你是一个非常好的程序员，请阅读《计算机程序设计艺术》，如果你能读懂书里的一切，你可以直接给我发简历了。
对我来说，订购这一套书册感觉就像是一项重要的专业成就。在这些书到达前，我在书架上腾出了一个特别的空间，就像在仓库里为一个崭新大型机器腾空间一样。
它们的权威太大了以至于不能动摇。所以我从不读它们，这不是本系列的书评，不好意思。
这也不是提前走出影院的影评家的一种厌恶的评论。Knuth的书是史诗级的，他真正的掌握了计算机科学的基本原理，数学的原理， 以及两个学科的交叉点。如此多的荣耀。
只是我不值得TAOCP （计算机程序设计艺术缩写）的深度。
我读过卷一的序言三四遍, 我也曾试图想象完成整个系列是什么感觉。我将会离开互联网几个月，独自到Wyoming 山顶的一个小屋里，那里有一堆纸，几盒铅笔， TAOCP ,基本数学书，还有90天的 Adderall (一种治疗多动症的药物)供应。
我将会在山上长时间徒步旅行，深入思考算法原理。没有笔记本，没有WIFI，没有电 &amp;ndash; 这些令人分心的东西。日落后，我会在烛光下阅读或解决问题集，我的思绪放飞在一个由谐波数、二项式系数、和非线性数据结构组成的宇宙中。
但是这些永远没有发生。所以当我昨天再次阅读序言时候，我觉得我应该停下来反思我的旅程。 这就是Knuth对电脑的热爱，整个系列都致力于一个： 20世界50年代流行的IBM 650 大型机。 它是第一台大规模生产的电脑，用现在美元计算花费几十万。这是Knuth咬紧牙关的机器。
在1950年代对计算机的热爱就是对应用数学的热爱。早起的IBM650有基本的数学操作和控制结构，它基于十进制而不是二进制。
没有显示器，没有命令行. 人就是操作系统， 一个控制台让操作员启动停止程序。
你说想要你写一个程序去生成斐波那契数列. FORTRAN 语言还不存在 - 它在 650发布四年后诞生。 所以，这些早年你必须写机器级别的操作代码，之后手动运行程序在打孔机上打出有程序的纸片。
有一些方法优化你的程序。你需要设计一个更快的算法或者发布对问题合适的数据结构。
你可能也要优化你的程序加载运行过程 - 更细粒度的操控机器。 磁鼓存储器是先打硬盘存储区的先驱，是650硬盘的主要存储器，非常慢。所以你作为程序员的目标就是最大限度的减少12500转筒机的旋转潜伏期，所以让你的代码和数据在执行阶段更快的抵达cpu。你希望在主机的cpu 和这些存储器之间实现完美同步。
计算机科学就在这个地方，是数学和机械工程的粗糙交叉。可以被一个非常聪明的人完全理解。这并不总是现实。Knuth 和那个时代的程序员必须比IBM 650 更聪明。他们了解每一个真空管和控制开关。 现在我们不自爱比我们电脑更聪明了。
序言的第一段，Knuth 称程序设计是一种审美体验，很想写诗和绘画。我认为这种美感仍在吸引有抱负的程序员。20世纪50年代以来，沿着指数曲线发展很长一段路之后，这种美感依然完好无损，令人欣慰。虽然我们不在设计出软件再将他送入热闹的计算器， 编程之美仍然在每一个抽象层。
我想知道在8Kb 内存范围手工组装约束下以及打孔机器工作下如何影响编写软件的执行特性。我想象在Knuth的时代写代码是一种兴奋和冒险的行为.很小的错误就很痛苦。
从那时起，数十年的抽象化就像一对床垫一样堆叠起来，我们大多数人只是在上面翻滚。
今天的软件的短反馈回路和延展性是有代价的。虽然软件开发今天可以更能把玩，但如果不加思考的随意闹，也会产生很多问题。伟大的软件仍然需要大量的思考，而且我们很容易失去严谨性。
IBM 650 的约束生硬且迅速，今天的电脑约束更软常常自我约束。移动电话的微小屏幕预示着经济型软件和接口设计的革新浪潮。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<p><a href="https://medium.freecodecamp.org/the-art-of-computer-programming-by-donald-knuth-82e275c8764f">计算机程序设计艺术</a></p>
<p>一些在书架上的书看着如此美丽，不仅仅是因为装帧美，而且书脊上表达了关于主人的话。Donald Knuth 的四精装卷的“计算机程序设计艺术” - 四个很贴切的深紫色， 传达了一个明确的信息：站一边，地球人，你站在一个真正的程序员面前。一个计算机科学的严谨实践者。</p>
<p>比尔盖茨曾经说过，如果你认为你是一个非常好的程序员，请阅读《计算机程序设计艺术》，如果你能读懂书里的一切，你可以直接给我发简历了。</p>
<p>对我来说，订购这一套书册感觉就像是一项重要的专业成就。在这些书到达前，我在书架上腾出了一个特别的空间，就像在仓库里为一个崭新大型机器腾空间一样。</p>
<p>它们的权威太大了以至于不能动摇。所以我从不读它们，这不是本系列的书评，不好意思。</p>
<p>这也不是提前走出影院的影评家的一种厌恶的评论。Knuth的书是史诗级的，他真正的掌握了计算机科学的基本原理，数学的原理， 以及两个学科的交叉点。如此多的荣耀。</p>
<p>只是我不值得TAOCP （计算机程序设计艺术缩写）的深度。</p>
<p>我读过卷一的序言三四遍, 我也曾试图想象完成整个系列是什么感觉。我将会离开互联网几个月，独自到Wyoming 山顶的一个小屋里，那里有一堆纸，几盒铅笔， TAOCP ,基本数学书，还有90天的 Adderall (一种治疗多动症的药物)供应。</p>
<p>我将会在山上长时间徒步旅行，深入思考算法原理。没有笔记本，没有WIFI，没有电 &ndash; 这些令人分心的东西。日落后，我会在烛光下阅读或解决问题集，我的思绪放飞在一个由谐波数、二项式系数、和非线性数据结构组成的宇宙中。</p>
<p>但是这些永远没有发生。所以当我昨天再次阅读序言时候，我觉得我应该停下来反思我的旅程。
<img src="https://cdn-images-1.medium.com/max/1200/1*RPiGQBLThunoBjN8OtxHnw.png" alt=""></p>
<p>这就是Knuth对电脑的热爱，整个系列都致力于一个： 20世界50年代流行的IBM 650 大型机。
它是第一台大规模生产的电脑，用现在美元计算花费几十万。这是Knuth咬紧牙关的机器。</p>
<p>在1950年代对计算机的热爱就是对应用数学的热爱。早起的IBM650有基本的数学操作和控制结构，它基于十进制而不是二进制。</p>
<p>没有显示器，没有命令行. 人就是操作系统， 一个控制台让操作员启动停止程序。</p>
<p>你说想要你写一个程序去生成斐波那契数列. FORTRAN 语言还不存在 - 它在 650发布四年后诞生。
所以，这些早年你必须写机器级别的操作代码，之后手动运行程序在打孔机上打出有程序的纸片。</p>
<p>有一些方法优化你的程序。你需要设计一个更快的算法或者发布对问题合适的数据结构。</p>
<p>你可能也要优化你的程序加载运行过程 - 更细粒度的操控机器。 磁鼓存储器是先打硬盘存储区的先驱，是650硬盘的主要存储器，非常慢。所以你作为程序员的目标就是最大限度的减少12500转筒机的旋转潜伏期，所以让你的代码和数据在执行阶段更快的抵达cpu。你希望在主机的cpu 和这些存储器之间实现完美同步。</p>
<p>计算机科学就在这个地方，是数学和机械工程的粗糙交叉。可以被一个非常聪明的人完全理解。这并不总是现实。Knuth 和那个时代的程序员必须比IBM 650 更聪明。他们了解每一个真空管和控制开关。 现在我们不自爱比我们电脑更聪明了。</p>
<p>序言的第一段，Knuth 称程序设计是一种审美体验，很想写诗和绘画。我认为这种美感仍在吸引有抱负的程序员。20世纪50年代以来，沿着指数曲线发展很长一段路之后，这种美感依然完好无损，令人欣慰。虽然我们不在设计出软件再将他送入热闹的计算器， 编程之美仍然在每一个抽象层。</p>
<p>我想知道在8Kb 内存范围手工组装约束下以及打孔机器工作下如何影响编写软件的执行特性。我想象在Knuth的时代写代码是一种兴奋和冒险的行为.很小的错误就很痛苦。</p>
<p>从那时起，数十年的抽象化就像一对床垫一样堆叠起来，我们大多数人只是在上面翻滚。</p>
<p>今天的软件的短反馈回路和延展性是有代价的。虽然软件开发今天可以更能把玩，但如果不加思考的随意闹，也会产生很多问题。伟大的软件仍然需要大量的思考，而且我们很容易失去严谨性。</p>
<p>IBM 650 的约束生硬且迅速，今天的电脑约束更软常常自我约束。移动电话的微小屏幕预示着经济型软件和接口设计的革新浪潮。</p>
]]></content></item><item><title>Week1006_share</title><link>/posts/arts/week1006_share/</link><pubDate>Fri, 31 Mar 2023 15:45:32 +0000</pubDate><guid>/posts/arts/week1006_share/</guid><description>ARTS - Share Java8的分组与排序实践 假设有一个课程类，Course， 里面包含学生ID userId， 学科名称name, 和成绩grade:
public class Course { private Integer userId; private String name; private Integer grade; // setters and getters } 初始化一些数据
Course eng = new Course(1, &amp;#34;eng&amp;#34;, 80); Course chi = new Course(1, &amp;#34;chi&amp;#34;, 75); Course chi2 = new Course(2, &amp;#34;chi&amp;#34;, 77); Course eng3 = new Course(3, &amp;#34;eng&amp;#34;, 105); Course chi3 = new Course(3, &amp;#34;chi&amp;#34;, 110); List&amp;lt;Course&amp;gt; courseList = Lists.newArrayList(eng, chi, chi2, eng3, chi3); 1.</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="java8的分组与排序实践">Java8的分组与排序实践</h2>
<p>假设有一个课程类，Course， 里面包含学生ID userId， 学科名称name, 和成绩grade:</p>
<pre tabindex="0"><code>
public class Course {
    private Integer userId;
    private String name;
    private Integer grade;
    
    // setters and getters 
}
</code></pre><p>初始化一些数据</p>
<pre tabindex="0"><code>
		 Course eng = new Course(1, &#34;eng&#34;, 80);
        Course chi = new Course(1, &#34;chi&#34;, 75);

        Course chi2 = new Course(2, &#34;chi&#34;, 77);

        Course eng3 = new Course(3, &#34;eng&#34;, 105);
        Course chi3 = new Course(3, &#34;chi&#34;, 110);

        List&lt;Course&gt; courseList = Lists.newArrayList(eng, chi, chi2, eng3, chi3);
        
        
</code></pre><h3 id="1-需要按学生id分组">1. 需要按学生id分组</h3>
<pre tabindex="0"><code>		
		Map&lt;Integer, List&lt;Course&gt;&gt; map = courseList.stream().collect(Collectors.groupingBy(Course::getUserId));

        System.out.println(map);
        
        
   	// output
      {
        1=[Course{userId=1, name=&#39;eng&#39;, grade=80}, Course{userId=1, name=&#39;chi&#39;, grade=75}], 
        2=[Course{userId=2, name=&#39;chi&#39;, grade=77}], 
        3=[Course{userId=3, name=&#39;eng&#39;, grade=105}, Course{userId=3, name=&#39;chi&#39;, grade=110}]
      }
        
        
        
</code></pre><h3 id="2-现在需要取得每个学生的总成绩">2. 现在需要取得每个学生的总成绩</h3>
<p>我们要对map的 value遍历，取得各科成绩和后存入新集合。取得各科成绩和 的过程可以使用reduce函数</p>
<p>于是就是：</p>
<pre tabindex="0"><code>

List&lt;Integer&gt; gradeList = map.values().stream().map(i -&gt; i.stream().map(Course::getGrade).reduce(0, Integer::sum)).collect(Collectors.toList());
        System.out.println(gradeList);
        
 // output
  [155, 77, 215]
</code></pre><h3 id="3-我们需要对学生总成绩排序">3. 我们需要对学生总成绩排序</h3>
<p>我们对学生总成绩排序，并返回分组map，使用Comparator</p>
<pre tabindex="0"><code>
Map&lt;Integer, List&lt;Course&gt;&gt; sortedMap = map.entrySet().stream().sorted(Comparator.comparing(i -&gt; i.getValue().stream().map(Course::getGrade).reduce(0, Integer::sum)))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1, LinkedHashMap::new));
</code></pre>]]></content></item><item><title>Week1006_tip</title><link>/posts/arts/week1006_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:32 +0000</pubDate><guid>/posts/arts/week1006_tip/</guid><description>ARTS - Tip spring boot多数据源问题 我们知道，在使用多个数据源时候，需要注册到spring boot 里，然后使用时候一般是两种
查询非默认数据源数据时候，加上数据库名前缀 在service 方法里指定数据源，一般是@DataSource(&amp;ldquo;xxx&amp;rdquo;) 在网上很多例子上都是本地环境下两个数据库，但是在开发中需要访问的数据库分布在不同的服务器上，在使用 前缀 + 表 的查询方式不再生效了，就使用了第 2 种方法才生效，注意这点。</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h2 id="spring-boot多数据源问题">spring boot多数据源问题</h2>
<p>我们知道，在使用多个数据源时候，需要注册到spring boot 里，然后使用时候一般是两种</p>
<ol>
<li>查询非默认数据源数据时候，加上数据库名前缀</li>
<li>在service 方法里指定数据源，一般是@DataSource(&ldquo;xxx&rdquo;)</li>
</ol>
<p>在网上很多例子上都是本地环境下两个数据库，但是在开发中需要访问的数据库分布在不同的服务器上，在使用 前缀 + 表 的查询方式不再生效了，就使用了第 2 种方法才生效，注意这点。</p>
]]></content></item><item><title>Week1002_share</title><link>/posts/arts/week1002_share/</link><pubDate>Fri, 31 Mar 2023 15:45:31 +0000</pubDate><guid>/posts/arts/week1002_share/</guid><description>Java 内存区域及对象 计算机存储单位 从小到大 Bit byte KB MB GB TB
计算机存储元件
寄存器 CPU读写数据存储元件 内核空间与用户空间 字长 CPU一次能并行处理二进制的位数 堆栈 堆用来存储对象，栈用来执行程序
运行时数据区域
线程独有的内存区域 a. Program counter register 程序计数器 当前线程执行的字节码行号指示器 b. Java Stack 虚拟机栈 生命周期和线程相同。每个方法执行时候都会创建一个栈帧，用于存储局部变量表，操作数栈，动态链接、方法出口等信息，每个方法从调用到执行的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小通常与虚拟机实现有关，通常在256K-756K之间。 c. Native Method stack 本地方法栈 和虚拟机栈作用一样，方法栈为虚拟机使用的本地方法服务。
线程间共享的内存区域 a. heap ,堆 存放对象实例。细分为新生代和老年代。 b. Method Area 方法区 存储虚拟机加载的类信息，常亮、静态变量、即时编译器编译后的代码等数据。 c. Runtime Constant Pool 运行时常量池 类的方法、字段、接口库等描述信息 + 编译期产生的各种字面量和符号引用
直接内存
对象创建 语言层面，new, 虚拟机层面
虚拟机遇到new指令，首先去检查这个指令的参数能否在常亮池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化。如果没有就进行类的初始化过程。
类加载检查通过后，为新生对象分配内存，过程中，
a. 若内存规整，指针碰撞法分配内存。 意思是所有已用内存在一边，空闲在另一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial、ParNew这种基于压缩算法的，虚拟机采用这种分配方式 b. 如果内存不规整，虚拟机使用空闲列表法来分配内存。意思是虚拟机维护了一个列表，记录上哪些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。如果垃圾收集器选择的是CMS这种基于标记-清除算法的，虚拟机采用这种分配方式。 另外一个问题及时保证new对象时候的线程安全性。因为可能出现虚拟机正在给对象A分配内存，指针还没有来得及修改，对象B又同时使用了原来的指针来分配内存的情况。虚拟机采用了CAS配上失败重试的方式保证更新更新操作的原子性和TLAB两种方式来解决这个问题。
内存分配结束，虚拟机将分配到的内存空间都初始化为零值（不包括对象头）。这一步保证了对象的实例字段在Java代码中可以不用赋初始值就可以直接使用，程序能访问到这些字段的数据类型所对应的零值。
对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息，这些信息存放在对象的对象头中。
执行init方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</description><content type="html"><![CDATA[<h2 id="java-内存区域及对象">Java 内存区域及对象</h2>
<ol>
<li>
<p>计算机存储单位
从小到大 Bit byte KB MB GB TB</p>
</li>
<li>
<p>计算机存储元件</p>
<ul>
<li>寄存器 CPU读写数据存储元件</li>
<li>内核空间与用户空间</li>
<li>字长 CPU一次能并行处理二进制的位数</li>
</ul>
</li>
<li>
<p>堆栈
堆用来存储对象，栈用来执行程序</p>
</li>
<li>
<p>运行时数据区域</p>
<p><img src="http://images.blogjava.net/blogjava_net/nkjava/jvmstructure.png" alt="JVM内存区域"></p>
<ol>
<li>
<p>线程独有的内存区域
a. Program counter register 程序计数器
当前线程执行的字节码行号指示器
b. Java Stack 虚拟机栈
生命周期和线程相同。每个方法执行时候都会创建一个栈帧，用于存储局部变量表，操作数栈，动态链接、方法出口等信息，每个方法从调用到执行的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小通常与虚拟机实现有关，通常在256K-756K之间。
c. Native Method stack  本地方法栈
和虚拟机栈作用一样，方法栈为虚拟机使用的本地方法服务。</p>
</li>
<li>
<p>线程间共享的内存区域
a. heap ,堆
存放对象实例。细分为新生代和老年代。
b. Method Area 方法区
存储虚拟机加载的类信息，常亮、静态变量、即时编译器编译后的代码等数据。
c. Runtime Constant Pool 运行时常量池
类的方法、字段、接口库等描述信息 + 编译期产生的各种字面量和符号引用</p>
</li>
<li>
<p>直接内存</p>
</li>
</ol>
</li>
</ol>
<h3 id="对象创建">对象创建</h3>
<p>语言层面，new, 虚拟机层面</p>
<ol>
<li>
<p>虚拟机遇到new指令，首先去检查这个指令的参数能否在常亮池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化。如果没有就进行类的初始化过程。</p>
</li>
<li>
<p>类加载检查通过后，为新生对象分配内存，过程中，</p>
<ul>
<li>a. 若内存规整，指针碰撞法分配内存。 意思是所有已用内存在一边，空闲在另一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial、ParNew这种基于压缩算法的，虚拟机采用这种分配方式</li>
<li>b. 如果内存不规整，虚拟机使用空闲列表法来分配内存。意思是虚拟机维护了一个列表，记录上哪些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。如果垃圾收集器选择的是CMS这种基于标记-清除算法的，虚拟机采用这种分配方式。</li>
</ul>
<p>另外一个问题及时保证new对象时候的线程安全性。因为可能出现虚拟机正在给对象A分配内存，指针还没有来得及修改，对象B又同时使用了原来的指针来分配内存的情况。虚拟机采用了CAS配上失败重试的方式保证更新更新操作的原子性和TLAB两种方式来解决这个问题。</p>
</li>
<li>
<p>内存分配结束，虚拟机将分配到的内存空间都初始化为零值（不包括对象头）。这一步保证了对象的实例字段在Java代码中可以不用赋初始值就可以直接使用，程序能访问到这些字段的数据类型所对应的零值。</p>
</li>
<li>
<p>对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息，这些信息存放在对象的对象头中。</p>
</li>
<li>
<p>执行init方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p>
</li>
</ol>
<h3 id="对象定位方式">对象定位方式</h3>
<p>建立对象是为了使用对象，Java程序需要通过栈上reference数据来操作堆上具体对象。</p>
<pre tabindex="0"><code>Object obj = new Object();
</code></pre><p>new Object() 后有两部分内容，一部分是类数据（比如代表类的Class对象）、一部分是实例数据</p>
<p>由于reference 在Java虚拟机规范中这是一个指向对象的new Object() 的引用obj,并没有规定obj
应该通过何种方式去定位、访问堆中对象的具体位置，所以对象访问方式是取决于虚拟机实现而定的。主流方式有两种：</p>
<ol>
<li>句柄访问。Java堆中划分出一块句柄池，obj指向的是对象的句柄地址，句柄则包含了类数据的地址和实例数据的地址</li>
<li>指针访问。对象中存储所有的实例数据和类数据的地址，obj指向的是这个对象</li>
</ol>
<p>Hotspot 虚拟机采用的后者。</p>
]]></content></item><item><title>Week1003_algorthm</title><link>/posts/arts/week1003_algorthm/</link><pubDate>Fri, 31 Mar 2023 15:45:31 +0000</pubDate><guid>/posts/arts/week1003_algorthm/</guid><description>ARTS - Algorthm 9. 回文数 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
分析： 负数比如 -121， 从左到右是 -121, 从右到左是 121-， 所以不是回文数。 这道题算法和7.反转整数 类似，反转整数是取得每一位倒置输出，而这个是取得每一位倒置后和原值进行比较。
代码如下：
public boolean isPalindrome(int x) { if (x &amp;lt; 0) { return false; } int y = 0; int z = x; while(x != 0) { y = x % 10 + y * 10; x /= 10; } return z == y; }</description><content type="html"><![CDATA[<h2 id="arts---algorthm">ARTS - Algorthm</h2>
<h3 id="9-回文数httpsleetcode-cncomproblemspalindrome-numberdescription"><a href="https://leetcode-cn.com/problems/palindrome-number/description/">9. 回文数</a></h3>
<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<h3 id="分析">分析：</h3>
<p>负数比如 -121， 从左到右是 -121, 从右到左是 121-， 所以不是回文数。
这道题算法和<a href="https://leetcode-cn.com/problems/reverse-integer/description/">7.反转整数</a> 类似，反转整数是取得每一位倒置输出，而这个是取得每一位倒置后和原值进行比较。</p>
<p>代码如下：</p>
<pre tabindex="0"><code>public boolean isPalindrome(int x) {

        if (x &lt; 0) {
            return false;
        }

        int y = 0;
        int z = x;
        while(x != 0) {

            y = x % 10 + y * 10;

            x /= 10;

        }
        return z == y;

    }
</code></pre>]]></content></item><item><title>Week1003_review</title><link>/posts/arts/week1003_review/</link><pubDate>Fri, 31 Mar 2023 15:45:31 +0000</pubDate><guid>/posts/arts/week1003_review/</guid><description>ARTS - Review 编写好代码的高级技巧 来自medium: Advanced Techniques and Ideas for Better Coding Skills
好的开发者是用他们的代码质量来定义的。在软件工程里，书写好的代码意味着节省了可能投资在测试、更新、扩展或者修复bug的钱。本文里， 我将会给你展示一些真实生活中的例子来帮助你整理你已有的代码来重构它使得更健壮，更模块化。这些技术不仅能帮你重构老代码，也能为你将来的编码中提供好的思路。
什么是重构，为什么我们要重构？ 重构指的是帮你写整洁代码的技术和步骤。这对其他可能会阅读、扩展、重用你的代码的人很重要，使得他不用大范围的修改。
接下来内容是重构已存在代码使它更好的几个例子。
不要用没进行单元测试的代码重构生产代码 我的第一个建议是，不要用没进行足够单元测试的代码去重构已存在的代码。我想原因是很明显的：你将会遇到一些难以修复的坏的功能，因为你无法找到哪个是坏的。所以，如果需要重构，首先测试。确保你重构的部分被测试覆盖到。检查php代码覆盖率分析。
从最需要重构的地方开始 看下面图片，这是我在github 上发现的一个关于酒店管理系统的真实的工程。这是一个真正开源的工程，所以闭源的代码可能会更差。 你看到，三级被标红了。最深点应该是第一个if条件里面的 if/else 语句内容。通常最深点集中在一个简单逻辑上，这让重构变得简单。
让你的方法分成几个小方法或配置 文件/数据库 表 来让方法变短 在这个例子中，我们开一个提出来一个私有方法： 下一个最深点是获取post数据和加载视图那里。看看重构之后的add方法。更干净可读、方便测试。 在if语句中使用 很多编程语言支持一个条件时候不用加{}， 一些开发者就因为简单就这么用了，但是它可能造成可读性差，很容易因为一个空行造成问题。看以下例子：
不要用魔法数字魔法字符串 接下来的例子里，你注意到房间数超过250后，返回一个错误信息。这个例子中250就是一个魔法数字。如果不是你写的，你就很难理解它代表的什么。
重构这个方法，我们要指出这个250代表的是最大房间数。所以我们用变量来代替这个硬编码，这样对其他人就很容易理解了。
如果不需要，就不要用 else 语句 在这个 availablerooms() 方法中，你发现我们很容易摆脱else 代码块，逻辑依然一样。
使用有意义的方法、变量和测试名字 下面的例子，发现两个方法叫 index() 和 room_m(), 对我来说我不知道它们代表啥。如果它们名字描述的是业务，我们就更好理解。
最大化的利用你编程语言的特性 很多开发者不最大化利用他们语言的特性。很多特性是让你花很少精力使得你的代码更健壮。 看以下例子如何使用更少代码实现相同的结果仅仅利用了类型提示。
我用几个写出更好代码的技巧来结束本篇文章：
使用新的 数组而不是Array()方法 使用 === 代替 == 除非不需要检查数据类型很重要 给公共方法简短有意义的命名，给私有方法长的名字因为他们有固定范围 使用通用的命名，如实现接口的方法add() 对单个类方法使用描述性命名如 addUser() 或 addDocument() 删除类中无用的方法 用is/has 前缀命名返回布尔类型的方法，例如 isAdmin($user) hasPermission($user) 在类方法和属性上始终使用访问修饰符 小心接口污染: 仅使用用户公开的方法 组织类方法，公共方法在上 始终对类使用单一职责原则 感言 阅读并遵循《阿里巴巴开发手册》， 里面更详细，指导新代码开发， 并结合 Alibaba Coding Guidelines 工具扫描老代码并进行重构。</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="编写好代码的高级技巧">编写好代码的高级技巧</h2>
<p>来自medium: <a href="https://medium.com/@maladdinsayed/advanced-techniques-and-ideas-for-better-coding-skills-d632e9f9675">Advanced Techniques and Ideas for Better Coding Skills</a></p>
<p>好的开发者是用他们的代码质量来定义的。在软件工程里，书写好的代码意味着节省了可能投资在测试、更新、扩展或者修复bug的钱。本文里， 我将会给你展示一些真实生活中的例子来帮助你整理你已有的代码来重构它使得更健壮，更模块化。这些技术不仅能帮你重构老代码，也能为你将来的编码中提供好的思路。</p>
<h3 id="什么是重构为什么我们要重构">什么是重构，为什么我们要重构？</h3>
<p>重构指的是帮你写整洁代码的技术和步骤。这对其他可能会阅读、扩展、重用你的代码的人很重要，使得他不用大范围的修改。</p>
<p>接下来内容是重构已存在代码使它更好的几个例子。</p>
<h3 id="不要用没进行单元测试的代码重构生产代码">不要用没进行单元测试的代码重构生产代码</h3>
<p>我的第一个建议是，不要用没进行足够单元测试的代码去重构已存在的代码。我想原因是很明显的：你将会遇到一些难以修复的坏的功能，因为你无法找到哪个是坏的。所以，如果需要重构，首先测试。确保你重构的部分被测试覆盖到。检查php代码覆盖率分析。</p>
<h3 id="从最需要重构的地方开始">从最需要重构的地方开始</h3>
<p>看下面图片，这是我在github 上发现的一个关于酒店管理系统的真实的工程。这是一个真正开源的工程，所以闭源的代码可能会更差。
<img src="https://cdn-images-1.medium.com/max/1600/0*o_Xt7O_1WitOzJx9.png" alt="">
你看到，三级被标红了。最深点应该是第一个if条件里面的 if/else 语句内容。通常最深点集中在一个简单逻辑上，这让重构变得简单。</p>
<h3 id="让你的方法分成几个小方法或配置-文件数据库-表-来让方法变短">让你的方法分成几个小方法或配置 文件/数据库 表 来让方法变短</h3>
<p>在这个例子中，我们开一个提出来一个私有方法：
<img src="https://cdn-images-1.medium.com/max/1600/0*GzntaUY08VZDx_mD.png" alt=""></p>
<p>下一个最深点是获取post数据和加载视图那里。看看重构之后的add方法。更干净可读、方便测试。
<img src="https://cdn-images-1.medium.com/max/1600/0*5rTlqNl6knjMKdBk.png" alt=""></p>
<h3 id="在if语句中使用">在if语句中使用</h3>
<p>很多编程语言支持一个条件时候不用加{}， 一些开发者就因为简单就这么用了，但是它可能造成可读性差，很容易因为一个空行造成问题。看以下例子：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*qKPPZhC6bI0tcHy8.png" alt=""></p>
<h3 id="不要用魔法数字魔法字符串">不要用魔法数字魔法字符串</h3>
<p>接下来的例子里，你注意到房间数超过250后，返回一个错误信息。这个例子中250就是一个魔法数字。如果不是你写的，你就很难理解它代表的什么。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*of8kepNKAX3zsRp5.png" alt=""></p>
<p>重构这个方法，我们要指出这个250代表的是最大房间数。所以我们用变量来代替这个硬编码，这样对其他人就很容易理解了。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*5nR9rHxduxPvfUZJ.png" alt=""></p>
<h3 id="如果不需要就不要用-else-语句">如果不需要，就不要用 else 语句</h3>
<p>在这个 availablerooms() 方法中，你发现我们很容易摆脱else 代码块，逻辑依然一样。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*EL3AvdzpKT9uibeo.png" alt=""></p>
<h3 id="使用有意义的方法变量和测试名字">使用有意义的方法、变量和测试名字</h3>
<p>下面的例子，发现两个方法叫 index() 和 room_m(), 对我来说我不知道它们代表啥。如果它们名字描述的是业务，我们就更好理解。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*r1mxi52OtJ5RXw-m.png" alt=""></p>
<h3 id="最大化的利用你编程语言的特性">最大化的利用你编程语言的特性</h3>
<p>很多开发者不最大化利用他们语言的特性。很多特性是让你花很少精力使得你的代码更健壮。
看以下例子如何使用更少代码实现相同的结果仅仅利用了类型提示。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*qBo2t1VxVGDLd5gZ.png" alt="">
<img src="https://cdn-images-1.medium.com/max/1600/0*lI9BoaA39baxGFY6.png" alt=""></p>
<p>我用几个写出更好代码的技巧来结束本篇文章：</p>
<ul>
<li>使用新的 数组而不是Array()方法</li>
<li>使用 === 代替 == 除非不需要检查数据类型很重要</li>
<li>给公共方法简短有意义的命名，给私有方法长的名字因为他们有固定范围</li>
<li>使用通用的命名，如实现接口的方法add() 对单个类方法使用描述性命名如 addUser() 或 addDocument()</li>
<li>删除类中无用的方法</li>
<li>用is/has 前缀命名返回布尔类型的方法，例如 isAdmin($user) hasPermission($user)</li>
<li>在类方法和属性上始终使用访问修饰符</li>
<li>小心接口污染: 仅使用用户公开的方法</li>
<li>组织类方法，公共方法在上</li>
<li>始终对类使用单一职责原则</li>
</ul>
<hr>
<h3 id="感言">感言</h3>
<p>阅读并遵循《阿里巴巴开发手册》， 里面更详细，指导新代码开发， 并结合 Alibaba Coding Guidelines 工具扫描老代码并进行重构。</p>
]]></content></item><item><title>Week1003_share</title><link>/posts/arts/week1003_share/</link><pubDate>Fri, 31 Mar 2023 15:45:31 +0000</pubDate><guid>/posts/arts/week1003_share/</guid><description>ARTS - Share 编码坏习惯 工作中主要写业务实现代码，使用SpringMVC 框架，也阅读过很多同事的代码，下面总结几条不好的习惯：
1. 控制类里写业务逻辑而不是在服务类 我们springmvc 分层架构，一般就是Controller 处理业务请求， 注入Service, 具体的逻辑处理调用service, 然后返回给前台结构，但是不少同学违背这一原则， 把大量的业务逻辑写在控制类方法里，service 模块仅当做 dao 层来使用了，这样明显是有问题的，一个最大的问题就是可能导致无法进行事务管理， 因为一般习惯事务是在service 里进行控制。
2. 过多的if/else 嵌套 过多的if /else 嵌套会造成代码可读性很差，当因为请假临时需要别人管理你代码时候，会造成很大的困扰，笔者曾开玩笑引用某段子说，别人阅读你代码时骂脏话的频率和你代码质量成反比。机器语言是让机器可读性好的， 编程语言是让人类可读性好的，所以我们尽量写简洁易读的代码，尽量把大方法拆成几个小方法，对一类功能代码块提出来，做到代码简洁。
3. 格式化太少 对，尽管IDE 已经非常智能，但依然随时可见没有对齐的代码、无用的包引用，这些虽说不是大问题，但是依然影响程序的美观优雅，字如其人，码如其人，请多注意代码形象。
4. 随意发挥，不与其他人统一 虽然程序设计中需要个人发挥，但是也要遵从团队习惯，比如代码命名、组织方式，功能实现的惯用模式，前后端交互的接口设计等。 除非你能找出更简洁有效，且团队通过的方式，不要随意更改、调整团队惯用的实现方式和习惯。
5. 心态开放，乐于沟通，乐于改正不足之处 很多程序员的心态就是，我负责的模块别人不能改动，不然出来问题你来负责。 诚然这样造成了自己模块的方便维护， 但是对项目整体来说是有一些坏处的，我们开发中除了自己的模块，不可避免遇到公用模块， 或者自己的模块开放给别人重用，这或多或少都有需要调整的地方，如果一刀切不许动，那么很可能每个人都对同一个功能开发自己的实现，这回造成重复率增加，不利于维护。我们需要做的是开放沟通，就事论事探讨更好的实现，然后团队配合更好的完成项目。</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h2 id="编码坏习惯">编码坏习惯</h2>
<p>工作中主要写业务实现代码，使用SpringMVC 框架，也阅读过很多同事的代码，下面总结几条不好的习惯：</p>
<h3 id="1-控制类里写业务逻辑而不是在服务类">1. 控制类里写业务逻辑而不是在服务类</h3>
<p>我们springmvc 分层架构，一般就是Controller 处理业务请求， 注入Service, 具体的逻辑处理调用service, 然后返回给前台结构，但是不少同学违背这一原则， 把大量的业务逻辑写在控制类方法里，service 模块仅当做 dao 层来使用了，这样明显是有问题的，一个最大的问题就是可能导致无法进行事务管理， 因为一般习惯事务是在service 里进行控制。</p>
<h3 id="2-过多的ifelse-嵌套">2. 过多的if/else 嵌套</h3>
<p>过多的if /else 嵌套会造成代码可读性很差，当因为请假临时需要别人管理你代码时候，会造成很大的困扰，笔者曾开玩笑引用某段子说，别人阅读你代码时骂脏话的频率和你代码质量成反比。机器语言是让机器可读性好的， 编程语言是让人类可读性好的，所以我们尽量写简洁易读的代码，尽量把大方法拆成几个小方法，对一类功能代码块提出来，做到代码简洁。</p>
<h3 id="3-格式化太少">3. 格式化太少</h3>
<p>对，尽管IDE 已经非常智能，但依然随时可见没有对齐的代码、无用的包引用，这些虽说不是大问题，但是依然影响程序的美观优雅，字如其人，码如其人，请多注意代码形象。</p>
<h3 id="4-随意发挥不与其他人统一">4. 随意发挥，不与其他人统一</h3>
<p>虽然程序设计中需要个人发挥，但是也要遵从团队习惯，比如代码命名、组织方式，功能实现的惯用模式，前后端交互的接口设计等。 除非你能找出更简洁有效，且团队通过的方式，不要随意更改、调整团队惯用的实现方式和习惯。</p>
<h3 id="5-心态开放乐于沟通乐于改正不足之处">5. 心态开放，乐于沟通，乐于改正不足之处</h3>
<p>很多程序员的心态就是，我负责的模块别人不能改动，不然出来问题你来负责。 诚然这样造成了自己模块的方便维护， 但是对项目整体来说是有一些坏处的，我们开发中除了自己的模块，不可避免遇到公用模块， 或者自己的模块开放给别人重用，这或多或少都有需要调整的地方，如果一刀切不许动，那么很可能每个人都对同一个功能开发自己的实现，这回造成重复率增加，不利于维护。我们需要做的是开放沟通，就事论事探讨更好的实现，然后团队配合更好的完成项目。</p>
]]></content></item><item><title>Week1003_tip</title><link>/posts/arts/week1003_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:31 +0000</pubDate><guid>/posts/arts/week1003_tip/</guid><description>ARTS - Tip 关于TKMybatis 的一个小技巧 本人在开发一个实体类时候，对这个实体类进行有参构造，但是没有加无参构造，于是在使用tk mapper的查询方法时候， 就一直报错没有 xxx 构造函数，由于 tk 是不用写xml mapper的，问题可能出在对象关系映射那块，猜测tk是想自己根据数据库类型，来转成Java类型的，不需要自己指定参数类型，于是解决办法是再加个无参构造函数就解决了。</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h3 id="关于tkmybatis-的一个小技巧">关于TKMybatis 的一个小技巧</h3>
<p>本人在开发一个实体类时候，对这个实体类进行有参构造，但是没有加无参构造，于是在使用tk mapper的查询方法时候， 就一直报错没有 xxx 构造函数，由于 tk 是不用写xml mapper的，问题可能出在对象关系映射那块，猜测tk是想自己根据数据库类型，来转成Java类型的，不需要自己指定参数类型，于是解决办法是再加个无参构造函数就解决了。</p>
]]></content></item><item><title>Week1004_algorithm</title><link>/posts/arts/week1004_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:31 +0000</pubDate><guid>/posts/arts/week1004_algorithm/</guid><description>ARTS - Algorithm 14. 最长公共前缀
编写一个函数来查找字符串数组中的最长公共前缀。
如果不存在公共前缀，返回空字符串 &amp;ldquo;&amp;quot;。
示例 1:
输入: [&amp;ldquo;flower&amp;rdquo;,&amp;ldquo;flow&amp;rdquo;,&amp;ldquo;flight&amp;rdquo;] 输出: &amp;ldquo;fl&amp;rdquo; 示例 2:
输入: [&amp;ldquo;dog&amp;rdquo;,&amp;ldquo;racecar&amp;rdquo;,&amp;ldquo;car&amp;rdquo;] 输出: &amp;quot;&amp;rdquo; 解释: 输入不存在公共前缀。 说明:
所有输入只包含小写字母 a-z 。
分析 定义一个指针， 从第一个开始，遍历所有字符串是否相等，遇到不相等的就停止，取得指针经过的一段字符串。
public String longestCommonPrefix(String[] strs) { if (strs.length == 0) { return &amp;#34;&amp;#34;; } if (strs.length == 1) { return strs[0]; } int point = -1; loop: for (int i = 0; i &amp;lt; strs[0].length(); i++) { boolean flag = true; for (int j = 0; j &amp;lt; strs.</description><content type="html"><![CDATA[<h2 id="arts---algorithm">ARTS - Algorithm</h2>
<p><a href="https://leetcode-cn.com/problems/longest-common-prefix/description/">14. 最长公共前缀</a></p>
<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 &ldquo;&quot;。</p>
<p>示例 1:</p>
<p>输入: [&ldquo;flower&rdquo;,&ldquo;flow&rdquo;,&ldquo;flight&rdquo;]
输出: &ldquo;fl&rdquo;
示例 2:</p>
<p>输入: [&ldquo;dog&rdquo;,&ldquo;racecar&rdquo;,&ldquo;car&rdquo;]
输出: &quot;&rdquo;
解释: 输入不存在公共前缀。
说明:</p>
<p>所有输入只包含小写字母 a-z 。</p>
<h3 id="分析">分析</h3>
<p>定义一个指针， 从第一个开始，遍历所有字符串是否相等，遇到不相等的就停止，取得指针经过的一段字符串。</p>
<pre tabindex="0"><code>
public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) {
            return &#34;&#34;;
        }
        if (strs.length == 1) {
            return strs[0];
        }

        int point = -1;

        loop:
        for (int i = 0; i &lt; strs[0].length(); i++) {
            boolean flag = true;
            for (int j = 0; j &lt; strs.length; j++) {

                if (point + 1 &gt; strs[j].length() - 1) {
                    break loop;
                }

                char c = strs[0].charAt(point + 1);

                flag = c == strs[j].charAt(point + 1);
                if (!flag) {
                    break loop;
                }
            }
            point++;
        }


        return strs[0].substring(0, point + 1);

    
    }
    
</code></pre>]]></content></item><item><title>Week1004_review</title><link>/posts/arts/week1004_review/</link><pubDate>Fri, 31 Mar 2023 15:45:31 +0000</pubDate><guid>/posts/arts/week1004_review/</guid><description>ARTS - Review Kotlin 可触摸式自定义动画视图 如果你想绘画自己的视图，并且有一些动画，kotlin可以帮你。
多点触控动画增长圆圆 (类似下雨) 下面就是我将会展示的怎么做这样一个视图。
它包含：
多点触控能力。 每个点击将会画一个园。 圆圈将会增长，颜色淡入，直到消失 制作自定义视图 1. 实现视图 首先你需要实现 View 类, 它是android 基本UI组件
class RainDropView @JvmOverloads constructor( context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0) : View(context, attrs, defStyleAttr, defStyleRes) Kotlin 好的部分是，你可以用默认构造器把所有构造器合并成一个。
了解跟多xml属性设置，参考我的另一个博客 kotlin自定义组件
2. 定义 onMeasure 定义自己的视图的宽高，下面提供一个相对基础的模型。
override fun onMeasure( widthMeasureSpec: Int, heightMeasureSpec: Int) { super.onMeasure(widthMeasureSpec, heightMeasureSpec) val desiredWidth = suggestedMinimumWidth + paddingLeft + paddingRight val desiredHeight = suggestedMinimumHeight + paddingTop + paddingBottom setMeasuredDimension( resolveSize(desiredWidth, widthMeasureSpec), resolveSize(desiredHeight, heightMeasureSpec)) } 了解更多请参考自定义视图：onMeasure</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="kotlin-可触摸式自定义动画视图httpsmediumcomelyeprojectcustom-touchable-animated-view-in-kotlin-3ad599f85dbc"><a href="https://medium.com/@elye.project/custom-touchable-animated-view-in-kotlin-3ad599f85dbc">Kotlin 可触摸式自定义动画视图</a></h2>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*cboYNHmYwpWUQ75x.jpg" alt=""></p>
<p>如果你想绘画自己的视图，并且有一些动画，kotlin可以帮你。</p>
<h3 id="多点触控动画增长圆圆-类似下雨">多点触控动画增长圆圆 (类似下雨)</h3>
<p>下面就是我将会展示的怎么做这样一个视图。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*AFVNkiVdTB7Fw949OV1_8g.gif" alt=""></p>
<p>它包含：</p>
<ol>
<li>多点触控能力。 每个点击将会画一个园。</li>
<li>圆圈将会增长，颜色淡入，直到消失</li>
</ol>
<h3 id="制作自定义视图">制作自定义视图</h3>
<h4 id="1-实现视图">1. 实现视图</h4>
<p>首先你需要实现 View 类, 它是android 基本UI组件</p>
<pre tabindex="0"><code>

class RainDropView @JvmOverloads constructor(
        context: Context,
        attrs: AttributeSet? = null,
        defStyleAttr: Int = 0,
        defStyleRes: Int = 0) :
        View(context, attrs, defStyleAttr, defStyleRes)
        
</code></pre><p>Kotlin 好的部分是，你可以用默认构造器把所有构造器合并成一个。</p>
<p><em>了解跟多xml属性设置，参考我的另一个博客 <a href="https://medium.com/@elye.project/building-custom-component-with-kotlin-fc082678b080">kotlin自定义组件</a></em></p>
<h4 id="2-定义-onmeasure">2. 定义 onMeasure</h4>
<p>定义自己的视图的宽高，下面提供一个相对基础的模型。</p>
<pre tabindex="0"><code>
override fun onMeasure(
    widthMeasureSpec: Int, heightMeasureSpec: Int) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec)
    val desiredWidth = suggestedMinimumWidth + 
                       paddingLeft + paddingRight
    val desiredHeight = suggestedMinimumHeight + 
                       paddingTop + paddingBottom
    setMeasuredDimension(
            resolveSize(desiredWidth, widthMeasureSpec),
            resolveSize(desiredHeight, heightMeasureSpec))
}
</code></pre><p>了解更多请参考<a href="https://medium.com/@quiro91/custom-view-mastering-onmeasure-a0a0bb11784d">自定义视图：onMeasure</a></p>
<h4 id="3-画图加动画">3. 画图，加动画</h4>
<p>用 onDraw 方法实现画图</p>
<pre tabindex="0"><code>
override fun onDraw(canvas: Canvas) {
    super.onDraw(canvas)
    rainDropList.forEach { it.draw(canvas, paint) }
    rainDropList = rainDropList.filter { it.isValid() }
    if (rainDropList.isNotEmpty() &amp;&amp; isAttachedToWindow) {
        invalidate()
    }
}
</code></pre><p>像普通Java 编程，我们用提供的 canvas 画图。
我用 RainDrop 类来封装绘画圆圈和圆圈增长的逻辑。</p>
<pre tabindex="0"><code>rainDropList.forEach { it.draw(canvas, paint) }
</code></pre><p>之后检查 rainDrop 是否到了最大尺寸，就移除，使用：</p>
<pre tabindex="0"><code>rainDropList = rainDropList.filter { it.isValid() }
</code></pre><p>最后，保持动画反复调用自身的invalidate方法来重新画自己。 这种调用只出现在 rainDrop 在生效中和视图被触发时候。</p>
<pre tabindex="0"><code>
if (rainDropList.isNotEmpty() &amp;&amp; isAttachedToWindow) {
    invalidate()
}
</code></pre><h4 id="4-处理触摸">4. 处理触摸</h4>
<p>最后，我们处理触摸事件，</p>
<pre tabindex="0"><code>
@SuppressLint(&#34;ClickableViewAccessibility&#34;)
override fun onTouchEvent(event: MotionEvent): Boolean {
    val pointerIndex = event.actionIndex
    when (event.actionMasked) {
        MotionEvent.ACTION_DOWN,
        MotionEvent.ACTION_POINTER_DOWN -&gt; return true
        MotionEvent.ACTION_UP,
        MotionEvent.ACTION_POINTER_UP -&gt; {
            rainDropList += RainDrop(
                                event.getX(pointerIndex), 
                                event.getY(pointerIndex), maxRadius)
            invalidate()
            return true
        }
    }
    return super.onTouchEvent(event)
}
</code></pre><p>注意，我们需要处理 ACTION_DOWN 和 ACTION_POINTER_DOWN (通过返回true), 我们不需要处理 ACTION_UP 和 ACTION_POINTER_UP.</p>
<p>在 ACTION_UP 和 ACTION_POINTER_UP (通常用来多点触控)， 我们创建一个新的 RainDrop 类 来每次识别 XY 坐标位置。</p>
<p>我们调用 invalidate 来触发重新画图。</p>
<p><strong>代码 在Github 地址 <a href="https://github.com/elye/demo_android_raindrop_view">android raindrop</a></strong></p>
]]></content></item><item><title>Week1004_share</title><link>/posts/arts/week1004_share/</link><pubDate>Fri, 31 Mar 2023 15:45:31 +0000</pubDate><guid>/posts/arts/week1004_share/</guid><description>ARTS - Share 关于紧急内部项目想到的 键人最近在赶一个内部项目，接手后看到代码组织的情况，忍不住罗列下不合理之处：
对每一个角色建立了相对应的页面，内容相同 菜单、控制类基于变量而划分 数据库表没有说明文档，脚本有报错地方 没有格式化 逐个分析： 首先想到的大背景是， 内部项目、几个人用、时间紧、要求不高。
于是出现了1， 几个角色就建立几个页面，哪怕除了管理员外这个几个角色的页面完全相同，仅仅是数据不同。这样造成的结果是，如果后期页面有调整（就是键人在经历的）， 那么需要对每个页面进行重复修改。整体来看并没有节省时间。解决方法，用同一个页面，根据不同角色展示不同权限的数据，页面必要时候引入shiro 划分操作权限。
对于2，基于变量建立不同的菜单，业务需求是，不同的角色处理不同时期的数据，所以就有了不同的菜单，1-10天的，11-20天的， 大于20天的，这样设计菜单没问题，但是这次需要修改时间范围，改成了1-15，15-30， 大于30的，菜单改没什么，关键是控制类里都是针对之前不同天数的菜单，分为几个方法处理，硬编码了天数！ 于是控制类也需要修改。 解决方法： 传天数变量到后台，一个方法就能处理。
对于3. 这个就是工作习惯问题了，如果没有数据库说明文档，表再没有注释，别人只能靠猜了，只能一遍遍去问相关人员了，大大降低了效率。 解决方法：写文档。
对于4. 代码阅读费劲。 解决方法： 格式话。
想说的 我们在开发项目中，觉得省劲，但是有些必要的过程是不能省略的，前人在编程中总结了很多优秀的经验来指导工程开发，我们直接照着做就行，最后总体来说是比较省时间效率高的。我们在做项目时一定要避免觉得一次性使用就不够认真，这对以后维护的同事来说是个巨大痛苦。我们的工作展现的是我们的靠谱度，如何更快的进步，获得更大的成就？做到靠谱</description><content type="html"><![CDATA[<h2 id="arts---share">ARTS - Share</h2>
<h3 id="关于紧急内部项目想到的">关于紧急内部项目想到的</h3>
<p>键人最近在赶一个内部项目，接手后看到代码组织的情况，忍不住罗列下不合理之处：</p>
<ol>
<li>对每一个角色建立了相对应的页面，内容相同</li>
<li>菜单、控制类基于变量而划分</li>
<li>数据库表没有说明文档，脚本有报错地方</li>
<li>没有格式化</li>
</ol>
<h4 id="逐个分析">逐个分析：</h4>
<p>首先想到的大背景是， 内部项目、几个人用、时间紧、要求不高。</p>
<p>于是出现了1， 几个角色就建立几个页面，哪怕除了管理员外这个几个角色的页面完全相同，仅仅是数据不同。这样造成的结果是，如果后期页面有调整（就是键人在经历的）， 那么需要对每个页面进行重复修改。整体来看并没有节省时间。解决方法，用同一个页面，根据不同角色展示不同权限的数据，页面必要时候引入shiro 划分操作权限。</p>
<p>对于2，基于变量建立不同的菜单，业务需求是，不同的角色处理不同时期的数据，所以就有了不同的菜单，1-10天的，11-20天的， 大于20天的，这样设计菜单没问题，但是这次需要修改时间范围，改成了1-15，15-30， 大于30的，菜单改没什么，关键是控制类里都是针对之前不同天数的菜单，分为几个方法处理，硬编码了天数！ 于是控制类也需要修改。
解决方法： 传天数变量到后台，一个方法就能处理。</p>
<p>对于3. 这个就是工作习惯问题了，如果没有数据库说明文档，表再没有注释，别人只能靠猜了，只能一遍遍去问相关人员了，大大降低了效率。 解决方法：写文档。</p>
<p>对于4. 代码阅读费劲。 解决方法： 格式话。</p>
<h4 id="想说的">想说的</h4>
<p>我们在开发项目中，觉得省劲，但是有些必要的过程是不能省略的，前人在编程中总结了很多优秀的经验来指导工程开发，我们直接照着做就行，最后总体来说是比较省时间效率高的。我们在做项目时一定要避免觉得一次性使用就不够认真，这对以后维护的同事来说是个巨大痛苦。我们的工作展现的是我们的靠谱度，如何更快的进步，获得更大的成就？做到靠谱</p>
]]></content></item><item><title>Week1004_tip</title><link>/posts/arts/week1004_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:31 +0000</pubDate><guid>/posts/arts/week1004_tip/</guid><description>ARTS - Tip 1. ES6 中 let 和 var 最近写js, IDE 提示推荐使用 let 或const 代替 var 声明变量，于是就了解了下ES6的 let和 var的区别。
关键词：
let : 变量只能声明一次 var : 变量可以多次声明 var a = 5; var a = 3; let b = 2; let b = 4; console.console.log(a); console.console.log(b); 然后就报错了 Uncaught SyntaxError: Identifier &amp;lsquo;b&amp;rsquo; has already been declared at :1:1
于是，在方法里调用方法，var也会有不一样的：
// var for(var i=0;i&amp;lt;5;i++){ setTimeout(function(){ console.log(&amp;#34;var：&amp;#34; + i); }) } // let for(let i=0;i&amp;lt;5;i++){ setTimeout(function(){ console.</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h3 id="1-es6-中-let-和-var">1. ES6 中 let 和 var</h3>
<p>最近写js, IDE 提示推荐使用 let 或const 代替 var 声明变量，于是就了解了下ES6的 let和 var的区别。</p>
<blockquote>
<p>关键词：</p>
</blockquote>
<blockquote>
<ul>
<li>let : 变量只能声明一次</li>
<li>var : 变量可以多次声明</li>
</ul>
</blockquote>
<pre tabindex="0"><code>var a = 5;
  var a = 3;
  let b = 2;
  let b = 4;  
  console.console.log(a);
  console.console.log(b); 
</code></pre><p>然后就报错了 Uncaught SyntaxError: Identifier &lsquo;b&rsquo; has already been declared
at <!-- raw HTML omitted -->:1:1</p>
<p>于是，在方法里调用方法，var也会有不一样的：</p>
<pre tabindex="0"><code>
// var
    for(var i=0;i&lt;5;i++){
           setTimeout(function(){
               console.log(&#34;var：&#34; + i);
          })
    }
       // let
    for(let i=0;i&lt;5;i++){
           setTimeout(function(){
               console.log(&#34;let&#34; + i);
          })
    }
</code></pre><p>var 输出的结果是 5, let输出是 0,1,2,3,4。
如果用var实现let这个功能就需要用闭包了</p>
<pre tabindex="0"><code>for(var i = 0; i &lt; 5; i++) {
	(function(i){
		setTimeout(function(){
			console.log(&#34;var: &#34; + i);
		});
	})(i);

}
</code></pre><h3 id="2-safari-和-chrome-dateparse">2. Safari 和 Chrome Date.parse</h3>
<p>有一个需求是页面显示 yyyy-MM-dd HH:mm:ss 格式的日期，于是，同时在js里 这个日期还要参与计算， 在转化为 Date对象时候，使用了  Date d = new Date(&lsquo;2018-08-06 12：20：13&rsquo;);
这个在Chrome可以转化正常，但是在Safari 里就报错了 Invalid Date 。</p>
<p>解决办法： let d = new Date(Date.parse(dateString));</p>
<hr>
<p>[1] var和let区别 <a href="https://www.jianshu.com/p/bf548e0ee60b">https://www.jianshu.com/p/bf548e0ee60b</a>
[2]</p>
]]></content></item><item><title>Week1001_AP_computer</title><link>/posts/arts/week1001_ap_computer/</link><pubDate>Fri, 31 Mar 2023 15:45:30 +0000</pubDate><guid>/posts/arts/week1001_ap_computer/</guid><description>ARTS 2. Review Expansion of AP computer science courses draws more girls and minorities ‘There’s more work to do’
扩大AP计算机科学[1]课程吸引更多女孩和少数民族，还有更多工作要做。
Adapted from a story by The Washington Post&amp;rsquo;s Nick Anderson.
改编自华盛顿邮报 Nick Anderson 的故事。
For more than 30 years, high schools have offered Advanced Placement classes in computer science. But about 10 years ago, educators began to worry about participation. Overall numbers were low.
超过三十年时间，高中都开设了计算机科学的高级教程，但是大约10年前，教育工作者开始担心这些课程可能总体上是偏低的。
About 20,000 students took the computer science tests in 2007, fewer than the totals for AP French or studio art.</description><content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="2-review">2. Review</h3>
<p><a href="https://medium.com/the-lily/expansion-of-ap-computer-science-courses-draws-more-girls-and-minorities-5d8109a74689">Expansion of AP computer science courses draws more girls and minorities
‘There’s more work to do’</a></p>
<p>扩大AP计算机科学[1]课程吸引更多女孩和少数民族，还有更多工作要做。</p>
<p><a href="https://www.washingtonpost.com/local/education/expansion-of-ap-computer-science-draws-more-girls-and-minorities/2018/01/08/cd5932d8-e040-11e7-89e8-edec16379010_story.html?utm_term=.89e3d550a15d">Adapted from a story by The Washington Post&rsquo;s Nick Anderson.</a></p>
<p>改编自华盛顿邮报 Nick Anderson 的故事。</p>
<p>For more than 30 years, high schools have offered Advanced Placement classes in computer science. But about 10 years ago, educators began to worry about participation. Overall numbers were low.</p>
<p>超过三十年时间，高中都开设了计算机科学的高级教程，但是大约10年前，教育工作者开始担心这些课程可能总体上是偏低的。</p>
<p>About 20,000 students took the computer science tests in 2007, fewer than the totals for AP French or studio art. A closer look showed even more dismal trends that year.</p>
<p>2007年大约2万个学生参加了计算机科学考试，比 AP 法语 或者演播艺术的总数少很多，更近距离的观察显示那年的情形倾向于更坏。</p>
<p>Only about 3,360 female and 1,300 Latino students took the computer science test. The African American total was a mere 734.</p>
<p>仅约3360女性和 1300 拉丁裔学生参加了计算机科学考试，非裔美国人总数仅为734人。</p>
<p>Trevor Packer, senior vice president of the College Board and longtime head of the AP program, said annual reports on computer science testing in that era would make him wince. Idaho, for example, counted 25 boys taking the tests in 2007 — and zero girls. The College Board saw similar situations in a handful of other states</p>
<p>Trevor Packer, 大学董事会高级副总裁，也是AP计划长期负责人，说，那个时期的计算机科学考试年度报告让他感到畏缩。例如，Idaho 州统计， 25个男生参加了考试，女生数是0. 大学委员会在其他州也看到了类似的情况。</p>
<p>The College Board, which oversees the AP program, knew something needed to change.
监督AP计划的大学委员会，已经认识到需要改变一些事情了。</p>
<p>With help from the National Science Foundation, the College Board and computer scientists at various universities fashioned a new course meant to appeal to a broader audience. AP Computer Science Principles, or CSP, launched nationally in fall 2016. It joined a longer-established AP course focused on the programming language Java.</p>
<p>在国家科学基金的帮助下，大学委员会和计算机科学家们设计了一门新课程，来吸引更多观众。 计算机科学原理，CSP，在2016年秋季全面启动，它加入了一个较长的课程，专注与编程语言Java。</p>
<p>A College Board video promoting the course made explicit appeals to underrepresented students. “A lot of girls are intimidated because they see computers as, like, a ‘guy thing,’ ” one girl says in the video. “If more girls were, like, encouraged, then that wouldn’t be an issue anymore.”</p>
<p>一个促进该课程的大学委员会视频对还在疑虑的学生进行明确的呼吁。 一个女孩在在视频中说，“很多女孩对课程感到害怕是因为觉得是男孩子的东西，如果更多女孩被鼓励参与，那将不会是问题。”</p>
<p>Nationwide in 2017, the number of female, black and Latino students who took an AP computer science test doubled. In Idaho last spring, 92 girls took an AP computer science test. Most tested after taking the newest course, Computer Science Principles.</p>
<p>2017年参加AP计算机科学考试的女性、黑人、拉丁裔学生数量翻倍了。在Idaho 州去年春季，92个女孩参加了考试。绝大多数参加最新课程 计算机原理的学生都参加了考试。</p>
<p>We’re trying to diversify a field that for whatever reason has remained not so for generations,” said David Coleman, president of the College Board. “Really, what this is about is computer science breaking out of its narrow role.”</p>
<p>Coleman acknowledged: “There’s more work to do.”</p>
<p>我们努力使计算机科学领域多样化发展，不管这一代还存在什么原因，大学委员会主席 David Coleman 说，真的，这是突破计算机狭隘角色的一种方式。他也承认， 还要更多工作要做。</p>
<p>About 27 percent of roughly 100,000 AP computer science test-takers last spring were girls. Black students accounted for 5 percent of those tested and Latino students for 15 percent, well below their overall shares of school enrollment. Expanding computer science in high schools also takes more than adding a new AP course. It also requires investing in teachers, who often are not experts in the field. Course offerings have long been skimpy in many schools.</p>
<p>大约100000名计算机科学考试参与者中有27%是女孩，黑人5%， 拉丁裔15%, 远低于学校总人数。
在高中扩大计算机科学课程不仅是增加一门新的AP课程，也要增加教师投资，他们往往不是计算机科学领域内 的专家。许多学校该课程设置一直很薄弱。</p>
<p>Still, universities are tracking progress in AP computer science testing closely. They have struggled for years to broaden the demographic base of students in computer science beyond white and Asian American men. The AP program, which enables students to obtain college credit through testing, offers one of the strongest links between high schools and higher education.</p>
<p>These problems have seeped into the workforce, where women and minorities are often in short supply.</p>
<p>尽管如此，大学仍在密切跟踪AP计算机科学考试的发展。多年来，除了白人和亚裔美国人，他们一直在努力扩大计算机科学专业的学生人口基础。AP项目使得学生通过考试获得大学学分，为高中和大学教育提供了最牢固的联系之一。</p>
<p>这些问题也渗透到了劳动力市场，妇女和少数民族以经常供不应求。</p>
<hr>
<p>[1] AP计算机科学 百度百科 <a href="https://baike.baidu.com/item/AP%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/13476125">https://baike.baidu.com/item/AP%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/13476125</a></p>
]]></content></item><item><title>Week1001_java_timezone</title><link>/posts/arts/week1001_java_timezone/</link><pubDate>Fri, 31 Mar 2023 15:45:30 +0000</pubDate><guid>/posts/arts/week1001_java_timezone/</guid><description>ARTS Tip 场景与需求 项目使用国内一家公司的接口服务，该接口服务根据北京时间调用次数收费的，我们项目部署在国外服务器上，需求是统计接口每天调用量。
分析 我们要统计接口调用量，要把时区切换到北京时区。
实现方式 使用java8 java.time包 实现最方便。
代码：
@Test public void test1() { ZoneId shanghaiZone = ZoneId.of(ZoneId.SHORT_IDS.get(&amp;#34;CTT&amp;#34;)); System.out.println(LocalDateTime.now(shanghaiZone)); ZoneId zoneId = ZoneId.systemDefault(); System.out.println(zoneId); LocalDateTime now = LocalDateTime.now(zoneId); System.out.println(now); } 打印结果：
2018-07-14T15:53:24.818 Asia/Shanghai 2018-07-14T15:53:24.822 备注 ZoneId 的SHORT_IDS 是该类缓存的时区代码，源码如下：
public static final Map&amp;lt;String, String&amp;gt; SHORT_IDS; static { Map&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;(64); map.put(&amp;#34;ACT&amp;#34;, &amp;#34;Australia/Darwin&amp;#34;); map.put(&amp;#34;AET&amp;#34;, &amp;#34;Australia/Sydney&amp;#34;); map.put(&amp;#34;AGT&amp;#34;, &amp;#34;America/Argentina/Buenos_Aires&amp;#34;); map.put(&amp;#34;ART&amp;#34;, &amp;#34;Africa/Cairo&amp;#34;); map.put(&amp;#34;AST&amp;#34;, &amp;#34;America/Anchorage&amp;#34;); map.put(&amp;#34;BET&amp;#34;, &amp;#34;America/Sao_Paulo&amp;#34;); map.put(&amp;#34;BST&amp;#34;, &amp;#34;Asia/Dhaka&amp;#34;); map.put(&amp;#34;CAT&amp;#34;, &amp;#34;Africa/Harare&amp;#34;); map.</description><content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="tip">Tip</h3>
<h3 id="场景与需求">场景与需求</h3>
<p>项目使用国内一家公司的接口服务，该接口服务根据北京时间调用次数收费的，我们项目部署在国外服务器上，需求是统计接口每天调用量。</p>
<h3 id="分析">分析</h3>
<p>我们要统计接口调用量，要把时区切换到北京时区。</p>
<h3 id="实现方式">实现方式</h3>
<p>使用java8 java.time包 实现最方便。</p>
<p>代码：</p>
<pre tabindex="0"><code>
	@Test
    public void test1() {

        ZoneId shanghaiZone = ZoneId.of(ZoneId.SHORT_IDS.get(&#34;CTT&#34;));
        System.out.println(LocalDateTime.now(shanghaiZone));

        ZoneId zoneId = ZoneId.systemDefault();
        System.out.println(zoneId);
        LocalDateTime now = LocalDateTime.now(zoneId);
        System.out.println(now);

    }
        
</code></pre><p>打印结果：</p>
<pre tabindex="0"><code>2018-07-14T15:53:24.818
Asia/Shanghai
2018-07-14T15:53:24.822
</code></pre><h3 id="备注">备注</h3>
<p>ZoneId 的SHORT_IDS 是该类缓存的时区代码，源码如下：</p>
<pre tabindex="0"><code>public static final Map&lt;String, String&gt; SHORT_IDS;
    static {
        Map&lt;String, String&gt; map = new HashMap&lt;&gt;(64);
        map.put(&#34;ACT&#34;, &#34;Australia/Darwin&#34;);
        map.put(&#34;AET&#34;, &#34;Australia/Sydney&#34;);
        map.put(&#34;AGT&#34;, &#34;America/Argentina/Buenos_Aires&#34;);
        map.put(&#34;ART&#34;, &#34;Africa/Cairo&#34;);
        map.put(&#34;AST&#34;, &#34;America/Anchorage&#34;);
        map.put(&#34;BET&#34;, &#34;America/Sao_Paulo&#34;);
        map.put(&#34;BST&#34;, &#34;Asia/Dhaka&#34;);
        map.put(&#34;CAT&#34;, &#34;Africa/Harare&#34;);
        map.put(&#34;CNT&#34;, &#34;America/St_Johns&#34;);
        map.put(&#34;CST&#34;, &#34;America/Chicago&#34;);
        map.put(&#34;CTT&#34;, &#34;Asia/Shanghai&#34;);
        map.put(&#34;EAT&#34;, &#34;Africa/Addis_Ababa&#34;);
        map.put(&#34;ECT&#34;, &#34;Europe/Paris&#34;);
        map.put(&#34;IET&#34;, &#34;America/Indiana/Indianapolis&#34;);
        map.put(&#34;IST&#34;, &#34;Asia/Kolkata&#34;);
        map.put(&#34;JST&#34;, &#34;Asia/Tokyo&#34;);
        map.put(&#34;MIT&#34;, &#34;Pacific/Apia&#34;);
        map.put(&#34;NET&#34;, &#34;Asia/Yerevan&#34;);
        map.put(&#34;NST&#34;, &#34;Pacific/Auckland&#34;);
        map.put(&#34;PLT&#34;, &#34;Asia/Karachi&#34;);
        map.put(&#34;PNT&#34;, &#34;America/Phoenix&#34;);
        map.put(&#34;PRT&#34;, &#34;America/Puerto_Rico&#34;);
        map.put(&#34;PST&#34;, &#34;America/Los_Angeles&#34;);
        map.put(&#34;SST&#34;, &#34;Pacific/Guadalcanal&#34;);
        map.put(&#34;VST&#34;, &#34;Asia/Ho_Chi_Minh&#34;);
        map.put(&#34;EST&#34;, &#34;-05:00&#34;);
        map.put(&#34;MST&#34;, &#34;-07:00&#34;);
        map.put(&#34;HST&#34;, &#34;-10:00&#34;);
        SHORT_IDS = Collections.unmodifiableMap(map);
    }
</code></pre>]]></content></item><item><title>Week1001_SingleNumber</title><link>/posts/arts/week1001_singlenumber/</link><pubDate>Fri, 31 Mar 2023 15:45:30 +0000</pubDate><guid>/posts/arts/week1001_singlenumber/</guid><description>ARTS Algorithm 136. 只出现一次的数字
题目： 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
说明：
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
class Solution { public int singleNumber(int[] nums) { int index = 0; for (int i = 0; i &amp;lt; nums.length; i++) { index = index ^ nums[i]; } return index; } } ###分析： 此题目主要考察位运算， 其中 异或 ^ 操作符与相同的数字异或为0， 0与任何数异或是它本身的特性。 如果没有考虑到这一点，实现方法就是嵌套遍历出所有重复的，然后找出不重复的那个，这种方式很差。代码如下，
private static int singleNumber(int[] a) { List&amp;lt;Integer&amp;gt; list = Lists.newArrayListWithCapacity(a.length); int x = 0; for (int i = 0; i &amp;lt; a.</description><content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="algorithm">Algorithm</h3>
<p><a href="https://leetcode-cn.com/problems/single-number/description/">136. 只出现一次的数字</a></p>
<h3 id="题目">题目：</h3>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>说明：</p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<pre tabindex="0"><code>class Solution {
    public int singleNumber(int[] nums) {
        int index = 0;

        for (int i = 0; i &lt; nums.length; i++) {
            index = index ^ nums[i];
        }

        return index;
    }
}
</code></pre><p>###分析：
此题目主要考察位运算， 其中 异或 ^ 操作符与相同的数字异或为0， 0与任何数异或是它本身的特性。
如果没有考虑到这一点，实现方法就是嵌套遍历出所有重复的，然后找出不重复的那个，这种方式很差。代码如下，</p>
<pre tabindex="0"><code>private static int singleNumber(int[] a) {

        List&lt;Integer&gt; list = Lists.newArrayListWithCapacity(a.length);

        int x = 0;
        for (int i = 0; i &lt; a.length - 1; i++) {
            for (int j = i + 1; j &lt; a.length; j++) {

                if (a[i] == a[j]) {

                    list.add(i);
                    list.add(j);
                    break;
                }
            }

        }
        for (int i = 0; i &lt; a.length; i++) {
            if (list.contains(i)) {
                continue;
            }
            x = a[i];
        }

        return x;
    }
</code></pre>]]></content></item><item><title>Week1001_think</title><link>/posts/arts/week1001_think/</link><pubDate>Fri, 31 Mar 2023 15:45:30 +0000</pubDate><guid>/posts/arts/week1001_think/</guid><description>ARTS Share 关于提高自己技术能力的几点思考 回想自己进步快的时候，一个是读书时理解了书中逻辑，然后代入到工作能够解决问题， 一个是解决了一个个个新问题的时候总结出经验的时候。现在想想这两种方式确实是符合认知逻辑的，了解到知识，结合实际使用场景，举一反三，带来提升， 这是理论指导实践， 第二种，先碰到了问题，事先没有解决经验，去摸索尝试，最后解决了问题，能力边界又扩张了一些，这是个实践总结理论。如何更好的提高能力？ 那就是重复这个过程。
实际中就是，对于理论指导实践，多看书，多看技术文章，多了解前人经验，扩大自己的认知范围，极限就是自己碰到的问题都能在自己知识库里找到解决方案。 对于实践总结理论，出现这种情况说明自己知识库里还没有收录该问题，那就在实践中用各种方法来处理，最终解决后总结经验，存入知识库。反复循环，能力肯定飞跃。
但是这里面还有一个问题，就是知识库与自己所面对的现实问题的匹配问题， 有可能知识库的知识是错的，也有可能现实问题没有抓住核心矛盾，没有看清它的本质。这就需要提高自己的逻辑能力、思辨能力、抽象能力、总结能力了。提高逻辑能力、思辨能力才能在获取知识时更好的研究出它的规律，提高知识库的质量；提高抽象能力、总结能力，才能对现实中遇到的问题透过现象看本质，迅速找出解决思路与应对策略，提炼出核心逻辑存入知识库，以后遇到相同问题就不再手足无措。
那么如何提高这些比较唯心的能力呢？思维训练。 逻辑能力讲究的推导能力、举一反三能力。多看行业案例，先看场景与开始条件，然后根据自己的想法写下可能的因素和产生的结果，最后根据实际的结果偏差，来校正自己思维的出入。 思辨能力讲究的质疑能力。质疑并不是无脑反驳，而是有科学依据的大胆假设、小心求证。假设一个可能情况，然后针对这个可能找出支持自己论点的论据，最后求得实事求是的结果。 抽象能力讲究的是发散与明悟。这就需要我们涉猎广泛，提高艺术修养。这种方式去提高自己的“感知”能力，也就是直觉。 总结能力讲究的眼光，找出无序中的有序，有序中的权重，这个也需要多进行实际中的训练。
还没有见过世界，谈何拥有世界观？去经历，去思考感悟，去实践，勤于总结。</description><content type="html"><![CDATA[<h2 id="arts">ARTS</h2>
<h3 id="share">Share</h3>
<h3 id="关于提高自己技术能力的几点思考">关于提高自己技术能力的几点思考</h3>
<p>回想自己进步快的时候，一个是读书时理解了书中逻辑，然后代入到工作能够解决问题， 一个是解决了一个个个新问题的时候总结出经验的时候。现在想想这两种方式确实是符合认知逻辑的，了解到知识，结合实际使用场景，举一反三，带来提升， 这是理论指导实践， 第二种，先碰到了问题，事先没有解决经验，去摸索尝试，最后解决了问题，能力边界又扩张了一些，这是个实践总结理论。如何更好的提高能力？ 那就是重复这个过程。</p>
<p>实际中就是，对于理论指导实践，多看书，多看技术文章，多了解前人经验，扩大自己的认知范围，极限就是自己碰到的问题都能在自己知识库里找到解决方案。 对于实践总结理论，出现这种情况说明自己知识库里还没有收录该问题，那就在实践中用各种方法来处理，最终解决后总结经验，存入知识库。反复循环，能力肯定飞跃。</p>
<p>但是这里面还有一个问题，就是知识库与自己所面对的现实问题的匹配问题， 有可能知识库的知识是错的，也有可能现实问题没有抓住核心矛盾，没有看清它的本质。这就需要提高自己的逻辑能力、思辨能力、抽象能力、总结能力了。提高逻辑能力、思辨能力才能在获取知识时更好的研究出它的规律，提高知识库的质量；提高抽象能力、总结能力，才能对现实中遇到的问题透过现象看本质，迅速找出解决思路与应对策略，提炼出核心逻辑存入知识库，以后遇到相同问题就不再手足无措。</p>
<p>那么如何提高这些比较唯心的能力呢？思维训练。
逻辑能力讲究的推导能力、举一反三能力。多看行业案例，先看场景与开始条件，然后根据自己的想法写下可能的因素和产生的结果，最后根据实际的结果偏差，来校正自己思维的出入。
思辨能力讲究的质疑能力。质疑并不是无脑反驳，而是有科学依据的大胆假设、小心求证。假设一个可能情况，然后针对这个可能找出支持自己论点的论据，最后求得实事求是的结果。
抽象能力讲究的是发散与明悟。这就需要我们涉猎广泛，提高艺术修养。这种方式去提高自己的“感知”能力，也就是直觉。
总结能力讲究的眼光，找出无序中的有序，有序中的权重，这个也需要多进行实际中的训练。</p>
<p>还没有见过世界，谈何拥有世界观？去经历，去思考感悟，去实践，勤于总结。</p>
]]></content></item><item><title>Week1002_algorithm</title><link>/posts/arts/week1002_algorithm/</link><pubDate>Fri, 31 Mar 2023 15:45:30 +0000</pubDate><guid>/posts/arts/week1002_algorithm/</guid><description>Algorithm leecode 7. 翻转整数 给定一个 32 位有符号整数，将整数中的数字进行反转。
分析 这道题把数字翻转，思路是使用模运算和直接除以10运算获得每一位数字，然后要考虑越界问题，比较笨的方式是转为字符数组，然后倒序排列后转为int，本人不才，使用了第二种。代码如下:
public int reverse(int x) { if (x == Integer.MIN_VALUE) { return 0; } boolean positive = x &amp;lt; 0; if (positive) { x = -x; } String n = String.valueOf(x); char[] chars = n.toCharArray(); StringBuilder sb = new StringBuilder(); for (int len = chars.length, i = len - 1; i &amp;gt;= 0; i--) { sb.append(chars[i]); } String result = sb.toString(); try { if (positive) { return -Integer.</description><content type="html"><![CDATA[<h2 id="algorithm">Algorithm</h2>
<h3 id="leecode-7-翻转整数httpsleetcode-cncomproblemsreverse-integerdescription">leecode <a href="https://leetcode-cn.com/problems/reverse-integer/description/">7. 翻转整数</a></h3>
<p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p>
<h3 id="分析">分析</h3>
<p>这道题把数字翻转，思路是使用模运算和直接除以10运算获得每一位数字，然后要考虑越界问题，比较笨的方式是转为字符数组，然后倒序排列后转为int，本人不才，使用了第二种。代码如下:</p>
<pre tabindex="0"><code>
public int reverse(int x) {

        if (x == Integer.MIN_VALUE) {
            return 0;
        }

        boolean positive = x &lt; 0;

        if (positive) {
            x = -x;
        }
        String n = String.valueOf(x);

        char[] chars = n.toCharArray();

        StringBuilder sb = new StringBuilder();
        for (int len = chars.length, i = len - 1; i &gt;= 0; i--) {
            sb.append(chars[i]);
        }
        String result = sb.toString();

        try {
            if (positive) {

                return -Integer.parseInt(result);
            } else {
                return Integer.parseInt(result);
            }

        } catch (NumberFormatException e) {
            return 0;
        }

    }
</code></pre><p>当然，高效的代码就是模运算取每一位，然后循环乘以10，代码如下：</p>
<pre tabindex="0"><code>public int reverse(int x) {

        int y = 0;

        while (x != 0) {

            if (y &gt; Integer.MAX_VALUE / 10 || y &lt; Integer.MIN_VALUE / 10) {
                return 0;
            }

            y = y * 10 + x % 10;

            x = x / 10;
        }


        return y;

    }
</code></pre>]]></content></item><item><title>Week1002_review</title><link>/posts/arts/week1002_review/</link><pubDate>Fri, 31 Mar 2023 15:45:30 +0000</pubDate><guid>/posts/arts/week1002_review/</guid><description>ARTS - Review 我们的数据就是我们自己 怎样阻止高科技公司垄断我们的个人信息 来自 medium: Our Data, Ourselves
Concentrated in a few hands, big data is a threat to democracy. Social media companies and political data-mining firms such as Cambridge Analytica have built their businesses by manipulating public life using personal data. Their work has helped heighten ethnic tensions, revive nationalism, intensify political conflict, and even produce new political crises in countries around the world — all while weakening public trust in journalism, voting systems, and electoral outcomes.</description><content type="html"><![CDATA[<h2 id="arts---review">ARTS - Review</h2>
<h2 id="我们的数据就是我们自己">我们的数据就是我们自己</h2>
<h3 id="怎样阻止高科技公司垄断我们的个人信息">怎样阻止高科技公司垄断我们的个人信息</h3>
<hr>
<p>来自 <a href="https://medium.com/foreign-policy/our-data-ourselves-8af4c76b8f61">medium: Our Data, Ourselves</a></p>
<blockquote>
<p>Concentrated in a few hands, big data is a threat to democracy. Social media companies and political data-mining firms such as Cambridge Analytica have built their businesses by manipulating public life using personal data. Their work has helped heighten ethnic tensions, revive nationalism, intensify political conflict, and even produce new political crises in countries around the world — all while weakening public trust in journalism, voting systems, and electoral outcomes.</p>
</blockquote>
<p>大数据集中在少数人手里，对民主是一种威胁。社交媒体公司和政治数据挖掘公司像剑桥分析公司通过个人数据操纵公共生活建立起自己的商业模式。他们的工作加剧了民族紧张局势，他们的工作帮助加剧了种族紧张关系，恢复了民族主义，加剧了政治冲突，甚至在世界各国制造了新的政治危机——所有这一切都削弱了公众对新闻业、投票制度和选举结果的信任。</p>
<blockquote>
<p>Such crises[危机] are symptoms[征兆] of a deeper problem: the effective monopoly[垄断] that a handful of technology firms have gained over a wealth of information relevant[有关的，确切的] to public life. Fixing the situation requires putting the public back in charge of its data.</p>
</blockquote>
<p>这些危机是更深层问题的征兆：一小撮科技公司获得了与公共生活有关的大量信息的有效垄断。修复这些问题需要大众对自己的数据负责。</p>
<blockquote>
<p>Democracy[民主政治，民众] has long been predicated[断定，表明] on, and reinforced[加强] by, social institutions[机构] that carefully collect information about public life and collective needs. Today, however, a handful of technology companies have far exceeded[超过] the data-gathering[数据采集] capacity[容量] of all other kinds of organizations.</p>
</blockquote>
<p>民众已经断定，社会机构正加紧收集公共生活信息和集体需求。然而当今一些高科技公司收集的信息已经远远超过其他组织结构的信息总和。</p>
<blockquote>
<p>These private firms possess[掌握] detailed information on the public — and having collected and stored data on every user’s attitudes, aspirations, and behaviors, they then use it to serve their bottom line. Social media platforms are designed to deliberately[故意的] exploit[开拓、利用] the common predilection[偏好] for selective exposure[曝光] — the tendency[倾向] to favor information that confirms pre-existing views — to reinforce messaging from advertising clients, lobbyists[说客], political campaign managers[政治竞选经理], and even foreign governments.</p>
</blockquote>
<p>这些私人公司掌握公众的详细信息，收集存储了每个用户的态度、愿望和行为，然后他们用这些来为自己的底线服务。社交媒体平台被故意设计成利用公众偏好来选择性暴露，信息偏好倾向来证实之前已经存在的观点的倾向，来加强广告客户的信息传递，说客，政治竞选经理，甚至外国政府。</p>
<blockquote>
<p>There are two ways to protect democracy from the challenge posed by tech companies’ dominance[支配] over socially valuable data. The first option is for governments to regulate[管控] content on an unprecedented[空前的] scale. That would oblige[强制] public regulators[监管者] to either review all social media content to judge its appropriateness[适当] or provide clear signals to private firms — whether the social media companies themselves or third parties — to perform such content reviews. But the problem with both scenarios[情节] is that they would create massive[大量的] new censorship mechanisms [审查机制] that would further threaten democratic culture.</p>
</blockquote>
<p>有两种方法来应对高科技公司对社会有价值信息的支配给民众带来的挑战。第一个观点是政府加强管控内容范围。这就强制公共监督者既不审查所有的社交媒体内容来判断是否适当也不提供清晰的信号给私人公司， 无论社交媒体公司自己活第三方结构去提供这些内容审查。但是两个都会导致的问的是这将会创造大量的审查机制，将会对民众文化产生深远影响。</p>
<blockquote>
<p>Far preferable[更好的] would be market regulations that guide firms on how and when they can profit from information about individuals. Such regulations would put the public back in charge of a valuable collective resource while still allowing citizens to express themselves individually by deciding what to do with their data. To get there, policymakers should focus on five basic reforms, all of which would put public institutions back into the flow of data now dominated by private firms.</p>
</blockquote>
<p>更好的方法是市场规则来引导公司如何、何时可以从人们信息中获益。这样规则将使众重新掌握这些有价值的集体资源，同时仍然允许民众自己决定如何来处理他们的数据来表达自己。为了实现这一目标，政策制定者应该关注五项基本改革，所有这些改革都将使公共机构重新回到现在由私营企业主导的数据流中。</p>
<blockquote>
<p>First, governments should require mandatory[强制性的] reporting about the ultimate beneficiaries of data. That means, when queried, technology firms should be required to clearly report to users which advertisers, data miners, and political consultants have made use of information about them. Your Facebook app or your smart refrigerator should be required to reveal, on request, the list of third parties benefiting from the information the device is collecting. The trail[追踪] of data should be fully, and clearly, mapped out for users so that if a data-mining firm aggregates users’ data and then sells it on to a political party, the users could still identify the ultimate beneficiary.</p>
</blockquote>
<p>第一，政府强制指出数据的最终受益人。意思是，当查询时候，科技公司应该向用户指出，哪些广告商、数据挖掘者，政治团体 将会使用这些信息。你的 facebook 应用或你的智能冰箱应该被要求列出自身收集的数据的第三方受益列表。这个数据追踪应该完全、透明向用户敞开，当一个数据挖掘公司聚合用户数据出售给某个政治团体，用户应该仍然可以识别最终受益人。</p>
<blockquote>
<p>Second, regulations should require social media platforms to facilitate[促进] data donation[捐赠], empowering[授权] users to actively identify the civic groups [民间团体], political parties, or medical researchers[医学研究者] they want to support by sharing their data with them. In freeing data from private actors, governments could create an opportunity for civic expression by allowing citizens to share it with whichever organizations and causes they want to support — not just the ones that can afford to buy it, as is the case today.</p>
</blockquote>
<p>第二，规则应该要求社交媒体平台促进数据捐赠，授权用户把他们的数据分享给他们支持的民间团体、政治团体、或者医学研究人员。在个人行为上解放数据行动时，政府可以允许公民与任何组织分享它们的数据来创造公民表达的机会，并促使他们支持 不仅是哪些能够买得起的人，正如今天的情况一样。</p>
<blockquote>
<p>The third reform is related to the second: Software and information infrastructure companies should be obliged to tithe for the public good. Ten percent of ads on social media platforms should be reserved for public service announcements, and 10 percent of all user data should be obliged to flow (in a secured way) to public health researchers, civic groups, professional journalists, educators, and public science agencies. Such a system would allow many kinds of advocacy groups and public agencies, beyond Facebook’s private clients, to use existing data to understand and find solutions for public problems.</p>
</blockquote>
<p>第三项涉及到第二个问题：软件和信息基础设施公司应该为公共利益服务。社交媒体平台上的百分之十的广告应该被保留用于公共服务公告，并且10%的所有用户数据应该有义务（以安全的方式）流向公共卫生研究人员、公民团体、专业记者、教育者和公共科学机构。这样的系统将允许许多倡导团体和公共机构，超越脸谱网的私人客户，使用现有的数据来理解和解决公共问题的解决方案。</p>
<blockquote>
<p>Fourth, the nonprofit rule on data needs to be expanded. Most democracies have rules that prevent firms from profiting from the sale of certain kinds of public data. In many U.S. states, for example, data-mining firms can’t profit from the sale of voter registration data, which public agencies collect. This rule needs to be extended to a wider range of socially valuable data, such as places of employment, that is now gathered by technology companies. Such classes of information could then be passed to public agencies, thus creating a broader set of data in the public domain.</p>
</blockquote>
<p>第四，数据的非营利规则需要扩大。大多数民主国家都有防止公司从某些公共数据中获利的规则。例如，在许多美国州，数据挖掘公司不能从公共机构收集的选民登记数据中获利。这个规则需要扩展到更广泛的社会有价值的数据，如就业场所，现在由科技公司收集。这样的信息可以传递给公共机构，从而在公共领域创造更广泛的数据集。</p>
<blockquote>
<p>Fifth, public agencies should conduct regular audits of social media algorithms and other automated systems that citizens now rely on for information. Technology companies will call these algorithms proprietary, but public agencies currently audit everything from video gambling machines to financial trading algorithms, all in ways that don’t violate intellectual property.</p>
</blockquote>
<p>第五，公共机构应该定期对公民现在依赖信息的社会媒体算法和其他自动化系统进行审计。科技公司将这些算法称为专有的，但公共机构目前对从视频赌博机到金融交易算法的一切都进行审计，所有这些方式都不侵犯知识产权.</p>
<blockquote>
<p>Users should have access to clear explanations of the algorithms that determine [决定]what news and advertisements they are exposed to, and those explanations should be confirmed by regular public audits. Moreover, all ads, not just political ones, need to be archived for potential use by public investigators. Audits of today’s technology would also put the designers of new technologies — such as artificial intelligence — on notice that their own algorithms will one day be under scrutiny.</p>
</blockquote>
<p>用户应该有机会对算法程序进行清晰的解释，以确定他们所接触的新闻和广告,这些解释应该通过定期让公共审核来确认。此外，所有的广告，而不仅仅是政治广告，需要被公众调查人员存档。对当今技术的审计也会让新技术的设计者——比如人工智能————注意到他们自己的算法有一天会受到审查</p>
<blockquote>
<p>Little of this need be wishful thinking. Restoring public access to social information wouldn’t require legislators to pass a raft of new laws, since most democracies have the public science agencies, libraries, and privacy czars needed to effectively administer large collections of public information. Competition regulators in the European Union and United States may already have the authority to set mandatory guidelines for any technology company with a business model that relies on controlling vast stores of publicly valuable data. Europe’s General Data Protection Regulation, which has boldly asserted an individual right to control data since going into effect in May, is an important start. It is already having a global impact, as many technology firms find it easier to implement a platformwide response than to adjust particular features for users based in Europe.</p>
</blockquote>
<p>这需要的只是一厢情愿的想法。恢复公众对社会信息的访问不需要立法者通过一系列新的法律，因为大多数民主国家都有公共科学机构、图书馆和隐私沙皇需要有效地管理大量的公共信息。欧盟和美国的竞争监管机构可能已经有权为任何技术公司设定强制性准则，其商业模式依赖于控制大量的公开有价值的数据。自5月生效以来，欧洲的数据保护条例大胆宣布了控制数据的个人权利，这是一个重要的开端。它已经产生了全球性的影响，因为许多技术公司发现实施平台响应比在欧洲基于用户调整特定功能更容易。</p>
<blockquote>
<p>Tech firms might claim that such demands would infringe on their economic rights as private enterprises. But contrary to such suggestions, it’s entirely fair to regulate the operations (if not the content) of tech firms because the platforms they control have become the fundamental infrastructure for public life. They are a common carrier for our political culture, much the same way the post office, newspaper empires, and television and radio broadcasters conveyed politics in past decades while being regulated to varying degrees.</p>
</blockquote>
<p>科技公司可能会声称这样的要求会侵犯他们作为私营企业的经济权利。但与这些建议相反，规范技术公司的运营（如果不是内容）是完全公平的，因为他们控制的平台已经成为公共生活的基本基础设施。他们是我们政治文化的共同载体，就像邮局、报纸帝国和电视广播电台在过去几十年里在政治上进行不同程度的管制一样。</p>
<blockquote>
<p>In democracies, citizens expect media companies, journalists, and civic groups to have some public duties, often enforced through the law. Social media and data-mining firms have evaded those responsibilities until now, hoarding public data with little public oversight. Strengthening democracy will require putting socially valuable data back to work for the public good.</p>
</blockquote>
<p>在民主国家，公民期望媒体公司、记者和公民团体有一些公共责任，通常通过法律强制执行。社交媒体和数据挖掘公司一直逃避这些责任，囤积公共数据而很少公开监督。加强民主需要将社会有价值的数据重新用于公共利益。</p>
<blockquote>
<p>Philip N. Howard is a statutory professor of internet studies at the Oxford Internet Institute and Oxford University’s Balliol College.</p>
</blockquote>
<p>Philip N. Howard是牛津互联网研究所和牛津大学巴里奥尔学院的互联网研究专业教授。</p>
]]></content></item><item><title>Week1002_tip</title><link>/posts/arts/week1002_tip/</link><pubDate>Fri, 31 Mar 2023 15:45:30 +0000</pubDate><guid>/posts/arts/week1002_tip/</guid><description>ARTS - Tip ssh 登录配置 在登录远程服务器时候，很多是用ssh-key来验证的，每次要输入ip地址会比教麻烦，于是就产生了配置
在 ~/.ssh/ 目录创建config文件，配置如下：
Host www HostName 182.159.15.88 Port 50 User root IdentityFile ~/.ssh/id_rsa_2048 # git指定私钥 Host api HostName api.domain.com User git Port 22 IdentityFile ~/.ssh/git_id_rsa 这样登陆时候直接 ssh www 就可以了， 还有在不操作一段时间后会自动断开，需要再设置一个：
Host * ServerAliveInterval 60 #表示没60秒去给服务端发起一次请求消息</description><content type="html"><![CDATA[<h2 id="arts---tip">ARTS - Tip</h2>
<h3 id="ssh-登录配置">ssh 登录配置</h3>
<p>在登录远程服务器时候，很多是用ssh-key来验证的，每次要输入ip地址会比教麻烦，于是就产生了配置</p>
<p>在 ~/.ssh/ 目录创建config文件，配置如下：</p>
<pre tabindex="0"><code>Host www
    HostName 182.159.15.88
    Port 50
    User root
    IdentityFile ~/.ssh/id_rsa_2048

# git指定私钥
Host api
    HostName api.domain.com
    User git
    Port 22
    IdentityFile ~/.ssh/git_id_rsa
</code></pre><p>这样登陆时候直接  ssh www 就可以了， 还有在不操作一段时间后会自动断开，需要再设置一个：</p>
<pre tabindex="0"><code> Host *
 ServerAliveInterval 60
 #表示没60秒去给服务端发起一次请求消息
</code></pre>]]></content></item><item><title>迁移博客到hugo</title><link>/posts/inbox/migrate_blog_from_github/</link><pubDate>Fri, 31 Mar 2023 14:05:03 +0000</pubDate><guid>/posts/inbox/migrate_blog_from_github/</guid><description>听说过hugo很久了，能很快的构建博客，之前使用过 hexo 和 docsify 感觉都还不错，今天就开始折腾下hugo。
主要目标是:
部署hugo，创建一个startup 选择喜欢的模板并熟悉配置 迁移老博客的md文件 发布 优化 1. 部署 这一步没啥难的，根据 gohugo.io 的quickstart 来搭建一个setup来试试。开了个免费的AWS EC2, 然后就开搞。
系统是ubuntu ， 使用snap install go hugo 然后就是 hugo new site quickstart 来测试 下载默认主题，然后添加一个文件， hugo new posts/first.md 编写点内容 启动 hugo server 过程中，主要问题是 hugo server启动默认 bind: 127.0.0.1 ，就是只接受本机访问， 在外界是访问不到的，需要把绑定改了
# 使用 -D 把 draft 状态的文章也发布了，因为默认不发布draft文章，并且md文件中 draft 默认是 true hugo server --bind &amp;#34;0.0.0.0&amp;#34; -D 然后aws改下安全组策略，就能通过ip和默认的1313端口访问到了.
2. 主题选择 看过几个主题很美观，选择了个程序员类型的 hello-friend-ng , 最近更新是一个月前，还算活跃.
3. 迁移老博客 这里主要是大量的md 文件迁移到hugo里。这里最主要的是给md文件添加头信息。 也就是如下写法：</description><content type="html"><![CDATA[<p>听说过hugo很久了，能很快的构建博客，之前使用过 hexo 和 docsify 感觉都还不错，今天就开始折腾下hugo。</p>
<p>主要目标是:</p>
<ol>
<li>部署hugo，创建一个startup</li>
<li>选择喜欢的模板并熟悉配置</li>
<li>迁移老博客的md文件</li>
<li>发布</li>
<li>优化</li>
</ol>
<h3 id="1-部署">1. 部署</h3>
<p>这一步没啥难的，根据 gohugo.io 的quickstart 来搭建一个setup来试试。开了个免费的AWS EC2, 然后就开搞。</p>
<ul>
<li>系统是ubuntu ， 使用snap install go hugo</li>
<li>然后就是 hugo new site quickstart 来测试</li>
<li>下载默认主题，然后添加一个文件， hugo new posts/first.md 编写点内容</li>
<li>启动 hugo server</li>
</ul>
<p>过程中，主要问题是 hugo server启动默认 bind: 127.0.0.1 ，就是只接受本机访问， 在外界是访问不到的，需要把绑定改了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># 使用 -D 把 draft 状态的文章也发布了，因为默认不发布draft文章，并且md文件中 draft 默认是 true</span>
</span></span><span style="display:flex;"><span>hugo server --bind <span style="color:#e6db74">&#34;0.0.0.0&#34;</span> -D
</span></span></code></pre></div><p>然后aws改下安全组策略，就能通过ip和默认的1313端口访问到了.</p>
<h3 id="2-主题选择">2. 主题选择</h3>
<p>看过几个主题很美观，选择了个程序员类型的 hello-friend-ng , 最近更新是一个月前，还算活跃.</p>
<h3 id="3-迁移老博客">3. 迁移老博客</h3>
<p>这里主要是大量的md 文件迁移到hugo里。这里最主要的是给md文件添加头信息。 也就是如下写法：</p>
<pre tabindex="0"><code>---
title:  &#39;this is a title&#39;
date: 2023-03-31 
draft: false
---
</code></pre><p>起初，计划给每个md文件拼上这个头信息, 然后复制到 content 目录，担心和 <code>hugo new</code> 的方式样式有问题(多余担心) , 就决定调用 hugo new 来生成md, 再拼接内容。
python相关逻辑很简单，就是读老博客 md 文件，写入到hugo生成的文件中，主要功能代码如下:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(file_path, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> file_a:
</span></span><span style="display:flex;"><span>    content_a <span style="color:#f92672">=</span> file_a<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(new_path, <span style="color:#e6db74">&#39;a&#39;</span>) <span style="color:#66d9ef">as</span> file_b:
</span></span><span style="display:flex;"><span>    file_b<span style="color:#f92672">.</span>write(content_a)
</span></span></code></pre></div><h3 id="4-部署发布">4. 部署发布</h3>
<p>使用 <code>hugo</code> 命令构建发布， 生成public 的静态html 文件. 然后使用nginx来代理这些静态文件。期间配置nginx遇到的主要问题是， 要记得改nginx.conf里的user .默认 user 是没有权限访问博客目录的，所以几次出现403问题。 之后在 cloudflare 上配置了域名解析，就可以用自己域名访问到博客了。</p>
<h3 id="5-后续优化">5. 后续优化</h3>
<p>本次迁移是非常基本的迁移，有很多东西需要完善。比如分类、系列、标签几乎全是一样，另外就是时间是错的，都变成今天发布了。 一个好的方法是根据文件是创建时间来设置博客时间，这是下次优化的重点。
然后就是编写体验问题。本人喜欢用Typora在本地编写md文件，应该做到本地编写完，<code>git push </code>到文档的repo里，git actions 启动，自动发布博客内容。</p>
<p>以后的目标是:</p>
<ol>
<li>修改博客文章日期</li>
<li>push后一键发布</li>
</ol>
]]></content></item><item><title>Third</title><link>/posts/inbox/third/</link><pubDate>Fri, 31 Mar 2023 09:31:52 +0000</pubDate><guid>/posts/inbox/third/</guid><description>测试第二篇文章
博客系统如何组织分类
分类
系列
标签</description><content type="html"><![CDATA[<p>测试第二篇文章</p>
<p>博客系统如何组织分类</p>
<p>分类</p>
<p>系列</p>
<p>标签</p>
]]></content></item><item><title>First</title><link>/posts/inbox/first/</link><pubDate>Thu, 30 Mar 2023 14:12:06 +0000</pubDate><guid>/posts/inbox/first/</guid><description>hello world !</description><content type="html">&lt;p>hello world !&lt;/p></content></item></channel></rss>