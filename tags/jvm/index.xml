<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JVM on Hello Friend</title><link>/tags/jvm/</link><description>Recent content in JVM on Hello Friend</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 14 Apr 2023 04:21:08 +0000</lastBuildDate><atom:link href="/tags/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM 常见面试题</title><link>/posts/tech/java_jvm_interview_230414/</link><pubDate>Fri, 14 Apr 2023 04:21:08 +0000</pubDate><guid>/posts/tech/java_jvm_interview_230414/</guid><description>JVM 常见面试题 我让GPT生成了几个JVM常见面试题：
以下是一些常见的 JVM（Java 虚拟机）面试题：
什么是 JVM？ JVM 的组成部分是什么？ 请解释 Java 内存模型（JMM）。 什么是类加载器（Classloader）？请解释其工作原理。 请列举 JVM 中的类加载器类型。 什么是 Just-In-Time（JIT）编译器？它的作用是什么？ 请解释 Java 堆内存和栈内存的区别。 什么是垃圾回收（Garbage Collection）？请简要描述其工作原理。 请列举并简要介绍 Java 中的垃圾回收器。 什么是分代垃圾回收策略？请解释年轻代（Young Generation）和老年代（Old Generation）的概念。 请解释 Java 中的强引用、软引用、弱引用和虚引用。 什么是 Java 堆溢出（Heap Overflow）和栈溢出（Stack Overflow）？如何处理这些问题？ 什么是逃逸分析？它在 JVM 性能优化中有什么作用？ 如何监控和调优 JVM 的性能？ 请列举 JVM 调优的一些常用参数。 请解释 Java 中的死锁、饥饿和活锁。 什么是线程安全？如何在 Java 中确保线程安全？ 请解释 Java 中的同步和异步编程。 什么是 volatile 关键字？它的作用是什么？ 请解释 Java 中的并发编程和多线程编程。 1. 什么是 JVM？ JVM 是 Java Virtual Machine 的缩写，也就是Java虚拟机。它是一个运行Java程序的跨平台容器。它的主要功能特点是：</description></item><item><title>跟着GPT学习JVM的垃圾收集器</title><link>/posts/tech/java_jvm_gc_230414/</link><pubDate>Fri, 14 Apr 2023 03:50:01 +0000</pubDate><guid>/posts/tech/java_jvm_gc_230414/</guid><description>跟着GPT学习JVM的垃圾收集器 有了GPT之后，学习热情也也高了许多，像是身边有了一个全知且没脾气的博士一样，啥问题都可以丢给他。和搜索引擎相比，GPT以问答方式直接回复，更便捷。但是也有一些错误存在，追求更精准还是要用搜索引擎。
今天来学习JDK和JVM收集器
JDK8 - JDK17 的垃圾收集器 首先问了不同JDK版本之间默认垃圾收集器的区别：
Q: Java8 - Java17 各个版本对应的默认GC是哪个?
A: 各个 Java 版本的默认垃圾收集器（GC）如下：
各个 Java 版本的默认垃圾收集器（GC）如下：
Java 8： 默认的垃圾收集器是 Parallel GC。它在年轻代（Young Generation）使用 Parallel Scavenge，而在老年代（Old Generation）使用 Parallel Old GC。 Java 9： 在 Java 9 中，默认的垃圾收集器仍然是 Parallel GC。 Java 10： Java 10 也继续使用 Parallel GC 作为默认垃圾收集器。 Java 11： 默认的垃圾收集器仍然是 Parallel GC。然而，从 Java 11 开始，ZGC 可作为实验性垃圾收集器使用。 Java 12： Java 12 同样使用 Parallel GC 作为默认垃圾收集器。此版本引入了实验性的 Shenandoah GC，但不是默认选项。 Java 13： 默认的垃圾收集器在 Java 13 中保持不变，仍然是 Parallel GC。 Java 14： Java 14 同样使用 Parallel GC 作为默认垃圾收集器。此外，这个版本中 ZGC 从实验性垃圾收集器升级为生产就绪状态。 Java 15： Java 15 保持使用 Parallel GC 作为默认垃圾收集器。 Java 16： Java 16 中默认的垃圾收集器依然是 Parallel GC。同时，G1 GC 和 ZGC 作为可选的生产就绪垃圾收集器。 Java 17： 在 Java 17（长期支持版本，LTS）中，默认垃圾收集器仍然是 Parallel GC。G1 GC、ZGC 和 Shenandoah GC 作为可选的生产就绪垃圾收集器。 请注意，虽然默认的垃圾收集器在各个版本中保持不变，但根据您的应用程序需求，您可以选择其他垃圾收集器，如 G1 GC、ZGC 或 Shenandoah GC。要更改垃圾收集器，只需在启动 Java 应用程序时设置适当的 JVM 参数。</description></item></channel></rss>