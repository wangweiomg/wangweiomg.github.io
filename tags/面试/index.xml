<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>面试 on Hello Friend</title><link>/tags/%E9%9D%A2%E8%AF%95/</link><description>Recent content in 面试 on Hello Friend</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sat, 15 Apr 2023 00:54:44 +0800</lastBuildDate><atom:link href="/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>技术面试前的准备</title><link>/posts/inbox/interview_prepare_230415/</link><pubDate>Sat, 15 Apr 2023 00:54:44 +0800</pubDate><guid>/posts/inbox/interview_prepare_230415/</guid><description>看到了一篇挺好的面试准备文章，收藏下。 原文链接: 面试底层逻辑整理
面试前 1、基础真的很重要 语言基础，操作系统，网络知识，数据结构，常用开源软件的熟练使用，刷算法题，这些决定是否能有资格跟面试官继续聊下去。
2、充分准备好面试内容 把自己的工作经历先拟一个草稿，思维导图也可，流畅背诵，时长能够持续20分钟以上。别觉得多，有的说总比两三分钟就结束了强。并且准备越充分，候选人说的越多，越能体现项目经验丰富。
3、做过的项目一定要吃透 一个有意义的项目往往比较复杂，一定要将话术写在笔记上自己反复打磨，修饰最精炼的语句，让听者更好理解。有简有繁，有条有理地介绍你的项目功能点，能够显得你语言干练，逻辑性清晰。
哪怕是共建项目，也得掌握整个项目的知识点。比如项目实现了什么功能、解决了什么痛点、技术栈有哪些、规模、用户量多少、多少人参与研发的、你在项目中的角色是什么等等。
4、简历上分层分点简单概要项目经验，先说结论 这一点很重要，面试官接收候选人传达的信息无非就是耳和眼，当候选人在描述自己所熟悉的项目，大多数面试官需要脑补你的应用场景，经常会有跟不上候选人的语速。
若简历上清晰分点描述了项目概要，眼耳并用传达信息速度的带宽是指数增长的。一能给面试官从视觉上快速的整体把握，知道候选人在说什么，二能防止候选人说跑偏，到最后扯远了，问到自己不熟悉的领域就GG。
5、一定要画一个思维导图，向上管理 思维导图内容包含你的工作所需的技术细节，方法论以及你的观点，思考。
现在因为疫情原因，大多数技术面试均已改为线上视频面试，无论是腾讯会议、飞书、钉钉等都具备屏幕共享功能，如果在面试过程中，你把你的项目或者观点思路以思维导图的形式分享，面试的思路就完全跟着你走了，他会很认真仔细的看你的思维导图，那么面试问题也会局限在你导图内容范围，不会太过于发散其他。
另外，如果你整一套清晰的思维导图照着念，那么给人的第一印象就是你善于总结，思路清晰，表达流畅。
6、数据量化 人类通过对图表的理解速度要强于纯文字，对数字的理解速度强于纯文字。所以简历上分点描述的内容，最好量化成“监控系统日告警量超3000条，经优化后日告警不超过100条”；“监控系统客户端覆盖全网5000台设备”这样的句式。这也是团队间分享及汇报给上级的一个好习惯，向上管理^_^，要预判你的对象希望从你这里得到什么。
7、学会发散 准备项目的时候不要太老实，该吹牛逼的时候还是需要吹的，比如项目某一功能很有特点，但是目前还没排期实现，或者你调研业界有些优秀的功能点，在吃透其技术方案并可落地实施的前提下，是可以写进项目经验的。
8、分析人物需求，打组合拳 提前问清楚招聘HR，下一面的面试官的角色是什么，比如：
一面面试官，基本上是候选人将来同组同事或者组长。在跟他们聊的时候需要着重谈项目能力，如何落地实施，技术细节，执行能力，突出基础扎实，算法是重中之重，必须刷题。
二面面试官，大多为交叉面试，可能是兄弟部门leader，比如我们做运维的，二面面试官可能是研发部门的leader，候选人需要着重表现代码能力，算法能力，架构设计能力，同时也可以吹吹你对代码的高度洁癖，对标准化、自动化的强迫症。当然吹的时候还是需要提前准备下相关内容。一般情况，交叉面不会随便挂人，除非表现非常一般。
三面四面面试官，基本上都是主管总监级，这一角色的评价决定了候选人的职级、薪资以及是否为高潜候选人。他们更关注候选人的综合素养，对岗位的理解，对行业方向的嗅探能力。另外就是上文所述“对待业务的思想需要具备全局性，前瞻性，需要具备一个上帝视角的思想，如在架构视角，用户视角，产品视角，全方位去度量自己负责的业务是否能够满足客户需求，能否更加降本增效，能否做一些更优质的平台工具去提高业务效率，提高业务稳定性，能否制定一些预案，把可预见型的故障自动化避免，把不可预见型的故障，降影响降到最低，如何结合业务进行方案落地。”这些能力，嘴皮子要灵活一点，体现出踏实肯干，有灵性，值得培养。
HR终面，考察的是候选人稳定性，长期发展规划，以及平衡双方都满意的一个薪资点。大致问题如下：
为什么从前几家公司离职？
你在上一家公司团队担任什么角色，工作中有什么亮点
如果你前几家公司有些比较出名，HR会问你你对其某些业务在市场上的定位，或者公司文化有什么看法？
你觉得的优缺点是什么？兴趣爱好是什么？
前公司给你留下印象最深的是什么？既然这么好，你为什么要出来？为什么不内部调岗？
后期规划是什么，通过哪些方法实现你的目标规划？
是否打算长期在XX城市发展？
期望薪资是多少，若少于多少你就不考虑了？
分析：HR大多数都是女性，要抓住女性本身生活中也是感性居多，自然HR面的问题大多也是感性的，不像技术问题那样，大部分标准答案很明确。HR想在候选人这里得到的认知是：你有明确的正确的职业规划，你跳槽是为了更好的靠近自己的目标，正好该公司能够提供这样的岗位机会，你将来会稳定的在公司发展下去，并且能为公司输出比别人更多的价值，良禽择木而栖，你就是他们要找的人。自然薪资就好谈了。这里就不举例了，结合自身情况，自己准备好话术。
加分项：若候选人按照上述方法面试下来，感觉跟面试官聊的比较投机，并且氛围比较轻松的情况下，可以问下这个问题：“老哥，我这还有最后一个问题，希望您无论是作为行业中耕耘多年的前辈也好，还是本次面试的面试官也好，能否根据我的表现，给我一些建议，我好结合自身情况，摆正方向，努力提升。”对方若给出建议就洗耳恭听，没给出也正常，因为可能会透露出面试结果，这不重要。重要的是你这句话是表态的，表示候选人对这位面试官的尊重，对其职位的认可，对该团队在做工作的认可，也表示了候选人学习态度端正，值得培养，是个好苗子。这个问题每一个技术面试官都可以问。
面试中： 1、自信，别紧张 虽说是求职，但面试官在某些领域不一定比你强，对于自己的项目，自然是要比面试官熟悉，你要做的就是把项目条理清晰地描述，请分点说明。面试其实就是与一位”前辈“交流探讨，思想碰撞。只要前期准备工作充分，要很享受这个互相学习交流的过程。自然就不会紧张，气场就出来了。
2、掌握节奏，掌握主动权 技术面单场基本在1小时到1.5小时内，面试开始第一句话大部分都是互相自我介绍，轮到候选人的时候就直接说：“那我就通过描述我的这几年工作经验，简单的介绍下自己。”巴拉巴拉说完一段工作经验后，面试官会打断要你把某些要点仔细讲一遍。只要前期准备工作做得好，这都不是问题。切记要语言精炼，分点描述，语速适中，自信不虚。这样有来有回3、4个回合基本上40分钟就过去了，面试官在跟着你的思路走，他的脑袋也在学习一些业内的优秀解决方案。时间不多的情况下，最后会问几道基础知识的问题，一道算法题，这些前期准备充分，问题不大，面试基本就稳了。面试的时候注意表达方式，掌握主导权，强势一点，帮助面试官做判断。比如在阐述你的一些优点和项目经验时，面试官就需要把候选人的描述与岗位做匹配，但这是面试官在做判断。候选人应着重体现：该岗位所做的项目比较需要自己的优点与项目经验，你的特点能为这个团队带来什么价值。这样就是在帮面试官做判断，旁敲侧击告诉面试官你就是那个最匹配岗位的人。就如前文所述，需要具备用户思维，站在用户视角，分析其需求，把自己当作产品打磨至最优解，推送给用户。
3、问清楚后续工作内容是否符合预期 一定要问清楚，工作内容具体做什么，规模，用户群体，系统功能等，别等到入职后发现不契合，到时候就很麻烦了，对职业生涯非常不利。
面试后： 1、总结 一定要总结每一场面试自己表现好的地方，表现待提高的地方，问题没答上来的地方，记录下来反复推敲，提炼语句，查漏补缺，人就是在不断总结的过程中迅速成长的。
2、先后顺序 先不要投意向企业，自私一点，先找一些公司练练手。看看行业中都在问什么，关注什么。收集问题，积攒经验。
3、着重情商培养 说别人爱听的话，做自己认为正确的事。
你要像个海王一样同时面试不同的公司岗位，在其中查漏补缺，包括技术，话术，绎术，但是一旦确定去了某家公司 你就得像个直男一样，认真对待，不耍小心眼，做出成绩！</description></item><item><title>JVM 常见面试题</title><link>/posts/tech/java_jvm_interview_230414/</link><pubDate>Fri, 14 Apr 2023 04:21:08 +0000</pubDate><guid>/posts/tech/java_jvm_interview_230414/</guid><description>JVM 常见面试题 我让GPT生成了几个JVM常见面试题：
以下是一些常见的 JVM（Java 虚拟机）面试题：
什么是 JVM？ JVM 的组成部分是什么？ 请解释 Java 内存模型（JMM）。 什么是类加载器（Classloader）？请解释其工作原理。 请列举 JVM 中的类加载器类型。 什么是 Just-In-Time（JIT）编译器？它的作用是什么？ 请解释 Java 堆内存和栈内存的区别。 什么是垃圾回收（Garbage Collection）？请简要描述其工作原理。 请列举并简要介绍 Java 中的垃圾回收器。 什么是分代垃圾回收策略？请解释年轻代（Young Generation）和老年代（Old Generation）的概念。 请解释 Java 中的强引用、软引用、弱引用和虚引用。 什么是 Java 堆溢出（Heap Overflow）和栈溢出（Stack Overflow）？如何处理这些问题？ 什么是逃逸分析？它在 JVM 性能优化中有什么作用？ 如何监控和调优 JVM 的性能？ 请列举 JVM 调优的一些常用参数。 请解释 Java 中的死锁、饥饿和活锁。 什么是线程安全？如何在 Java 中确保线程安全？ 请解释 Java 中的同步和异步编程。 什么是 volatile 关键字？它的作用是什么？ 请解释 Java 中的并发编程和多线程编程。 1. 什么是 JVM？ JVM 是 Java Virtual Machine 的缩写，也就是Java虚拟机。它是一个运行Java程序的跨平台容器。它的主要功能特点是：</description></item><item><title>Java面试中常问的问题</title><link>/posts/tech/java_interview_questions_230412/</link><pubDate>Wed, 12 Apr 2023 03:37:21 +0000</pubDate><guid>/posts/tech/java_interview_questions_230412/</guid><description>Java面试中常问的问题 Java HashMap 两次put会发生什么 springboot的starter是如何实现自动装配的？ redis为什么快？ redis常用的数据结构是什么， redis如何实现分布式锁， redis实现分布式锁有什么问题 redis如果系统错误释放锁和业务执行超时释放锁，会发生什么？ 分布式事务如何保证一致性 服务发现是怎么回事 kafka消息队列为何要引入组？解决了什么问题 mysql ABC索引， 实际用到了AB，没用到C，是什么情况会发生？ 1. Java HashMap 两次put会发生什么 我们要了解HashMap的结构，并了解put时候发生了什么。
HashMap是键值对结构， 计算key的hash值来找对对应桶的位置，然后放进去。所以put(key, value) 基本可以认为 先 hash(key), 找到位置，放进去，再put同样的 key, 位置是一样的， 那就把原有值覆盖掉。
如果是put的是不同的key， hash(key)后找到桶位置，如果桶里没有值，直接就放进去，有的话用equals一个个比较，找到就替换值，找不到就拼到链表结尾。
2. springboot的starter是如何实现自动装配的？ 我们知道springboot由于有很多starter和注解的存在大大简化了spring的使用，减少了很多xml配置，那么它是如何做到的？
其实是由springboot自定义starter的配置来完成的，springboot 通过在WEB-INF目录下spring.factories 配置自己定义注解，然后引入到工程里。 在2.7.11 里， META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports 改这个文件就可以达到相同的结果。
3. redis为什么快？ 数据结构简单：Redis中的数据结构相对简单，只包含基本的数据结构，例如字符串、列表、集合、哈希表和有序集合等，相比其他的数据库，Redis需要更少的时间用于数据结构实现和维护。
内存操作：Redis是高速的内存数据库，数据存储在内存中，所有操作都是内存操作，不存在硬盘IO等慢速操作。
单线程模型：Redis采用单独的IO线程，使得应用程序并发访问时需要的锁或者同步操作少很多，提高了系统的吞吐量。
异步非阻塞IO：Redis采用异步非阻塞IO模型，使得服务器能够处理成百上千个客户端的请求，而且不会由于单个客户端请求阻塞而导致服务器无法处理其他请求。
综上所述，Redis之所以快就是因为其采用了简单的数据结构、内存操作、单线程模型和异步非阻塞IO等技术，从而大幅提升了数据读写的速度和系统吞吐量。
4. redis数据结构有哪些 字符串（Strings）：存储字符串、整数或者浮点数。
列表（Lists）：一个列表结构，通过一个键可以对一个字符串列表进行操作，支持从列表两端（左端/右端）添加或者删除数据。
集合（Sets）：一个无序的、元素不重复的集合，支持对集合进行添加、删除和判断两个集合的交集、并集和差集等操作。
哈希表（Hashes）：一个键值对的集合，键和值都是字符串类型，支持添加、修改、删除和查询具体的某个键值对。
有序集合（Sorted Sets）：与集合类似，是一个无序的、元素不重复的集合，但不同的是，每一个元素都会附带一个权重（score），支持根据权重快速查询元素。
其中，字符串、列表、集合、哈希表和有序集合都具有很好的应用场景，应用广泛，并且在实现上都相对简单，易于理解和使用。
5. 如何用redis实现分布式锁 redis的原子操作 setnx来实现</description></item><item><title>Spring缓存三级缓存机制</title><link>/posts/tech/spring_cache_230411/</link><pubDate>Tue, 11 Apr 2023 01:44:00 +0000</pubDate><guid>/posts/tech/spring_cache_230411/</guid><description>Spring三级缓存 想起之前面试被问到的一个回答的不好的基础题，“spring如何解决循环依赖的？”
因为并没有真正理解spring缓存机制和作用，所以早起看过后就忘了，现在重新复习下。
跟着GPT一步步学 Spring 三级缓存。
什么是spring三级缓存 spring三级缓存，是spring框架用于解决单例作用域Bean的循环依赖问题的一种机制。
Singleton Objects Cache 单例对象缓存： 这个缓存存储已经完全初始化的单例Bean. 这个阶段，所有依赖已经注入，所有生命周期方法已经执行完毕。当一个bean被请求时，spring首先会从这个缓存中获取Bean。 Early Singleton Objects Cache 早期单例对象缓存：这个缓存存储已经实例化，但未完全初始化的Bean。相比 Singleton Objects Cache, 它的依赖注入和生命周期方法并没完成。 当Singleton Objects Cache中找不到Bean时候，会去这里找Bean， 以解决循环依赖。需要注意的是，如果是构造函数的注入，那么实例化阶段就要注入，此时有循环依赖是无法解决的。 Singleton Factories Cache 单例工厂缓存。这个缓存存储了创建bean的工厂对象。当在Early Singleton Objects Cache 也知道不到Bean， spring会尝试从这个缓存中获取工厂对象创建一个提前暴露的Bean实例。这个实例被放入到 Early Singleton Objects Cache 中， 以解决循环依赖的问题。 根据以上介绍我们知道，一级缓存存的是满状态的Bean， 二级缓存存的是构建好，但没初始化话好的Bean，三级缓存存的是单例工厂缓存。 无论何种方式，要装配都要先有实例才能依据实例来进行装配，所以如果是构造函数注入的循环依赖，spring三级缓存是无法解决的。
Spring Bean作用域 了解了三级缓存后，我们知道以上都是对单例bean的操作，那么来复习下spring作用域有哪些。
Singleton 单例。整个spring容器中，一个类的单例Bean实例只会被创建一次。这是Spring默认的作用域 Prototype 原型。每次请求一个Bean时候，都会创建一个新的实例。 Request 请求。每一个HTTP请求的生命周期内，一个Bean的实例只会被创建一次。这个作用于仅适用于Web应用程序。 Session 会话。在一个HTTP会话的生命周期内，一个Bean的实例只会被创建一次。这个做用户仅适用于Web应用程序。 Application 应用。 在一个ServletContext的生命周期内，一个Bean的实例只会被创建一次。这个作用域仅适用于Web应用程序。 Spring Bean生命周期 既然说到了注入，就来了解下注入时候spring做了哪些事。
Spring Bean 生命周期简化概述：
Spring容器启动 Bean 定义被读取，Spring确定Bean的依赖关系。 实例化Bean, 调用构造函数。 Setter 注入：spring 容器注入带有 @Autowired 注解的依赖项 如果实现了 BeanNameAware 、BeanFactoryAware 等接口，调用相应的方法。 如果Bean实现了BeanPostProcessor接口，调用postProcessBeforeInitialization方法 初始化Bean， 这可能包括调用 @PostConstruct 注解的方法、调用afterPropertiesSet方法(如果实现了InitializingBean接口) 或调用自定义的初始化方法 (通过@Bean(initMethod=&amp;ldquo;customInit&amp;rdquo;)指定)。 如果Bean实现了BeanPostProcessor接口，调用 postProcessAfterInitialization方法 Bean 现在已经准备好使用。 当应用程序关闭或Spring容器被销毁时，执行清理操作，包括调用@PreDestory注解的方法，调用destroy方法(如果实现了DisposableBean接口) 或调用自定义的销毁方法(通过@Bean(destroyMethod=&amp;ldquo;customDestroy&amp;rdquo;)指定) graph TD; A[Spring容器启动]--&amp;gt;B[读取Bean定义,确定Bean依赖关系] B --&amp;gt; C[实例化Bean,调用构造函数] C --&amp;gt; D[Setter注入 \ 字段注入] D --&amp;gt; E{是否实现BeanPostProcessor} E --&amp;gt;|是| F[调用postProcessBeforeInitialization] E --&amp;gt;|否| G[初始化Bean,PostConstruct注解方法,自定义初始化方法] F --&amp;gt; G G --&amp;gt;|如果实现| H[BeanPostProcessor的postProcessAfterInitialization] H --&amp;gt; I[Bean准备好了] I --&amp;gt; J[spring容器销毁,preDestroy, destory, customDestroy] J --&amp;gt; K[结束] Spring提供了哪些依赖注入方式： 构造器注入 (Constructor Injection) Setter注入 (Setter Injection) 字段注入 (Field Injection) 简单代码示例：</description></item><item><title>Java集合基础之HashMap</title><link>/posts/tech/javabase_hashmap_230410/</link><pubDate>Mon, 10 Apr 2023 08:24:53 +0000</pubDate><guid>/posts/tech/javabase_hashmap_230410/</guid><description>Java集合基础之HashMap HashMap在日常中也是使用频繁，了解它的源码很有必要。
构造方法与默认属性 public class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable {} static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // aka 16 默认容量的16， ArrayList是10。
static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; 最大容量是 1&amp;laquo;30
static final float DEFAULT_LOAD_FACTOR = 0.75f; 默认负载因子是 0.75.
static final int TREEIFY_THRESHOLD = 8; 当&amp;gt;=8时候转化为红黑树
static final int UNTREEIFY_THRESHOLD = 6; static final int MIN_TREEIFY_CAPACITY = 64; 核心内部类Node
static class Node&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt; { final int hash; final K key; V value; Node&amp;lt;K,V&amp;gt; next; Node(int hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) { this.</description></item><item><title>Java基础之集合-ArrayList</title><link>/posts/tech/javabase_list_230409/</link><pubDate>Sun, 09 Apr 2023 02:51:02 +0000</pubDate><guid>/posts/tech/javabase_list_230409/</guid><description>Java基础之集合总览 - ArrayList Java集合是经常使用到的，集合类主要由Collection 和 Map 这两个接口派生。
Collection 派生出 Set，List, Queue。 Map派生HashMap, TreeMap， ConcurrentHashMap
Collection常用方法 // 返回集合中元素个数 int size(); //Returns true if this collection contains no elements. boolean isEmpty(); // 判断集合中是否存在元素o , (o==null ? e==null : o.equals(e)). boolean contains(Object o); // 添加元素 boolean add(E e); // 删除元素 boolean remove(Object o); // 清空元素 void clear(); Map常用方法 // 返回 k-v 数量 int size(); // Returns &amp;lt;tt&amp;gt;true&amp;lt;/tt&amp;gt; if this map contains no key-value mappings.</description></item><item><title>关于Java面试要求的思考</title><link>/posts/inbox/interview_230409/</link><pubDate>Sun, 09 Apr 2023 01:51:26 +0000</pubDate><guid>/posts/inbox/interview_230409/</guid><description>关于Java面试要求的思考 公司发布的jd, 有相对明确的要求，可以自我匹配做下参考，有针对性的准备。如下是一个高级Java的招聘任职要求：
任职要求 1、全日制统招本科及以上学历，计算机相关专业，5年以上Java开发经验； 2、基础扎实，精通Java并发编程、JVM，理解网络通信、多线程等基础框架，对各种开源开发框架如Spring boot、mybatis等有深入的应用和优化经验，掌握它的原理和机制； 3、熟悉大型分布式系统的设计与开发，熟练掌握如消息队列、ES、redis、Mysql等中间件，熟悉其原理和优化； 4、熟悉常用设计模式及开发实践，熟悉面向对象和数据结构； 5、良好的沟通能力、团队合作精神；认真负责、具有高度责任感；良好的抗压能力，优秀的学习能力； 6、有信贷、信用卡、互联网金融、贷中管理或催收系统研发经验优先； 7、高阶需要丰富的管理、规划能力； 8、英语好优先。
拆解分析 要求很常见，主要分为：学历，技术应用，经验经历，其他特定的要求等。对于学历和专业经历几乎不可选，都是固定的东西，有准备空间的是技术相关。我们也主要看技术这块。
基础扎实。
Java 基础 精通Java并发编程
多线程 JVM
Java内存模型 垃圾回收 类加载机制 理解网络通信、多线程等基础框架
Java IO 对各种开源开发框架如Spring boot, mybatis,等有深入的应用和优化经验，掌握它的原理和机制
springboot 基本概念，AOP, IOC, 代理， 循环依赖 事务传播 MyBatis 批量操作、动态SQL， 熟悉大型分布式系统的设计与开发，熟练掌握如消息队列、ES、redis、Mysql等中间件，熟悉其原理和优化；
分布式系统架构 消息队列的作用 ES使用场景和原理 Redis的使用场景和原理 MySQL 原理与SQL优化 熟悉常用的设计模式及开发实践，熟悉面向对象和数据结构；
23种设计模式，常用的几个，以及在实际项目、或spring中的应用 面向对象与数据结构 总结 以上每个环节都是需要时间和经历去学习与练习，对于有经验的对照着查漏补缺。</description></item><item><title>Interview_questions_230404</title><link>/posts/inbox/interview_questions_230404/</link><pubDate>Tue, 04 Apr 2023 17:02:47 +0800</pubDate><guid>/posts/inbox/interview_questions_230404/</guid><description>关于面试问题的一篇英文推 最近在推上看到了一名CEO写的关于面试会问的几个问题，觉得有参考意义，所以写下来. 文末附中文。
原推点这里
I’ve interviewed 1000s of people over my career. Most leaders ask the same terrible questions every time. Ask these 13 questions and I guarantee you&amp;rsquo;ll make better hiring decisions:
#1: If you were to tell a friend about our company, how would you describe what we do? Preparedness. How much do they know about your business? Mission. Vision. Values. If they are marketing/sales hires and can’t answer this, the interview is over.</description></item></channel></rss>